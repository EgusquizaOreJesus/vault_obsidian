/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb2, mod) => function __require() {
  return mod || (0, cb2[__getOwnPropNames(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to2, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to2;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent2(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent2.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent2;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef3() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a10) {
          return isArrayImpl(a10);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e10) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x10) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement118(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i10 = 0; i10 < childrenLength; i10++) {
              childArray[i10] = arguments[i10 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement3(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i10 = 0; i10 < childrenLength; i10++) {
              childArray[i10] = arguments[i10 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index4) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index4.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c10) {
                return c10;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i10 = 0; i10 < children.length; i10++) {
              child = children[i10];
              nextName = nextNamePrefix + getElementKey(child, i10);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii2 = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii2++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n10 = 0;
          mapChildren(children, function() {
            n10++;
          });
          return n10;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext6(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef13(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo46(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext6(Context2) {
          var dispatcher = resolveDispatcher();
          {
            if (Context2._context !== void 0) {
              var realContext = Context2._context;
              if (realContext.Consumer === Context2) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context2) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context2);
        }
        function useState25(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef29(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect25(create3, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create3, deps);
        }
        function useInsertionEffect(create3, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create3, deps);
        }
        function useLayoutEffect15(create3, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create3, deps);
        }
        function useCallback39(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo15(create3, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create3, deps);
        }
        function useImperativeHandle(ref, create3, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create3, deps);
        }
        function useDebugValue2(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x10) {
                var match = x10.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn3, construct) {
          if (!fn3 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn3);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x10) {
                  control = x10;
                }
                Reflect.construct(fn3, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x10) {
                  control = x10;
                }
                fn3.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x10) {
                control = x10;
              }
              fn3();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s10 = sampleLines.length - 1;
              var c10 = controlLines.length - 1;
              while (s10 >= 1 && c10 >= 0 && sampleLines[s10] !== controlLines[c10]) {
                c10--;
              }
              for (; s10 >= 1 && c10 >= 0; s10--, c10--) {
                if (sampleLines[s10] !== controlLines[c10]) {
                  if (s10 !== 1 || c10 !== 1) {
                    do {
                      s10--;
                      c10--;
                      if (c10 < 0 || sampleLines[s10] !== controlLines[c10]) {
                        var _frame = "\n" + sampleLines[s10].replace(" at new ", " at ");
                        if (fn3.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn3.displayName);
                        }
                        {
                          if (typeof fn3 === "function") {
                            componentFrameCache.set(fn3, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s10 >= 1 && c10 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn3 ? fn3.displayName || fn3.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn3 === "function") {
              componentFrameCache.set(fn3, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn3, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn3, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x10) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location2, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex2) {
                  error$1 = ex2;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i10 = 0; i10 < node.length; i10++) {
              var child = node[i10];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i10 = 0; i10 < keys.length; i10++) {
              var key = keys[i10];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement118.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i10 = 2; i10 < arguments.length; i10++) {
              validateChildKeys(arguments[i10], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement3.apply(this, arguments);
          for (var i10 = 2; i10 < arguments.length; i10++) {
            validateChildKeys(arguments[i10], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i10 = 0;
              try {
                for (; i10 < queue.length; i10++) {
                  var callback = queue[i10];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i10 + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children6 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children6;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent2;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext6;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef3;
        exports.forwardRef = forwardRef13;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo46;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback39;
        exports.useContext = useContext6;
        exports.useDebugValue = useDebugValue2;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect25;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect15;
        exports.useMemo = useMemo15;
        exports.useReducer = useReducer;
        exports.useRef = useRef29;
        exports.useState = useState25;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index4 = heap.length;
          heap.push(node);
          siftUp(heap, node, index4);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i10) {
          var index4 = i10;
          while (index4 > 0) {
            var parentIndex = index4 - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index4] = parent;
              index4 = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i10) {
          var index4 = i10;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index4 < halfLength) {
            var leftIndex = (index4 + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index4] = right;
                heap[rightIndex] = node;
                index4 = rightIndex;
              } else {
                heap[index4] = left;
                heap[leftIndex] = node;
                index4 = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index4] = right;
              heap[rightIndex] = node;
              index4 = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a10, b10) {
          var diff = a10.sortIndex - b10.sortIndex;
          return diff !== 0 ? diff : a10.id - b10.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms2) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler2) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler2();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler2) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler2();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms2) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms2);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React24 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React24.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment34 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = false;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i10 = 0; i10 < dependencies.length; i10++) {
            allNativeEvents.add(dependencies[i10]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e10) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x10) {
                var match = x10.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn3, construct) {
          if (!fn3 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn3);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x10) {
                  control = x10;
                }
                Reflect.construct(fn3, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x10) {
                  control = x10;
                }
                fn3.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x10) {
                control = x10;
              }
              fn3();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s10 = sampleLines.length - 1;
              var c10 = controlLines.length - 1;
              while (s10 >= 1 && c10 >= 0 && sampleLines[s10] !== controlLines[c10]) {
                c10--;
              }
              for (; s10 >= 1 && c10 >= 0; s10--, c10--) {
                if (sampleLines[s10] !== controlLines[c10]) {
                  if (s10 !== 1 || c10 !== 1) {
                    do {
                      s10--;
                      c10--;
                      if (c10 < 0 || sampleLines[s10] !== controlLines[c10]) {
                        var _frame = "\n" + sampleLines[s10].replace(" at new ", " at ");
                        if (fn3.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn3.displayName);
                        }
                        {
                          if (typeof fn3 === "function") {
                            componentFrameCache.set(fn3, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s10 >= 1 && c10 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn3 ? fn3.displayName || fn3.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn3 === "function") {
              componentFrameCache.set(fn3, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn3, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn3, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x10) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x10) {
            return "\nError generating stack: " + x10.message + "\n" + x10.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x10) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment34:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get3 = descriptor.get, set3 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get3.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set3.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e10) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i10 = 0; i10 < group.length; i10++) {
              var otherNode = group[i10];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React24.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a10) {
          return isArrayImpl(a10);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i10 = 0; i10 < valuePropNames.length; i10++) {
              var propName = valuePropNames[i10];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i10 = 0; i10 < selectedValues.length; i10++) {
              selectedValue["$" + selectedValues[i10]] = true;
            }
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i2].value);
              if (options2[_i2].selected !== selected) {
                options2[_i2].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i22 = 0; _i22 < options2.length; _i22++) {
              if (options2[_i22].value === _selectedValue) {
                options2[_i22].selected = true;
                if (setDefaultSelected) {
                  options2[_i22].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i22].disabled) {
                defaultSelected = options2[_i22];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_10, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i10 = 0; i10 < longhands.length; i10++) {
              expanded[longhands[i10]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i10 = 0; i10 < queuedTargets.length; i10++) {
              restoreStateOfTarget(queuedTargets[i10]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn3, bookkeeping) {
          return fn3(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn3, a10, b10) {
          if (isInsideEventHandler) {
            return fn3(a10, b10);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn3, a10, b10);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e10) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a10, b10, c10, d10, e10, f10) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a10, b10, c10, d10, e10, f10) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a10, b10, c10, d10, e10, f10) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a10, b10, c10, d10, e10, f10) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get2(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set2(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var ChildDeletion = 16;
        var ContentReset = 32;
        var Callback = 64;
        var DidCapture = 128;
        var ForceClientRender = 256;
        var Ref = 512;
        var Snapshot = 1024;
        var Passive = 2048;
        var Hydrating = 4096;
        var Visibility = 8192;
        var StoreConsistency = 16384;
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = 32767;
        var Incomplete = 32768;
        var ShouldCapture = 65536;
        var ForceUpdateForLegacySuspense = 131072;
        var Forked = 1048576;
        var RefStatic = 2097152;
        var LayoutStatic = 4194304;
        var PassiveStatic = 8388608;
        var MountLayoutDev = 16777216;
        var MountPassiveDev = 33554432;
        var BeforeMutationMask = Update | Snapshot | 0;
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get2(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a10 = fiber;
          var b10 = alternate;
          while (true) {
            var parentA = a10.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a10 = b10 = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a10) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b10) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a10.return !== b10.return) {
              a10 = parentA;
              b10 = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a10) {
                  didFindChild = true;
                  a10 = parentA;
                  b10 = parentB;
                  break;
                }
                if (_child === b10) {
                  didFindChild = true;
                  b10 = parentA;
                  a10 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a10) {
                    didFindChild = true;
                    a10 = parentB;
                    b10 = parentA;
                    break;
                  }
                  if (_child === b10) {
                    didFindChild = true;
                    b10 = parentB;
                    a10 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a10.alternate !== b10) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a10.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a10.stateNode.current === a10) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now2 = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root2) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root2);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index5 = 0; index5 < TotalLanes; index5++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = 0;
        var ConcurrentMode = 1;
        var ProfileMode = 2;
        var StrictLegacyMode = 8;
        var StrictEffectsMode = 16;
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log2 = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x10) {
          var asUint = x10 >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log2(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var InputContinuousHydrationLane = 2;
        var InputContinuousLane = 4;
        var DefaultHydrationLane = 8;
        var DefaultLane = 16;
        var TransitionHydrationLane = 32;
        var TransitionLanes = 4194240;
        var TransitionLane1 = 64;
        var TransitionLane2 = 128;
        var TransitionLane3 = 256;
        var TransitionLane4 = 512;
        var TransitionLane5 = 1024;
        var TransitionLane6 = 2048;
        var TransitionLane7 = 4096;
        var TransitionLane8 = 8192;
        var TransitionLane9 = 16384;
        var TransitionLane10 = 32768;
        var TransitionLane11 = 65536;
        var TransitionLane12 = 131072;
        var TransitionLane13 = 262144;
        var TransitionLane14 = 524288;
        var TransitionLane15 = 1048576;
        var TransitionLane16 = 2097152;
        var RetryLanes = 130023424;
        var RetryLane1 = 4194304;
        var RetryLane2 = 8388608;
        var RetryLane3 = 16777216;
        var RetryLane4 = 33554432;
        var RetryLane5 = 67108864;
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = 134217728;
        var NonIdleLanes = 268435455;
        var IdleHydrationLane = 268435456;
        var IdleLane = 536870912;
        var OffscreenLane = 1073741824;
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index5 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index5;
              nextLanes |= entanglements[index5];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index5 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index5;
            var eventTime = eventTimes[index5];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index5 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index5;
            var expirationTime = expirationTimes[index5];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index5] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root2) {
          return getHighestPriorityLanes(root2.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root2, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root2, lanes) {
          return (lanes & root2.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a10, b10) {
          return (a10 & b10) !== NoLanes;
        }
        function isSubsetOfLanes(set3, subset) {
          return (set3 & subset) === subset;
        }
        function mergeLanes(a10, b10) {
          return a10 | b10;
        }
        function removeLanes(set3, subset) {
          return set3 & ~subset;
        }
        function intersectLanes(a10, b10) {
          return a10 & b10;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a10, b10) {
          return a10 !== NoLane && a10 < b10 ? a10 : b10;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i10 = 0; i10 < TotalLanes; i10++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
          }
          var eventTimes = root2.eventTimes;
          var index5 = laneToIndex(updateLane);
          eventTimes[index5] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index5 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index5;
            expirationTimes[index5] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index5 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index5;
            entanglements[index5] = NoLanes;
            eventTimes[index5] = NoTimestamp;
            expirationTimes[index5] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index5 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index5;
            if (lane & entangledLanes | entanglements[index5] & entangledLanes) {
              entanglements[index5] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root2, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index5 = laneToIndex(lanes);
            var lane = 1 << index5;
            var updaters = pendingUpdatersLaneMap[index5];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          var memoizedUpdaters = root2.memoizedUpdaters;
          while (lanes > 0) {
            var index5 = laneToIndex(lanes);
            var lane = 1 << index5;
            var updaters = pendingUpdatersLaneMap[index5];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root2, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn3) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn3();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a10, b10) {
          return a10 !== 0 && a10 < b10 ? a10 : b10;
        }
        function lowerEventPriority(a10, b10) {
          return a10 === 0 || a10 > b10 ? a10 : b10;
        }
        function isHigherEventPriority(a10, b10) {
          return a10 !== 0 && a10 < b10;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root2) {
          var currentState = root2.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn3) {
          _attemptSynchronousHydration = fn3;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn3) {
          attemptContinuousHydration = fn3;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn3) {
          attemptHydrationAtCurrentPriority = fn3;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn3) {
          getCurrentUpdatePriority$1 = fn3;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn3) {
          attemptHydrationAtPriority = fn3;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i10 = 0;
          for (; i10 < queuedExplicitHydrationTargets.length; i10++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i10].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i10, 0, queuedTarget);
          if (i10 === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i10 = 1; i10 < queuedDiscreteEvents.length; i10++) {
              var queuedEvent = queuedDiscreteEvents[i10];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i2 = 0; _i2 < queuedExplicitHydrationTargets.length; _i2++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i2];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to2;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to2 = _related ? getClosestInstanceFromNode(_related) : null;
            if (to2 !== null) {
              var nearestMounted = getNearestMountedFiber(to2);
              if (to2 !== nearestMounted || to2.tag !== HostComponent && to2.tag !== HostText) {
                to2 = null;
              }
            }
          } else {
            from = null;
            to2 = targetInst;
          }
          if (from === to2) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to2 == null ? win : getNodeFromInstance(to2);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to2, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to2);
        }
        function is2(x10, y10) {
          return x10 === y10 && (x10 !== 0 || 1 / x10 === 1 / y10) || x10 !== x10 && y10 !== y10;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        function shallowEqual2(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i10 = 0; i10 < keysA.length; i10++) {
            var currentKey = keysA[i10];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset3) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset3 && nodeEnd >= offset3) {
                return {
                  node,
                  offset: offset3 - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e10) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i10 = 0; i10 < ancestors.length; i10++) {
              var info = ancestors[i10];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i10 = 0; i10 < simpleEventPluginEvents.length; i10++) {
            var eventName = simpleEventPluginEvents[i10];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i10 = dispatchListeners.length - 1; i10 >= 0; i10--) {
              var _dispatchListeners$i = dispatchListeners[i10], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i2 = 0; _i2 < dispatchListeners.length; _i2++) {
              var _dispatchListeners$_i = dispatchListeners[_i2], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i10 = 0; i10 < dispatchQueue.length; i10++) {
            var _dispatchQueue$i = dispatchQueue[i10], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to2) {
          var common = from && to2 ? getLowestCommonAncestor(from, to2) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to2 !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to2, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i10 = 0; i10 < updatePayload.length; i10 += 2) {
            var propKey = updatePayload[i10];
            var propValue = updatePayload[i10 + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement118(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i10 = 0; i10 < mediaEventTypes.length; i10++) {
                listenToNonDelegatedEvent(mediaEventTypes[i10], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i10 = 0; i10 < mediaEventTypes.length; i10++) {
                listenToNonDelegatedEvent(mediaEventTypes[i10], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i2 = 0; _i2 < attributes.length; _i2++) {
              var name = attributes[_i2].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i2].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement118(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location2, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex2) {
                  error$1 = ex2;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index4 = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index4 < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index4]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index4];
          valueStack[index4] = null;
          {
            fiberStack[index4] = null;
          }
          index4--;
        }
        function push(cursor, value, fiber) {
          index4++;
          valueStack[index4] = cursor.current;
          {
            fiberStack[index4] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i10 = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i10 < queue.length; i10++) {
                var callback = queue[i10];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i10 + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index5) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index5 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set3) {
            var array = [];
            set3.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i10 = 0; i10 < concurrentQueues.length; i10++) {
              var queue = concurrentQueues[i10];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root2, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i10 = 0; i10 < effects.length; i10++) {
              var effect = effects[i10];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var emptyRefsObject = new React24.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get2(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get2(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get2(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set2(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (refs === emptyRefsObject) {
                  refs = resolvedInst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment34) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i10 = 0; i10 < newChildren.length; i10++) {
                var child = newChildren[i10];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment34) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c10) {
          if (c10 === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c10;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Insertion = 2;
        var Layout = 4;
        var Passive$1 = 8;
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i10 = 0; i10 < workInProgressSources.length; i10++) {
            var mutableSource = workInProgressSources[i10];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i10 = 0; i10 <= hookTypesUpdateIndexDev; i10++) {
                  var oldHookName = hookTypesDev[i10];
                  var newHookName = i10 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i10 + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i10 = 0; i10 < prevDeps.length && i10 < nextDeps.length; i10++) {
            if (objectIs(nextDeps[i10], prevDeps[i10])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch2];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch2 = queue.dispatch;
          return [hook.memoizedState, dispatch2];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch2 = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch2];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch2];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create3, destroy, deps) {
          var effect = {
            tag,
            create: create3,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create3, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create3, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create3, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, destroy, nextDeps);
        }
        function mountEffect(create3, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create3, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create3, deps);
          }
        }
        function updateEffect(create3, deps) {
          return updateEffectImpl(Passive, Passive$1, create3, deps);
        }
        function mountInsertionEffect(create3, deps) {
          return mountEffectImpl(Update, Insertion, create3, deps);
        }
        function updateInsertionEffect(create3, deps) {
          return updateEffectImpl(Update, Insertion, create3, deps);
        }
        function mountLayoutEffect(create3, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create3, deps);
        }
        function updateLayoutEffect(create3, deps) {
          return updateEffectImpl(Update, Layout, create3, deps);
        }
        function imperativeHandleEffect(create3, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create3();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create3();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create3, deps) {
          {
            if (typeof create3 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create3, deps) {
          {
            if (typeof create3 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root2 = getWorkInProgressRoot();
          var identifierPrefix = root2.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create3, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create3, deps);
            },
            useImperativeHandle: function(ref, create3, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create3, deps);
            },
            useInsertionEffect: function(create3, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create3, deps);
            },
            useLayoutEffect: function(create3, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create3, deps);
            },
            useMemo: function(create3, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create3, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create3, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create3, deps);
            },
            useImperativeHandle: function(ref, create3, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create3, deps);
            },
            useInsertionEffect: function(create3, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create3, deps);
            },
            useLayoutEffect: function(create3, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create3, deps);
            },
            useMemo: function(create3, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create3, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create3, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create3, deps);
            },
            useImperativeHandle: function(ref, create3, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create3, deps);
            },
            useInsertionEffect: function(create3, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create3, deps);
            },
            useLayoutEffect: function(create3, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create3, deps);
            },
            useMemo: function(create3, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create3, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create3, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create3, deps);
            },
            useImperativeHandle: function(ref, create3, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create3, deps);
            },
            useInsertionEffect: function(create3, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create3, deps);
            },
            useLayoutEffect: function(create3, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create3, deps);
            },
            useMemo: function(create3, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create3, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create3, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create3, deps);
            },
            useImperativeHandle: function(ref, create3, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create3, deps);
            },
            useInsertionEffect: function(create3, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create3, deps);
            },
            useLayoutEffect: function(create3, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create3, deps);
            },
            useMemo: function(create3, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create3, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create3, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create3, deps);
            },
            useImperativeHandle: function(ref, create3, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create3, deps);
            },
            useInsertionEffect: function(create3, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create3, deps);
            },
            useLayoutEffect: function(create3, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create3, deps);
            },
            useMemo: function(create3, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create3, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create3, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create3, deps);
            },
            useImperativeHandle: function(ref, create3, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create3, deps);
            },
            useInsertionEffect: function(create3, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create3, deps);
            },
            useLayoutEffect: function(create3, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create3, deps);
            },
            useMemo: function(create3, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create3, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  root2.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  if (root2 !== null) {
                    root2.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e10) {
            setTimeout(function() {
              throw e10;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root2, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root2, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root2, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual2;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x10) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root2 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root2 = getWorkInProgressRoot();
              if (root2 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index5) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index5, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i10 = 0; i10 < children.length; i10++) {
                  if (!validateSuspenseListNestedChild(children[i10], i10)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i2 = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i2)) {
                        return;
                      }
                      _i2++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root2 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment34:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment34:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now2();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root2 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root2 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root2, firstChild) {
          focusedInstanceHandle = prepareForCommit(root2.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create3 = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create3();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root2, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (deletedFiber.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root2, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root2);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i10 = 0; i10 < deletions.length; i10++) {
              var childToDelete = deletions[i10];
              try {
                commitDeletionEffects(root2, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root2);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root2.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (finishedWork.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root2, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root2, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root2, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(child, root2, committedLanes);
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i10 = 0; i10 < deletions.length; i10++) {
                  var fiberToDelete = deletions[i10];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = 0;
        var BatchedContext = 1;
        var RenderContext = 2;
        var CommitContext = 4;
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now2();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now2();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root2, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root2, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root2 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
          var current2 = root2.current;
          current2.lanes = lane;
          markRootUpdated(root2, lane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (executionContext & RenderContext) !== NoContext;
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root2.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root2.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root2, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root2, lanes);
              var finishedWork = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root2, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root2, NoLanes);
                  markRootSuspended$1(root2, lanes);
                  ensureRootIsScheduled(root2, now2());
                  throw _fatalError;
                }
              }
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root2, now2());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function recoverFromConcurrentError(root2, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root2)) {
            var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root2.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root2, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now2() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i10 = 0; i10 < checks.length; i10++) {
                    var check = checks[i10];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root2, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root2, now2());
            return null;
          }
          var exitStatus = renderRootSync(root2, lanes);
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now2());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root2, now2());
          return null;
        }
        function flushRoot(root2, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root2, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root2, now2());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn3, a10) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn3(a10);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn3, a10, b10, c10, d10) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn3(a10, b10, c10, d10);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync4(fn3) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn3) {
              return fn3();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          var rootWorkInProgress = createWorkInProgress(root2.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now2();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root2, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (finishedWork === root2.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root2, finishedWork, lanes);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root2, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root2.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root2.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now2());
          if (recoverableErrors !== null) {
            var onRecoverableError = root2.onRecoverableError;
            for (var i10 = 0; i10 < recoverableErrors.length; i10++) {
              var recoverableError = recoverableErrors[i10];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root2.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root2.current);
          commitPassiveMountEffects(root2, root2.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i10 = 0; i10 < profilerEffects.length; i10++) {
              var _fiber = profilerEffects[i10];
              commitPassiveEffectDurations(root2, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root2.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root2 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root2;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root2);
          {
            var stateNode = root2.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root2 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root2 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root2, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
          {
            if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync4(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync4(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e10) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment34, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i2 = 0; _i2 < TotalLanes; _i2++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        var ReactVersion = "18.2.0";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get2(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get2(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root2.context = getContextForSubtree(null);
          var current2 = root2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root2, lane, eventTime);
          return root2;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(current$1, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
            entangleTransitions(root2, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root2 = fiber.stateNode;
              if (isRootDehydrated(root2)) {
                var lanes = getHighestPriorityPendingLanes(root2);
                flushRoot(root2, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync4(function() {
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index5) {
            var key = path[index5];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index5 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index5 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index5) {
            var oldKey = oldPath[index5];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index5 + 1 === oldPath.length) {
              var newKey = newPath[index5];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index5 + 1);
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i10 = 0; i10 < newPath.length - 1; i10++) {
                if (oldPath[i10] !== newPath[i10]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index5, value) {
            if (index5 >= path.length) {
              return value;
            }
            var key = path[index5];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index5 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools,
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          if (root2 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          if (root2 !== null) {
            this._internalRoot = null;
            var container = root2.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync4(function() {
              updateContainer(null, root2, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot2(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root2);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i10 = 0; i10 < mutableSources.length; i10++) {
              var mutableSource = mutableSources[i10];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = root2;
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync4();
            return root2;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync4(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root2;
          if (!maybeRoot) {
            root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root2 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root2, parentComponent, callback);
          }
          return getPublicRootInstance(root2);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync4(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync4);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot2(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn3) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync4(fn3);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    if (false) {
      checkDCE();
      module2.exports = null;
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m10 = require_react_dom();
    if (false) {
      exports.createRoot = m10.createRoot;
      exports.hydrateRoot = m10.hydrateRoot;
    } else {
      i10 = m10.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c10, o10) {
        i10.usingClientEntryPoint = true;
        try {
          return m10.createRoot(c10, o10);
        } finally {
          i10.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c10, h10, o10) {
        i10.usingClientEntryPoint = true;
        try {
          return m10.hydrateRoot(c10, h10, o10);
        } finally {
          i10.usingClientEntryPoint = false;
        }
      };
    }
    var i10;
  }
});

// node_modules/@use-gesture/core/dist/maths-267f0992.cjs.dev.js
var require_maths_267f0992_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/dist/maths-267f0992.cjs.dev.js"(exports) {
    "use strict";
    function clamp2(v11, min2, max2) {
      return Math.max(min2, Math.min(v11, max2));
    }
    var V10 = {
      toVector(v11, fallback) {
        if (v11 === void 0)
          v11 = fallback;
        return Array.isArray(v11) ? v11 : [v11, v11];
      },
      add(v12, v23) {
        return [v12[0] + v23[0], v12[1] + v23[1]];
      },
      sub(v12, v23) {
        return [v12[0] - v23[0], v12[1] - v23[1]];
      },
      addTo(v12, v23) {
        v12[0] += v23[0];
        v12[1] += v23[1];
      },
      subTo(v12, v23) {
        v12[0] -= v23[0];
        v12[1] -= v23[1];
      }
    };
    function rubberband(distance, dimension, constant) {
      if (dimension === 0 || Math.abs(dimension) === Infinity)
        return Math.pow(distance, constant * 5);
      return distance * dimension * constant / (dimension + constant * distance);
    }
    function rubberbandIfOutOfBounds(position, min2, max2, constant = 0.15) {
      if (constant === 0)
        return clamp2(position, min2, max2);
      if (position < min2)
        return -rubberband(min2 - position, max2 - min2, constant) + min2;
      if (position > max2)
        return +rubberband(position - max2, max2 - min2, constant) + max2;
      return position;
    }
    function computeRubberband(bounds, [Vx2, Vy2], [Rx2, Ry2]) {
      const [[X02, X12], [Y02, Y12]] = bounds;
      return [rubberbandIfOutOfBounds(Vx2, X02, X12, Rx2), rubberbandIfOutOfBounds(Vy2, Y02, Y12, Ry2)];
    }
    exports.V = V10;
    exports.computeRubberband = computeRubberband;
    exports.rubberbandIfOutOfBounds = rubberbandIfOutOfBounds;
  }
});

// node_modules/@use-gesture/core/dist/actions-6579bdef.cjs.dev.js
var require_actions_6579bdef_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/dist/actions-6579bdef.cjs.dev.js"(exports) {
    "use strict";
    var maths = require_maths_267f0992_cjs_dev();
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function ownKeys(e10, r10) {
      var t10 = Object.keys(e10);
      if (Object.getOwnPropertySymbols) {
        var o10 = Object.getOwnPropertySymbols(e10);
        r10 && (o10 = o10.filter(function(r11) {
          return Object.getOwnPropertyDescriptor(e10, r11).enumerable;
        })), t10.push.apply(t10, o10);
      }
      return t10;
    }
    function _objectSpread2(e10) {
      for (var r10 = 1; r10 < arguments.length; r10++) {
        var t10 = arguments[r10] != null ? arguments[r10] : {};
        r10 % 2 ? ownKeys(Object(t10), true).forEach(function(r11) {
          _defineProperty(e10, r11, t10[r11]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e10, Object.getOwnPropertyDescriptors(t10)) : ownKeys(Object(t10)).forEach(function(r11) {
          Object.defineProperty(e10, r11, Object.getOwnPropertyDescriptor(t10, r11));
        });
      }
      return e10;
    }
    var EVENT_TYPE_MAP = {
      pointer: {
        start: "down",
        change: "move",
        end: "up"
      },
      mouse: {
        start: "down",
        change: "move",
        end: "up"
      },
      touch: {
        start: "start",
        change: "move",
        end: "end"
      },
      gesture: {
        start: "start",
        change: "change",
        end: "end"
      }
    };
    function capitalize(string) {
      if (!string)
        return "";
      return string[0].toUpperCase() + string.slice(1);
    }
    var actionsWithoutCaptureSupported = ["enter", "leave"];
    function hasCapture(capture = false, actionKey) {
      return capture && !actionsWithoutCaptureSupported.includes(actionKey);
    }
    function toHandlerProp(device, action = "", capture = false) {
      const deviceProps = EVENT_TYPE_MAP[device];
      const actionKey = deviceProps ? deviceProps[action] || action : action;
      return "on" + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? "Capture" : "");
    }
    var pointerCaptureEvents = ["gotpointercapture", "lostpointercapture"];
    function parseProp(prop) {
      let eventKey = prop.substring(2).toLowerCase();
      const passive = !!~eventKey.indexOf("passive");
      if (passive)
        eventKey = eventKey.replace("passive", "");
      const captureKey = pointerCaptureEvents.includes(eventKey) ? "capturecapture" : "capture";
      const capture = !!~eventKey.indexOf(captureKey);
      if (capture)
        eventKey = eventKey.replace("capture", "");
      return {
        device: eventKey,
        capture,
        passive
      };
    }
    function toDomEventType(device, action = "") {
      const deviceProps = EVENT_TYPE_MAP[device];
      const actionKey = deviceProps ? deviceProps[action] || action : action;
      return device + actionKey;
    }
    function isTouch(event) {
      return "touches" in event;
    }
    function getPointerType(event) {
      if (isTouch(event))
        return "touch";
      if ("pointerType" in event)
        return event.pointerType;
      return "mouse";
    }
    function getCurrentTargetTouchList(event) {
      return Array.from(event.touches).filter((e10) => {
        var _event$currentTarget, _event$currentTarget$;
        return e10.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e10.target));
      });
    }
    function getTouchList(event) {
      return event.type === "touchend" || event.type === "touchcancel" ? event.changedTouches : event.targetTouches;
    }
    function getValueEvent(event) {
      return isTouch(event) ? getTouchList(event)[0] : event;
    }
    function distanceAngle(P12, P23) {
      try {
        const dx2 = P23.clientX - P12.clientX;
        const dy2 = P23.clientY - P12.clientY;
        const cx2 = (P23.clientX + P12.clientX) / 2;
        const cy2 = (P23.clientY + P12.clientY) / 2;
        const distance = Math.hypot(dx2, dy2);
        const angle = -(Math.atan2(dx2, dy2) * 180) / Math.PI;
        const origin = [cx2, cy2];
        return {
          angle,
          distance,
          origin
        };
      } catch (_unused) {
      }
      return null;
    }
    function touchIds(event) {
      return getCurrentTargetTouchList(event).map((touch) => touch.identifier);
    }
    function touchDistanceAngle(event, ids) {
      const [P12, P23] = Array.from(event.touches).filter((touch) => ids.includes(touch.identifier));
      return distanceAngle(P12, P23);
    }
    function pointerId(event) {
      const valueEvent = getValueEvent(event);
      return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;
    }
    function pointerValues(event) {
      const valueEvent = getValueEvent(event);
      return [valueEvent.clientX, valueEvent.clientY];
    }
    var LINE_HEIGHT = 40;
    var PAGE_HEIGHT = 800;
    function wheelValues(event) {
      let {
        deltaX,
        deltaY,
        deltaMode
      } = event;
      if (deltaMode === 1) {
        deltaX *= LINE_HEIGHT;
        deltaY *= LINE_HEIGHT;
      } else if (deltaMode === 2) {
        deltaX *= PAGE_HEIGHT;
        deltaY *= PAGE_HEIGHT;
      }
      return [deltaX, deltaY];
    }
    function scrollValues(event) {
      var _ref, _ref2;
      const {
        scrollX,
        scrollY,
        scrollLeft,
        scrollTop
      } = event.currentTarget;
      return [(_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0];
    }
    function getEventDetails(event) {
      const payload = {};
      if ("buttons" in event)
        payload.buttons = event.buttons;
      if ("shiftKey" in event) {
        const {
          shiftKey,
          altKey,
          metaKey,
          ctrlKey
        } = event;
        Object.assign(payload, {
          shiftKey,
          altKey,
          metaKey,
          ctrlKey
        });
      }
      return payload;
    }
    function call(v11, ...args) {
      if (typeof v11 === "function") {
        return v11(...args);
      } else {
        return v11;
      }
    }
    function noop() {
    }
    function chain(...fns) {
      if (fns.length === 0)
        return noop;
      if (fns.length === 1)
        return fns[0];
      return function() {
        let result;
        for (const fn3 of fns) {
          result = fn3.apply(this, arguments) || result;
        }
        return result;
      };
    }
    function assignDefault(value, fallback) {
      return Object.assign({}, fallback, value || {});
    }
    var BEFORE_LAST_KINEMATICS_DELAY = 32;
    var Engine = class {
      constructor(ctrl, args, key) {
        this.ctrl = ctrl;
        this.args = args;
        this.key = key;
        if (!this.state) {
          this.state = {};
          this.computeValues([0, 0]);
          this.computeInitial();
          if (this.init)
            this.init();
          this.reset();
        }
      }
      get state() {
        return this.ctrl.state[this.key];
      }
      set state(state) {
        this.ctrl.state[this.key] = state;
      }
      get shared() {
        return this.ctrl.state.shared;
      }
      get eventStore() {
        return this.ctrl.gestureEventStores[this.key];
      }
      get timeoutStore() {
        return this.ctrl.gestureTimeoutStores[this.key];
      }
      get config() {
        return this.ctrl.config[this.key];
      }
      get sharedConfig() {
        return this.ctrl.config.shared;
      }
      get handler() {
        return this.ctrl.handlers[this.key];
      }
      reset() {
        const {
          state,
          shared,
          ingKey,
          args
        } = this;
        shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
        state._step = [false, false];
        state.intentional = false;
        state._movement = [0, 0];
        state._distance = [0, 0];
        state._direction = [0, 0];
        state._delta = [0, 0];
        state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
        state.args = args;
        state.axis = void 0;
        state.memo = void 0;
        state.elapsedTime = state.timeDelta = 0;
        state.direction = [0, 0];
        state.distance = [0, 0];
        state.overflow = [0, 0];
        state._movementBound = [false, false];
        state.velocity = [0, 0];
        state.movement = [0, 0];
        state.delta = [0, 0];
        state.timeStamp = 0;
      }
      start(event) {
        const state = this.state;
        const config = this.config;
        if (!state._active) {
          this.reset();
          this.computeInitial();
          state._active = true;
          state.target = event.target;
          state.currentTarget = event.currentTarget;
          state.lastOffset = config.from ? call(config.from, state) : state.offset;
          state.offset = state.lastOffset;
          state.startTime = state.timeStamp = event.timeStamp;
        }
      }
      computeValues(values) {
        const state = this.state;
        state._values = values;
        state.values = this.config.transform(values);
      }
      computeInitial() {
        const state = this.state;
        state._initial = state._values;
        state.initial = state.values;
      }
      compute(event) {
        const {
          state,
          config,
          shared
        } = this;
        state.args = this.args;
        let dt3 = 0;
        if (event) {
          state.event = event;
          if (config.preventDefault && event.cancelable)
            state.event.preventDefault();
          state.type = event.type;
          shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
          shared.locked = !!document.pointerLockElement;
          Object.assign(shared, getEventDetails(event));
          shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
          dt3 = event.timeStamp - state.timeStamp;
          state.timeStamp = event.timeStamp;
          state.elapsedTime = state.timeStamp - state.startTime;
        }
        if (state._active) {
          const _absoluteDelta = state._delta.map(Math.abs);
          maths.V.addTo(state._distance, _absoluteDelta);
        }
        if (this.axisIntent)
          this.axisIntent(event);
        const [_m0, _m1] = state._movement;
        const [t02, t12] = config.threshold;
        const {
          _step,
          values
        } = state;
        if (config.hasCustomTransform) {
          if (_step[0] === false)
            _step[0] = Math.abs(_m0) >= t02 && values[0];
          if (_step[1] === false)
            _step[1] = Math.abs(_m1) >= t12 && values[1];
        } else {
          if (_step[0] === false)
            _step[0] = Math.abs(_m0) >= t02 && Math.sign(_m0) * t02;
          if (_step[1] === false)
            _step[1] = Math.abs(_m1) >= t12 && Math.sign(_m1) * t12;
        }
        state.intentional = _step[0] !== false || _step[1] !== false;
        if (!state.intentional)
          return;
        const movement = [0, 0];
        if (config.hasCustomTransform) {
          const [v02, v12] = values;
          movement[0] = _step[0] !== false ? v02 - _step[0] : 0;
          movement[1] = _step[1] !== false ? v12 - _step[1] : 0;
        } else {
          movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;
          movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;
        }
        if (this.restrictToAxis && !state._blocked)
          this.restrictToAxis(movement);
        const previousOffset = state.offset;
        const gestureIsActive = state._active && !state._blocked || state.active;
        if (gestureIsActive) {
          state.first = state._active && !state.active;
          state.last = !state._active && state.active;
          state.active = shared[this.ingKey] = state._active;
          if (event) {
            if (state.first) {
              if ("bounds" in config)
                state._bounds = call(config.bounds, state);
              if (this.setup)
                this.setup();
            }
            state.movement = movement;
            this.computeOffset();
          }
        }
        const [ox2, oy2] = state.offset;
        const [[x02, x12], [y02, y12]] = state._bounds;
        state.overflow = [ox2 < x02 ? -1 : ox2 > x12 ? 1 : 0, oy2 < y02 ? -1 : oy2 > y12 ? 1 : 0];
        state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;
        state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;
        const rubberband = state._active ? config.rubberband || [0, 0] : [0, 0];
        state.offset = maths.computeRubberband(state._bounds, state.offset, rubberband);
        state.delta = maths.V.sub(state.offset, previousOffset);
        this.computeMovement();
        if (gestureIsActive && (!state.last || dt3 > BEFORE_LAST_KINEMATICS_DELAY)) {
          state.delta = maths.V.sub(state.offset, previousOffset);
          const absoluteDelta = state.delta.map(Math.abs);
          maths.V.addTo(state.distance, absoluteDelta);
          state.direction = state.delta.map(Math.sign);
          state._direction = state._delta.map(Math.sign);
          if (!state.first && dt3 > 0) {
            state.velocity = [absoluteDelta[0] / dt3, absoluteDelta[1] / dt3];
            state.timeDelta = dt3;
          }
        }
      }
      emit() {
        const state = this.state;
        const shared = this.shared;
        const config = this.config;
        if (!state._active)
          this.clean();
        if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents)
          return;
        const memo46 = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {
          [this.aliasKey]: state.values
        }));
        if (memo46 !== void 0)
          state.memo = memo46;
      }
      clean() {
        this.eventStore.clean();
        this.timeoutStore.clean();
      }
    };
    function selectAxis([dx2, dy2], threshold) {
      const absDx = Math.abs(dx2);
      const absDy = Math.abs(dy2);
      if (absDx > absDy && absDx > threshold) {
        return "x";
      }
      if (absDy > absDx && absDy > threshold) {
        return "y";
      }
      return void 0;
    }
    var CoordinatesEngine = class extends Engine {
      constructor(...args) {
        super(...args);
        _defineProperty(this, "aliasKey", "xy");
      }
      reset() {
        super.reset();
        this.state.axis = void 0;
      }
      init() {
        this.state.offset = [0, 0];
        this.state.lastOffset = [0, 0];
      }
      computeOffset() {
        this.state.offset = maths.V.add(this.state.lastOffset, this.state.movement);
      }
      computeMovement() {
        this.state.movement = maths.V.sub(this.state.offset, this.state.lastOffset);
      }
      axisIntent(event) {
        const state = this.state;
        const config = this.config;
        if (!state.axis && event) {
          const threshold = typeof config.axisThreshold === "object" ? config.axisThreshold[getPointerType(event)] : config.axisThreshold;
          state.axis = selectAxis(state._movement, threshold);
        }
        state._blocked = (config.lockDirection || !!config.axis) && !state.axis || !!config.axis && config.axis !== state.axis;
      }
      restrictToAxis(v11) {
        if (this.config.axis || this.config.lockDirection) {
          switch (this.state.axis) {
            case "x":
              v11[1] = 0;
              break;
            case "y":
              v11[0] = 0;
              break;
          }
        }
      }
    };
    var identity = (v11) => v11;
    var DEFAULT_RUBBERBAND = 0.15;
    var commonConfigResolver = {
      enabled(value = true) {
        return value;
      },
      eventOptions(value, _k2, config) {
        return _objectSpread2(_objectSpread2({}, config.shared.eventOptions), value);
      },
      preventDefault(value = false) {
        return value;
      },
      triggerAllEvents(value = false) {
        return value;
      },
      rubberband(value = 0) {
        switch (value) {
          case true:
            return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
          case false:
            return [0, 0];
          default:
            return maths.V.toVector(value);
        }
      },
      from(value) {
        if (typeof value === "function")
          return value;
        if (value != null)
          return maths.V.toVector(value);
      },
      transform(value, _k2, config) {
        const transform = value || config.shared.transform;
        this.hasCustomTransform = !!transform;
        if (true) {
          const originalTransform = transform || identity;
          return (v11) => {
            const r10 = originalTransform(v11);
            if (!isFinite(r10[0]) || !isFinite(r10[1])) {
              console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r10[0]},${[1]}]`);
            }
            return r10;
          };
        }
        return transform || identity;
      },
      threshold(value) {
        return maths.V.toVector(value, 0);
      }
    };
    if (true) {
      Object.assign(commonConfigResolver, {
        domTarget(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
          }
          return NaN;
        },
        lockDirection(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`lockDirection\` option has been merged with \`axis\`. Use it as in \`{ axis: 'lock' }\``);
          }
          return NaN;
        },
        initial(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`initial\` option has been renamed to \`from\`.`);
          }
          return NaN;
        }
      });
    }
    var DEFAULT_AXIS_THRESHOLD = 0;
    var coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
      axis(_v2, _k2, {
        axis
      }) {
        this.lockDirection = axis === "lock";
        if (!this.lockDirection)
          return axis;
      },
      axisThreshold(value = DEFAULT_AXIS_THRESHOLD) {
        return value;
      },
      bounds(value = {}) {
        if (typeof value === "function") {
          return (state) => coordinatesConfigResolver.bounds(value(state));
        }
        if ("current" in value) {
          return () => value.current;
        }
        if (typeof HTMLElement === "function" && value instanceof HTMLElement) {
          return value;
        }
        const {
          left = -Infinity,
          right = Infinity,
          top: top2 = -Infinity,
          bottom = Infinity
        } = value;
        return [[left, right], [top2, bottom]];
      }
    });
    var KEYS_DELTA_MAP = {
      ArrowRight: (displacement, factor = 1) => [displacement * factor, 0],
      ArrowLeft: (displacement, factor = 1) => [-1 * displacement * factor, 0],
      ArrowUp: (displacement, factor = 1) => [0, -1 * displacement * factor],
      ArrowDown: (displacement, factor = 1) => [0, displacement * factor]
    };
    var DragEngine = class extends CoordinatesEngine {
      constructor(...args) {
        super(...args);
        _defineProperty(this, "ingKey", "dragging");
      }
      reset() {
        super.reset();
        const state = this.state;
        state._pointerId = void 0;
        state._pointerActive = false;
        state._keyboardActive = false;
        state._preventScroll = false;
        state._delayed = false;
        state.swipe = [0, 0];
        state.tap = false;
        state.canceled = false;
        state.cancel = this.cancel.bind(this);
      }
      setup() {
        const state = this.state;
        if (state._bounds instanceof HTMLElement) {
          const boundRect = state._bounds.getBoundingClientRect();
          const targetRect = state.currentTarget.getBoundingClientRect();
          const _bounds = {
            left: boundRect.left - targetRect.left + state.offset[0],
            right: boundRect.right - targetRect.right + state.offset[0],
            top: boundRect.top - targetRect.top + state.offset[1],
            bottom: boundRect.bottom - targetRect.bottom + state.offset[1]
          };
          state._bounds = coordinatesConfigResolver.bounds(_bounds);
        }
      }
      cancel() {
        const state = this.state;
        if (state.canceled)
          return;
        state.canceled = true;
        state._active = false;
        setTimeout(() => {
          this.compute();
          this.emit();
        }, 0);
      }
      setActive() {
        this.state._active = this.state._pointerActive || this.state._keyboardActive;
      }
      clean() {
        this.pointerClean();
        this.state._pointerActive = false;
        this.state._keyboardActive = false;
        super.clean();
      }
      pointerDown(event) {
        const config = this.config;
        const state = this.state;
        if (event.buttons != null && (Array.isArray(config.pointerButtons) ? !config.pointerButtons.includes(event.buttons) : config.pointerButtons !== -1 && config.pointerButtons !== event.buttons))
          return;
        const ctrlIds = this.ctrl.setEventIds(event);
        if (config.pointerCapture) {
          event.target.setPointerCapture(event.pointerId);
        }
        if (ctrlIds && ctrlIds.size > 1 && state._pointerActive)
          return;
        this.start(event);
        this.setupPointer(event);
        state._pointerId = pointerId(event);
        state._pointerActive = true;
        this.computeValues(pointerValues(event));
        this.computeInitial();
        if (config.preventScrollAxis && getPointerType(event) !== "mouse") {
          state._active = false;
          this.setupScrollPrevention(event);
        } else if (config.delay > 0) {
          this.setupDelayTrigger(event);
          if (config.triggerAllEvents) {
            this.compute(event);
            this.emit();
          }
        } else {
          this.startPointerDrag(event);
        }
      }
      startPointerDrag(event) {
        const state = this.state;
        state._active = true;
        state._preventScroll = true;
        state._delayed = false;
        this.compute(event);
        this.emit();
      }
      pointerMove(event) {
        const state = this.state;
        const config = this.config;
        if (!state._pointerActive)
          return;
        const id = pointerId(event);
        if (state._pointerId !== void 0 && id !== state._pointerId)
          return;
        const _values = pointerValues(event);
        if (document.pointerLockElement === event.target) {
          state._delta = [event.movementX, event.movementY];
        } else {
          state._delta = maths.V.sub(_values, state._values);
          this.computeValues(_values);
        }
        maths.V.addTo(state._movement, state._delta);
        this.compute(event);
        if (state._delayed && state.intentional) {
          this.timeoutStore.remove("dragDelay");
          state.active = false;
          this.startPointerDrag(event);
          return;
        }
        if (config.preventScrollAxis && !state._preventScroll) {
          if (state.axis) {
            if (state.axis === config.preventScrollAxis || config.preventScrollAxis === "xy") {
              state._active = false;
              this.clean();
              return;
            } else {
              this.timeoutStore.remove("startPointerDrag");
              this.startPointerDrag(event);
              return;
            }
          } else {
            return;
          }
        }
        this.emit();
      }
      pointerUp(event) {
        this.ctrl.setEventIds(event);
        try {
          if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {
            ;
            event.target.releasePointerCapture(event.pointerId);
          }
        } catch (_unused) {
          if (true) {
            console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \`@react-three/fiber\`. 

Please upgrade to the latest version.`);
          }
        }
        const state = this.state;
        const config = this.config;
        if (!state._active || !state._pointerActive)
          return;
        const id = pointerId(event);
        if (state._pointerId !== void 0 && id !== state._pointerId)
          return;
        this.state._pointerActive = false;
        this.setActive();
        this.compute(event);
        const [dx2, dy2] = state._distance;
        state.tap = dx2 <= config.tapsThreshold && dy2 <= config.tapsThreshold;
        if (state.tap && config.filterTaps) {
          state._force = true;
        } else {
          const [_dx, _dy] = state._delta;
          const [_mx, _my] = state._movement;
          const [svx, svy] = config.swipe.velocity;
          const [sx2, sy2] = config.swipe.distance;
          const sdt = config.swipe.duration;
          if (state.elapsedTime < sdt) {
            const _vx = Math.abs(_dx / state.timeDelta);
            const _vy = Math.abs(_dy / state.timeDelta);
            if (_vx > svx && Math.abs(_mx) > sx2)
              state.swipe[0] = Math.sign(_dx);
            if (_vy > svy && Math.abs(_my) > sy2)
              state.swipe[1] = Math.sign(_dy);
          }
        }
        this.emit();
      }
      pointerClick(event) {
        if (!this.state.tap && event.detail > 0) {
          event.preventDefault();
          event.stopPropagation();
        }
      }
      setupPointer(event) {
        const config = this.config;
        const device = config.device;
        if (true) {
          try {
            if (device === "pointer" && config.preventScrollDelay === void 0) {
              const currentTarget = "uv" in event ? event.sourceEvent.currentTarget : event.currentTarget;
              const style = window.getComputedStyle(currentTarget);
              if (style.touchAction === "auto") {
                console.warn(`[@use-gesture]: The drag target has its \`touch-action\` style property set to \`auto\`. It is recommended to add \`touch-action: 'none'\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.

This message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);
              }
            }
          } catch (_unused2) {
          }
        }
        if (config.pointerLock) {
          event.currentTarget.requestPointerLock();
        }
        if (!config.pointerCapture) {
          this.eventStore.add(this.sharedConfig.window, device, "change", this.pointerMove.bind(this));
          this.eventStore.add(this.sharedConfig.window, device, "end", this.pointerUp.bind(this));
          this.eventStore.add(this.sharedConfig.window, device, "cancel", this.pointerUp.bind(this));
        }
      }
      pointerClean() {
        if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {
          document.exitPointerLock();
        }
      }
      preventScroll(event) {
        if (this.state._preventScroll && event.cancelable) {
          event.preventDefault();
        }
      }
      setupScrollPrevention(event) {
        this.state._preventScroll = false;
        persistEvent(event);
        const remove = this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), {
          passive: false
        });
        this.eventStore.add(this.sharedConfig.window, "touch", "end", remove);
        this.eventStore.add(this.sharedConfig.window, "touch", "cancel", remove);
        this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScrollDelay, event);
      }
      setupDelayTrigger(event) {
        this.state._delayed = true;
        this.timeoutStore.add("dragDelay", () => {
          this.state._step = [0, 0];
          this.startPointerDrag(event);
        }, this.config.delay);
      }
      keyDown(event) {
        const deltaFn = KEYS_DELTA_MAP[event.key];
        if (deltaFn) {
          const state = this.state;
          const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;
          this.start(event);
          state._delta = deltaFn(this.config.keyboardDisplacement, factor);
          state._keyboardActive = true;
          maths.V.addTo(state._movement, state._delta);
          this.compute(event);
          this.emit();
        }
      }
      keyUp(event) {
        if (!(event.key in KEYS_DELTA_MAP))
          return;
        this.state._keyboardActive = false;
        this.setActive();
        this.compute(event);
        this.emit();
      }
      bind(bindFunction) {
        const device = this.config.device;
        bindFunction(device, "start", this.pointerDown.bind(this));
        if (this.config.pointerCapture) {
          bindFunction(device, "change", this.pointerMove.bind(this));
          bindFunction(device, "end", this.pointerUp.bind(this));
          bindFunction(device, "cancel", this.pointerUp.bind(this));
          bindFunction("lostPointerCapture", "", this.pointerUp.bind(this));
        }
        if (this.config.keys) {
          bindFunction("key", "down", this.keyDown.bind(this));
          bindFunction("key", "up", this.keyUp.bind(this));
        }
        if (this.config.filterTaps) {
          bindFunction("click", "", this.pointerClick.bind(this), {
            capture: true,
            passive: false
          });
        }
      }
    };
    function persistEvent(event) {
      "persist" in event && typeof event.persist === "function" && event.persist();
    }
    var isBrowser = typeof window !== "undefined" && window.document && window.document.createElement;
    function supportsTouchEvents() {
      return isBrowser && "ontouchstart" in window;
    }
    function isTouchScreen() {
      return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;
    }
    function supportsPointerEvents() {
      return isBrowser && "onpointerdown" in window;
    }
    function supportsPointerLock() {
      return isBrowser && "exitPointerLock" in window.document;
    }
    function supportsGestureEvents() {
      try {
        return "constructor" in GestureEvent;
      } catch (e10) {
        return false;
      }
    }
    var SUPPORT = {
      isBrowser,
      gesture: supportsGestureEvents(),
      touch: supportsTouchEvents(),
      touchscreen: isTouchScreen(),
      pointer: supportsPointerEvents(),
      pointerLock: supportsPointerLock()
    };
    var DEFAULT_PREVENT_SCROLL_DELAY = 250;
    var DEFAULT_DRAG_DELAY = 180;
    var DEFAULT_SWIPE_VELOCITY = 0.5;
    var DEFAULT_SWIPE_DISTANCE = 50;
    var DEFAULT_SWIPE_DURATION = 250;
    var DEFAULT_KEYBOARD_DISPLACEMENT = 10;
    var DEFAULT_DRAG_AXIS_THRESHOLD = {
      mouse: 0,
      touch: 0,
      pen: 8
    };
    var dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
      device(_v2, _k2, {
        pointer: {
          touch = false,
          lock = false,
          mouse = false
        } = {}
      }) {
        this.pointerLock = lock && SUPPORT.pointerLock;
        if (SUPPORT.touch && touch)
          return "touch";
        if (this.pointerLock)
          return "mouse";
        if (SUPPORT.pointer && !mouse)
          return "pointer";
        if (SUPPORT.touch)
          return "touch";
        return "mouse";
      },
      preventScrollAxis(value, _k2, {
        preventScroll
      }) {
        this.preventScrollDelay = typeof preventScroll === "number" ? preventScroll : preventScroll || preventScroll === void 0 && value ? DEFAULT_PREVENT_SCROLL_DELAY : void 0;
        if (!SUPPORT.touchscreen || preventScroll === false)
          return void 0;
        return value ? value : preventScroll !== void 0 ? "y" : void 0;
      },
      pointerCapture(_v2, _k2, {
        pointer: {
          capture = true,
          buttons = 1,
          keys = true
        } = {}
      }) {
        this.pointerButtons = buttons;
        this.keys = keys;
        return !this.pointerLock && this.device === "pointer" && capture;
      },
      threshold(value, _k2, {
        filterTaps = false,
        tapsThreshold = 3,
        axis = void 0
      }) {
        const threshold = maths.V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);
        this.filterTaps = filterTaps;
        this.tapsThreshold = tapsThreshold;
        return threshold;
      },
      swipe({
        velocity = DEFAULT_SWIPE_VELOCITY,
        distance = DEFAULT_SWIPE_DISTANCE,
        duration = DEFAULT_SWIPE_DURATION
      } = {}) {
        return {
          velocity: this.transform(maths.V.toVector(velocity)),
          distance: this.transform(maths.V.toVector(distance)),
          duration
        };
      },
      delay(value = 0) {
        switch (value) {
          case true:
            return DEFAULT_DRAG_DELAY;
          case false:
            return 0;
          default:
            return value;
        }
      },
      axisThreshold(value) {
        if (!value)
          return DEFAULT_DRAG_AXIS_THRESHOLD;
        return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);
      },
      keyboardDisplacement(value = DEFAULT_KEYBOARD_DISPLACEMENT) {
        return value;
      }
    });
    if (true) {
      Object.assign(dragConfigResolver, {
        useTouch(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`useTouch\` option has been renamed to \`pointer.touch\`. Use it as in \`{ pointer: { touch: true } }\`.`);
          }
          return NaN;
        },
        experimental_preventWindowScrollY(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`experimental_preventWindowScrollY\` option has been renamed to \`preventScroll\`.`);
          }
          return NaN;
        },
        swipeVelocity(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`swipeVelocity\` option has been renamed to \`swipe.velocity\`. Use it as in \`{ swipe: { velocity: 0.5 } }\`.`);
          }
          return NaN;
        },
        swipeDistance(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`swipeDistance\` option has been renamed to \`swipe.distance\`. Use it as in \`{ swipe: { distance: 50 } }\`.`);
          }
          return NaN;
        },
        swipeDuration(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`swipeDuration\` option has been renamed to \`swipe.duration\`. Use it as in \`{ swipe: { duration: 250 } }\`.`);
          }
          return NaN;
        }
      });
    }
    function clampStateInternalMovementToBounds(state) {
      const [ox2, oy2] = state.overflow;
      const [dx2, dy2] = state._delta;
      const [dirx, diry] = state._direction;
      if (ox2 < 0 && dx2 > 0 && dirx < 0 || ox2 > 0 && dx2 < 0 && dirx > 0) {
        state._movement[0] = state._movementBound[0];
      }
      if (oy2 < 0 && dy2 > 0 && diry < 0 || oy2 > 0 && dy2 < 0 && diry > 0) {
        state._movement[1] = state._movementBound[1];
      }
    }
    var SCALE_ANGLE_RATIO_INTENT_DEG = 30;
    var PINCH_WHEEL_RATIO = 100;
    var PinchEngine = class extends Engine {
      constructor(...args) {
        super(...args);
        _defineProperty(this, "ingKey", "pinching");
        _defineProperty(this, "aliasKey", "da");
      }
      init() {
        this.state.offset = [1, 0];
        this.state.lastOffset = [1, 0];
        this.state._pointerEvents = /* @__PURE__ */ new Map();
      }
      reset() {
        super.reset();
        const state = this.state;
        state._touchIds = [];
        state.canceled = false;
        state.cancel = this.cancel.bind(this);
        state.turns = 0;
      }
      computeOffset() {
        const {
          type,
          movement,
          lastOffset
        } = this.state;
        if (type === "wheel") {
          this.state.offset = maths.V.add(movement, lastOffset);
        } else {
          this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
        }
      }
      computeMovement() {
        const {
          offset: offset3,
          lastOffset
        } = this.state;
        this.state.movement = [offset3[0] / lastOffset[0], offset3[1] - lastOffset[1]];
      }
      axisIntent() {
        const state = this.state;
        const [_m0, _m1] = state._movement;
        if (!state.axis) {
          const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);
          if (axisMovementDifference < 0)
            state.axis = "angle";
          else if (axisMovementDifference > 0)
            state.axis = "scale";
        }
      }
      restrictToAxis(v11) {
        if (this.config.lockDirection) {
          if (this.state.axis === "scale")
            v11[1] = 0;
          else if (this.state.axis === "angle")
            v11[0] = 0;
        }
      }
      cancel() {
        const state = this.state;
        if (state.canceled)
          return;
        setTimeout(() => {
          state.canceled = true;
          state._active = false;
          this.compute();
          this.emit();
        }, 0);
      }
      touchStart(event) {
        this.ctrl.setEventIds(event);
        const state = this.state;
        const ctrlTouchIds = this.ctrl.touchIds;
        if (state._active) {
          if (state._touchIds.every((id) => ctrlTouchIds.has(id)))
            return;
        }
        if (ctrlTouchIds.size < 2)
          return;
        this.start(event);
        state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
        const payload = touchDistanceAngle(event, state._touchIds);
        if (!payload)
          return;
        this.pinchStart(event, payload);
      }
      pointerStart(event) {
        if (event.buttons != null && event.buttons % 2 !== 1)
          return;
        this.ctrl.setEventIds(event);
        event.target.setPointerCapture(event.pointerId);
        const state = this.state;
        const _pointerEvents = state._pointerEvents;
        const ctrlPointerIds = this.ctrl.pointerIds;
        if (state._active) {
          if (Array.from(_pointerEvents.keys()).every((id) => ctrlPointerIds.has(id)))
            return;
        }
        if (_pointerEvents.size < 2) {
          _pointerEvents.set(event.pointerId, event);
        }
        if (state._pointerEvents.size < 2)
          return;
        this.start(event);
        const payload = distanceAngle(...Array.from(_pointerEvents.values()));
        if (!payload)
          return;
        this.pinchStart(event, payload);
      }
      pinchStart(event, payload) {
        const state = this.state;
        state.origin = payload.origin;
        this.computeValues([payload.distance, payload.angle]);
        this.computeInitial();
        this.compute(event);
        this.emit();
      }
      touchMove(event) {
        if (!this.state._active)
          return;
        const payload = touchDistanceAngle(event, this.state._touchIds);
        if (!payload)
          return;
        this.pinchMove(event, payload);
      }
      pointerMove(event) {
        const _pointerEvents = this.state._pointerEvents;
        if (_pointerEvents.has(event.pointerId)) {
          _pointerEvents.set(event.pointerId, event);
        }
        if (!this.state._active)
          return;
        const payload = distanceAngle(...Array.from(_pointerEvents.values()));
        if (!payload)
          return;
        this.pinchMove(event, payload);
      }
      pinchMove(event, payload) {
        const state = this.state;
        const prev_a = state._values[1];
        const delta_a = payload.angle - prev_a;
        let delta_turns = 0;
        if (Math.abs(delta_a) > 270)
          delta_turns += Math.sign(delta_a);
        this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);
        state.origin = payload.origin;
        state.turns = delta_turns;
        state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];
        this.compute(event);
        this.emit();
      }
      touchEnd(event) {
        this.ctrl.setEventIds(event);
        if (!this.state._active)
          return;
        if (this.state._touchIds.some((id) => !this.ctrl.touchIds.has(id))) {
          this.state._active = false;
          this.compute(event);
          this.emit();
        }
      }
      pointerEnd(event) {
        const state = this.state;
        this.ctrl.setEventIds(event);
        try {
          event.target.releasePointerCapture(event.pointerId);
        } catch (_unused) {
        }
        if (state._pointerEvents.has(event.pointerId)) {
          state._pointerEvents.delete(event.pointerId);
        }
        if (!state._active)
          return;
        if (state._pointerEvents.size < 2) {
          state._active = false;
          this.compute(event);
          this.emit();
        }
      }
      gestureStart(event) {
        if (event.cancelable)
          event.preventDefault();
        const state = this.state;
        if (state._active)
          return;
        this.start(event);
        this.computeValues([event.scale, event.rotation]);
        state.origin = [event.clientX, event.clientY];
        this.compute(event);
        this.emit();
      }
      gestureMove(event) {
        if (event.cancelable)
          event.preventDefault();
        if (!this.state._active)
          return;
        const state = this.state;
        this.computeValues([event.scale, event.rotation]);
        state.origin = [event.clientX, event.clientY];
        const _previousMovement = state._movement;
        state._movement = [event.scale - 1, event.rotation];
        state._delta = maths.V.sub(state._movement, _previousMovement);
        this.compute(event);
        this.emit();
      }
      gestureEnd(event) {
        if (!this.state._active)
          return;
        this.state._active = false;
        this.compute(event);
        this.emit();
      }
      wheel(event) {
        const modifierKey = this.config.modifierKey;
        if (modifierKey && (Array.isArray(modifierKey) ? !modifierKey.find((k10) => event[k10]) : !event[modifierKey]))
          return;
        if (!this.state._active)
          this.wheelStart(event);
        else
          this.wheelChange(event);
        this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
      }
      wheelStart(event) {
        this.start(event);
        this.wheelChange(event);
      }
      wheelChange(event) {
        const isR3f = "uv" in event;
        if (!isR3f) {
          if (event.cancelable) {
            event.preventDefault();
          }
          if (!event.defaultPrevented) {
            console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \`target\` option.

This message will only appear in development mode.`);
          }
        }
        const state = this.state;
        state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
        maths.V.addTo(state._movement, state._delta);
        clampStateInternalMovementToBounds(state);
        this.state.origin = [event.clientX, event.clientY];
        this.compute(event);
        this.emit();
      }
      wheelEnd() {
        if (!this.state._active)
          return;
        this.state._active = false;
        this.compute();
        this.emit();
      }
      bind(bindFunction) {
        const device = this.config.device;
        if (!!device) {
          bindFunction(device, "start", this[device + "Start"].bind(this));
          bindFunction(device, "change", this[device + "Move"].bind(this));
          bindFunction(device, "end", this[device + "End"].bind(this));
          bindFunction(device, "cancel", this[device + "End"].bind(this));
          bindFunction("lostPointerCapture", "", this[device + "End"].bind(this));
        }
        if (this.config.pinchOnWheel) {
          bindFunction("wheel", "", this.wheel.bind(this), {
            passive: false
          });
        }
      }
    };
    var pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
      device(_v2, _k2, {
        shared,
        pointer: {
          touch = false
        } = {}
      }) {
        const sharedConfig = shared;
        if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture)
          return "gesture";
        if (SUPPORT.touch && touch)
          return "touch";
        if (SUPPORT.touchscreen) {
          if (SUPPORT.pointer)
            return "pointer";
          if (SUPPORT.touch)
            return "touch";
        }
      },
      bounds(_v2, _k2, {
        scaleBounds = {},
        angleBounds = {}
      }) {
        const _scaleBounds = (state) => {
          const D10 = assignDefault(call(scaleBounds, state), {
            min: -Infinity,
            max: Infinity
          });
          return [D10.min, D10.max];
        };
        const _angleBounds = (state) => {
          const A10 = assignDefault(call(angleBounds, state), {
            min: -Infinity,
            max: Infinity
          });
          return [A10.min, A10.max];
        };
        if (typeof scaleBounds !== "function" && typeof angleBounds !== "function")
          return [_scaleBounds(), _angleBounds()];
        return (state) => [_scaleBounds(state), _angleBounds(state)];
      },
      threshold(value, _k2, config) {
        this.lockDirection = config.axis === "lock";
        const threshold = maths.V.toVector(value, this.lockDirection ? [0.1, 3] : 0);
        return threshold;
      },
      modifierKey(value) {
        if (value === void 0)
          return "ctrlKey";
        return value;
      },
      pinchOnWheel(value = true) {
        return value;
      }
    });
    var MoveEngine = class extends CoordinatesEngine {
      constructor(...args) {
        super(...args);
        _defineProperty(this, "ingKey", "moving");
      }
      move(event) {
        if (this.config.mouseOnly && event.pointerType !== "mouse")
          return;
        if (!this.state._active)
          this.moveStart(event);
        else
          this.moveChange(event);
        this.timeoutStore.add("moveEnd", this.moveEnd.bind(this));
      }
      moveStart(event) {
        this.start(event);
        this.computeValues(pointerValues(event));
        this.compute(event);
        this.computeInitial();
        this.emit();
      }
      moveChange(event) {
        if (!this.state._active)
          return;
        const values = pointerValues(event);
        const state = this.state;
        state._delta = maths.V.sub(values, state._values);
        maths.V.addTo(state._movement, state._delta);
        this.computeValues(values);
        this.compute(event);
        this.emit();
      }
      moveEnd(event) {
        if (!this.state._active)
          return;
        this.state._active = false;
        this.compute(event);
        this.emit();
      }
      bind(bindFunction) {
        bindFunction("pointer", "change", this.move.bind(this));
        bindFunction("pointer", "leave", this.moveEnd.bind(this));
      }
    };
    var moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
      mouseOnly: (value = true) => value
    });
    var ScrollEngine = class extends CoordinatesEngine {
      constructor(...args) {
        super(...args);
        _defineProperty(this, "ingKey", "scrolling");
      }
      scroll(event) {
        if (!this.state._active)
          this.start(event);
        this.scrollChange(event);
        this.timeoutStore.add("scrollEnd", this.scrollEnd.bind(this));
      }
      scrollChange(event) {
        if (event.cancelable)
          event.preventDefault();
        const state = this.state;
        const values = scrollValues(event);
        state._delta = maths.V.sub(values, state._values);
        maths.V.addTo(state._movement, state._delta);
        this.computeValues(values);
        this.compute(event);
        this.emit();
      }
      scrollEnd() {
        if (!this.state._active)
          return;
        this.state._active = false;
        this.compute();
        this.emit();
      }
      bind(bindFunction) {
        bindFunction("scroll", "", this.scroll.bind(this));
      }
    };
    var scrollConfigResolver = coordinatesConfigResolver;
    var WheelEngine = class extends CoordinatesEngine {
      constructor(...args) {
        super(...args);
        _defineProperty(this, "ingKey", "wheeling");
      }
      wheel(event) {
        if (!this.state._active)
          this.start(event);
        this.wheelChange(event);
        this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
      }
      wheelChange(event) {
        const state = this.state;
        state._delta = wheelValues(event);
        maths.V.addTo(state._movement, state._delta);
        clampStateInternalMovementToBounds(state);
        this.compute(event);
        this.emit();
      }
      wheelEnd() {
        if (!this.state._active)
          return;
        this.state._active = false;
        this.compute();
        this.emit();
      }
      bind(bindFunction) {
        bindFunction("wheel", "", this.wheel.bind(this));
      }
    };
    var wheelConfigResolver = coordinatesConfigResolver;
    var HoverEngine = class extends CoordinatesEngine {
      constructor(...args) {
        super(...args);
        _defineProperty(this, "ingKey", "hovering");
      }
      enter(event) {
        if (this.config.mouseOnly && event.pointerType !== "mouse")
          return;
        this.start(event);
        this.computeValues(pointerValues(event));
        this.compute(event);
        this.emit();
      }
      leave(event) {
        if (this.config.mouseOnly && event.pointerType !== "mouse")
          return;
        const state = this.state;
        if (!state._active)
          return;
        state._active = false;
        const values = pointerValues(event);
        state._movement = state._delta = maths.V.sub(values, state._values);
        this.computeValues(values);
        this.compute(event);
        state.delta = state.movement;
        this.emit();
      }
      bind(bindFunction) {
        bindFunction("pointer", "enter", this.enter.bind(this));
        bindFunction("pointer", "leave", this.leave.bind(this));
      }
    };
    var hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
      mouseOnly: (value = true) => value
    });
    var EngineMap = /* @__PURE__ */ new Map();
    var ConfigResolverMap = /* @__PURE__ */ new Map();
    function registerAction2(action) {
      EngineMap.set(action.key, action.engine);
      ConfigResolverMap.set(action.key, action.resolver);
    }
    var dragAction2 = {
      key: "drag",
      engine: DragEngine,
      resolver: dragConfigResolver
    };
    var hoverAction2 = {
      key: "hover",
      engine: HoverEngine,
      resolver: hoverConfigResolver
    };
    var moveAction2 = {
      key: "move",
      engine: MoveEngine,
      resolver: moveConfigResolver
    };
    var pinchAction2 = {
      key: "pinch",
      engine: PinchEngine,
      resolver: pinchConfigResolver
    };
    var scrollAction2 = {
      key: "scroll",
      engine: ScrollEngine,
      resolver: scrollConfigResolver
    };
    var wheelAction2 = {
      key: "wheel",
      engine: WheelEngine,
      resolver: wheelConfigResolver
    };
    exports.ConfigResolverMap = ConfigResolverMap;
    exports.EngineMap = EngineMap;
    exports.SUPPORT = SUPPORT;
    exports._defineProperty = _defineProperty;
    exports._objectSpread2 = _objectSpread2;
    exports.chain = chain;
    exports.dragAction = dragAction2;
    exports.hoverAction = hoverAction2;
    exports.isTouch = isTouch;
    exports.moveAction = moveAction2;
    exports.parseProp = parseProp;
    exports.pinchAction = pinchAction2;
    exports.registerAction = registerAction2;
    exports.scrollAction = scrollAction2;
    exports.toDomEventType = toDomEventType;
    exports.toHandlerProp = toHandlerProp;
    exports.touchIds = touchIds;
    exports.wheelAction = wheelAction2;
  }
});

// node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.cjs.dev.js
var require_use_gesture_core_actions_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var actions_dist_useGestureCoreActions = require_actions_6579bdef_cjs_dev();
    require_maths_267f0992_cjs_dev();
    exports.ConfigResolverMap = actions_dist_useGestureCoreActions.ConfigResolverMap;
    exports.EngineMap = actions_dist_useGestureCoreActions.EngineMap;
    exports.dragAction = actions_dist_useGestureCoreActions.dragAction;
    exports.hoverAction = actions_dist_useGestureCoreActions.hoverAction;
    exports.moveAction = actions_dist_useGestureCoreActions.moveAction;
    exports.pinchAction = actions_dist_useGestureCoreActions.pinchAction;
    exports.registerAction = actions_dist_useGestureCoreActions.registerAction;
    exports.scrollAction = actions_dist_useGestureCoreActions.scrollAction;
    exports.wheelAction = actions_dist_useGestureCoreActions.wheelAction;
  }
});

// node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.cjs.js
var require_use_gesture_core_actions_cjs = __commonJS({
  "node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.cjs.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_gesture_core_actions_cjs_dev();
    }
  }
});

// node_modules/@use-gesture/core/dist/use-gesture-core.cjs.dev.js
var require_use_gesture_core_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/dist/use-gesture-core.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var actions_dist_useGestureCoreActions = require_actions_6579bdef_cjs_dev();
    require_maths_267f0992_cjs_dev();
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i10;
      for (i10 = 0; i10 < sourceKeys.length; i10++) {
        key = sourceKeys[i10];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose2(source, excluded);
      var key, i10;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i10 = 0; i10 < sourceSymbolKeys.length; i10++) {
          key = sourceSymbolKeys[i10];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var sharedConfigResolver = {
      target(value) {
        if (value) {
          return () => "current" in value ? value.current : value;
        }
        return void 0;
      },
      enabled(value = true) {
        return value;
      },
      window(value = actions_dist_useGestureCoreActions.SUPPORT.isBrowser ? window : void 0) {
        return value;
      },
      eventOptions({
        passive = true,
        capture = false
      } = {}) {
        return {
          passive,
          capture
        };
      },
      transform(value) {
        return value;
      }
    };
    var _excluded = ["target", "eventOptions", "window", "enabled", "transform"];
    function resolveWith(config = {}, resolvers) {
      const result = {};
      for (const [key, resolver] of Object.entries(resolvers)) {
        switch (typeof resolver) {
          case "function":
            if (true) {
              const r10 = resolver.call(result, config[key], key, config);
              if (!Number.isNaN(r10))
                result[key] = r10;
            } else {
              result[key] = resolver.call(result, config[key], key, config);
            }
            break;
          case "object":
            result[key] = resolveWith(config[key], resolver);
            break;
          case "boolean":
            if (resolver)
              result[key] = config[key];
            break;
        }
      }
      return result;
    }
    function parse3(newConfig, gestureKey, _config = {}) {
      const _ref = newConfig, {
        target,
        eventOptions,
        window: window2,
        enabled,
        transform
      } = _ref, rest = _objectWithoutProperties(_ref, _excluded);
      _config.shared = resolveWith({
        target,
        eventOptions,
        window: window2,
        enabled,
        transform
      }, sharedConfigResolver);
      if (gestureKey) {
        const resolver = actions_dist_useGestureCoreActions.ConfigResolverMap.get(gestureKey);
        _config[gestureKey] = resolveWith(actions_dist_useGestureCoreActions._objectSpread2({
          shared: _config.shared
        }, rest), resolver);
      } else {
        for (const key in rest) {
          const resolver = actions_dist_useGestureCoreActions.ConfigResolverMap.get(key);
          if (resolver) {
            _config[key] = resolveWith(actions_dist_useGestureCoreActions._objectSpread2({
              shared: _config.shared
            }, rest[key]), resolver);
          } else if (true) {
            if (!["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(key)) {
              if (key === "domTarget") {
                throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
              }
              console.warn(`[@use-gesture]: Unknown config key \`${key}\` was used. Please read the documentation for further information.`);
            }
          }
        }
      }
      return _config;
    }
    var EventStore = class {
      constructor(ctrl, gestureKey) {
        actions_dist_useGestureCoreActions._defineProperty(this, "_listeners", /* @__PURE__ */ new Set());
        this._ctrl = ctrl;
        this._gestureKey = gestureKey;
      }
      add(element, device, action, handler, options) {
        const listeners = this._listeners;
        const type = actions_dist_useGestureCoreActions.toDomEventType(device, action);
        const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};
        const eventOptions = actions_dist_useGestureCoreActions._objectSpread2(actions_dist_useGestureCoreActions._objectSpread2({}, _options), options);
        element.addEventListener(type, handler, eventOptions);
        const remove = () => {
          element.removeEventListener(type, handler, eventOptions);
          listeners.delete(remove);
        };
        listeners.add(remove);
        return remove;
      }
      clean() {
        this._listeners.forEach((remove) => remove());
        this._listeners.clear();
      }
    };
    var TimeoutStore = class {
      constructor() {
        actions_dist_useGestureCoreActions._defineProperty(this, "_timeouts", /* @__PURE__ */ new Map());
      }
      add(key, callback, ms2 = 140, ...args) {
        this.remove(key);
        this._timeouts.set(key, window.setTimeout(callback, ms2, ...args));
      }
      remove(key) {
        const timeout = this._timeouts.get(key);
        if (timeout)
          window.clearTimeout(timeout);
      }
      clean() {
        this._timeouts.forEach((timeout) => void window.clearTimeout(timeout));
        this._timeouts.clear();
      }
    };
    var Controller2 = class {
      constructor(handlers) {
        actions_dist_useGestureCoreActions._defineProperty(this, "gestures", /* @__PURE__ */ new Set());
        actions_dist_useGestureCoreActions._defineProperty(this, "_targetEventStore", new EventStore(this));
        actions_dist_useGestureCoreActions._defineProperty(this, "gestureEventStores", {});
        actions_dist_useGestureCoreActions._defineProperty(this, "gestureTimeoutStores", {});
        actions_dist_useGestureCoreActions._defineProperty(this, "handlers", {});
        actions_dist_useGestureCoreActions._defineProperty(this, "config", {});
        actions_dist_useGestureCoreActions._defineProperty(this, "pointerIds", /* @__PURE__ */ new Set());
        actions_dist_useGestureCoreActions._defineProperty(this, "touchIds", /* @__PURE__ */ new Set());
        actions_dist_useGestureCoreActions._defineProperty(this, "state", {
          shared: {
            shiftKey: false,
            metaKey: false,
            ctrlKey: false,
            altKey: false
          }
        });
        resolveGestures(this, handlers);
      }
      setEventIds(event) {
        if (actions_dist_useGestureCoreActions.isTouch(event)) {
          this.touchIds = new Set(actions_dist_useGestureCoreActions.touchIds(event));
          return this.touchIds;
        } else if ("pointerId" in event) {
          if (event.type === "pointerup" || event.type === "pointercancel")
            this.pointerIds.delete(event.pointerId);
          else if (event.type === "pointerdown")
            this.pointerIds.add(event.pointerId);
          return this.pointerIds;
        }
      }
      applyHandlers(handlers, nativeHandlers) {
        this.handlers = handlers;
        this.nativeHandlers = nativeHandlers;
      }
      applyConfig(config, gestureKey) {
        this.config = parse3(config, gestureKey, this.config);
      }
      clean() {
        this._targetEventStore.clean();
        for (const key of this.gestures) {
          this.gestureEventStores[key].clean();
          this.gestureTimeoutStores[key].clean();
        }
      }
      effect() {
        if (this.config.shared.target)
          this.bind();
        return () => this._targetEventStore.clean();
      }
      bind(...args) {
        const sharedConfig = this.config.shared;
        const props = {};
        let target;
        if (sharedConfig.target) {
          target = sharedConfig.target();
          if (!target)
            return;
        }
        if (sharedConfig.enabled) {
          for (const gestureKey of this.gestures) {
            const gestureConfig = this.config[gestureKey];
            const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);
            if (gestureConfig.enabled) {
              const Engine = actions_dist_useGestureCoreActions.EngineMap.get(gestureKey);
              new Engine(this, args, gestureKey).bind(bindFunction);
            }
          }
          const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);
          for (const eventKey in this.nativeHandlers) {
            nativeBindFunction(eventKey, "", (event) => this.nativeHandlers[eventKey](actions_dist_useGestureCoreActions._objectSpread2(actions_dist_useGestureCoreActions._objectSpread2({}, this.state.shared), {}, {
              event,
              args
            })), void 0, true);
          }
        }
        for (const handlerProp in props) {
          props[handlerProp] = actions_dist_useGestureCoreActions.chain(...props[handlerProp]);
        }
        if (!target)
          return props;
        for (const handlerProp in props) {
          const {
            device,
            capture,
            passive
          } = actions_dist_useGestureCoreActions.parseProp(handlerProp);
          this._targetEventStore.add(target, device, "", props[handlerProp], {
            capture,
            passive
          });
        }
      }
    };
    function setupGesture(ctrl, gestureKey) {
      ctrl.gestures.add(gestureKey);
      ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);
      ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
    }
    function resolveGestures(ctrl, internalHandlers) {
      if (internalHandlers.drag)
        setupGesture(ctrl, "drag");
      if (internalHandlers.wheel)
        setupGesture(ctrl, "wheel");
      if (internalHandlers.scroll)
        setupGesture(ctrl, "scroll");
      if (internalHandlers.move)
        setupGesture(ctrl, "move");
      if (internalHandlers.pinch)
        setupGesture(ctrl, "pinch");
      if (internalHandlers.hover)
        setupGesture(ctrl, "hover");
    }
    var bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options = {}, isNative = false) => {
      var _options$capture, _options$passive;
      const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
      const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
      let handlerProp = isNative ? device : actions_dist_useGestureCoreActions.toHandlerProp(device, action, capture);
      if (withPassiveOption && passive)
        handlerProp += "Passive";
      props[handlerProp] = props[handlerProp] || [];
      props[handlerProp].push(handler);
    };
    var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
    function sortHandlers(_handlers2) {
      const native = {};
      const handlers = {};
      const actions = /* @__PURE__ */ new Set();
      for (let key in _handlers2) {
        if (RE_NOT_NATIVE.test(key)) {
          actions.add(RegExp.lastMatch);
          handlers[key] = _handlers2[key];
        } else {
          native[key] = _handlers2[key];
        }
      }
      return [handlers, native, actions];
    }
    function registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {
      if (!actions.has(handlerKey))
        return;
      if (!actions_dist_useGestureCoreActions.EngineMap.has(key)) {
        if (true) {
          console.warn(`[@use-gesture]: You've created a custom handler that that uses the \`${key}\` gesture but isn't properly configured.

Please add \`${key}Action\` when creating your handler.`);
        }
        return;
      }
      const startKey = handlerKey + "Start";
      const endKey = handlerKey + "End";
      const fn3 = (state) => {
        let memo46 = void 0;
        if (state.first && startKey in handlers)
          handlers[startKey](state);
        if (handlerKey in handlers)
          memo46 = handlers[handlerKey](state);
        if (state.last && endKey in handlers)
          handlers[endKey](state);
        return memo46;
      };
      internalHandlers[key] = fn3;
      config[key] = config[key] || {};
    }
    function parseMergedHandlers2(mergedHandlers, mergedConfig) {
      const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
      const internalHandlers = {};
      registerGesture(actions, handlers, "onDrag", "drag", internalHandlers, mergedConfig);
      registerGesture(actions, handlers, "onWheel", "wheel", internalHandlers, mergedConfig);
      registerGesture(actions, handlers, "onScroll", "scroll", internalHandlers, mergedConfig);
      registerGesture(actions, handlers, "onPinch", "pinch", internalHandlers, mergedConfig);
      registerGesture(actions, handlers, "onMove", "move", internalHandlers, mergedConfig);
      registerGesture(actions, handlers, "onHover", "hover", internalHandlers, mergedConfig);
      return {
        handlers: internalHandlers,
        config: mergedConfig,
        nativeHandlers
      };
    }
    exports.Controller = Controller2;
    exports.parseMergedHandlers = parseMergedHandlers2;
  }
});

// node_modules/@use-gesture/core/dist/use-gesture-core.cjs.js
var require_use_gesture_core_cjs = __commonJS({
  "node_modules/@use-gesture/core/dist/use-gesture-core.cjs.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_gesture_core_cjs_dev();
    }
  }
});

// node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.cjs.dev.js
var require_use_gesture_core_utils_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var maths = require_maths_267f0992_cjs_dev();
    exports.rubberbandIfOutOfBounds = maths.rubberbandIfOutOfBounds;
  }
});

// node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.cjs.js
var require_use_gesture_core_utils_cjs = __commonJS({
  "node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.cjs.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_gesture_core_utils_cjs_dev();
    }
  }
});

// node_modules/@use-gesture/core/types/dist/use-gesture-core-types.cjs.dev.js
var require_use_gesture_core_types_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/types/dist/use-gesture-core-types.cjs.dev.js"() {
    "use strict";
  }
});

// node_modules/@use-gesture/core/types/dist/use-gesture-core-types.cjs.js
var require_use_gesture_core_types_cjs = __commonJS({
  "node_modules/@use-gesture/core/types/dist/use-gesture-core-types.cjs.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_gesture_core_types_cjs_dev();
    }
  }
});

// node_modules/react-error-boundary/dist/react-error-boundary.umd.js
var require_react_error_boundary_umd = __commonJS({
  "node_modules/react-error-boundary/dist/react-error-boundary.umd.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports, require_react()) : typeof define === "function" && define.amd ? define(["exports", "react"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.ReactErrorBoundary = {}, global2.React));
    })(exports, function(exports2, React24) {
      "use strict";
      function _interopNamespace(e10) {
        if (e10 && e10.__esModule)
          return e10;
        var n10 = /* @__PURE__ */ Object.create(null);
        if (e10) {
          Object.keys(e10).forEach(function(k10) {
            if (k10 !== "default") {
              var d10 = Object.getOwnPropertyDescriptor(e10, k10);
              Object.defineProperty(n10, k10, d10.get ? d10 : {
                enumerable: true,
                get: function() {
                  return e10[k10];
                }
              });
            }
          });
        }
        n10["default"] = e10;
        return Object.freeze(n10);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React24);
      function _setPrototypeOf(o10, p10) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o11, p11) {
          o11.__proto__ = p11;
          return o11;
        };
        return _setPrototypeOf(o10, p10);
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      var changedArray = function changedArray2(a10, b10) {
        if (a10 === void 0) {
          a10 = [];
        }
        if (b10 === void 0) {
          b10 = [];
        }
        return a10.length !== b10.length || a10.some(function(item, index4) {
          return !Object.is(item, b10[index4]);
        });
      };
      var initialState = {
        error: null
      };
      var ErrorBoundary = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose(ErrorBoundary2, _React$Component);
        function ErrorBoundary2() {
          var _this;
          for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
            _args[_key] = arguments[_key];
          }
          _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
          _this.state = initialState;
          _this.resetErrorBoundary = function() {
            var _this$props;
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);
            _this.reset();
          };
          return _this;
        }
        ErrorBoundary2.getDerivedStateFromError = function getDerivedStateFromError(error) {
          return {
            error
          };
        };
        var _proto = ErrorBoundary2.prototype;
        _proto.reset = function reset() {
          this.setState(initialState);
        };
        _proto.componentDidCatch = function componentDidCatch(error, info) {
          var _this$props$onError, _this$props2;
          (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
          var error = this.state.error;
          var resetKeys = this.props.resetKeys;
          if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {
            var _this$props$onResetKe, _this$props3;
            (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);
            this.reset();
          }
        };
        _proto.render = function render() {
          var error = this.state.error;
          var _this$props4 = this.props, fallbackRender = _this$props4.fallbackRender, FallbackComponent = _this$props4.FallbackComponent, fallback = _this$props4.fallback;
          if (error !== null) {
            var _props = {
              error,
              resetErrorBoundary: this.resetErrorBoundary
            };
            if (/* @__PURE__ */ React__namespace.isValidElement(fallback)) {
              return fallback;
            } else if (typeof fallbackRender === "function") {
              return fallbackRender(_props);
            } else if (FallbackComponent) {
              return /* @__PURE__ */ React__namespace.createElement(FallbackComponent, _props);
            } else {
              throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");
            }
          }
          return this.props.children;
        };
        return ErrorBoundary2;
      }(React__namespace.Component);
      function withErrorBoundary(Component, errorBoundaryProps) {
        var Wrapped = function Wrapped2(props) {
          return /* @__PURE__ */ React__namespace.createElement(ErrorBoundary, errorBoundaryProps, /* @__PURE__ */ React__namespace.createElement(Component, props));
        };
        var name = Component.displayName || Component.name || "Unknown";
        Wrapped.displayName = "withErrorBoundary(" + name + ")";
        return Wrapped;
      }
      function useErrorHandler(givenError) {
        var _React$useState = React__namespace.useState(null), error = _React$useState[0], setError = _React$useState[1];
        if (givenError != null)
          throw givenError;
        if (error != null)
          throw error;
        return setError;
      }
      exports2.ErrorBoundary = ErrorBoundary;
      exports2.useErrorHandler = useErrorHandler;
      exports2.withErrorBoundary = withErrorBoundary;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module2) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __spreadArray2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __classPrivateFieldIn2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v11) {
          return exports2[id] = previous ? previous(id, v11) : v11;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d10, b10) {
        d10.__proto__ = b10;
      } || function(d10, b10) {
        for (var p10 in b10)
          if (Object.prototype.hasOwnProperty.call(b10, p10))
            d10[p10] = b10[p10];
      };
      __extends2 = function(d10, b10) {
        if (typeof b10 !== "function" && b10 !== null)
          throw new TypeError("Class extends value " + String(b10) + " is not a constructor or null");
        extendStatics(d10, b10);
        function __2() {
          this.constructor = d10;
        }
        d10.prototype = b10 === null ? Object.create(b10) : (__2.prototype = b10.prototype, new __2());
      };
      __assign2 = Object.assign || function(t10) {
        for (var s10, i10 = 1, n10 = arguments.length; i10 < n10; i10++) {
          s10 = arguments[i10];
          for (var p10 in s10)
            if (Object.prototype.hasOwnProperty.call(s10, p10))
              t10[p10] = s10[p10];
        }
        return t10;
      };
      __rest2 = function(s10, e10) {
        var t10 = {};
        for (var p10 in s10)
          if (Object.prototype.hasOwnProperty.call(s10, p10) && e10.indexOf(p10) < 0)
            t10[p10] = s10[p10];
        if (s10 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i10 = 0, p10 = Object.getOwnPropertySymbols(s10); i10 < p10.length; i10++) {
            if (e10.indexOf(p10[i10]) < 0 && Object.prototype.propertyIsEnumerable.call(s10, p10[i10]))
              t10[p10[i10]] = s10[p10[i10]];
          }
        return t10;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c10 = arguments.length, r10 = c10 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d10;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r10 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i10 = decorators.length - 1; i10 >= 0; i10--)
            if (d10 = decorators[i10])
              r10 = (c10 < 3 ? d10(r10) : c10 > 3 ? d10(target, key, r10) : d10(target, key)) || r10;
        return c10 > 3 && r10 && Object.defineProperty(target, key, r10), r10;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P10, generator) {
        function adopt(value) {
          return value instanceof P10 ? value : new P10(function(resolve) {
            resolve(value);
          });
        }
        return new (P10 || (P10 = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e10) {
              reject(e10);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e10) {
              reject(e10);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _10 = { label: 0, sent: function() {
          if (t10[0] & 1)
            throw t10[1];
          return t10[1];
        }, trys: [], ops: [] }, f10, y10, t10, g10;
        return g10 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g10[Symbol.iterator] = function() {
          return this;
        }), g10;
        function verb(n10) {
          return function(v11) {
            return step([n10, v11]);
          };
        }
        function step(op2) {
          if (f10)
            throw new TypeError("Generator is already executing.");
          while (_10)
            try {
              if (f10 = 1, y10 && (t10 = op2[0] & 2 ? y10["return"] : op2[0] ? y10["throw"] || ((t10 = y10["return"]) && t10.call(y10), 0) : y10.next) && !(t10 = t10.call(y10, op2[1])).done)
                return t10;
              if (y10 = 0, t10)
                op2 = [op2[0] & 2, t10.value];
              switch (op2[0]) {
                case 0:
                case 1:
                  t10 = op2;
                  break;
                case 4:
                  _10.label++;
                  return { value: op2[1], done: false };
                case 5:
                  _10.label++;
                  y10 = op2[1];
                  op2 = [0];
                  continue;
                case 7:
                  op2 = _10.ops.pop();
                  _10.trys.pop();
                  continue;
                default:
                  if (!(t10 = _10.trys, t10 = t10.length > 0 && t10[t10.length - 1]) && (op2[0] === 6 || op2[0] === 2)) {
                    _10 = 0;
                    continue;
                  }
                  if (op2[0] === 3 && (!t10 || op2[1] > t10[0] && op2[1] < t10[3])) {
                    _10.label = op2[1];
                    break;
                  }
                  if (op2[0] === 6 && _10.label < t10[1]) {
                    _10.label = t10[1];
                    t10 = op2;
                    break;
                  }
                  if (t10 && _10.label < t10[2]) {
                    _10.label = t10[2];
                    _10.ops.push(op2);
                    break;
                  }
                  if (t10[2])
                    _10.ops.pop();
                  _10.trys.pop();
                  continue;
              }
              op2 = body.call(thisArg, _10);
            } catch (e10) {
              op2 = [6, e10];
              y10 = 0;
            } finally {
              f10 = t10 = 0;
            }
          if (op2[0] & 5)
            throw op2[1];
          return { value: op2[0] ? op2[1] : void 0, done: true };
        }
      };
      __exportStar2 = function(m10, o10) {
        for (var p10 in m10)
          if (p10 !== "default" && !Object.prototype.hasOwnProperty.call(o10, p10))
            __createBinding2(o10, m10, p10);
      };
      __createBinding2 = Object.create ? function(o10, m10, k10, k23) {
        if (k23 === void 0)
          k23 = k10;
        var desc = Object.getOwnPropertyDescriptor(m10, k10);
        if (!desc || ("get" in desc ? !m10.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m10[k10];
          } };
        }
        Object.defineProperty(o10, k23, desc);
      } : function(o10, m10, k10, k23) {
        if (k23 === void 0)
          k23 = k10;
        o10[k23] = m10[k10];
      };
      __values2 = function(o10) {
        var s10 = typeof Symbol === "function" && Symbol.iterator, m10 = s10 && o10[s10], i10 = 0;
        if (m10)
          return m10.call(o10);
        if (o10 && typeof o10.length === "number")
          return {
            next: function() {
              if (o10 && i10 >= o10.length)
                o10 = void 0;
              return { value: o10 && o10[i10++], done: !o10 };
            }
          };
        throw new TypeError(s10 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o10, n10) {
        var m10 = typeof Symbol === "function" && o10[Symbol.iterator];
        if (!m10)
          return o10;
        var i10 = m10.call(o10), r10, ar2 = [], e10;
        try {
          while ((n10 === void 0 || n10-- > 0) && !(r10 = i10.next()).done)
            ar2.push(r10.value);
        } catch (error) {
          e10 = { error };
        } finally {
          try {
            if (r10 && !r10.done && (m10 = i10["return"]))
              m10.call(i10);
          } finally {
            if (e10)
              throw e10.error;
          }
        }
        return ar2;
      };
      __spread2 = function() {
        for (var ar2 = [], i10 = 0; i10 < arguments.length; i10++)
          ar2 = ar2.concat(__read2(arguments[i10]));
        return ar2;
      };
      __spreadArrays2 = function() {
        for (var s10 = 0, i10 = 0, il2 = arguments.length; i10 < il2; i10++)
          s10 += arguments[i10].length;
        for (var r10 = Array(s10), k10 = 0, i10 = 0; i10 < il2; i10++)
          for (var a10 = arguments[i10], j10 = 0, jl2 = a10.length; j10 < jl2; j10++, k10++)
            r10[k10] = a10[j10];
        return r10;
      };
      __spreadArray2 = function(to2, from, pack) {
        if (pack || arguments.length === 2)
          for (var i10 = 0, l10 = from.length, ar2; i10 < l10; i10++) {
            if (ar2 || !(i10 in from)) {
              if (!ar2)
                ar2 = Array.prototype.slice.call(from, 0, i10);
              ar2[i10] = from[i10];
            }
          }
        return to2.concat(ar2 || Array.prototype.slice.call(from));
      };
      __await2 = function(v11) {
        return this instanceof __await2 ? (this.v = v11, this) : new __await2(v11);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g10 = generator.apply(thisArg, _arguments || []), i10, q10 = [];
        return i10 = {}, verb("next"), verb("throw"), verb("return"), i10[Symbol.asyncIterator] = function() {
          return this;
        }, i10;
        function verb(n10) {
          if (g10[n10])
            i10[n10] = function(v11) {
              return new Promise(function(a10, b10) {
                q10.push([n10, v11, a10, b10]) > 1 || resume(n10, v11);
              });
            };
        }
        function resume(n10, v11) {
          try {
            step(g10[n10](v11));
          } catch (e10) {
            settle(q10[0][3], e10);
          }
        }
        function step(r10) {
          r10.value instanceof __await2 ? Promise.resolve(r10.value.v).then(fulfill, reject) : settle(q10[0][2], r10);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f10, v11) {
          if (f10(v11), q10.shift(), q10.length)
            resume(q10[0][0], q10[0][1]);
        }
      };
      __asyncDelegator2 = function(o10) {
        var i10, p10;
        return i10 = {}, verb("next"), verb("throw", function(e10) {
          throw e10;
        }), verb("return"), i10[Symbol.iterator] = function() {
          return this;
        }, i10;
        function verb(n10, f10) {
          i10[n10] = o10[n10] ? function(v11) {
            return (p10 = !p10) ? { value: __await2(o10[n10](v11)), done: n10 === "return" } : f10 ? f10(v11) : v11;
          } : f10;
        }
      };
      __asyncValues2 = function(o10) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m10 = o10[Symbol.asyncIterator], i10;
        return m10 ? m10.call(o10) : (o10 = typeof __values2 === "function" ? __values2(o10) : o10[Symbol.iterator](), i10 = {}, verb("next"), verb("throw"), verb("return"), i10[Symbol.asyncIterator] = function() {
          return this;
        }, i10);
        function verb(n10) {
          i10[n10] = o10[n10] && function(v11) {
            return new Promise(function(resolve, reject) {
              v11 = o10[n10](v11), settle(resolve, reject, v11.done, v11.value);
            });
          };
        }
        function settle(resolve, reject, d10, v11) {
          Promise.resolve(v11).then(function(v12) {
            resolve({ value: v12, done: d10 });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o10, v11) {
        Object.defineProperty(o10, "default", { enumerable: true, value: v11 });
      } : function(o10, v11) {
        o10["default"] = v11;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k10 in mod)
            if (k10 !== "default" && Object.prototype.hasOwnProperty.call(mod, k10))
              __createBinding2(result, mod, k10);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, state, kind, f10) {
        if (kind === "a" && !f10)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f10 : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f10 : kind === "a" ? f10.call(receiver) : f10 ? f10.value : state.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, state, value, kind, f10) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f10)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f10 : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f10.call(receiver, value) : f10 ? f10.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn2 = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
    });
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment34 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment34;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module2) {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i10 = 0; i10 < keys.length; ++i10) {
          var key = keys[i10];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e10) {
            }
          }
        }
      }
      return targetComponent;
    }
    module2.exports = hoistNonReactStatics2;
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React24 = require_react();
        var ReactSharedInternals = React24.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is2(x10, y10) {
          return x10 === y10 && (x10 !== 0 || 1 / x10 === 1 / y10) || x10 !== x10 && y10 !== y10;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        var useState25 = React24.useState, useEffect25 = React24.useEffect, useLayoutEffect15 = React24.useLayoutEffect, useDebugValue2 = React24.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React24.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState25({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect15(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect25(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue2(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
        var useSyncExternalStore$2 = React24.useSyncExternalStore !== void 0 ? React24.useSyncExternalStore : shim;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
var require_with_selector_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React24 = require_react();
        var shim = require_shim();
        function is2(x10, y10) {
          return x10 === y10 && (x10 !== 0 || 1 / x10 === 1 / y10) || x10 !== x10 && y10 !== y10;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        var useSyncExternalStore = shim.useSyncExternalStore;
        var useRef29 = React24.useRef, useEffect25 = React24.useEffect, useMemo15 = React24.useMemo, useDebugValue2 = React24.useDebugValue;
        function useSyncExternalStoreWithSelector2(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
          var instRef = useRef29(null);
          var inst;
          if (instRef.current === null) {
            inst = {
              hasValue: false,
              value: null
            };
            instRef.current = inst;
          } else {
            inst = instRef.current;
          }
          var _useMemo = useMemo15(function() {
            var hasMemo = false;
            var memoizedSnapshot;
            var memoizedSelection;
            var memoizedSelector = function(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                var _nextSelection = selector(nextSnapshot);
                if (isEqual !== void 0) {
                  if (inst.hasValue) {
                    var currentSelection = inst.value;
                    if (isEqual(currentSelection, _nextSelection)) {
                      memoizedSelection = currentSelection;
                      return currentSelection;
                    }
                  }
                }
                memoizedSelection = _nextSelection;
                return _nextSelection;
              }
              var prevSnapshot = memoizedSnapshot;
              var prevSelection = memoizedSelection;
              if (objectIs(prevSnapshot, nextSnapshot)) {
                return prevSelection;
              }
              var nextSelection = selector(nextSnapshot);
              if (isEqual !== void 0 && isEqual(prevSelection, nextSelection)) {
                return prevSelection;
              }
              memoizedSnapshot = nextSnapshot;
              memoizedSelection = nextSelection;
              return nextSelection;
            };
            var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
            var getSnapshotWithSelector = function() {
              return memoizedSelector(getSnapshot());
            };
            var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
              return memoizedSelector(maybeGetServerSnapshot());
            };
            return [getSnapshotWithSelector, getServerSnapshotWithSelector];
          }, [getSnapshot, getServerSnapshot, selector, isEqual]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
          var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
          useEffect25(function() {
            inst.hasValue = true;
            inst.value = value;
          }, [value]);
          useDebugValue2(value);
          return value;
        }
        exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_with_selector_development();
    }
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TldrawPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/constants.ts
var ICON_NAME = "tldraw-icon";
var TLDRAW_ICON = `<g transform="scale(0.2)"><path fill-rule="evenodd" clip-rule="evenodd" d="M53.8947 0C24.1295 0 0 25.1901 0 56.2637V455.736C0 486.81 24.1295 512 53.8947 512H458.105C487.871 512 512 486.81 512 455.736V56.2637C512 25.1901 487.871 0 458.105 0H53.8947ZM285.574 177.929C294.032 169.305 298.261 158.806 298.261 146.432C298.261 134.059 294.032 123.56 285.574 114.936C277.115 106.312 266.818 102 254.682 102C242.179 102 231.698 106.312 223.239 114.936C214.781 123.56 210.552 134.059 210.552 146.432C210.552 158.806 214.781 169.305 223.239 177.929C231.698 186.553 242.179 190.865 254.682 190.865C266.818 190.865 277.115 186.553 285.574 177.929ZM222.688 270.652C214.229 279.276 210 289.775 210 302.149C210 313.772 213.861 323.521 221.584 331.395C229.307 339.269 236.846 343.394 244.201 343.769C247.143 343.769 248.43 345.269 248.063 348.268C246.959 355.018 244.569 361.579 240.891 367.954C237.214 374.328 232.617 379.577 227.101 383.702C217.171 391.951 215.332 399.075 221.584 405.074C228.204 411.449 236.662 411.636 246.959 405.637C265.715 395.138 280.057 379.952 289.987 360.08C300.284 340.207 303.961 320.147 301.019 299.899C299.548 289.025 294.4 279.276 285.574 270.652C276.748 261.653 266.45 257.154 254.682 257.154C242.179 257.154 231.514 261.653 222.688 270.652Z" fill="currentColor" /></g>`;
var VIEW_TYPE_TLDRAW = "tldraw-editor";
var VIEW_TYPE_TLDRAW_EMBED = "tldraw-embed-view";
var CREATE_NEW = "New Tldraw drawing";
var isDarwin = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
var CTRL_OR_CMD = isDarwin ? "metaKey" : "ctrlKey";
var SAVE_DISK_ICON = "save";
var FILENAME_DESC = "<p>Date and time format is from <a href='https://momentjs.com/docs/#/displaying/format/'>moment js</a></p>";
var FILENAME_SAMPLE = "Filename for a new drawing is: ";

// src/settings.ts
var import_obsidian2 = require("obsidian");

// src/utils/FileUtils.ts
var import_obsidian = require("obsidian");
function getDrawingFilename(settings) {
  const dateTimeValue = window.moment().format(settings.drawingFilenameDateTime);
  const filenameWithDateTime = settings.drawingFilenameDateTime !== "" ? dateTimeValue : "";
  const markdownFileExtension = settings.useTldrawExtension ? ".tldr.md" : ".md";
  const fileExtension = settings.compatibilityMode ? ".tldr" : markdownFileExtension;
  return settings.drawingFilenamePrefix + filenameWithDateTime + fileExtension;
}
async function checkAndCreateFolder(folderpath) {
  const vault = app.vault;
  folderpath = (0, import_obsidian.normalizePath)(folderpath);
  const folder = vault.getAbstractFileByPathInsensitive(folderpath);
  if (folder && folder instanceof import_obsidian.TFolder) {
    return;
  }
  if (folder && folder instanceof import_obsidian.TFile) {
    new import_obsidian.Notice(`The folder cannot be created because it already exists as a file: ${folderpath}.`);
  }
  await vault.createFolder(folderpath);
}
function getNewUniqueFilepath(vault, filename, folderpath) {
  let fname = (0, import_obsidian.normalizePath)(`${folderpath}/${filename}`);
  let file = vault.getAbstractFileByPath(fname);
  let i10 = 0;
  const extension = filename.endsWith(".tldr.md") ? ".tldr.md" : filename.slice(filename.lastIndexOf("."));
  while (file) {
    fname = (0, import_obsidian.normalizePath)(`${folderpath}/${filename.slice(0, filename.lastIndexOf(extension))}_${i10}${extension}`);
    i10++;
    file = vault.getAbstractFileByPath(fname);
  }
  return fname;
}

// src/settings.ts
var DEFAULT_SETTINGS = {
  mySetting: "default",
  folder: "Tldraw",
  drawingFilenamePrefix: "TLDrawing ",
  drawingFilenameDateTime: "YYYY-MM-DD HH.mm.ss",
  compatibilityMode: true,
  useTldrawExtension: false,
  matchTheme: true
};
var TldrawSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "General Settings" });
    new import_obsidian2.Setting(containerEl).setName("Tldraw folder").setDesc("Where to save Tldraw drawings. Default location is in the Vault root.").addText((text) => text.setPlaceholder("tldraw").setValue(this.plugin.settings.folder).onChange(async (value) => {
      this.plugin.settings.folder = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Filename" });
    containerEl.createDiv("", (el) => {
      el.innerHTML = FILENAME_DESC;
    });
    const getFilenameSample = () => {
      return `${FILENAME_SAMPLE}<i>${getDrawingFilename(this.plugin.settings)}</i>`;
    };
    const filenameEl = containerEl.createEl("p", { text: "" });
    filenameEl.innerHTML = getFilenameSample();
    new import_obsidian2.Setting(containerEl).setName("Filename prefix").setDesc("First part of filename").addText((text) => text.setValue(this.plugin.settings.drawingFilenamePrefix).onChange(async (value) => {
      this.plugin.settings.drawingFilenamePrefix = value;
      filenameEl.innerHTML = getFilenameSample();
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Filename Date").setDesc("Last part of the filename. Leave empty, if not needed").addText((text) => text.setValue(this.plugin.settings.drawingFilenameDateTime).onChange(async (value) => {
      this.plugin.settings.drawingFilenameDateTime = value;
      filenameEl.innerHTML = getFilenameSample();
      await this.plugin.saveSettings();
    }));
  }
};

// src/ui/TLdrawView.tsx
var import_obsidian4 = require("obsidian");
var React23 = __toESM(require_react());
var import_client = __toESM(require_client());

// src/ui/context.ts
var React = __toESM(require_react());
var AppContext = React.createContext(void 0);

// src/TLdrawData.ts
var import_obsidian3 = require("obsidian");
var TLdrawData = class {
  constructor() {
    this.compatibilityMode = false;
    this.file = null;
    this.disableCompression = false;
    this.loaded = false;
    this.tldrawJson = null;
  }
  async loadLegacyData(data, file) {
    if (!file) {
      return false;
    }
    if (!data) {
      return false;
    }
    this.compatibilityMode = true;
    this.file = file;
    this.tldrawJson = JSON.parse(data);
    this.loaded = true;
    try {
      this.tldrawDataFile = JSON.parse(data);
    } catch (error) {
      new import_obsidian3.Notice("The file looks corrupted!");
    }
    return true;
  }
};

// node_modules/nanoid/index.browser.js
var nanoid = (size5 = 21) => crypto.getRandomValues(new Uint8Array(size5)).reduce((id, byte) => {
  byte &= 63;
  if (byte < 36) {
    id += byte.toString(36);
  } else if (byte < 62) {
    id += (byte - 26).toString(36).toUpperCase();
  } else if (byte > 62) {
    id += "-";
  } else {
    id += "_";
  }
  return id;
}, "");

// src/ui/ObsTLdrawApp.tsx
var React22 = __toESM(require_react());

// node_modules/@tldraw/core/dist/index.mjs
var N2 = __toESM(require_react(), 1);
var D2 = __toESM(require_react(), 1);
var z2 = __toESM(require_react(), 1);
var Ye = __toESM(require_react(), 1);
var Se2 = __toESM(require_react(), 1);

// node_modules/@tldraw/vec/dist/index.mjs
var h = Object.defineProperty;
var d = (s10, n10, r10) => n10 in s10 ? h(s10, n10, { enumerable: true, configurable: true, writable: true, value: r10 }) : s10[n10] = r10;
var m = (s10, n10, r10) => (d(s10, typeof n10 != "symbol" ? n10 + "" : n10, r10), r10);
var t = class {
  static clamp(n10, r10, u10) {
    return Math.max(r10, typeof u10 != "undefined" ? Math.min(n10, u10) : n10);
  }
  static clampV(n10, r10, u10) {
    return n10.map((b10) => u10 ? t.clamp(b10, r10, u10) : t.clamp(b10, r10));
  }
  static cross(n10, r10, u10) {
    return (r10[0] - n10[0]) * (u10[1] - n10[1]) - (u10[0] - n10[0]) * (r10[1] - n10[1]);
  }
  static snap(n10, r10 = 1) {
    return [Math.round(n10[0] / r10) * r10, Math.round(n10[1] / r10) * r10];
  }
};
var e = t;
m(e, "neg", (n10) => [-n10[0], -n10[1]]), m(e, "add", (n10, r10) => [n10[0] + r10[0], n10[1] + r10[1]]), m(e, "addScalar", (n10, r10) => [n10[0] + r10, n10[1] + r10]), m(e, "sub", (n10, r10) => [n10[0] - r10[0], n10[1] - r10[1]]), m(e, "subScalar", (n10, r10) => [n10[0] - r10, n10[1] - r10]), m(e, "vec", (n10, r10) => [r10[0] - n10[0], r10[1] - n10[1]]), m(e, "mul", (n10, r10) => [n10[0] * r10, n10[1] * r10]), m(e, "mulV", (n10, r10) => [n10[0] * r10[0], n10[1] * r10[1]]), m(e, "div", (n10, r10) => [n10[0] / r10, n10[1] / r10]), m(e, "divV", (n10, r10) => [n10[0] / r10[0], n10[1] / r10[1]]), m(e, "per", (n10) => [n10[1], -n10[0]]), m(e, "dpr", (n10, r10) => n10[0] * r10[0] + n10[1] * r10[1]), m(e, "cpr", (n10, r10) => n10[0] * r10[1] - r10[0] * n10[1]), m(e, "len2", (n10) => n10[0] * n10[0] + n10[1] * n10[1]), m(e, "len", (n10) => Math.hypot(n10[0], n10[1])), m(e, "pry", (n10, r10) => t.dpr(n10, r10) / t.len(r10)), m(e, "uni", (n10) => t.div(n10, t.len(n10))), m(e, "normalize", (n10) => t.uni(n10)), m(e, "tangent", (n10, r10) => t.uni(t.sub(n10, r10))), m(e, "dist2", (n10, r10) => t.len2(t.sub(n10, r10))), m(e, "dist", (n10, r10) => Math.hypot(n10[1] - r10[1], n10[0] - r10[0])), m(e, "fastDist", (n10, r10) => {
  let u10 = [r10[0] - n10[0], r10[1] - n10[1]], b10 = [Math.abs(u10[0]), Math.abs(u10[1])], a10 = 1 / Math.max(b10[0], b10[1]);
  return a10 = a10 * (1.29289 - (b10[0] + b10[1]) * a10 * 0.29289), [u10[0] * a10, u10[1] * a10];
}), m(e, "ang", (n10, r10) => Math.atan2(t.cpr(n10, r10), t.dpr(n10, r10))), m(e, "angle", (n10, r10) => Math.atan2(r10[1] - n10[1], r10[0] - n10[0])), m(e, "med", (n10, r10) => t.mul(t.add(n10, r10), 0.5)), m(e, "rot", (n10, r10 = 0) => [n10[0] * Math.cos(r10) - n10[1] * Math.sin(r10), n10[0] * Math.sin(r10) + n10[1] * Math.cos(r10)]), m(e, "rotWith", (n10, r10, u10 = 0) => {
  if (u10 === 0)
    return n10;
  let b10 = Math.sin(u10), a10 = Math.cos(u10), i10 = n10[0] - r10[0], o10 = n10[1] - r10[1], c10 = i10 * a10 - o10 * b10, l10 = i10 * b10 + o10 * a10;
  return [c10 + r10[0], l10 + r10[1]];
}), m(e, "isEqual", (n10, r10) => n10[0] === r10[0] && n10[1] === r10[1]), m(e, "lrp", (n10, r10, u10) => t.add(n10, t.mul(t.sub(r10, n10), u10))), m(e, "int", (n10, r10, u10, b10, a10 = 1) => {
  let i10 = (t.clamp(u10, b10) - u10) / (b10 - u10);
  return t.add(t.mul(n10, 1 - i10), t.mul(r10, a10));
}), m(e, "ang3", (n10, r10, u10) => {
  let b10 = t.vec(r10, n10), a10 = t.vec(r10, u10);
  return t.ang(b10, a10);
}), m(e, "abs", (n10) => [Math.abs(n10[0]), Math.abs(n10[1])]), m(e, "rescale", (n10, r10) => {
  let u10 = t.len(n10);
  return [r10 * n10[0] / u10, r10 * n10[1] / u10];
}), m(e, "isLeft", (n10, r10, u10) => (r10[0] - n10[0]) * (u10[1] - n10[1]) - (u10[0] - n10[0]) * (r10[1] - n10[1])), m(e, "clockwise", (n10, r10, u10) => t.isLeft(n10, r10, u10) > 0), m(e, "toFixed", (n10) => n10.map((r10) => Math.round(r10 * 100) / 100)), m(e, "nearestPointOnLineThroughPoint", (n10, r10, u10) => t.add(n10, t.mul(r10, t.pry(t.sub(u10, n10), r10)))), m(e, "distanceToLineThroughPoint", (n10, r10, u10) => t.dist(u10, t.nearestPointOnLineThroughPoint(n10, r10, u10))), m(e, "nearestPointOnLineSegment", (n10, r10, u10, b10 = true) => {
  let a10 = t.uni(t.sub(r10, n10)), i10 = t.add(n10, t.mul(a10, t.pry(t.sub(u10, n10), a10)));
  if (b10) {
    if (i10[0] < Math.min(n10[0], r10[0]))
      return n10[0] < r10[0] ? n10 : r10;
    if (i10[0] > Math.max(n10[0], r10[0]))
      return n10[0] > r10[0] ? n10 : r10;
    if (i10[1] < Math.min(n10[1], r10[1]))
      return n10[1] < r10[1] ? n10 : r10;
    if (i10[1] > Math.max(n10[1], r10[1]))
      return n10[1] > r10[1] ? n10 : r10;
  }
  return i10;
}), m(e, "distanceToLineSegment", (n10, r10, u10, b10 = true) => t.dist(u10, t.nearestPointOnLineSegment(n10, r10, u10, b10))), m(e, "nearestPointOnBounds", (n10, r10) => [t.clamp(r10[0], n10.minX, n10.maxX), t.clamp(r10[1], n10.minY, n10.maxY)]), m(e, "distanceToBounds", (n10, r10) => t.dist(r10, t.nearestPointOnBounds(n10, r10))), m(e, "nudge", (n10, r10, u10) => t.isEqual(n10, r10) ? n10 : t.add(n10, t.mul(t.uni(t.sub(r10, n10)), u10))), m(e, "nudgeAtAngle", (n10, r10, u10) => [Math.cos(r10) * u10 + n10[0], Math.sin(r10) * u10 + n10[1]]), m(e, "toPrecision", (n10, r10 = 4) => [+n10[0].toPrecision(r10), +n10[1].toPrecision(r10)]), m(e, "pointsBetween", (n10, r10, u10 = 6) => Array.from(Array(u10)).map((b10, a10) => {
  let i10 = a10 / (u10 - 1), o10 = Math.min(1, 0.5 + Math.abs(0.5 - i10));
  return [...t.lrp(n10, r10, i10), o10];
})), m(e, "slope", (n10, r10) => n10[0] === r10[0] ? NaN : (n10[1] - r10[1]) / (n10[0] - r10[0])), m(e, "max", (...n10) => [Math.max(...n10.map((r10) => r10[0])), Math.max(...n10.map((r10) => r10[1]))]), m(e, "min", (...n10) => [Math.min(...n10.map((r10) => r10[0])), Math.min(...n10.map((r10) => r10[1]))]);
var p = e;

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
var use_gesture_react_esm_exports = {};
__export(use_gesture_react_esm_exports, {
  createUseGesture: () => createUseGesture,
  useDrag: () => useDrag,
  useGesture: () => useGesture,
  useHover: () => useHover,
  useMove: () => useMove,
  usePinch: () => usePinch,
  useScroll: () => useScroll,
  useWheel: () => useWheel
});
var import_actions = __toESM(require_use_gesture_core_actions_cjs());
__reExport(use_gesture_react_esm_exports, __toESM(require_use_gesture_core_actions_cjs()));
var import_react = __toESM(require_react());
var import_core = __toESM(require_use_gesture_core_cjs());
__reExport(use_gesture_react_esm_exports, __toESM(require_use_gesture_core_utils_cjs()));
__reExport(use_gesture_react_esm_exports, __toESM(require_use_gesture_core_types_cjs()));
function useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {
  const ctrl = import_react.default.useMemo(() => new import_core.Controller(handlers), []);
  ctrl.applyHandlers(handlers, nativeHandlers);
  ctrl.applyConfig(config, gestureKey);
  import_react.default.useEffect(ctrl.effect.bind(ctrl));
  import_react.default.useEffect(() => {
    return ctrl.clean.bind(ctrl);
  }, []);
  if (config.target === void 0) {
    return ctrl.bind.bind(ctrl);
  }
  return void 0;
}
function useDrag(handler, config) {
  (0, import_actions.registerAction)(import_actions.dragAction);
  return useRecognizers({
    drag: handler
  }, config || {}, "drag");
}
function usePinch(handler, config) {
  (0, import_actions.registerAction)(import_actions.pinchAction);
  return useRecognizers({
    pinch: handler
  }, config || {}, "pinch");
}
function useWheel(handler, config) {
  (0, import_actions.registerAction)(import_actions.wheelAction);
  return useRecognizers({
    wheel: handler
  }, config || {}, "wheel");
}
function useScroll(handler, config) {
  (0, import_actions.registerAction)(import_actions.scrollAction);
  return useRecognizers({
    scroll: handler
  }, config || {}, "scroll");
}
function useMove(handler, config) {
  (0, import_actions.registerAction)(import_actions.moveAction);
  return useRecognizers({
    move: handler
  }, config || {}, "move");
}
function useHover(handler, config) {
  (0, import_actions.registerAction)(import_actions.hoverAction);
  return useRecognizers({
    hover: handler
  }, config || {}, "hover");
}
function createUseGesture(actions) {
  actions.forEach(import_actions.registerAction);
  return function useGesture2(_handlers2, _config) {
    const {
      handlers,
      nativeHandlers,
      config
    } = (0, import_core.parseMergedHandlers)(_handlers2, _config || {});
    return useRecognizers(handlers, config, void 0, nativeHandlers);
  };
}
function useGesture(handlers, config) {
  const hook = createUseGesture([import_actions.dragAction, import_actions.pinchAction, import_actions.scrollAction, import_actions.wheelAction, import_actions.moveAction, import_actions.hoverAction]);
  return hook(handlers, config || {});
}

// node_modules/@tldraw/core/dist/index.mjs
var V3 = __toESM(require_react(), 1);
var import_react3 = __toESM(require_react(), 1);
var ot = __toESM(require_react(), 1);
var Me = __toESM(require_react(), 1);
var ye2 = __toESM(require_react(), 1);
var ve = __toESM(require_react(), 1);
var pe3 = __toESM(require_react(), 1);
var xe2 = __toESM(require_react(), 1);
var ut = __toESM(require_react(), 1);
var pt = __toESM(require_react(), 1);
var ft = __toESM(require_react(), 1);
var gt = __toESM(require_react(), 1);
var Ke = __toESM(require_react(), 1);
var yt = __toESM(require_react(), 1);
var xt = __toESM(require_react(), 1);
var W2 = __toESM(require_react(), 1);

// node_modules/perfect-freehand/dist/esm/index.js
function $(e10, t10, u10, x10 = (h10) => h10) {
  return e10 * x10(0.5 - t10 * (0.5 - u10));
}
function se(e10) {
  return [-e10[0], -e10[1]];
}
function l(e10, t10) {
  return [e10[0] + t10[0], e10[1] + t10[1]];
}
function a(e10, t10) {
  return [e10[0] - t10[0], e10[1] - t10[1]];
}
function b(e10, t10) {
  return [e10[0] * t10, e10[1] * t10];
}
function he(e10, t10) {
  return [e10[0] / t10, e10[1] / t10];
}
function R(e10) {
  return [e10[1], -e10[0]];
}
function B(e10, t10) {
  return e10[0] * t10[0] + e10[1] * t10[1];
}
function ue(e10, t10) {
  return e10[0] === t10[0] && e10[1] === t10[1];
}
function ge(e10) {
  return Math.hypot(e10[0], e10[1]);
}
function de(e10) {
  return e10[0] * e10[0] + e10[1] * e10[1];
}
function A(e10, t10) {
  return de(a(e10, t10));
}
function G(e10) {
  return he(e10, ge(e10));
}
function ie(e10, t10) {
  return Math.hypot(e10[1] - t10[1], e10[0] - t10[0]);
}
function L(e10, t10, u10) {
  let x10 = Math.sin(u10), h10 = Math.cos(u10), y10 = e10[0] - t10[0], n10 = e10[1] - t10[1], f10 = y10 * h10 - n10 * x10, d10 = y10 * x10 + n10 * h10;
  return [f10 + t10[0], d10 + t10[1]];
}
function K(e10, t10, u10) {
  return l(e10, b(a(t10, e10), u10));
}
function ee(e10, t10, u10) {
  return l(e10, b(t10, u10));
}
var { min: C, PI: xe } = Math;
var pe = 0.275;
var V = xe + 1e-4;
function ce(e10, t10 = {}) {
  let { size: u10 = 16, smoothing: x10 = 0.5, thinning: h10 = 0.5, simulatePressure: y10 = true, easing: n10 = (r10) => r10, start: f10 = {}, end: d10 = {}, last: D10 = false } = t10, { cap: S10 = true, easing: j10 = (r10) => r10 * (2 - r10) } = f10, { cap: q10 = true, easing: c10 = (r10) => --r10 * r10 * r10 + 1 } = d10;
  if (e10.length === 0 || u10 <= 0)
    return [];
  let p10 = e10[e10.length - 1].runningLength, g10 = f10.taper === false ? 0 : f10.taper === true ? Math.max(u10, p10) : f10.taper, T10 = d10.taper === false ? 0 : d10.taper === true ? Math.max(u10, p10) : d10.taper, te2 = Math.pow(u10 * x10, 2), _10 = [], M10 = [], H10 = e10.slice(0, 10).reduce((r10, i10) => {
    let o10 = i10.pressure;
    if (y10) {
      let s10 = C(1, i10.distance / u10), W10 = C(1, 1 - s10);
      o10 = C(1, r10 + (W10 - r10) * (s10 * pe));
    }
    return (r10 + o10) / 2;
  }, e10[0].pressure), m10 = $(u10, h10, e10[e10.length - 1].pressure, n10), U10, X10 = e10[0].vector, z10 = e10[0].point, F10 = z10, O10 = z10, E10 = F10, J10 = false;
  for (let r10 = 0; r10 < e10.length; r10++) {
    let { pressure: i10 } = e10[r10], { point: o10, vector: s10, distance: W10, runningLength: I10 } = e10[r10];
    if (r10 < e10.length - 1 && p10 - I10 < 3)
      continue;
    if (h10) {
      if (y10) {
        let v11 = C(1, W10 / u10), Z10 = C(1, 1 - v11);
        i10 = C(1, H10 + (Z10 - H10) * (v11 * pe));
      }
      m10 = $(u10, h10, i10, n10);
    } else
      m10 = u10 / 2;
    U10 === void 0 && (U10 = m10);
    let le3 = I10 < g10 ? j10(I10 / g10) : 1, fe2 = p10 - I10 < T10 ? c10((p10 - I10) / T10) : 1;
    m10 = Math.max(0.01, m10 * Math.min(le3, fe2));
    let re3 = (r10 < e10.length - 1 ? e10[r10 + 1] : e10[r10]).vector, Y10 = r10 < e10.length - 1 ? B(s10, re3) : 1, be4 = B(s10, X10) < 0 && !J10, ne2 = Y10 !== null && Y10 < 0;
    if (be4 || ne2) {
      let v11 = b(R(X10), m10);
      for (let Z10 = 1 / 13, w10 = 0; w10 <= 1; w10 += Z10)
        O10 = L(a(o10, v11), o10, V * w10), _10.push(O10), E10 = L(l(o10, v11), o10, V * -w10), M10.push(E10);
      z10 = O10, F10 = E10, ne2 && (J10 = true);
      continue;
    }
    if (J10 = false, r10 === e10.length - 1) {
      let v11 = b(R(s10), m10);
      _10.push(a(o10, v11)), M10.push(l(o10, v11));
      continue;
    }
    let oe2 = b(R(K(re3, s10, Y10)), m10);
    O10 = a(o10, oe2), (r10 <= 1 || A(z10, O10) > te2) && (_10.push(O10), z10 = O10), E10 = l(o10, oe2), (r10 <= 1 || A(F10, E10) > te2) && (M10.push(E10), F10 = E10), H10 = i10, X10 = s10;
  }
  let P10 = e10[0].point.slice(0, 2), k10 = e10.length > 1 ? e10[e10.length - 1].point.slice(0, 2) : l(e10[0].point, [1, 1]), Q10 = [], N10 = [];
  if (e10.length === 1) {
    if (!(g10 || T10) || D10) {
      let r10 = ee(P10, G(R(a(P10, k10))), -(U10 || m10)), i10 = [];
      for (let o10 = 1 / 13, s10 = o10; s10 <= 1; s10 += o10)
        i10.push(L(r10, P10, V * 2 * s10));
      return i10;
    }
  } else {
    if (!(g10 || T10 && e10.length === 1))
      if (S10)
        for (let i10 = 1 / 13, o10 = i10; o10 <= 1; o10 += i10) {
          let s10 = L(M10[0], P10, V * o10);
          Q10.push(s10);
        }
      else {
        let i10 = a(_10[0], M10[0]), o10 = b(i10, 0.5), s10 = b(i10, 0.51);
        Q10.push(a(P10, o10), a(P10, s10), l(P10, s10), l(P10, o10));
      }
    let r10 = R(se(e10[e10.length - 1].vector));
    if (T10 || g10 && e10.length === 1)
      N10.push(k10);
    else if (q10) {
      let i10 = ee(k10, r10, m10);
      for (let o10 = 1 / 29, s10 = o10; s10 < 1; s10 += o10)
        N10.push(L(i10, k10, V * 3 * s10));
    } else
      N10.push(l(k10, b(r10, m10)), l(k10, b(r10, m10 * 0.99)), a(k10, b(r10, m10 * 0.99)), a(k10, b(r10, m10)));
  }
  return _10.concat(N10, M10.reverse(), Q10);
}
function me(e10, t10 = {}) {
  var q10;
  let { streamline: u10 = 0.5, size: x10 = 16, last: h10 = false } = t10;
  if (e10.length === 0)
    return [];
  let y10 = 0.15 + (1 - u10) * 0.85, n10 = Array.isArray(e10[0]) ? e10 : e10.map(({ x: c10, y: p10, pressure: g10 = 0.5 }) => [c10, p10, g10]);
  if (n10.length === 2) {
    let c10 = n10[1];
    n10 = n10.slice(0, -1);
    for (let p10 = 1; p10 < 5; p10++)
      n10.push(K(n10[0], c10, p10 / 4));
  }
  n10.length === 1 && (n10 = [...n10, [...l(n10[0], [1, 1]), ...n10[0].slice(2)]]);
  let f10 = [{ point: [n10[0][0], n10[0][1]], pressure: n10[0][2] >= 0 ? n10[0][2] : 0.25, vector: [1, 1], distance: 0, runningLength: 0 }], d10 = false, D10 = 0, S10 = f10[0], j10 = n10.length - 1;
  for (let c10 = 1; c10 < n10.length; c10++) {
    let p10 = h10 && c10 === j10 ? n10[c10].slice(0, 2) : K(S10.point, n10[c10], y10);
    if (ue(S10.point, p10))
      continue;
    let g10 = ie(p10, S10.point);
    if (D10 += g10, c10 < j10 && !d10) {
      if (D10 < x10)
        continue;
      d10 = true;
    }
    S10 = { point: p10, pressure: n10[c10][2] >= 0 ? n10[c10][2] : 0.5, vector: G(a(S10.point, p10)), distance: g10, runningLength: D10 }, f10.push(S10);
  }
  return f10[0].vector = ((q10 = f10[1]) == null ? void 0 : q10.vector) || [0, 0], f10;
}
function ae(e10, t10 = {}) {
  return ce(me(e10, t10), t10);
}
var _e = ae;

// node_modules/@tldraw/core/dist/index.mjs
var Ue = __toESM(require_react(), 1);
var he2 = __toESM(require_react(), 1);
var ne = __toESM(require_react(), 1);
var G3 = __toESM(require_react(), 1);
var K3 = __toESM(require_react(), 1);
var ae2 = __toESM(require_react(), 1);
var $e = __toESM(require_react(), 1);
var $3 = __toESM(require_react(), 1);
var q2 = __toESM(require_react(), 1);
var fe = __toESM(require_react(), 1);
var Ne = __toESM(require_react(), 1);
var F2 = __toESM(require_react(), 1);
var Te2 = __toESM(require_react(), 1);
var ge2 = __toESM(require_react(), 1);
var de3 = __toESM(require_react(), 1);
var oe = __toESM(require_react(), 1);
var re = __toESM(require_react(), 1);
var Re = __toESM(require_react(), 1);
var We = __toESM(require_react(), 1);
var le2 = __toESM(require_react(), 1);
var j2 = __toESM(require_react(), 1);
var Be = __toESM(require_react(), 1);
var ce3 = __toESM(require_react(), 1);
var ie3 = __toESM(require_react(), 1);
var se3 = __toESM(require_react(), 1);
var me2 = __toESM(require_react(), 1);

// node_modules/@tldraw/intersect/dist/index.mjs
var A2 = Object.defineProperty;
var M = Object.defineProperties;
var q = Object.getOwnPropertyDescriptors;
var X = Object.getOwnPropertySymbols;
var V2 = Object.prototype.hasOwnProperty;
var $2 = Object.prototype.propertyIsEnumerable;
var Y = (e10, n10, t10) => n10 in e10 ? A2(e10, n10, { enumerable: true, configurable: true, writable: true, value: t10 }) : e10[n10] = t10;
var g = (e10, n10) => {
  for (var t10 in n10 || (n10 = {}))
    V2.call(n10, t10) && Y(e10, t10, n10[t10]);
  if (X)
    for (var t10 of X(n10))
      $2.call(n10, t10) && Y(e10, t10, n10[t10]);
  return e10;
};
var T = (e10, n10) => M(e10, q(n10));
function l2(e10, ...n10) {
  return { didIntersect: n10.length > 0, message: e10, points: n10 };
}
function I(e10, n10, t10 = 0) {
  let r10 = [e10[0] + n10[0] / 2, e10[1] + n10[1] / 2], i10 = e.rotWith(e10, r10, t10), u10 = e.rotWith(e.add(e10, [n10[0], 0]), r10, t10), s10 = e.rotWith(e.add(e10, n10), r10, t10), o10 = e.rotWith(e.add(e10, [0, n10[1]]), r10, t10);
  return [["top", [i10, u10]], ["right", [u10, s10]], ["bottom", [s10, o10]], ["left", [o10, i10]]];
}
function v(e10, n10, t10) {
  if (t10 === e10 || t10 === n10)
    return true;
  let r10 = Math.PI * 2, i10 = (n10 - e10 + r10) % r10, u10 = (t10 - e10 + r10) % r10;
  return i10 <= Math.PI != u10 > i10;
}
function ie2(e10, n10) {
  let t10 = e.slope(e10[0], e10[1]), r10 = e.slope(n10[0], n10[1]);
  if (t10 === r10)
    return;
  if (Number.isNaN(t10) && !Number.isNaN(r10))
    return [e10[0][0], (e10[0][0] - n10[0][0]) * r10 + n10[0][1]];
  if (Number.isNaN(r10) && !Number.isNaN(t10))
    return [n10[0][0], (n10[0][0] - e10[0][0]) * t10 + e10[0][1]];
  let i10 = (t10 * e10[0][0] - r10 * n10[0][0] + n10[0][1] - e10[0][1]) / (t10 - r10), u10 = r10 * (i10 - n10[0][0]) + n10[0][1];
  return [i10, u10];
}
function x(e10, n10, t10, r10) {
  let [i10, u10] = e10, [s10, o10] = n10, [c10, m10] = t10, [b10, f10] = r10;
  if (o10 / s10 !== (f10 - m10) / (b10 - c10)) {
    let p10 = s10 * (f10 - m10) - o10 * (b10 - c10);
    if (p10 !== 0) {
      let L10 = ((u10 - m10) * (b10 - c10) - (i10 - c10) * (f10 - m10)) / p10, h10 = ((u10 - m10) * s10 - (i10 - c10) * o10) / p10;
      if (L10 >= 0 && h10 >= 0 && h10 <= 1)
        return l2("intersection", [i10 + L10 * s10, u10 + L10 * o10]);
    }
  }
  return l2("no intersection");
}
function N(e10, n10, t10, r10, i10 = 0) {
  return G2(t10, r10, i10, e10, n10);
}
function F(e10, n10, t10, r10, i10, u10) {
  let s10 = e10, o10 = e.mul(n10, 999999999);
  return y(s10, o10, t10, r10, i10, u10);
}
function se2(e10, n10, t10, r10 = 0) {
  let { minX: i10, minY: u10, width: s10, height: o10 } = t10;
  return N(e10, n10, [i10, u10], [s10, o10], r10);
}
function B2(e10, n10, t10, r10) {
  let i10 = e.sub(e10, t10), u10 = e.sub(r10, t10), s10 = e.sub(n10, e10), o10 = u10[0] * i10[1] - u10[1] * i10[0], c10 = s10[0] * i10[1] - s10[1] * i10[0], m10 = u10[1] * s10[0] - u10[0] * s10[1];
  if (o10 === 0 || c10 === 0)
    return l2("coincident");
  if (m10 === 0)
    return l2("parallel");
  if (m10 !== 0) {
    let b10 = o10 / m10, f10 = c10 / m10;
    if (0 <= b10 && b10 <= 1 && 0 <= f10 && f10 <= 1)
      return l2("intersection", e.add(e10, e.mul(s10, b10)));
  }
  return l2("no intersection");
}
function j(e10, n10, t10, r10) {
  return E(t10, r10, e10, n10);
}
function k(e10, n10, t10, r10, i10, u10) {
  let s10 = e.angle(t10, i10), o10 = e.angle(t10, u10), c10 = U(t10, r10, r10, 0, e10, n10);
  if (!c10.didIntersect)
    return l2("no intersection");
  let m10 = c10.points.filter((b10) => v(s10, o10, e.angle(t10, b10)));
  return m10.length === 0 ? l2("no intersection") : l2("intersection", ...m10);
}
function R2(e10, n10, t10, r10) {
  let i10 = (n10[0] - e10[0]) * (n10[0] - e10[0]) + (n10[1] - e10[1]) * (n10[1] - e10[1]), u10 = 2 * ((n10[0] - e10[0]) * (e10[0] - t10[0]) + (n10[1] - e10[1]) * (e10[1] - t10[1])), s10 = t10[0] * t10[0] + t10[1] * t10[1] + e10[0] * e10[0] + e10[1] * e10[1] - 2 * (t10[0] * e10[0] + t10[1] * e10[1]) - r10 * r10, o10 = u10 * u10 - 4 * i10 * s10;
  if (o10 < 0)
    return l2("outside");
  if (o10 === 0)
    return l2("tangent");
  let c10 = Math.sqrt(o10), m10 = (-u10 + c10) / (2 * i10), b10 = (-u10 - c10) / (2 * i10);
  if ((m10 < 0 || m10 > 1) && (b10 < 0 || b10 > 1))
    return m10 < 0 && b10 < 0 || m10 > 1 && b10 > 1 ? l2("outside") : l2("inside");
  let f10 = [];
  return 0 <= m10 && m10 <= 1 && f10.push(e.lrp(e10, n10, m10)), 0 <= b10 && b10 <= 1 && f10.push(e.lrp(e10, n10, b10)), l2("intersection", ...f10);
}
function y(e10, n10, t10, r10, i10, u10 = 0) {
  if (r10 === 0 || i10 === 0 || e.isEqual(e10, n10))
    return l2("no intersection");
  r10 = r10 < 0 ? r10 : -r10, i10 = i10 < 0 ? i10 : -i10, e10 = e.sub(e.rotWith(e10, t10, -u10), t10), n10 = e.sub(e.rotWith(n10, t10, -u10), t10);
  let s10 = e.sub(n10, e10), o10 = s10[0] * s10[0] / r10 / r10 + s10[1] * s10[1] / i10 / i10, c10 = 2 * e10[0] * s10[0] / r10 / r10 + 2 * e10[1] * s10[1] / i10 / i10, m10 = e10[0] * e10[0] / r10 / r10 + e10[1] * e10[1] / i10 / i10 - 1, b10 = [], f10 = c10 * c10 - 4 * o10 * m10;
  if (f10 === 0)
    b10.push(-c10 / 2 / o10);
  else if (f10 > 0) {
    let L10 = Math.sqrt(f10);
    b10.push((-c10 + L10) / 2 / o10), b10.push((-c10 - L10) / 2 / o10);
  }
  let p10 = b10.filter((L10) => L10 >= 0 && L10 <= 1).map((L10) => e.add(t10, e.add(e10, e.mul(e.sub(n10, e10), L10)))).map((L10) => e.rotWith(L10, t10, u10));
  return l2("intersection", ...p10);
}
function ce2(e10, n10, t10) {
  return z(t10, e10, n10);
}
function S(e10, n10, t10) {
  let r10 = [];
  for (let i10 = 1; i10 < t10.length; i10++) {
    let u10 = B2(e10, n10, t10[i10 - 1], t10[i10]);
    u10 && r10.push(...u10.points);
  }
  return r10.length === 0 ? l2("no intersection") : l2("intersection", ...t10);
}
function D(e10, n10, t10) {
  let r10 = [];
  for (let i10 = 1; i10 < t10.length + 1; i10++) {
    let u10 = B2(e10, n10, t10[i10 - 1], t10[i10 % t10.length]);
    u10 && r10.push(...u10.points);
  }
  return r10.length === 0 ? l2("no intersection") : l2("intersection", ...t10);
}
function G2(e10, n10, t10, r10, i10) {
  return I(e10, n10, t10).reduce((s10, [o10, [c10, m10]]) => {
    let b10 = x(r10, i10, c10, m10);
    return b10 && s10.push(l2(o10, ...b10.points)), s10;
  }, []).filter((s10) => s10.didIntersect);
}
function E(e10, n10, t10, r10) {
  return I(e10, n10).reduce((u10, [s10, [o10, c10]]) => {
    let m10 = B2(t10, r10, o10, c10);
    return m10 && u10.push(l2(s10, ...m10.points)), u10;
  }, []).filter((u10) => u10.didIntersect);
}
function a2(e10, n10, t10, r10) {
  return I(e10, n10).reduce((u10, [s10, [o10, c10]]) => {
    let m10 = E(t10, r10, o10, c10);
    return u10.push(...m10.map((b10) => l2(`${s10} ${b10.message}`, ...b10.points))), u10;
  }, []).filter((u10) => u10.didIntersect);
}
function H(e10, n10, t10, r10, i10, u10) {
  return I(e10, n10).reduce((o10, [c10, [m10, b10]]) => {
    let f10 = O(t10, r10, i10, u10, m10, b10);
    return f10 && o10.push(T(g({}, f10), { message: c10 })), o10;
  }, []).filter((o10) => o10.didIntersect);
}
function C2(e10, n10, t10, r10) {
  return I(e10, n10).reduce((u10, [s10, [o10, c10]]) => {
    let m10 = R2(o10, c10, t10, r10);
    return m10 && u10.push(T(g({}, m10), { message: s10 })), u10;
  }, []).filter((u10) => u10.didIntersect);
}
function J(e10, n10, t10, r10, i10, u10 = 0) {
  return I(e10, n10).reduce((o10, [c10, [m10, b10]]) => {
    let f10 = y(m10, b10, t10, r10, i10, u10);
    return f10 && o10.push(T(g({}, f10), { message: c10 })), o10;
  }, []).filter((o10) => o10.didIntersect);
}
function w(e10, n10, t10) {
  return I(e10, n10).reduce((i10, [u10, [s10, o10]]) => {
    let c10 = S(s10, o10, t10);
    return c10.didIntersect && i10.push(l2(u10, ...c10.points)), i10;
  }, []).filter((i10) => i10.didIntersect);
}
function K2(e10, n10, t10) {
  return I(e10, n10).reduce((i10, [u10, [s10, o10]]) => {
    let c10 = D(s10, o10, t10);
    return c10.didIntersect && i10.push(l2(u10, ...c10.points)), i10;
  }, []).filter((i10) => i10.didIntersect);
}
function O(e10, n10, t10, r10, i10, u10) {
  return k(i10, u10, e10, n10, t10, r10);
}
function _(e10, n10, t10, r10, i10, u10) {
  return H(i10, u10, e10, n10, t10, r10);
}
function be(e10, n10, t10, r10, i10) {
  let { minX: u10, minY: s10, width: o10, height: c10 } = i10;
  return _(e10, n10, t10, r10, [u10, s10], [o10, c10]);
}
function de2(e10, n10, t10, r10) {
  return R2(t10, r10, e10, n10);
}
function le(e10, n10, t10, r10) {
  let i10 = t10[0] - e10[0], u10 = t10[1] - e10[1], s10 = Math.sqrt(i10 * i10 + u10 * u10), o10 = (s10 * s10 - r10 * r10 + n10 * n10) / (2 * s10), c10 = Math.sqrt(n10 * n10 - o10 * o10);
  return i10 /= s10, u10 /= s10, l2("intersection", [e10[0] + i10 * o10 - u10 * c10, e10[1] + u10 * o10 + i10 * c10], [e10[0] + i10 * o10 + u10 * c10, e10[1] + u10 * o10 - i10 * c10]);
}
function U(e10, n10, t10, r10 = 0, i10, u10) {
  return n10 === t10 ? R2(i10, u10, e10, n10) : y(i10, u10, e10, n10, t10, r10);
}
function W(e10, n10, t10, r10 = 0, i10, u10) {
  return n10 === t10 ? C2(i10, u10, e10, n10) : J(i10, u10, e10, n10, t10, r10);
}
function pe2(e10, n10, t10, r10, i10) {
  let { minX: u10, minY: s10, width: o10, height: c10 } = i10;
  return W(e10, n10, t10, r10, [u10, s10], [o10, c10]);
}
function z(e10, n10, t10) {
  let { minX: r10, minY: i10, width: u10, height: s10 } = e10;
  return j(n10, t10, [r10, i10], [u10, s10]);
}
function Te(e10, n10) {
  return a2([e10.minX, e10.minY], [e10.width, e10.height], [n10.minX, n10.minY], [n10.width, n10.height]);
}
function ye(e10, n10) {
  return Q(n10, e10);
}
function Se(e10, n10) {
  return ee2(n10, e10);
}
function Q(e10, n10) {
  return w([n10.minX, n10.minY], [n10.width, n10.height], e10);
}
function ee2(e10, n10) {
  return K2([n10.minX, n10.minY], [n10.width, n10.height], e10);
}

// node_modules/@tldraw/core/dist/index.mjs
var Ae = __toESM(require_react(), 1);
var qt = Object.defineProperty;
var Qt = Object.defineProperties;
var Jt = Object.getOwnPropertyDescriptors;
var Ce = Object.getOwnPropertySymbols;
var Ze = Object.prototype.hasOwnProperty;
var qe = Object.prototype.propertyIsEnumerable;
var Oe = (r10, e10, t10) => e10 in r10 ? qt(r10, e10, { enumerable: true, configurable: true, writable: true, value: t10 }) : r10[e10] = t10;
var g2 = (r10, e10) => {
  for (var t10 in e10 || (e10 = {}))
    Ze.call(e10, t10) && Oe(r10, t10, e10[t10]);
  if (Ce)
    for (var t10 of Ce(e10))
      qe.call(e10, t10) && Oe(r10, t10, e10[t10]);
  return r10;
};
var U2 = (r10, e10) => Qt(r10, Jt(e10));
var O2 = (r10, e10) => {
  var t10 = {};
  for (var n10 in r10)
    Ze.call(r10, n10) && e10.indexOf(n10) < 0 && (t10[n10] = r10[n10]);
  if (r10 != null && Ce)
    for (var n10 of Ce(r10))
      e10.indexOf(n10) < 0 && qe.call(r10, n10) && (t10[n10] = r10[n10]);
  return t10;
};
var E2 = (r10, e10, t10) => (Oe(r10, typeof e10 != "symbol" ? e10 + "" : e10, t10), t10);
var Le = Se2.createContext({});
function R3() {
  return Se2.useContext(Le);
}
var Qe = ((o10) => (o10.TransformSelected = "transform_selected", o10.TranslateSelected = "translate_selected", o10.TransformAll = "transform_all", o10.TranslateAll = "translate_all", o10))(Qe || {});
var we = ((o10) => (o10.Top = "top_edge", o10.Right = "right_edge", o10.Bottom = "bottom_edge", o10.Left = "left_edge", o10))(we || {});
var He = ((o10) => (o10.TopLeft = "top_left_corner", o10.TopRight = "top_right_corner", o10.BottomRight = "bottom_right_corner", o10.BottomLeft = "bottom_left_corner", o10))(He || {});
var Je = ((s10) => (s10.minX = "minX", s10.midX = "midX", s10.maxX = "maxX", s10.minY = "minY", s10.midY = "midY", s10.maxY = "maxY", s10))(Je || {});
String.prototype.replaceAll || (String.prototype.replaceAll = function(r10, e10) {
  return Object.prototype.toString.call(r10).toLowerCase() === "[object regexp]" ? this.replace(r10, e10) : this.replace(new RegExp(r10, "g"), e10);
});
var Ie = Math.PI * 2;
var k2 = class {
  static lerp(e10, t10, n10) {
    return n10 = k2.clamp(n10, 0, 1), e10 * (1 - n10) + t10 * n10;
  }
  static lerpColor(e10, t10, n10 = 0.5) {
    function o10(l10) {
      let c10 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(l10);
      return [parseInt(c10[1], 16), parseInt(c10[2], 16), parseInt(c10[3], 16)];
    }
    function i10(l10) {
      return "#" + ((1 << 24) + (l10[0] << 16) + (l10[1] << 8) + l10[2]).toString(16).slice(1);
    }
    let s10 = o10(e10) || [0, 0, 0], a10 = o10(t10) || [0, 0, 0], d10 = s10.slice();
    for (let l10 = 0; l10 < 3; l10++)
      d10[l10] = Math.round(d10[l10] + n10 * (a10[l10] - s10[l10]));
    return i10(d10);
  }
  static modulate(e10, t10, n10, o10 = false) {
    let [i10, s10] = t10, [a10, d10] = n10, l10 = a10 + (e10 - i10) / (s10 - i10) * (d10 - a10);
    return o10 ? a10 < d10 ? Math.max(Math.min(l10, d10), a10) : Math.max(Math.min(l10, a10), d10) : l10;
  }
  static clamp(e10, t10, n10) {
    return Math.max(t10, typeof n10 != "undefined" ? Math.min(e10, n10) : e10);
  }
  static deepClone(e10) {
    if (e10 === null)
      return e10;
    if (Array.isArray(e10))
      return [...e10];
    if (typeof e10 == "object") {
      let t10 = g2({}, e10);
      return Object.keys(t10).forEach((n10) => t10[n10] = typeof e10[n10] == "object" ? k2.deepClone(e10[n10]) : e10[n10]), t10;
    }
    return e10;
  }
  static rng(e10 = "") {
    let t10 = 0, n10 = 0, o10 = 0, i10 = 0;
    function s10() {
      let a10 = t10 ^ t10 << 11;
      return t10 = n10, n10 = o10, o10 = i10, i10 ^= (i10 >>> 19 ^ a10 ^ a10 >>> 8) >>> 0, i10 / 4294967296;
    }
    for (let a10 = 0; a10 < e10.length + 64; a10++)
      t10 ^= e10.charCodeAt(a10) | 0, s10();
    return s10;
  }
  static pointsToLineSegments(e10, t10 = false) {
    let n10 = [];
    for (let o10 = 1; o10 < e10.length; o10++)
      n10.push([e10[o10 - 1], e10[o10]]);
    return t10 && n10.push([e10[e10.length - 1], e10[0]]), n10;
  }
  static getRectangleSides(e10, t10, n10 = 0) {
    let o10 = [e10[0] + t10[0] / 2, e10[1] + t10[1] / 2], i10 = e.rotWith(e10, o10, n10), s10 = e.rotWith(e.add(e10, [t10[0], 0]), o10, n10), a10 = e.rotWith(e.add(e10, t10), o10, n10), d10 = e.rotWith(e.add(e10, [0, t10[1]]), o10, n10);
    return [["top", [i10, s10]], ["right", [s10, a10]], ["bottom", [a10, d10]], ["left", [d10, i10]]];
  }
  static circleFromThreePoints(e10, t10, n10) {
    let [o10, i10] = e10, [s10, a10] = t10, [d10, l10] = n10, c10 = o10 * (a10 - l10) - i10 * (s10 - d10) + s10 * l10 - d10 * a10, m10 = (o10 * o10 + i10 * i10) * (l10 - a10) + (s10 * s10 + a10 * a10) * (i10 - l10) + (d10 * d10 + l10 * l10) * (a10 - i10), p10 = (o10 * o10 + i10 * i10) * (s10 - d10) + (s10 * s10 + a10 * a10) * (d10 - o10) + (d10 * d10 + l10 * l10) * (o10 - s10), u10 = -m10 / (2 * c10), y10 = -p10 / (2 * c10);
    return [u10, y10, Math.hypot(u10 - o10, y10 - i10)];
  }
  static perimeterOfEllipse(e10, t10) {
    let n10 = Math.pow(e10 - t10, 2) / Math.pow(e10 + t10, 2);
    return Math.PI * (e10 + t10) * (1 + 3 * n10 / (10 + Math.sqrt(4 - 3 * n10)));
  }
  static shortAngleDist(e10, t10) {
    let n10 = Math.PI * 2, o10 = (t10 - e10) % n10;
    return 2 * o10 % n10 - o10;
  }
  static longAngleDist(e10, t10) {
    return Math.PI * 2 - k2.shortAngleDist(e10, t10);
  }
  static lerpAngles(e10, t10, n10) {
    return e10 + k2.shortAngleDist(e10, t10) * n10;
  }
  static angleDelta(e10, t10) {
    return k2.shortAngleDist(e10, t10);
  }
  static getSweep(e10, t10, n10) {
    return k2.angleDelta(e.angle(e10, t10), e.angle(e10, n10));
  }
  static clampRadians(e10) {
    return (Math.PI * 2 + e10) % (Math.PI * 2);
  }
  static snapAngleToSegments(e10, t10) {
    let n10 = Math.PI * 2 / t10;
    return Math.floor((k2.clampRadians(e10) + n10 / 2) / n10) * n10;
  }
  static isAngleBetween(e10, t10, n10) {
    if (n10 === e10 || n10 === t10)
      return true;
    let o10 = (t10 - e10 + Ie) % Ie, i10 = (n10 - e10 + Ie) % Ie;
    return o10 <= Math.PI != i10 > o10;
  }
  static degreesToRadians(e10) {
    return e10 * Math.PI / 180;
  }
  static radiansToDegrees(e10) {
    return e10 * 180 / Math.PI;
  }
  static getArcLength(e10, t10, n10, o10) {
    let i10 = k2.getSweep(e10, n10, o10);
    return t10 * (2 * Math.PI) * (i10 / (2 * Math.PI));
  }
  static getSweepFlag(e10, t10, n10) {
    let o10 = e.angle(e10, n10);
    return (e.angle(e10, t10) - o10 + 3 * Math.PI) % (2 * Math.PI) - Math.PI > 0 ? 0 : 1;
  }
  static getLargeArcFlag(e10, t10, n10) {
    let o10 = e.angle(n10, e10), s10 = (e.angle(n10, t10) - o10 + 3 * Math.PI) % (2 * Math.PI) - Math.PI;
    return Math.abs(s10) > Math.PI / 2 ? 0 : 1;
  }
  static getArcDashOffset(e10, t10, n10, o10, i10) {
    let s10 = k2.getSweepFlag(e10, n10, o10), a10 = k2.getArcLength(e10, t10, n10, o10);
    return -(s10 < 0 ? a10 : 2 * Math.PI * e10[2] - a10) / 2 + i10;
  }
  static getEllipseDashOffset(e10, t10) {
    return -(2 * Math.PI * e10[2]) / 2 + -t10;
  }
  static pointInCircle(e10, t10, n10) {
    return e.dist(e10, t10) <= n10;
  }
  static pointInEllipse(e10, t10, n10, o10, i10 = 0) {
    i10 = i10 || 0;
    let s10 = Math.cos(i10), a10 = Math.sin(i10), d10 = e.sub(e10, t10), l10 = s10 * d10[0] + a10 * d10[1], c10 = a10 * d10[0] - s10 * d10[1];
    return l10 * l10 / (n10 * n10) + c10 * c10 / (o10 * o10) <= 1;
  }
  static pointInRect(e10, t10) {
    return !(e10[0] < t10[0] || e10[0] > e10[0] + t10[0] || e10[1] < t10[1] || e10[1] > e10[1] + t10[1]);
  }
  static pointInPolygon(e10, t10) {
    let n10 = 0;
    return t10.forEach((o10, i10) => {
      let s10 = t10[(i10 + 1) % t10.length];
      o10[1] <= e10[1] ? s10[1] > e10[1] && e.cross(o10, s10, e10) > 0 && (n10 += 1) : s10[1] <= e10[1] && e.cross(o10, s10, e10) < 0 && (n10 -= 1);
    }), n10 !== 0;
  }
  static pointInBounds(e10, t10) {
    return !(e10[0] < t10.minX || e10[0] > t10.maxX || e10[1] < t10.minY || e10[1] > t10.maxY);
  }
  static pointInPolyline(e10, t10, n10 = 3) {
    for (let o10 = 1; o10 < t10.length; o10++)
      if (e.distanceToLineSegment(t10[o10 - 1], t10[o10], e10) < n10)
        return true;
    return false;
  }
  static getBoundsSides(e10) {
    return this.getRectangleSides([e10.minX, e10.minY], [e10.width, e10.height]);
  }
  static expandBounds(e10, t10) {
    return { minX: e10.minX - t10, minY: e10.minY - t10, maxX: e10.maxX + t10, maxY: e10.maxY + t10, width: e10.width + t10 * 2, height: e10.height + t10 * 2 };
  }
  static boundsCollide(e10, t10) {
    return !(e10.maxX < t10.minX || e10.minX > t10.maxX || e10.maxY < t10.minY || e10.minY > t10.maxY);
  }
  static boundsContain(e10, t10) {
    return e10.minX < t10.minX && e10.minY < t10.minY && e10.maxY > t10.maxY && e10.maxX > t10.maxX;
  }
  static boundsContained(e10, t10) {
    return k2.boundsContain(t10, e10);
  }
  static boundsAreEqual(e10, t10) {
    return !(t10.maxX !== e10.maxX || t10.minX !== e10.minX || t10.maxY !== e10.maxY || t10.minY !== e10.minY);
  }
  static getBoundsFromPoints(e10, t10 = 0) {
    let n10 = 1 / 0, o10 = 1 / 0, i10 = -1 / 0, s10 = -1 / 0;
    if (e10.length < 2)
      n10 = 0, o10 = 0, i10 = 1, s10 = 1;
    else
      for (let [a10, d10] of e10)
        n10 = Math.min(a10, n10), o10 = Math.min(d10, o10), i10 = Math.max(a10, i10), s10 = Math.max(d10, s10);
    return t10 !== 0 ? k2.getBoundsFromPoints(e10.map((a10) => e.rotWith(a10, [(n10 + i10) / 2, (o10 + s10) / 2], t10))) : { minX: n10, minY: o10, maxX: i10, maxY: s10, width: Math.max(1, i10 - n10), height: Math.max(1, s10 - o10) };
  }
  static centerBounds(e10, t10) {
    let n10 = this.getBoundsCenter(e10), o10 = t10[0] - n10[0], i10 = t10[1] - n10[1];
    return this.translateBounds(e10, [o10, i10]);
  }
  static snapBoundsToGrid(e10, t10) {
    let n10 = Math.round(e10.minX / t10) * t10, o10 = Math.round(e10.minY / t10) * t10, i10 = Math.round(e10.maxX / t10) * t10, s10 = Math.round(e10.maxY / t10) * t10;
    return { minX: n10, minY: o10, maxX: i10, maxY: s10, width: Math.max(1, i10 - n10), height: Math.max(1, s10 - o10) };
  }
  static translateBounds(e10, t10) {
    return { minX: e10.minX + t10[0], minY: e10.minY + t10[1], maxX: e10.maxX + t10[0], maxY: e10.maxY + t10[1], width: e10.width, height: e10.height };
  }
  static rotateBounds(e10, t10, n10) {
    let [o10, i10] = e.rotWith([e10.minX, e10.minY], t10, n10), [s10, a10] = e.rotWith([e10.maxX, e10.maxY], t10, n10);
    return { minX: o10, minY: i10, maxX: s10, maxY: a10, width: e10.width, height: e10.height };
  }
  static getRotatedEllipseBounds(e10, t10, n10, o10, i10 = 0) {
    let s10 = Math.cos(i10), a10 = Math.sin(i10), d10 = Math.hypot(n10 * s10, o10 * a10), l10 = Math.hypot(n10 * a10, o10 * s10);
    return { minX: e10 + n10 - d10, minY: t10 + o10 - l10, maxX: e10 + n10 + d10, maxY: t10 + o10 + l10, width: d10 * 2, height: l10 * 2 };
  }
  static getExpandedBounds(e10, t10) {
    let n10 = Math.min(e10.minX, t10.minX), o10 = Math.min(e10.minY, t10.minY), i10 = Math.max(e10.maxX, t10.maxX), s10 = Math.max(e10.maxY, t10.maxY), a10 = Math.abs(i10 - n10), d10 = Math.abs(s10 - o10);
    return { minX: n10, minY: o10, maxX: i10, maxY: s10, width: a10, height: d10 };
  }
  static getCommonBounds(e10) {
    if (e10.length < 2)
      return e10[0];
    let t10 = e10[0];
    for (let n10 = 1; n10 < e10.length; n10++)
      t10 = k2.getExpandedBounds(t10, e10[n10]);
    return t10;
  }
  static getRotatedCorners(e10, t10 = 0) {
    let n10 = [e10.minX + e10.width / 2, e10.minY + e10.height / 2];
    return [[e10.minX, e10.minY], [e10.maxX, e10.minY], [e10.maxX, e10.maxY], [e10.minX, e10.maxY]].map((o10) => e.rotWith(o10, n10, t10));
  }
  static getTransformedBoundingBox(e10, t10, n10, o10 = 0, i10 = false) {
    let [s10, a10] = [e10.minX, e10.minY], [d10, l10] = [e10.maxX, e10.maxY], [c10, m10] = [e10.minX, e10.minY], [p10, u10] = [e10.maxX, e10.maxY];
    if (t10 === "center")
      return { minX: c10 + n10[0], minY: m10 + n10[1], maxX: p10 + n10[0], maxY: u10 + n10[1], width: p10 - c10, height: u10 - m10, scaleX: 1, scaleY: 1 };
    let [y10, T10] = e.rot(n10, -o10);
    switch (t10) {
      case "top_edge":
      case "top_left_corner":
      case "top_right_corner": {
        m10 += T10;
        break;
      }
      case "bottom_edge":
      case "bottom_left_corner":
      case "bottom_right_corner": {
        u10 += T10;
        break;
      }
    }
    switch (t10) {
      case "left_edge":
      case "top_left_corner":
      case "bottom_left_corner": {
        c10 += y10;
        break;
      }
      case "right_edge":
      case "top_right_corner":
      case "bottom_right_corner": {
        p10 += y10;
        break;
      }
    }
    let v11 = d10 - s10, x10 = l10 - a10, f10 = (p10 - c10) / v11, L10 = (u10 - m10) / x10, Y10 = f10 < 0, X10 = L10 < 0, S10 = Math.abs(p10 - c10), b10 = Math.abs(u10 - m10);
    if (i10) {
      let P10 = v11 / x10, B10 = P10 < S10 / b10, M10 = S10 * (L10 < 0 ? 1 : -1) * (1 / P10), I10 = b10 * (f10 < 0 ? 1 : -1) * P10;
      switch (t10) {
        case "top_left_corner": {
          B10 ? m10 = u10 + M10 : c10 = p10 + I10;
          break;
        }
        case "top_right_corner": {
          B10 ? m10 = u10 + M10 : p10 = c10 - I10;
          break;
        }
        case "bottom_right_corner": {
          B10 ? u10 = m10 - M10 : p10 = c10 - I10;
          break;
        }
        case "bottom_left_corner": {
          B10 ? u10 = m10 - M10 : c10 = p10 + I10;
          break;
        }
        case "bottom_edge":
        case "top_edge": {
          let A10 = (c10 + p10) / 2, J10 = b10 * P10;
          c10 = A10 - J10 / 2, p10 = A10 + J10 / 2;
          break;
        }
        case "left_edge":
        case "right_edge": {
          let A10 = (m10 + u10) / 2, J10 = S10 / P10;
          m10 = A10 - J10 / 2, u10 = A10 + J10 / 2;
          break;
        }
      }
    }
    if (o10 % (Math.PI * 2) !== 0) {
      let P10 = [0, 0], B10 = e.med([s10, a10], [d10, l10]), M10 = e.med([c10, m10], [p10, u10]);
      switch (t10) {
        case "top_left_corner": {
          P10 = e.sub(e.rotWith([p10, u10], M10, o10), e.rotWith([d10, l10], B10, o10));
          break;
        }
        case "top_right_corner": {
          P10 = e.sub(e.rotWith([c10, u10], M10, o10), e.rotWith([s10, l10], B10, o10));
          break;
        }
        case "bottom_right_corner": {
          P10 = e.sub(e.rotWith([c10, m10], M10, o10), e.rotWith([s10, a10], B10, o10));
          break;
        }
        case "bottom_left_corner": {
          P10 = e.sub(e.rotWith([p10, m10], M10, o10), e.rotWith([d10, a10], B10, o10));
          break;
        }
        case "top_edge": {
          P10 = e.sub(e.rotWith(e.med([c10, u10], [p10, u10]), M10, o10), e.rotWith(e.med([s10, l10], [d10, l10]), B10, o10));
          break;
        }
        case "left_edge": {
          P10 = e.sub(e.rotWith(e.med([p10, m10], [p10, u10]), M10, o10), e.rotWith(e.med([d10, a10], [d10, l10]), B10, o10));
          break;
        }
        case "bottom_edge": {
          P10 = e.sub(e.rotWith(e.med([c10, m10], [p10, m10]), M10, o10), e.rotWith(e.med([s10, a10], [d10, a10]), B10, o10));
          break;
        }
        case "right_edge": {
          P10 = e.sub(e.rotWith(e.med([c10, m10], [c10, u10]), M10, o10), e.rotWith(e.med([s10, a10], [s10, l10]), B10, o10));
          break;
        }
      }
      [c10, m10] = e.sub([c10, m10], P10), [p10, u10] = e.sub([p10, u10], P10);
    }
    return p10 < c10 && ([p10, c10] = [c10, p10]), u10 < m10 && ([u10, m10] = [m10, u10]), { minX: c10, minY: m10, maxX: p10, maxY: u10, width: p10 - c10, height: u10 - m10, scaleX: (p10 - c10) / (d10 - s10 || 1) * (Y10 ? -1 : 1), scaleY: (u10 - m10) / (l10 - a10 || 1) * (X10 ? -1 : 1) };
  }
  static getTransformAnchor(e10, t10, n10) {
    let o10 = e10;
    switch (e10) {
      case "top_left_corner": {
        t10 && n10 ? o10 = "bottom_right_corner" : t10 ? o10 = "top_right_corner" : n10 ? o10 = "bottom_left_corner" : o10 = "bottom_right_corner";
        break;
      }
      case "top_right_corner": {
        t10 && n10 ? o10 = "bottom_left_corner" : t10 ? o10 = "top_left_corner" : n10 ? o10 = "bottom_right_corner" : o10 = "bottom_left_corner";
        break;
      }
      case "bottom_right_corner": {
        t10 && n10 ? o10 = "top_left_corner" : t10 ? o10 = "bottom_left_corner" : n10 ? o10 = "top_right_corner" : o10 = "top_left_corner";
        break;
      }
      case "bottom_left_corner": {
        t10 && n10 ? o10 = "top_right_corner" : t10 ? o10 = "bottom_right_corner" : n10 ? o10 = "top_left_corner" : o10 = "top_right_corner";
        break;
      }
    }
    return o10;
  }
  static getRelativeTransformedBoundingBox(e10, t10, n10, o10, i10) {
    let s10 = (o10 ? t10.maxX - n10.maxX : n10.minX - t10.minX) / t10.width, a10 = (i10 ? t10.maxY - n10.maxY : n10.minY - t10.minY) / t10.height, d10 = n10.width / t10.width, l10 = n10.height / t10.height, c10 = e10.minX + e10.width * s10, m10 = e10.minY + e10.height * a10, p10 = e10.width * d10, u10 = e10.height * l10;
    return { minX: c10, minY: m10, maxX: c10 + p10, maxY: m10 + u10, width: p10, height: u10 };
  }
  static getRotatedSize(e10, t10) {
    let n10 = e.div(e10, 2), o10 = [[0, 0], [e10[0], 0], e10, [0, e10[1]]].map((s10) => e.rotWith(s10, n10, t10)), i10 = k2.getBoundsFromPoints(o10);
    return [i10.width, i10.height];
  }
  static getBoundsCenter(e10) {
    return [e10.minX + e10.width / 2, e10.minY + e10.height / 2];
  }
  static getBoundsWithCenter(e10) {
    let t10 = k2.getBoundsCenter(e10);
    return U2(g2({}, e10), { midX: t10[0], midY: t10[1] });
  }
  static getCommonTopLeft(e10) {
    let t10 = [1 / 0, 1 / 0];
    return e10.forEach((n10) => {
      t10[0] = Math.min(t10[0], n10[0]), t10[1] = Math.min(t10[1], n10[1]);
    }), t10;
  }
  static getFromCache(e10, t10, n10) {
    let o10 = e10.get(t10);
    if (o10 === void 0 && (e10.set(t10, n10()), o10 = e10.get(t10), o10 === void 0))
      throw Error("Cache did not include item!");
    return o10;
  }
  static uniqueId(e10 = "") {
    return e10 ? ((Number(e10) ^ Math.random() * 16) >> Number(e10) / 4).toString(16) : `${1e7}-${1e3}-${4e3}-${8e3}-${1e11}`.replace(/[018]/g, k2.uniqueId);
  }
  static rotateArray(e10, t10) {
    return e10.map((n10, o10) => e10[(o10 + t10) % e10.length]);
  }
  static debounce(e10, t10 = 0) {
    let n10;
    return function(...o10) {
      clearTimeout(n10), n10 = setTimeout(() => e10.apply(o10), t10);
    };
  }
  static getSvgPathFromStroke(e10, t10 = true) {
    let n10 = e10.length;
    if (n10 < 4)
      return "";
    let o10 = e10[0], i10 = e10[1], s10 = e10[2], a10 = `M${o10[0].toFixed(2)},${o10[1].toFixed(2)} Q${i10[0].toFixed(2)},${i10[1].toFixed(2)} ${ee3(i10[0], s10[0]).toFixed(2)},${ee3(i10[1], s10[1]).toFixed(2)} T`;
    for (let d10 = 2, l10 = n10 - 1; d10 < l10; d10++)
      o10 = e10[d10], i10 = e10[d10 + 1], a10 += `${ee3(o10[0], i10[0]).toFixed(2)},${ee3(o10[1], i10[1]).toFixed(2)} `;
    return t10 && (a10 += "Z"), a10;
  }
  static getSvgPathFromStrokePoints(e10, t10 = false) {
    let n10 = e10.length;
    if (n10 < 4)
      return "";
    let o10 = e10[0].point, i10 = e10[1].point, s10 = e10[2].point, a10 = `M${o10[0].toFixed(2)},${o10[1].toFixed(2)} Q${i10[0].toFixed(2)},${i10[1].toFixed(2)} ${ee3(i10[0], s10[0]).toFixed(2)},${ee3(i10[1], s10[1]).toFixed(2)} T`;
    for (let d10 = 2, l10 = n10 - 1; d10 < l10; d10++)
      o10 = e10[d10].point, i10 = e10[d10 + 1].point, a10 += `${ee3(o10[0], i10[0]).toFixed(2)},${ee3(o10[1], i10[1]).toFixed(2)} `;
    return t10 && (a10 += "Z"), a10;
  }
  static getPerfectDashProps(e10, t10, n10, o10 = 1, i10 = true, s10 = 2) {
    let a10, d10, l10;
    if (n10.toLowerCase() === "dashed")
      a10 = t10 * s10, l10 = 1, d10 = i10 ? (a10 / 2).toString() : "0";
    else if (n10.toLowerCase() === "dotted")
      a10 = t10 / 100, l10 = 100, d10 = "0";
    else
      return { strokeDasharray: "none", strokeDashoffset: "none" };
    let c10 = Math.floor(e10 / a10 / (2 * l10));
    c10 -= c10 % o10, c10 = Math.max(c10, 4);
    let m10 = Math.max(a10, (e10 - c10 * a10) / (i10 ? c10 : c10 - 1));
    return { strokeDasharray: [a10, m10].join(" "), strokeDashoffset: d10 };
  }
  static isMobileSafari() {
    if (typeof window == "undefined")
      return false;
    let e10 = window.navigator.userAgent, t10 = !!e10.match(/iPad/i) || !!e10.match(/iPhone/i), n10 = !!e10.match(/WebKit/i);
    return t10 && n10 && !e10.match(/CriOS/i);
  }
  static throttle(e10, t10) {
    let n10, o10;
    return function(...i10) {
      return n10 || (n10 = true, setTimeout(() => n10 = false, t10), o10 = e10(...i10)), o10;
    };
  }
  static isDarwin() {
    return /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
  }
  static metaKey(e10) {
    return k2.isDarwin() ? e10.metaKey : e10.ctrlKey;
  }
  static lns(e10) {
    let t10 = e10.split("");
    return t10.push(...t10.splice(0, Math.round(t10.length / 5))), t10.push(...t10.splice(0, Math.round(t10.length / 4))), t10.push(...t10.splice(0, Math.round(t10.length / 3))), t10.push(...t10.splice(0, Math.round(t10.length / 2))), t10.reverse().map((n10) => +n10 ? +n10 < 5 ? 5 + +n10 : +n10 > 5 ? +n10 - 5 : n10 : n10).join("");
  }
};
var C3 = k2;
E2(C3, "getSnapPoints", (e10, t10, n10) => {
  let o10 = g2({}, e10), i10 = [0, 0], s10 = [], a10 = { ["minX"]: { id: "minX", isSnapped: false }, ["midX"]: { id: "midX", isSnapped: false }, ["maxX"]: { id: "maxX", isSnapped: false }, ["minY"]: { id: "minY", isSnapped: false }, ["midY"]: { id: "midY", isSnapped: false }, ["maxY"]: { id: "maxY", isSnapped: false } }, d10 = ["midX", "minX", "maxX"], l10 = ["midY", "minY", "maxY"], c10 = t10.map((T10) => {
    let v11 = d10.flatMap((f10, L10) => d10.map((Y10, X10) => {
      let S10 = o10[f10] - T10[Y10], b10 = Math.abs(S10);
      return { f: f10, t: Y10, gap: S10, distance: b10, isCareful: L10 === 0 || L10 + X10 === 3 };
    })), x10 = l10.flatMap((f10, L10) => l10.map((Y10, X10) => {
      let S10 = o10[f10] - T10[Y10], b10 = Math.abs(S10);
      return { f: f10, t: Y10, gap: S10, distance: b10, isCareful: L10 === 0 || L10 + X10 === 3 };
    }));
    return [T10, v11, x10];
  }), m10 = 1 / 0, p10 = 1 / 0, u10 = 1 / 0, y10 = 1 / 0;
  return c10.forEach(([T10, v11, x10]) => {
    v11.forEach((f10) => {
      f10.distance < n10 && f10.distance < u10 && (u10 = f10.distance, m10 = f10.gap);
    }), x10.forEach((f10) => {
      f10.distance < n10 && f10.distance < y10 && (y10 = f10.distance, p10 = f10.gap);
    });
  }), c10.forEach(([T10, v11, x10]) => {
    m10 !== 1 / 0 && v11.forEach((f10) => {
      Math.abs(f10.gap - m10) < 2 && (a10[f10.f] = U2(g2({}, a10[f10.f]), { isSnapped: true, to: T10[f10.t], B: T10, distance: f10.distance }));
    }), p10 !== 1 / 0 && x10.forEach((f10) => {
      Math.abs(f10.gap - p10) < 2 && (a10[f10.f] = U2(g2({}, a10[f10.f]), { isSnapped: true, to: T10[f10.t], B: T10, distance: f10.distance }));
    });
  }), i10[0] = m10 === 1 / 0 ? 0 : m10, i10[1] = p10 === 1 / 0 ? 0 : p10, o10.minX -= i10[0], o10.midX -= i10[0], o10.maxX -= i10[0], o10.minY -= i10[1], o10.midY -= i10[1], o10.maxY -= i10[1], d10.forEach((T10) => {
    let v11 = a10[T10];
    if (!v11.isSnapped)
      return;
    let { id: x10, B: f10 } = v11, L10 = o10[x10];
    s10.push(x10 === "minX" ? [[L10, o10.midY], [L10, f10.minY], [L10, f10.maxY]] : [[L10, o10.minY], [L10, o10.maxY], [L10, f10.minY], [L10, f10.maxY]]);
  }), l10.forEach((T10) => {
    let v11 = a10[T10];
    if (!v11.isSnapped)
      return;
    let { id: x10, B: f10 } = v11, L10 = o10[x10];
    s10.push(x10 === "midY" ? [[o10.midX, L10], [f10.minX, L10], [f10.maxX, L10]] : [[o10.minX, L10], [o10.maxX, L10], [f10.minX, L10], [f10.maxX, L10]]);
  }), { offset: i10, snapLines: s10 };
}), E2(C3, "deepMerge", (e10, t10) => {
  let n10 = g2({}, e10), o10 = Object.entries(t10);
  for (let [i10, s10] of o10)
    n10[i10] = s10 === Object(s10) && !Array.isArray(s10) ? k2.deepMerge(n10[i10], s10) : s10;
  return n10;
});
function ee3(r10, e10) {
  return (r10 + e10) / 2;
}
var w2 = C3;
function tt(r10, e10) {
  let t10 = V3.useRef(void 0), n10 = V3.useRef(void 0), o10 = V3.useRef([0, 0]), i10 = V3.useRef(0), { inputs: s10, bounds: a10, callbacks: d10 } = R3();
  V3.useEffect(() => {
    let u10 = (y10) => y10.preventDefault();
    return document.addEventListener("gesturestart", u10), document.addEventListener("gesturechange", u10), () => {
      document.removeEventListener("gesturestart", u10), document.removeEventListener("gesturechange", u10);
    };
  }, []);
  let l10 = V3.useCallback(({ event: u10 }) => {
    var L10, Y10, X10, S10;
    if (u10.preventDefault(), s10.isPinching || u10.timeStamp <= i10.current)
      return;
    i10.current = u10.timeStamp;
    let [y10, T10, v11] = tn(u10);
    if ((u10.altKey || u10.ctrlKey || u10.metaKey) && u10.buttons === 0) {
      let P10 = [...(Y10 = (L10 = s10.pointer) == null ? void 0 : L10.point) != null ? Y10 : [a10.width / 2, a10.height / 2], v11 * 0.618], B10 = s10.pan(P10, u10);
      (X10 = d10.onZoom) == null || X10.call(d10, U2(g2({}, B10), { delta: P10 }), u10);
      return;
    }
    let x10 = e.mul(u10.shiftKey && !w2.isDarwin() ? [T10, 0] : [y10, T10], 0.5);
    if (e.isEqual(x10, [0, 0]))
      return;
    let f10 = s10.pan(x10, u10);
    (S10 = d10.onPan) == null || S10.call(d10, f10, u10);
  }, [d10, s10, a10]), c10 = V3.useCallback(({ origin: u10, event: y10 }) => {
    var x10;
    if (y10 instanceof WheelEvent)
      return;
    let T10 = e10.current;
    if (!T10 || !(y10.target === T10 || T10.contains(y10.target)))
      return;
    let v11 = s10.pinch(u10, u10);
    s10.isPinching = true, (x10 = d10.onPinchStart) == null || x10.call(d10, v11, y10), n10.current = v11.point, t10.current = v11.origin, o10.current = [0, 0];
  }, [d10, s10, a10]), m10 = V3.useCallback(({ origin: u10, offset: y10, event: T10 }) => {
    var L10;
    if (T10 instanceof WheelEvent)
      return;
    let v11 = e10.current;
    if (!(T10.target === v11 || (v11 == null ? void 0 : v11.contains(T10.target))) || !t10.current)
      return;
    let x10 = s10.pinch(u10, t10.current), f10 = e.sub(x10.delta, o10.current);
    o10.current = x10.delta, (L10 = d10.onPinch) == null || L10.call(d10, U2(g2({}, x10), { point: x10.point, origin: t10.current, delta: [...f10, y10[0]] }), T10), n10.current = u10;
  }, [d10, s10, a10]), p10 = V3.useCallback(({ origin: u10, event: y10 }) => {
    var x10;
    let T10 = e10.current;
    if (!(y10.target === T10 || (T10 == null ? void 0 : T10.contains(y10.target))))
      return;
    let v11 = s10.pinch(u10, u10);
    s10.isPinching = false, (x10 = d10.onPinchEnd) == null || x10.call(d10, v11, y10), n10.current = void 0, t10.current = void 0, o10.current = [0, 0];
  }, []);
  useGesture({ onWheel: l10, onPinchStart: c10, onPinch: m10, onPinchEnd: p10 }, { target: e10, eventOptions: { passive: false }, pinch: { from: [r10.current, 0], scaleBounds: () => ({ from: r10.current, max: 5, min: 0.1 }) } });
}
var et = 10;
function tn(r10) {
  let { deltaY: e10, deltaX: t10 } = r10, n10 = 0;
  if (r10.ctrlKey || r10.metaKey) {
    let o10 = Math.sign(r10.deltaY), i10 = Math.abs(r10.deltaY), s10 = e10;
    i10 > et && (s10 = et * o10), n10 = s10;
  }
  return [t10, e10, n10];
}
function nt() {
  let { callbacks: r10 } = R3();
  (0, import_react3.useEffect)(() => {
    function e10() {
      var t10;
      (t10 = r10.onShapeBlur) == null || t10.call(r10);
    }
    return w2.isMobileSafari() ? (document.addEventListener("focusout", e10), () => document.removeEventListener("focusout", e10)) : () => null;
  }, [r10]);
}
function rt() {
  let { callbacks: r10, inputs: e10 } = R3();
  return ot.useMemo(() => ({ onPointerDown: (t10) => {
    var o10, i10, s10;
    if (t10.dead || (t10.dead = true, !e10.pointerIsValid(t10)))
      return;
    if (t10.currentTarget.setPointerCapture(t10.pointerId), t10.button === 2) {
      (o10 = r10.onRightPointCanvas) == null || o10.call(r10, e10.pointerDown(t10, "canvas"), t10);
      return;
    }
    let n10 = e10.pointerDown(t10, "canvas");
    t10.button === 0 && ((i10 = r10.onPointCanvas) == null || i10.call(r10, n10, t10)), (s10 = r10.onPointerDown) == null || s10.call(r10, n10, t10);
  }, onPointerMove: (t10) => {
    var o10, i10;
    if (t10.dead || (t10.dead = true, !e10.pointerIsValid(t10)))
      return;
    let n10 = e10.pointerMove(t10, "canvas");
    t10.buttons === 1 && t10.currentTarget.hasPointerCapture(t10.pointerId) && ((o10 = r10.onDragCanvas) == null || o10.call(r10, n10, t10)), (i10 = r10.onPointerMove) == null || i10.call(r10, n10, t10);
  }, onPointerUp: (t10) => {
    var i10, s10, a10, d10, l10;
    if (t10.dead || (t10.dead = true, e10.activePointer = void 0, !e10.pointerIsValid(t10)))
      return;
    let n10 = e10.isDoubleClick(), o10 = e10.pointerUp(t10, "canvas");
    if (t10.button === 2) {
      (i10 = r10.onPointerUp) == null || i10.call(r10, o10, t10);
      return;
    }
    t10.currentTarget.hasPointerCapture(t10.pointerId) && ((s10 = t10.currentTarget) == null || s10.releasePointerCapture(t10.pointerId)), t10.button === 0 && (n10 && !(o10.altKey || o10.metaKey) && ((a10 = r10.onDoubleClickCanvas) == null || a10.call(r10, o10, t10)), (d10 = r10.onReleaseCanvas) == null || d10.call(r10, o10, t10)), (l10 = r10.onPointerUp) == null || l10.call(r10, o10, t10);
  }, onDrop: r10.onDrop, onDragOver: r10.onDragOver }), [r10, e10]);
}
function it(r10) {
  let { rPageState: e10, rSelectionBounds: t10, callbacks: n10, inputs: o10 } = Me.useContext(Le);
  return Me.useMemo(() => ({ onPointerDown: (i10) => {
    var a10, d10, l10, c10, m10, p10, u10;
    if (i10.dead || (i10.dead = true, !o10.pointerIsValid(i10)))
      return;
    if (i10.button === 2) {
      (a10 = n10.onRightPointShape) == null || a10.call(n10, o10.pointerDown(i10, r10), i10);
      return;
    }
    let s10 = o10.pointerDown(i10, r10);
    if ((d10 = i10.currentTarget) == null || d10.setPointerCapture(i10.pointerId), t10.current && C3.pointInBounds(s10.point, t10.current) && !e10.current.selectedIds.includes(r10)) {
      i10.button === 0 && ((l10 = n10.onPointBounds) == null || l10.call(n10, o10.pointerDown(i10, "bounds"), i10), (c10 = n10.onPointShape) == null || c10.call(n10, s10, i10)), (m10 = n10.onPointerDown) == null || m10.call(n10, s10, i10);
      return;
    }
    i10.button === 0 && ((p10 = n10.onPointShape) == null || p10.call(n10, s10, i10)), (u10 = n10.onPointerDown) == null || u10.call(n10, s10, i10);
  }, onPointerUp: (i10) => {
    var d10, l10, c10, m10;
    if (i10.dead || (i10.dead = true, !o10.pointerIsValid(i10)) || i10.button === 2)
      return;
    o10.activePointer = void 0;
    let s10 = o10.isDoubleClick(), a10 = o10.pointerUp(i10, r10);
    i10.pointerId && i10.currentTarget.hasPointerCapture(i10.pointerId) && ((d10 = i10.currentTarget) == null || d10.releasePointerCapture(i10.pointerId)), i10.button === 0 && (s10 && !(a10.altKey || a10.metaKey) && ((l10 = n10.onDoubleClickShape) == null || l10.call(n10, a10, i10)), (c10 = n10.onReleaseShape) == null || c10.call(n10, a10, i10)), (m10 = n10.onPointerUp) == null || m10.call(n10, a10, i10);
  }, onPointerMove: (i10) => {
    var a10, d10;
    if (i10.dead || (i10.dead = true, i10.buttons === 2 || !o10.pointerIsValid(i10) || o10.pointer && i10.pointerId !== o10.pointer.pointerId))
      return;
    let s10 = o10.pointerMove(i10, r10);
    i10.buttons === 1 && i10.currentTarget.hasPointerCapture(i10.pointerId) && ((a10 = n10.onDragShape) == null || a10.call(n10, s10, i10)), (d10 = n10.onPointerMove) == null || d10.call(n10, s10, i10);
  }, onPointerEnter: (i10) => {
    var a10;
    if (!o10.pointerIsValid(i10))
      return;
    let s10 = o10.pointerEnter(i10, r10);
    (a10 = n10.onHoverShape) == null || a10.call(n10, s10, i10);
  }, onPointerLeave: (i10) => {
    var a10;
    if (!o10.pointerIsValid(i10))
      return;
    let s10 = o10.pointerEnter(i10, r10);
    (a10 = n10.onUnhoverShape) == null || a10.call(n10, s10, i10);
  } }), [o10, n10, r10]);
}
function st(r10, e10, t10, n10, o10, i10 = false, s10 = false, a10, d10) {
  let l10 = { shape: r10, asset: r10.assetId ? o10[r10.assetId] : void 0, meta: a10, isChildOfSelected: s10, isGhost: r10.isGhost || i10, isEditing: n10.editingId === r10.id, isBinding: d10 === r10.id, isSelected: n10.selectedIds.includes(r10.id), isHovered: n10.hoveredId === r10.id || r10.children !== void 0 && (n10.hoveredId && r10.children.includes(n10.hoveredId) || r10.children.some((c10) => n10.selectedIds.includes(c10))) };
  e10.push(l10), r10.children && (l10.children = [], r10.children.map((c10) => t10[c10]).filter((c10) => t10[c10.id]).sort((c10, m10) => c10.childIndex - m10.childIndex).forEach((c10) => st(c10, l10.children, t10, n10, o10, l10.isGhost, l10.isSelected || l10.isChildOfSelected, a10)));
}
function on(r10, e10) {
  return C3.boundsContain(e10, r10) || C3.boundsCollide(e10, r10);
}
function at(r10, e10, t10, n10) {
  let { callbacks: o10, shapeUtils: i10, bounds: s10 } = R3(), a10 = ye2.useRef(), d10 = ye2.useRef(-1), l10 = ye2.useRef(/* @__PURE__ */ new Set()), c10 = ye2.useRef(/* @__PURE__ */ new Set()), { selectedIds: m10, camera: p10 } = e10, [u10, y10] = e.sub(e.div([0, 0], p10.zoom), p10.point), [T10, v11] = e.sub(e.div([s10.width, s10.height], p10.zoom), p10.point), x10 = { minX: u10, minY: y10, maxX: T10, maxY: v11, height: T10 - u10, width: v11 - y10 }, f10 = c10.current, L10 = l10.current;
  f10.clear(), L10.clear(), Object.values(r10.shapes).filter((b10) => i10[b10.type].isStateful || m10.includes(b10.id) || on(i10[b10.type].getBounds(b10), x10)).forEach((b10) => {
    if (b10.parentId === r10.id) {
      L10.add(b10.id), f10.add(b10);
      return;
    }
    let P10 = r10.shapes[b10.parentId];
    if (P10 === void 0)
      throw Error(`A shape (${b10.id}) has a parent (${b10.parentId}) that does not exist!`);
    L10.add(P10.id), f10.add(P10);
  }), f10.size !== d10.current && (a10.current && clearTimeout(a10.current), a10.current = requestAnimationFrame(() => {
    var b10;
    (b10 = o10.onRenderCountChange) == null || b10.call(o10, Array.from(L10.values()));
  }), d10.current = f10.size);
  let X10 = e10.bindingId ? r10.bindings[e10.bindingId].toId : void 0, S10 = [];
  return f10.forEach((b10) => {
    if (b10 === void 0)
      throw Error("Rendered shapes included a missing shape");
    st(b10, S10, r10.shapes, e10, t10, b10.isGhost, false, n10, X10);
  }), S10.sort((b10, P10) => b10.shape.childIndex - P10.shape.childIndex), S10;
}
var ze = /* @__PURE__ */ new Map();
function rn(r10, e10) {
  return Object.keys(e10).reduce((t10, n10) => {
    let o10 = e10[n10];
    return o10 ? t10 + `${`--${r10}-${n10}`}: ${o10};
` : t10;
  }, "");
}
function sn(r10, e10, t10 = ":root") {
  ve.useLayoutEffect(() => {
    let n10 = document.createElement("style"), o10 = rn(r10, e10);
    return n10.setAttribute("id", `${r10}-theme`), n10.setAttribute("data-selector", t10), n10.innerHTML = `
        ${t10} {
          ${o10}
        }
      `, document.head.appendChild(n10), () => {
      n10 && document.head.contains(n10) && document.head.removeChild(n10);
    };
  }, [r10, e10, t10]);
}
function an(r10, e10) {
  ve.useLayoutEffect(() => {
    if (ze.get(r10))
      return () => {
      };
    let t10 = document.createElement("style");
    return t10.innerHTML = e10, t10.setAttribute("id", r10), document.head.appendChild(t10), ze.set(r10, t10), () => {
      t10 && document.head.contains(t10) && (document.head.removeChild(t10), ze.delete(r10));
    };
  }, [r10, e10]);
}
var dn = (r10, ...e10) => r10.reduce((t10, n10, o10) => t10 + n10 + (o10 < e10.length ? e10[o10] : ""), "");
var ln = { accent: "rgb(255, 0, 0)", brushFill: "rgba(0,0,0,.05)", brushStroke: "rgba(0,0,0,.25)", brushDashStroke: "rgba(0,0,0,.6)", selectStroke: "rgb(66, 133, 244)", selectFill: "rgba(65, 132, 244, 0.05)", binding: "rgba(65, 132, 244, 0.12)", background: "rgb(248, 249, 250)", foreground: "rgb(51, 51, 51)", grid: "rgba(144, 144, 144, 1)" };
var cn = dn`
  .tl-container {
    --tl-zoom: 1;
    --tl-scale: calc(1 / var(--tl-zoom));
    --tl-padding: calc(64px * max(1, var(--tl-scale)));
    --tl-performance-all: auto;
    --tl-performance-selected: auto;
    position: relative;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    max-width: 100%;
    max-height: 100%;
    box-sizing: border-box;
    padding: 0px;
    margin: 0px;
    z-index: 100;
    overflow: hidden;
    touch-action: none;
    overscroll-behavior: none;
    background-color: var(--tl-background);
  }
  .tl-container * {
    box-sizing: border-box;
  }
  .tl-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: none;
  }
  .tl-grid {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: none;
    user-select: none;
  }
  .tl-snap-line {
    stroke: var(--tl-accent);
    stroke-width: calc(1px * var(--tl-scale));
  }
  .tl-snap-point {
    stroke: var(--tl-accent);
    stroke-width: calc(1px * var(--tl-scale));
  }
  .tl-canvas {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: all;
    overflow: clip;
  }
  .tl-layer {
    position: absolute;
    top: 0px;
    left: 0px;
    height: 0px;
    width: 0px;
    contain: layout style size;
  }
  .tl-absolute {
    position: absolute;
    top: 0px;
    left: 0px;
    transform-origin: center center;
    contain: layout style size;
  }
  .tl-positioned {
    position: absolute;
    top: 0px;
    left: 0px;
    transform-origin: center center;
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
    contain: layout style size;
    will-change: var(--tl-performance-all);
  }
  .tl-positioned-svg {
    width: 100%;
    height: 100%;
    overflow: hidden;
    contain: layout style size;
  }
  .tl-positioned-div {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    padding: var(--tl-padding);
    overflow: hidden;
    contain: layout style size;
  }
  .tl-positioned-selected {
    will-change: var(--tl-performance-selected);
  }
  .tl-inner-div {
    position: relative;
    width: 100%;
    height: 100%;
  }
  .tl-stroke-hitarea {
    fill: none;
    stroke: transparent;
    stroke-width: calc(24px * var(--tl-scale));
    pointer-events: stroke;
    stroke-linecap: round;
    stroke-linejoin: round;
  }
  .tl-fill-hitarea {
    fill: transparent;
    stroke: transparent;
    stroke-width: calc(24px * var(--tl-scale));
    pointer-events: all;
    stroke-linecap: round;
    stroke-linejoin: round;
  }
  .tl-counter-scaled {
    transform: scale(var(--tl-scale));
  }
  .tl-dashed {
    stroke-dasharray: calc(2px * var(--tl-scale)), calc(2px * var(--tl-scale));
  }
  .tl-transparent {
    fill: transparent;
    stroke: transparent;
  }
  .tl-cursor-ns {
    cursor: ns-resize;
  }
  .tl-cursor-ew {
    cursor: ew-resize;
  }
  .tl-cursor-nesw {
    cursor: nesw-resize;
  }
  .tl-cursor-nwse {
    cursor: nwse-resize;
  }
  .tl-corner-handle {
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
    stroke-width: calc(1.5px * var(--tl-scale));
  }
  .tl-rotate-handle {
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
    stroke-width: calc(1.5px * var(--tl-scale));
    cursor: grab;
  }
  .tl-binding {
    fill: var(--tl-selectFill);
    stroke: var(--tl-selectStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
  }
  .tl-user {
    left: calc(-15px * var(--tl-scale));
    top: calc(-15px * var(--tl-scale));
    height: calc(35px * var(--tl-scale));
    width: calc(35px * var(--tl-scale));
    transform: scale(var(--tl-scale));
    pointer-events: none;
    will-change: transform;
  }
  .tl-animated {
    transition: transform 200ms linear;
  }
  .tl-indicator {
    fill: transparent;
    stroke-width: calc(1.5px * var(--tl-scale));
    pointer-events: none;
  }
  .tl-user-indicator-bounds {
    border-style: solid;
    border-width: calc(1px * var(--tl-scale));
  }
  .tl-hovered {
    stroke: var(--tl-selectStroke);
  }
  .tl-selected {
    stroke: var(--tl-selectStroke);
  }
  .tl-locked {
    stroke-dasharray: calc(3px * var(--tl-scale)) calc(3px * var(--tl-scale));
  }
  .tl-editing {
    stroke-width: calc(2.5px * min(5, var(--tl-scale)));
  }
  .tl-performance {
    will-change: transform, contents;
  }
  .tl-clone-target {
    pointer-events: all;
  }
  .tl-clone-target:hover .tl-clone-button {
    opacity: 1;
  }
  .tl-clone-button-target {
    cursor: pointer;
    pointer-events: all;
  }
  .tl-clone-button-target:hover .tl-clone-button {
    fill: var(--tl-selectStroke);
  }
  .tl-clone-button {
    opacity: 0;
    r: calc(8px * var(--tl-scale));
    stroke-width: calc(1.5px * var(--tl-scale));
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
  }
  .tl-bounds {
    pointer-events: none;
    contain: layout style size;
  }
  .tl-bounds-bg {
    stroke: none;
    fill: var(--tl-selectFill);
    pointer-events: all;
    contain: layout style size;
  }
  .tl-bounds-center {
    fill: transparent;
    stroke: var(--tl-selectStroke);
    stroke-width: calc(1.5px * var(--tl-scale));
  }
  .tl-brush {
    fill: var(--tl-brushFill);
    stroke: var(--tl-brushStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
    contain: layout style size;
  }
  .tl-dashed-brush-line {
    fill: none;
    stroke: var(--tl-brushDashStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
  }
  .tl-brush.dashed {
    stroke: none;
  }
  .tl-handle {
    pointer-events: all;
    cursor: grab;
  }
  .tl-handle:hover .tl-handle-bg {
    fill: var(--tl-selectFill);
  }
  .tl-handle:hover .tl-handle-bg > * {
    stroke: var(--tl-selectFill);
  }
  .tl-handle:active .tl-handle-bg {
    cursor: grabbing;
    fill: var(--tl-selectFill);
  }
  .tl-handle:active .tl-handle-bg > * {
    stroke: var(--tl-selectFill);
  }
  .tl-handle {
    fill: var(--tl-background);
    stroke: var(--tl-selectStroke);
    stroke-width: 1.5px;
  }
  .tl-handle-bg {
    fill: transparent;
    stroke: none;
    pointer-events: all;
    r: calc(16px / max(1, var(--tl-zoom)));
  }
  .tl-binding-indicator {
    fill: transparent;
    stroke: var(--tl-binding);
  }
  .tl-centered-g {
    transform: translate(var(--tl-padding), var(--tl-padding));
  }
  .tl-current-parent > *[data-shy='true'] {
    opacity: 1;
  }
  .tl-binding {
    fill: none;
    stroke: var(--tl-selectStroke);
    stroke-width: calc(2px * var(--tl-scale));
  }
  .tl-grid-dot {
    fill: var(--tl-grid);
  }
  .tl-erase-line {
    stroke-linejoin: round;
    stroke-linecap: round;
    pointer-events: none;
    fill: var(--tl-grid);
    opacity: 0.32;
  }
`;
function dt(r10, e10) {
  let t10 = ve.useMemo(() => g2(g2({}, ln), r10), [r10]);
  sn("tl", t10, e10), an("tl-canvas", cn);
}
function _2(r10) {
  let { callbacks: e10, inputs: t10 } = R3(), n10 = pe3.useCallback((d10) => {
    var c10, m10, p10, u10;
    if (d10.dead || (d10.dead = true, !t10.pointerIsValid(d10)))
      return;
    (c10 = d10.currentTarget) == null || c10.setPointerCapture(d10.pointerId);
    let l10 = t10.pointerDown(d10, r10);
    if (d10.button === 2) {
      (m10 = e10.onRightPointBoundsHandle) == null || m10.call(e10, l10, d10);
      return;
    }
    d10.button === 0 && ((p10 = e10.onPointBoundsHandle) == null || p10.call(e10, l10, d10)), (u10 = e10.onPointerDown) == null || u10.call(e10, l10, d10);
  }, [t10, e10, r10]), o10 = pe3.useCallback((d10) => {
    var m10, p10, u10;
    if (d10.dead || (d10.dead = true, d10.button === 2 || !t10.pointerIsValid(d10)))
      return;
    let l10 = t10.pointerUp(d10, r10), c10 = t10.isDoubleClick();
    d10.button === 0 && (c10 && !(l10.altKey || l10.metaKey) && ((m10 = e10.onDoubleClickBoundsHandle) == null || m10.call(e10, l10, d10)), (p10 = e10.onReleaseBoundsHandle) == null || p10.call(e10, l10, d10)), (u10 = e10.onPointerUp) == null || u10.call(e10, l10, d10);
  }, [t10, e10, r10]), i10 = pe3.useCallback((d10) => {
    var c10, m10;
    if (d10.dead || (d10.dead = true, !t10.pointerIsValid(d10)) || d10.buttons === 2)
      return;
    let l10 = t10.pointerMove(d10, r10);
    d10.buttons === 1 && d10.currentTarget.hasPointerCapture(d10.pointerId) && ((c10 = e10.onDragBoundsHandle) == null || c10.call(e10, l10, d10)), (m10 = e10.onPointerMove) == null || m10.call(e10, l10, d10);
  }, [t10, e10, r10]), s10 = pe3.useCallback((d10) => {
    var l10;
    !t10.pointerIsValid(d10) || (l10 = e10.onHoverBoundsHandle) == null || l10.call(e10, t10.pointerEnter(d10, r10), d10);
  }, [t10, e10, r10]), a10 = pe3.useCallback((d10) => {
    var l10;
    !t10.pointerIsValid(d10) || (l10 = e10.onUnhoverBoundsHandle) == null || l10.call(e10, t10.pointerEnter(d10, r10), d10);
  }, [t10, e10, r10]);
  return { onPointerDown: n10, onPointerUp: o10, onPointerEnter: s10, onPointerMove: i10, onPointerLeave: a10 };
}
function lt(r10, e10, t10) {
  let n10 = xe2.useRef(), o10 = xe2.useRef();
  xe2.useLayoutEffect(() => {
    let { zoom: i10, point: s10 } = t10.camera, a10 = i10 !== n10.current, d10 = s10 !== o10.current;
    if (n10.current = i10, o10.current = s10, a10 || d10) {
      let l10 = r10.current;
      if (e10 && "current" in e10) {
        let c10 = e10.current;
        a10 && c10 && c10.style.setProperty("--tl-zoom", i10.toString()), l10 && l10.style.setProperty("transform", `scale(${i10}) translateX(${s10[0]}px) translateY(${s10[1]}px)`);
      }
    }
  }, [t10.camera.zoom, t10.camera.point]);
}
function ct(r10, e10) {
  return [(r10[0] + e10.point[0]) * e10.zoom, (r10[1] + e10.point[1]) * e10.zoom];
}
function Fe(r10, e10) {
  return r10[e10.type];
}
function mt(r10, e10, t10) {
  let { rSelectionBounds: n10 } = R3(), { selectedIds: o10 } = e10, i10 = ut.useRef(), s10, a10 = 0, d10 = false, l10 = false;
  if (o10.length === 1) {
    let m10 = o10[0], p10 = r10.shapes[m10];
    if (!p10)
      throw Error(`selectedIds is set to the id of a shape that doesn't exist: ${m10}`);
    a10 = p10.rotation || 0, d10 = p10.isLocked || false;
    let u10 = Fe(t10, p10);
    s10 = u10.hideBounds ? void 0 : u10.getBounds(p10);
  } else if (o10.length > 1) {
    let m10 = o10.map((p10) => r10.shapes[p10]);
    a10 = 0, d10 = m10.every((p10) => p10.isLocked), s10 = m10.reduce((p10, u10, y10) => y10 === 0 ? Fe(t10, u10).getRotatedBounds(u10) : w2.getExpandedBounds(p10, Fe(t10, u10).getRotatedBounds(u10)), {});
  }
  if (s10) {
    let [m10, p10] = ct([s10.minX, s10.minY], e10.camera), [u10, y10] = ct([s10.maxX, s10.maxY], e10.camera);
    l10 = !!Object.values(r10.bindings).find((T10) => o10.includes(T10.toId) || o10.includes(T10.fromId)), n10.current = { minX: m10, minY: p10, maxX: u10, maxY: y10, width: u10 - m10, height: y10 - p10 };
  } else
    n10.current = null;
  let c10 = i10.current;
  return !c10 || !s10 ? i10.current = s10 : s10 && c10.minX === s10.minX && c10.minY === s10.minY && c10.maxX === s10.maxX && c10.maxY === s10.maxY && (s10 = i10.current), { bounds: s10, rotation: a10, isLocked: d10, isLinked: l10 };
}
function ht(r10) {
  let { inputs: e10, callbacks: t10 } = R3();
  return pt.useMemo(() => ({ onPointerDown: (n10) => {
    var i10, s10, a10;
    if (n10.dead || (n10.dead = true, !e10.pointerIsValid(n10)) || n10.button === 2)
      return;
    (i10 = n10.currentTarget) == null || i10.setPointerCapture(n10.pointerId);
    let o10 = e10.pointerDown(n10, r10);
    n10.button === 0 && ((s10 = t10.onPointHandle) == null || s10.call(t10, o10, n10)), (a10 = t10.onPointerDown) == null || a10.call(t10, o10, n10);
  }, onPointerUp: (n10) => {
    var s10, a10, d10, l10;
    if (n10.dead || (n10.dead = true, !e10.pointerIsValid(n10)) || n10.button === 2)
      return;
    let o10 = e10.isDoubleClick(), i10 = e10.pointerUp(n10, r10);
    n10.currentTarget.hasPointerCapture(n10.pointerId) && ((s10 = n10.currentTarget) == null || s10.releasePointerCapture(n10.pointerId), n10.button === 0 && (o10 && !(i10.altKey || i10.metaKey) && ((a10 = t10.onDoubleClickHandle) == null || a10.call(t10, i10, n10)), (d10 = t10.onReleaseHandle) == null || d10.call(t10, i10, n10))), (l10 = t10.onPointerUp) == null || l10.call(t10, i10, n10);
  }, onPointerMove: (n10) => {
    var i10, s10;
    if (n10.dead || (n10.dead = true, !e10.pointerIsValid(n10)) || n10.buttons === 2)
      return;
    let o10 = e10.pointerMove(n10, r10);
    n10.buttons === 1 && n10.currentTarget.hasPointerCapture(n10.pointerId) && ((i10 = t10.onDragHandle) == null || i10.call(t10, o10, n10)), (s10 = t10.onPointerMove) == null || s10.call(t10, o10, n10);
  }, onPointerEnter: (n10) => {
    var i10;
    if (!e10.pointerIsValid(n10))
      return;
    let o10 = e10.pointerEnter(n10, r10);
    (i10 = t10.onHoverHandle) == null || i10.call(t10, o10, n10);
  }, onPointerLeave: (n10) => {
    var i10;
    if (!e10.pointerIsValid(n10))
      return;
    let o10 = e10.pointerEnter(n10, r10);
    (i10 = t10.onUnhoverHandle) == null || i10.call(t10, o10, n10);
  } }), [e10, t10, r10]);
}
function Tt(r10) {
  let { bounds: e10 } = R3();
  ft.useEffect(() => {
    let t10 = (i10) => {
      i10.preventDefault();
    }, n10 = (i10) => {
      let s10 = i10.touches[0].pageX, a10 = i10.touches[0].radiusX || 0;
      (s10 - a10 < 10 || s10 + a10 > e10.width - 10) && i10.preventDefault();
    }, o10 = r10.current;
    return o10 ? (o10.addEventListener("gestureend", t10), o10.addEventListener("gesturechange", t10), o10.addEventListener("gesturestart", t10), o10.addEventListener("touchstart", n10), () => {
      o10 && (o10.removeEventListener("gestureend", t10), o10.removeEventListener("gesturechange", t10), o10.removeEventListener("gesturestart", t10), o10.removeEventListener("touchstart", n10));
    }) : () => {
    };
  }, [r10, e10.width]);
}
function Lt() {
  let { callbacks: r10, inputs: e10 } = R3();
  return gt.useMemo(() => ({ onPointerDown: (t10) => {
    var o10, i10, s10, a10;
    if (t10.dead || (t10.dead = true, !e10.pointerIsValid(t10)))
      return;
    if (t10.button === 2) {
      (o10 = r10.onRightPointBounds) == null || o10.call(r10, e10.pointerDown(t10, "bounds"), t10);
      return;
    }
    let n10 = e10.pointerDown(t10, "bounds");
    (i10 = t10.currentTarget) == null || i10.setPointerCapture(t10.pointerId), t10.button === 0 && ((s10 = r10.onPointBounds) == null || s10.call(r10, n10, t10)), (a10 = r10.onPointerDown) == null || a10.call(r10, n10, t10);
  }, onPointerUp: (t10) => {
    var i10, s10, a10, d10;
    if (t10.dead || (t10.dead = true, t10.button === 2) || (e10.activePointer = void 0, !e10.pointerIsValid(t10)))
      return;
    let n10 = e10.isDoubleClick(), o10 = e10.pointerUp(t10, "bounds");
    t10.currentTarget.hasPointerCapture(t10.pointerId) && ((i10 = t10.currentTarget) == null || i10.releasePointerCapture(t10.pointerId)), t10.button === 0 && (n10 && !(o10.altKey || o10.metaKey) && ((s10 = r10.onDoubleClickBounds) == null || s10.call(r10, o10, t10)), (a10 = r10.onReleaseBounds) == null || a10.call(r10, o10, t10)), (d10 = r10.onPointerUp) == null || d10.call(r10, o10, t10);
  }, onPointerMove: (t10) => {
    var o10, i10;
    if (t10.dead || (t10.dead = true, !e10.pointerIsValid(t10)))
      return;
    t10.buttons === 1 && t10.currentTarget.hasPointerCapture(t10.pointerId) && ((o10 = r10.onDragBounds) == null || o10.call(r10, e10.pointerMove(t10, "bounds"), t10));
    let n10 = e10.pointerMove(t10, "bounds");
    (i10 = r10.onPointerMove) == null || i10.call(r10, n10, t10);
  }, onPointerEnter: (t10) => {
    var n10;
    !e10.pointerIsValid(t10) || (n10 = r10.onHoverBounds) == null || n10.call(r10, e10.pointerEnter(t10, "bounds"), t10);
  }, onPointerLeave: (t10) => {
    var n10;
    !e10.pointerIsValid(t10) || (n10 = r10.onUnhoverBounds) == null || n10.call(r10, e10.pointerEnter(t10, "bounds"), t10);
  } }), [e10, r10]);
}
function De(r10, e10 = 0) {
  let t10 = Ke.useRef(null);
  return Ke.useLayoutEffect(() => {
    let n10 = t10.current, o10 = `
    translate(
      calc(${r10.minX}px - var(--tl-padding)),
      calc(${r10.minY}px - var(--tl-padding))
    )
    rotate(${e10 + (r10.rotation || 0)}rad)`;
    n10.style.setProperty("transform", o10), n10.style.setProperty("width", `calc(${Math.floor(r10.width)}px + (var(--tl-padding) * 2))`), n10.style.setProperty("height", `calc(${Math.floor(r10.height)}px + (var(--tl-padding) * 2))`);
  }, [r10, e10]), t10;
}
function vt() {
  let { inputs: r10, callbacks: e10 } = R3();
  yt.useEffect(() => {
    let t10 = (o10) => {
      var i10;
      (i10 = e10.onKeyDown) == null || i10.call(e10, o10.key, r10.keydown(o10), o10);
    }, n10 = (o10) => {
      var i10;
      r10.keyup(o10), (i10 = e10.onKeyUp) == null || i10.call(e10, o10.key, r10.keyup(o10), o10);
    };
    return window.addEventListener("keydown", t10), window.addEventListener("keyup", n10), () => {
      window.removeEventListener("keydown", t10), window.removeEventListener("keyup", n10);
    };
  }, [r10, e10]);
}
function bt(r10, e10) {
  xt.useLayoutEffect(() => {
    if (e10 && "current" in e10) {
      let t10 = e10 == null ? void 0 : e10.current;
      if (!t10)
        return;
      switch (r10) {
        case "transform_selected": {
          t10.style.setProperty("--tl-performance-all", "auto"), t10.style.setProperty("--tl-performance-selected", "transform, contents");
          break;
        }
        case "transform_all": {
          t10.style.setProperty("--tl-performance-all", "transform, contents"), t10.style.setProperty("--tl-performance-selected", "transform, contents");
          break;
        }
        case "translate_selected": {
          t10.style.setProperty("--tl-performance-all", "auto"), t10.style.setProperty("--tl-performance-selected", "transform");
          break;
        }
        case "translate_all": {
          t10.style.setProperty("--tl-performance-all", "transform"), t10.style.setProperty("--tl-performance-selected", "transform");
          break;
        }
        default:
          t10.style.setProperty("--tl-performance-all", "auto"), t10.style.setProperty("--tl-performance-selected", "auto");
      }
    }
  }, [r10]);
}
function un(a10) {
  var d10 = a10, { id: r10, bounds: e10, rotation: t10 = 0, isGhost: n10 = false, isSelected: o10 = false, children: i10 } = d10, s10 = O2(d10, ["id", "bounds", "rotation", "isGhost", "isSelected", "children"]);
  let l10 = De(e10, t10);
  return Ye.createElement("div", g2({ id: r10, ref: l10, className: `tl-positioned${n10 ? " tl-ghost" : ""}${o10 ? " tl-positioned-selected" : ""}`, "aria-label": "container", "data-testid": "container" }, s10), i10);
}
var Z = Ye.memo(un);
function mn({ brush: r10, zoom: e10, dashed: t10 }) {
  return z2.createElement(Z, { bounds: r10, rotation: 0 }, z2.createElement(te, null, z2.createElement("rect", { className: "tl-brush" + (t10 ? " dashed" : ""), opacity: 1, x: 0, y: 0, width: r10.width, height: r10.height, "aria-label": "brush" }), t10 && z2.createElement("g", { className: "tl-dashed-brush-line" }, z2.createElement(Xe, { x1: 0, y1: 0, x2: r10.width, y2: 0, zoom: e10 }), z2.createElement(Xe, { x1: r10.width, y1: 0, x2: r10.width, y2: r10.height, zoom: e10 }), z2.createElement(Xe, { x1: 0, y1: r10.height, x2: r10.width, y2: r10.height, zoom: e10 }), z2.createElement(Xe, { x1: 0, y1: 0, x2: 0, y2: r10.height, zoom: e10 }))));
}
var Pt = z2.memo(mn);
function Xe({ x1: r10, y1: e10, x2: t10, y2: n10, zoom: o10 }) {
  let i10 = w2.getPerfectDashProps(Math.hypot(t10 - r10, n10 - e10), 1 / o10, "dashed", 1, true, 3);
  return z2.createElement("line", { x1: r10, y1: e10, x2: t10, y2: n10, strokeWidth: 1 / o10, strokeDasharray: i10.strokeDasharray, strokeDashoffset: i10.strokeDashoffset });
}
var Rt = W2.memo(({ color: r10 }) => W2.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 35 35", fill: "none", fillRule: "evenodd" }, W2.createElement("g", { fill: "rgba(0,0,0,.2)", transform: "translate(1,1)" }, W2.createElement("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }), W2.createElement("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })), W2.createElement("g", { fill: "white" }, W2.createElement("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }), W2.createElement("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })), W2.createElement("g", { fill: r10 }, W2.createElement("path", { d: "m19.751 24.4155-1.844.774-3.1-7.374 1.841-.775z" }), W2.createElement("path", { d: "m13 10.814v11.188l2.969-2.866.428-.139h4.768z" }))));
function hn({ points: r10, zoom: e10 }) {
  if (r10.length === 0)
    return null;
  let t10 = w2.getSvgPathFromStroke(_e(r10, { size: 16 / e10, start: { taper: true } }));
  return Ue.createElement("path", { d: t10, className: "tl-erase-line" });
}
var Et = Ue.memo(hn);
var Bt = [[-1, 0.15, 64], [0.05, 0.375, 16], [0.15, 1, 4], [0.7, 2.5, 1]];
function Ct({ grid: r10, camera: e10 }) {
  return he2.createElement("svg", { className: "tl-grid", version: "1.1", xmlns: "http://www.w3.org/2000/svg" }, he2.createElement("defs", null, Bt.map(([t10, n10, o10], i10) => {
    let s10 = o10 * r10 * e10.zoom, a10 = e10.point[0] * e10.zoom, d10 = e10.point[1] * e10.zoom, l10 = a10 > 0 ? a10 % s10 : s10 + a10 % s10, c10 = d10 > 0 ? d10 % s10 : s10 + d10 % s10, m10 = e10.zoom < n10 ? w2.modulate(e10.zoom, [t10, n10], [0, 1]) : 1;
    return he2.createElement("pattern", { key: `grid-pattern-${i10}`, id: `grid-${i10}`, width: s10, height: s10, patternUnits: "userSpaceOnUse" }, he2.createElement("circle", { className: "tl-grid-dot", cx: l10, cy: c10, r: 1, opacity: m10 }));
  })), Bt.map((t10, n10) => he2.createElement("rect", { key: `grid-rect-${n10}`, width: "100%", height: "100%", fill: `url(#grid-${n10})` })));
}
function fn({ camera: { zoom: r10, point: e10 }, children: t10 }) {
  let n10 = 2.5 / r10;
  return ne.createElement("svg", { className: "tl-overlay" }, ne.createElement("defs", null, ne.createElement("g", { id: "tl-snap-point" }, ne.createElement("path", { className: "tl-snap-point", d: `M ${-n10},${-n10} L ${n10},${n10} M ${-n10},${n10} L ${n10},${-n10}` }))), ne.createElement("g", { transform: `scale(${r10}) translate(${e10})` }, t10));
}
var St = ne.memo(fn);
var te = ae2.memo(ae2.forwardRef(function(s10, i10) {
  var a10 = s10, { id: e10, className: t10 = "", children: n10 } = a10, o10 = O2(a10, ["id", "className", "children"]);
  return ae2.createElement("svg", g2({ ref: i10, className: `tl-positioned-svg ${t10}` }, o10), ae2.createElement("g", { id: e10, className: "tl-centered-g" }, n10));
}));
function Tn({ bounds: r10, isLocked: e10, isHidden: t10 }) {
  return $e.createElement("rect", { className: ["tl-bounds-center", e10 ? "tl-dashed" : ""].join(" "), x: -1, y: -1, width: r10.width + 2, height: r10.height + 2, opacity: t10 ? 0 : 1, pointerEvents: "none", "aria-label": "center handle" });
}
var wt = $e.memo(Tn);
var gn = { right: 0, bottomRight: 45, bottom: 90, bottomLeft: 135, left: 180, topLeft: 225, top: 270, topRight: 315 };
function Ln({ bounds: r10, side: e10, targetSize: t10, size: n10 }) {
  let o10 = t10 * 2, i10 = { left: -o10, topLeft: -o10, bottomLeft: -o10, right: r10.width, topRight: r10.width, bottomRight: r10.width, top: r10.width / 2 - o10 / 2, bottom: r10.width / 2 - o10 / 2 }[e10], s10 = { left: r10.height / 2 - o10 / 2, right: r10.height / 2 - o10 / 2, top: -o10 * 2, topLeft: -o10, topRight: -o10, bottom: r10.height, bottomLeft: r10.height, bottomRight: r10.height }[e10], { callbacks: a10, inputs: d10 } = R3(), l10 = q2.useCallback((c10) => {
    var p10;
    c10.stopPropagation();
    let m10 = d10.pointerDown(c10, e10);
    (p10 = a10.onShapeClone) == null || p10.call(a10, m10, c10);
  }, [a10.onShapeClone]);
  return q2.createElement("g", { className: "tl-clone-target", transform: `translate(${i10}, ${s10})`, "aria-label": "clone button" }, q2.createElement("rect", { className: "tl-transparent", width: t10 * 2, height: t10 * 2 }), q2.createElement("g", { className: "tl-clone-button-target", onPointerDown: l10, transform: `translate(${t10}, ${t10}) rotate(${gn[e10]})` }, q2.createElement("circle", { className: "tl-transparent ", r: t10 }), q2.createElement("path", { className: "tl-clone-button", d: `M -${n10 / 2},-${n10 / 2} L ${n10 / 2},0 -${n10 / 2},${n10 / 2} Z`, strokeLinejoin: "round" })));
}
var Q2 = q2.memo(Ln);
function yn({ targetSize: r10, size: e10, bounds: t10 }) {
  return $3.createElement($3.Fragment, null, $3.createElement(Q2, { targetSize: r10, size: e10, bounds: t10, side: "top" }), $3.createElement(Q2, { targetSize: r10, size: e10, bounds: t10, side: "right" }), $3.createElement(Q2, { targetSize: r10, size: e10, bounds: t10, side: "bottom" }), $3.createElement(Q2, { targetSize: r10, size: e10, bounds: t10, side: "left" }), $3.createElement(Q2, { targetSize: r10, size: e10, bounds: t10, side: "topLeft" }), $3.createElement(Q2, { targetSize: r10, size: e10, bounds: t10, side: "topRight" }), $3.createElement(Q2, { targetSize: r10, size: e10, bounds: t10, side: "bottomLeft" }), $3.createElement(Q2, { targetSize: r10, size: e10, bounds: t10, side: "bottomRight" }));
}
var Ht = $3.memo(yn);
var vn = { ["top_left_corner"]: "tl-cursor-nwse", ["top_right_corner"]: "tl-cursor-nesw", ["bottom_right_corner"]: "tl-cursor-nwse", ["bottom_left_corner"]: "tl-cursor-nesw" };
function xn({ size: r10, targetSize: e10, isHidden: t10, corner: n10, bounds: o10 }) {
  let i10 = _2(n10), s10 = n10 === "top_left_corner" || n10 === "top_right_corner", a10 = n10 === "top_left_corner" || n10 === "bottom_left_corner";
  return fe.createElement("g", { opacity: t10 ? 0 : 1 }, fe.createElement("rect", g2({ className: "tl-transparent " + (t10 ? "" : vn[n10]), "aria-label": "corner transparent", x: (a10 ? -1 : o10.width + 1) - e10, y: (s10 ? -1 : o10.height + 1) - e10, width: e10 * 2, height: e10 * 2, pointerEvents: t10 ? "none" : "all" }, i10)), fe.createElement("rect", { className: "tl-corner-handle", "aria-label": "corner handle", x: (a10 ? -1 : o10.width + 1) - r10 / 2, y: (s10 ? -1 : o10.height + 1) - r10 / 2, width: r10, height: r10, pointerEvents: "none" }));
}
var be2 = fe.memo(xn);
var bn = { ["top_edge"]: "tl-cursor-ns", ["right_edge"]: "tl-cursor-ew", ["bottom_edge"]: "tl-cursor-ns", ["left_edge"]: "tl-cursor-ew" };
function Pn({ size: r10, isHidden: e10, bounds: t10, edge: n10 }) {
  let o10 = _2(n10), i10 = n10 === "top_edge" || n10 === "bottom_edge", s10 = n10 === "right_edge" || n10 === "bottom_edge", { height: a10, width: d10 } = t10;
  return Ne.createElement("rect", g2({ pointerEvents: e10 ? "none" : "all", className: "tl-transparent tl-edge-handle " + (e10 ? "" : bn[n10]), "aria-label": `${n10} handle`, opacity: e10 ? 0 : 1, x: i10 ? r10 / 2 : (s10 ? d10 + 1 : -1) - r10 / 2, y: i10 ? (s10 ? a10 + 1 : -1) - r10 / 2 : r10 / 2, width: i10 ? Math.max(0, d10 + 1 - r10) : r10, height: i10 ? r10 : Math.max(0, a10 + 1 - r10) }, o10));
}
var Pe = Ne.memo(Pn);
function Rn({ size: r10, bounds: e10, isHidden: t10 }) {
  let n10 = _2("left"), o10 = _2("center"), i10 = _2("right");
  return F2.createElement("g", { cursor: "grab", transform: `translate(${e10.width / 2 - r10 * 4}, ${e10.height + r10 * 2})`, "aria-label": "link handle" }, F2.createElement("g", { className: "tl-transparent", pointerEvents: t10 ? "none" : "all" }, F2.createElement("rect", g2({ x: 0, y: 0, width: r10 * 2, height: r10 * 2 }, n10)), F2.createElement("rect", g2({ x: r10 * 3, y: 0, width: r10 * 2, height: r10 * 2 }, o10)), F2.createElement("rect", g2({ x: r10 * 6, y: 0, width: r10 * 2, height: r10 * 2 }, i10))), F2.createElement("g", { className: "tl-rotate-handle", transform: `translate(${r10 / 2}, ${r10 / 2})`, "aria-label": "link rotate handle" }, F2.createElement("path", { d: `M 0,${r10 / 2} L ${r10},${r10} ${r10},0 Z`, pointerEvents: "none", opacity: t10 ? 0 : 1 }), F2.createElement("path", { transform: `translate(${r10 * 3}, 0)`, d: `M 0,0 L ${r10},0 ${r10 / 2},${r10} Z`, pointerEvents: "none", opacity: t10 ? 0 : 1 }), F2.createElement("path", { transform: `translate(${r10 * 6}, 0)`, d: `M ${r10},${r10 / 2} L 0,0 0,${r10} Z`, pointerEvents: "none", opacity: t10 ? 0 : 1 })));
}
var It = F2.memo(Rn);
function En({ bounds: r10, targetSize: e10, size: t10, isHidden: n10 }) {
  let o10 = _2("rotate");
  return Te2.createElement("g", { cursor: "grab", opacity: n10 ? 0 : 1 }, Te2.createElement("circle", g2({ className: "tl-transparent", "aria-label": "rotate handle transparent", cx: r10.width / 2, cy: t10 * -2, r: e10, pointerEvents: n10 ? "none" : "all" }, o10)), Te2.createElement("circle", { className: "tl-rotate-handle", "aria-label": "rotate handle", cx: r10.width / 2, cy: t10 * -2, r: t10 / 2, pointerEvents: "none" }));
}
var Mt = Te2.memo(En);
var Bn = function({ zoom: e10, bounds: t10, viewportWidth: n10, rotation: o10, isHidden: i10, isLocked: s10, hideCloneHandles: a10, hideResizeHandles: d10, hideRotateHandle: l10, hideBindingHandles: c10 }) {
  let m10 = (n10 < 768 ? 16 : 8) / e10, p10 = 8 / e10, u10 = Math.min(t10.width, t10.height) * e10, y10 = !l10 && !i10 && !s10 && u10 > 32, T10 = !i10 && !s10 && u10 > 24, v11 = !i10 && !s10 && u10 > 20, x10 = !a10 && u10 > 24;
  return K3.createElement(Z, { bounds: t10, rotation: o10 }, K3.createElement(te, null, K3.createElement(wt, { bounds: t10, isLocked: s10, isHidden: i10 }), !d10 && !s10 ? K3.createElement(K3.Fragment, null, K3.createElement(Pe, { targetSize: m10, size: p10, bounds: t10, edge: "top_edge", isHidden: !T10 }), K3.createElement(Pe, { targetSize: m10, size: p10, bounds: t10, edge: "right_edge", isHidden: !T10 }), K3.createElement(Pe, { targetSize: m10, size: p10, bounds: t10, edge: "bottom_edge", isHidden: !T10 }), K3.createElement(Pe, { targetSize: m10, size: p10, bounds: t10, edge: "left_edge", isHidden: !T10 }), K3.createElement(be2, { targetSize: m10, size: p10, bounds: t10, isHidden: i10 || !v11, corner: "top_left_corner" }), K3.createElement(be2, { targetSize: m10, size: p10, bounds: t10, isHidden: i10 || !v11, corner: "top_right_corner" }), K3.createElement(be2, { targetSize: m10, size: p10, bounds: t10, isHidden: i10 || !v11, corner: "bottom_right_corner" }), K3.createElement(be2, { targetSize: m10, size: p10, bounds: t10, isHidden: i10 || !v11, corner: "bottom_left_corner" })) : null, y10 && K3.createElement(Mt, { targetSize: m10, size: p10, bounds: t10, isHidden: !T10 }), x10 && K3.createElement(Ht, { bounds: t10, targetSize: m10, size: p10 }), !c10 && K3.createElement(It, { targetSize: m10, size: p10, bounds: t10, isHidden: !T10 })));
};
var kt = K3.memo(Bn);
function Cn({ bounds: r10, rotation: e10, isHidden: t10 }) {
  let n10 = Lt();
  return ge2.createElement(Z, { bounds: r10, rotation: e10 }, ge2.createElement(te, null, ge2.createElement("rect", g2({ className: "tl-bounds-bg", "aria-label": "bounds bg", width: r10.width, height: r10.height, opacity: t10 ? 0 : 1 }, n10))));
}
var Kt = ge2.memo(Cn);
function Sn({ id: r10, point: e10 }) {
  let t10 = ht(r10);
  return oe.createElement(Z, { bounds: w2.translateBounds({ minX: 0, minY: 0, maxX: 0, maxY: 0, width: 0, height: 0 }, e10) }, oe.createElement(te, null, oe.createElement("g", g2({ className: "tl-handle", "aria-label": "handle" }, t10), oe.createElement("circle", { className: "tl-handle-bg", pointerEvents: "all" }), oe.createElement("circle", { className: "tl-counter-scaled tl-handle", pointerEvents: "none", r: 4 }))));
}
var Dt = oe.memo(Sn);
function wn({ shape: r10, zoom: e10 }) {
  if (r10.handles === void 0)
    return null;
  let t10 = null, n10 = Object.values(r10.handles).reduce((o10, i10) => {
    let s10 = e.add(i10.point, r10.point);
    return (!t10 || e.dist(s10, t10) * e10 >= 32) && (o10.push(i10), t10 = s10), o10;
  }, []);
  return n10.length === 1 ? null : de3.createElement(de3.Fragment, null, n10.map((o10) => de3.createElement(Dt, { key: r10.id + "_" + o10.id, id: o10.id, point: e.add(o10.point, r10.point) })));
}
var Yt = de3.memo(wn);
function Hn(r10) {
  let e10 = r10.utils.getRef(r10.shape);
  return We.createElement(r10.utils.Component, g2({ ref: e10 }, r10));
}
var Xt = We.memo(Hn, (r10, e10) => r10.isHovered !== e10.isHovered || r10.isSelected !== e10.isSelected || r10.isEditing !== e10.isEditing || r10.isBinding !== e10.isBinding || r10.isGhost !== e10.isGhost || r10.meta !== e10.meta ? false : e10.shape !== r10.shape ? !e10.utils.shouldRender(e10.shape, r10.shape) : true);
function In(o10) {
  var i10 = o10, { shape: r10, utils: e10, meta: t10 } = i10, n10 = O2(i10, ["shape", "utils", "meta"]);
  let { callbacks: s10 } = R3(), a10 = e10.getBounds(r10), d10 = it(r10.id);
  return Re.createElement(Z, { id: r10.id, bounds: a10, rotation: r10.rotation, "data-shape": r10.type, isGhost: n10.isGhost, isSelected: n10.isSelected }, Re.createElement(Xt, g2({ shape: r10, utils: e10, meta: t10, events: d10, bounds: a10, onShapeChange: s10.onShapeChange, onShapeBlur: s10.onShapeBlur }, n10)));
}
var Ut = Re.memo(In);
function Mn(i10) {
  var s10 = i10, { shape: r10, utils: e10, meta: t10, children: n10 } = s10, o10 = O2(s10, ["shape", "utils", "meta", "children"]);
  return re.createElement(re.Fragment, null, re.createElement(Ut, g2({ shape: r10, utils: e10[r10.type], meta: t10 }, o10)), n10 && n10.map((a10) => re.createElement(je, g2({ key: a10.shape.id, utils: e10 }, a10))));
}
var je = re.memo(Mn);
function kn({ isHovered: r10 = false, isSelected: e10 = false, isEditing: t10 = false, shape: n10, user: o10, meta: i10 }) {
  let { shapeUtils: s10 } = R3(), a10 = s10[n10.type], d10 = a10.getBounds(n10), l10 = De(d10, n10.rotation);
  return le2.createElement("div", { ref: l10, draggable: false, className: ["tl-indicator", "tl-absolute", e10 && !o10 ? "tl-selected" : "tl-hovered", t10 ? "tl-editing" : "", n10.isLocked ? "tl-locked" : ""].join(" ") }, le2.createElement("svg", { width: "100%", height: "100%" }, le2.createElement("g", { className: "tl-centered-g", stroke: o10 == null ? void 0 : o10.color }, le2.createElement(a10.Indicator, { shape: n10, meta: i10, user: o10, bounds: d10, isSelected: e10, isHovered: r10 }))));
}
var Ee = le2.memo(kn);
function Kn({ page: r10, pageState: e10, assets: t10, hideBounds: n10, hideHandles: o10, hideIndicators: i10, hideBindingHandles: s10, hideCloneHandles: a10, hideRotateHandle: d10, hideResizeHandles: l10, meta: c10 }) {
  let { bounds: m10, shapeUtils: p10 } = R3(), u10 = at(r10, e10, t10, c10), { bounds: y10, isLinked: T10, isLocked: v11, rotation: x10 } = mt(r10, e10, p10), { selectedIds: f10, hoveredId: L10, editingId: Y10, camera: { zoom: X10 } } = e10, S10 = i10, b10 = true, P10 = false, B10, M10 = f10.map((I10) => r10.shapes[I10]);
  if (M10.length === 1) {
    let I10 = M10[0];
    P10 = Y10 === I10.id, P10 && (S10 = true);
    let A10 = p10[I10.type];
    b10 = a10 || !A10.showCloneHandles, I10.handles !== void 0 && !P10 && (B10 = I10);
  }
  return G3.createElement(G3.Fragment, null, y10 && G3.createElement(Kt, { bounds: y10, rotation: x10, isHidden: n10 }), u10.map((I10) => G3.createElement(je, g2({ key: I10.shape.id, utils: p10 }, I10))), !S10 && M10.map((I10) => G3.createElement(Ee, { key: "selected_" + I10.id, shape: I10, meta: c10, isSelected: true, isEditing: P10 })), !S10 && L10 && L10 !== Y10 && G3.createElement(Ee, { key: "hovered_" + L10, shape: r10.shapes[L10], meta: c10, isHovered: true }), y10 && G3.createElement(kt, { zoom: X10, bounds: y10, viewportWidth: m10.width, isLocked: v11, rotation: x10, isHidden: n10, hideRotateHandle: d10, hideResizeHandles: l10, hideBindingHandles: s10 || !T10, hideCloneHandles: b10 }), !o10 && B10 && G3.createElement(Yt, { shape: B10, zoom: X10 }));
}
var $t = G3.memo(Kn);
function Dn({ snapLines: r10 }) {
  return j2.createElement(j2.Fragment, null, r10.map((e10, t10) => j2.createElement(Xn, { key: t10, snapLine: e10 })));
}
function Yn({ snapLine: r10 }) {
  let e10 = w2.getBoundsFromPoints(r10);
  return j2.createElement(j2.Fragment, null, j2.createElement("line", { className: "tl-snap-line", x1: e10.minX, y1: e10.minY, x2: e10.maxX, y2: e10.maxY }), r10.map(([t10, n10], o10) => j2.createElement("use", { key: o10, href: "#tl-snap-point", x: t10, y: n10 })));
}
var Xn = j2.memo(Yn);
var Nt = j2.memo(Dn);
function Wt({ user: r10, Cursor: e10 }) {
  let t10 = ce3.useRef(null);
  return ce3.useLayoutEffect(() => {
    t10.current && (t10.current.style.transform = `translate(${r10.point[0]}px, ${r10.point[1]}px)`);
  }, [r10.point]), ce3.createElement("div", { ref: t10, className: `tl-absolute tl-user tl-counter-scaled ${r10.session ? "" : "tl-animated"}` }, ce3.createElement(e10, { id: r10.id, color: r10.color, metadata: r10.metadata }));
}
function At({ userId: r10, users: e10, Cursor: t10 }) {
  return Be.createElement(Be.Fragment, null, Object.values(e10).filter((n10) => n10 && n10.id !== r10).map((n10) => Be.createElement(Wt, { key: n10.id, user: n10, Cursor: t10 })));
}
function Ot({ userId: r10, users: e10, meta: t10, page: n10 }) {
  let { shapeUtils: o10 } = R3();
  return ie3.createElement(ie3.Fragment, null, Object.values(e10).filter(Boolean).filter((i10) => i10.id !== r10 && i10.selectedIds.length > 0).map((i10) => {
    let s10 = i10.selectedIds.map((d10) => n10.shapes[d10]).filter(Boolean);
    if (s10.length === 0)
      return null;
    let a10 = w2.getCommonBounds(s10.map((d10) => o10[d10.type].getBounds(d10)));
    return ie3.createElement(ie3.Fragment, { key: i10.id + "_shapes" }, ie3.createElement("div", { className: "tl-absolute tl-user-indicator-bounds", style: { backgroundColor: i10.color + "0d", borderColor: i10.color + "78", transform: `translate(${a10.minX}px, ${a10.minY}px)`, width: a10.width, height: a10.height, pointerEvents: "none" } }), s10.map((d10) => ie3.createElement(Ee, { key: `${i10.id}_${d10.id}_indicator`, shape: d10, user: i10, meta: t10, isHovered: true })));
  }));
}
var Un = (r10) => {
  let e10 = r10.parentElement;
  for (; e10; ) {
    if (e10 === document.body)
      return document;
    let { overflowY: t10 } = window.getComputedStyle(e10);
    if (e10.scrollHeight > e10.clientHeight && (t10 === "auto" || t10 === "scroll" || t10 === "overlay"))
      return e10;
    e10 = e10.parentElement;
  }
  return document;
};
function Vt(r10, e10) {
  let { inputs: t10, callbacks: n10 } = R3(), o10 = se3.useRef(false), i10 = se3.useCallback(() => {
    var s10, a10;
    if (o10.current) {
      let d10 = (s10 = r10.current) == null ? void 0 : s10.getBoundingClientRect();
      if (d10) {
        let l10 = { minX: d10.left, maxX: d10.left + d10.width, minY: d10.top, maxY: d10.top + d10.height, width: d10.width, height: d10.height };
        t10.bounds = l10, e10(l10), (a10 = n10.onBoundsChange) == null || a10.call(n10, l10);
      }
    } else
      o10.current = true;
  }, [r10, t10, n10.onBoundsChange]);
  se3.useEffect(() => {
    let s10 = r10.current ? Un(r10.current) : document, a10 = C3.debounce(i10, 100);
    return s10.addEventListener("scroll", a10), window.addEventListener("resize", a10), () => {
      s10.removeEventListener("scroll", a10), window.removeEventListener("resize", a10);
    };
  }, []), se3.useEffect(() => {
    let s10 = new ResizeObserver((a10) => {
      t10.isPinching || a10[0].contentRect && i10();
    });
    return r10.current && s10.observe(r10.current), () => {
      s10.disconnect();
    };
  }, [r10, t10]), se3.useEffect(() => {
    i10();
  }, [r10]);
}
function $n({ id: r10, page: e10, pageState: t10, assets: n10, snapLines: o10, eraseLine: i10, grid: s10, users: a10, userId: d10, components: l10 = {}, meta: c10, performanceMode: m10, showDashedBrush: p10, hideHandles: u10, hideBounds: y10, hideIndicators: T10, hideBindingHandles: v11, hideCloneHandles: x10, hideResizeHandles: f10, hideRotateHandle: L10, hideGrid: Y10, onBoundsChange: X10, hideCursors: S10 }) {
  var A10;
  let b10 = D2.useRef(null), P10 = D2.useRef(t10.camera.zoom);
  P10.current = t10.camera.zoom, tt(P10, b10), Vt(b10, X10), nt(), Tt(b10);
  let B10 = D2.useRef(null), M10 = D2.useRef(null);
  lt(M10, B10, t10), bt(m10, B10), vt();
  let I10 = rt();
  return D2.createElement("div", { id: r10, className: "tl-container", ref: B10 }, D2.createElement("div", g2({ id: "canvas", className: "tl-absolute tl-canvas", ref: b10 }, I10), !Y10 && s10 && D2.createElement(Ct, { grid: s10, camera: t10.camera }), D2.createElement("div", { ref: M10, className: "tl-absolute tl-layer", "data-testid": "layer" }, D2.createElement($t, { page: e10, pageState: t10, assets: n10, hideBounds: y10, hideIndicators: T10, hideHandles: u10, hideBindingHandles: v11, hideCloneHandles: x10, hideResizeHandles: f10, hideRotateHandle: L10, meta: c10 }), a10 && d10 && D2.createElement(Ot, { userId: d10, users: a10, page: e10, meta: c10 }), t10.brush && D2.createElement(Pt, { brush: t10.brush, dashed: p10, zoom: t10.camera.zoom }), a10 && !S10 && D2.createElement(At, { userId: d10, users: a10, Cursor: (A10 = l10 == null ? void 0 : l10.Cursor) != null ? A10 : Rt })), D2.createElement(St, { camera: t10.camera }, i10 && D2.createElement(Et, { points: i10, zoom: t10.camera.zoom }), o10 && D2.createElement(Nt, { snapLines: o10 }))));
}
var zt = D2.memo($n);
var Nn = 250;
var H2 = class {
  constructor() {
    E2(this, "pointer");
    E2(this, "keyboard");
    E2(this, "keys", {});
    E2(this, "isPinching", false);
    E2(this, "bounds", { minX: 0, maxX: 640, minY: 0, maxY: 480, width: 640, height: 480 });
    E2(this, "pointerUpTime", 0);
    E2(this, "activePointer");
    E2(this, "panStart", (e10) => {
      var a10, d10;
      let { shiftKey: t10, ctrlKey: n10, metaKey: o10, altKey: i10 } = e10, s10 = { target: "wheel", pointerId: ((a10 = this.pointer) == null ? void 0 : a10.pointerId) || 0, origin: ((d10 = this.pointer) == null ? void 0 : d10.origin) || [0, 0], delta: [0, 0], pressure: 0.5, point: H2.getPoint(e10, this.bounds), shiftKey: t10, ctrlKey: n10, metaKey: o10, altKey: i10, spaceKey: this.keys[" "] };
      return this.pointer = s10, s10;
    });
    E2(this, "pan", (e10, t10) => {
      if (!this.pointer || this.pointer.target !== "wheel")
        return this.panStart(t10);
      let { shiftKey: n10, ctrlKey: o10, metaKey: i10, altKey: s10 } = t10, a10 = this.pointer, d10 = H2.getPoint(t10, this.bounds), l10 = U2(g2({}, a10), { target: "wheel", delta: e10, point: d10, shiftKey: n10, ctrlKey: o10, metaKey: i10, altKey: s10, spaceKey: this.keys[" "] });
      return this.pointer = l10, l10;
    });
    E2(this, "keydown", (e10) => {
      var s10, a10;
      let { shiftKey: t10, ctrlKey: n10, metaKey: o10, altKey: i10 } = e10;
      return this.keys[e10.key] = true, { point: ((s10 = this.pointer) == null ? void 0 : s10.point) || [0, 0], origin: ((a10 = this.pointer) == null ? void 0 : a10.origin) || [0, 0], key: e10.key, keys: Object.keys(this.keys), shiftKey: t10, ctrlKey: n10, metaKey: C3.isDarwin() ? o10 : n10, altKey: i10 };
    });
    E2(this, "keyup", (e10) => {
      var s10, a10;
      let { shiftKey: t10, ctrlKey: n10, metaKey: o10, altKey: i10 } = e10;
      return delete this.keys[e10.key], { point: ((s10 = this.pointer) == null ? void 0 : s10.point) || [0, 0], origin: ((a10 = this.pointer) == null ? void 0 : a10.origin) || [0, 0], key: e10.key, keys: Object.keys(this.keys), shiftKey: t10, ctrlKey: n10, metaKey: C3.isDarwin() ? o10 : n10, altKey: i10 };
    });
  }
  pointerIsValid(e10) {
    if ("pointerId" in e10 && this.activePointer && this.activePointer !== e10.pointerId)
      return false;
    if ("touches" in e10) {
      let t10 = e10.changedTouches[0];
      if (this.activePointer && this.activePointer !== t10.identifier)
        return false;
    }
    return true;
  }
  touchStart(e10, t10) {
    let { shiftKey: n10, ctrlKey: o10, metaKey: i10, altKey: s10 } = e10, a10 = e10.changedTouches[0];
    this.activePointer = a10.identifier;
    let d10 = { target: t10, pointerId: a10.identifier, origin: H2.getPoint(a10, this.bounds), delta: [0, 0], point: H2.getPoint(a10, this.bounds), pressure: H2.getPressure(a10), shiftKey: n10, ctrlKey: o10, metaKey: C3.isDarwin() ? i10 : o10, altKey: s10, spaceKey: this.keys[" "] };
    return this.pointer = d10, d10;
  }
  touchEnd(e10, t10) {
    let { shiftKey: n10, ctrlKey: o10, metaKey: i10, altKey: s10 } = e10, a10 = e10.changedTouches[0], d10 = { target: t10, pointerId: a10.identifier, origin: H2.getPoint(a10, this.bounds), delta: [0, 0], point: H2.getPoint(a10, this.bounds), pressure: H2.getPressure(a10), shiftKey: n10, ctrlKey: o10, metaKey: C3.isDarwin() ? i10 : o10, altKey: s10, spaceKey: this.keys[" "] };
    return this.pointer = d10, this.activePointer = void 0, d10;
  }
  touchMove(e10, t10) {
    let { shiftKey: n10, ctrlKey: o10, metaKey: i10, altKey: s10 } = e10, a10 = e10.changedTouches[0], d10 = this.pointer, l10 = H2.getPoint(a10, this.bounds), c10 = (d10 == null ? void 0 : d10.point) ? e.sub(l10, d10.point) : [0, 0], m10 = U2(g2({ origin: l10 }, d10), { target: t10, pointerId: a10.identifier, point: l10, delta: c10, pressure: H2.getPressure(a10), shiftKey: n10, ctrlKey: o10, metaKey: C3.isDarwin() ? i10 : o10, altKey: s10, spaceKey: this.keys[" "] });
    return this.pointer = m10, m10;
  }
  pointerDown(e10, t10) {
    let { shiftKey: n10, ctrlKey: o10, metaKey: i10, altKey: s10 } = e10, a10 = H2.getPoint(e10, this.bounds);
    this.activePointer = e10.pointerId;
    let d10 = { target: t10, pointerId: e10.pointerId, origin: a10, point: a10, delta: [0, 0], pressure: H2.getPressure(e10), shiftKey: n10, ctrlKey: o10, metaKey: C3.isDarwin() ? i10 : o10, altKey: s10, spaceKey: this.keys[" "] };
    return this.pointer = d10, d10;
  }
  pointerEnter(e10, t10) {
    let { shiftKey: n10, ctrlKey: o10, metaKey: i10, altKey: s10 } = e10, a10 = H2.getPoint(e10, this.bounds), d10 = { target: t10, pointerId: e10.pointerId, origin: a10, delta: [0, 0], point: a10, pressure: H2.getPressure(e10), shiftKey: n10, ctrlKey: o10, metaKey: C3.isDarwin() ? i10 : o10, altKey: s10, spaceKey: this.keys[" "] };
    return this.pointer = d10, d10;
  }
  pointerMove(e10, t10) {
    let { shiftKey: n10, ctrlKey: o10, metaKey: i10, altKey: s10 } = e10, a10 = this.pointer, d10 = H2.getPoint(e10, this.bounds), l10 = (a10 == null ? void 0 : a10.point) ? e.sub(d10, a10.point) : [0, 0], c10 = U2(g2({ origin: d10 }, a10), { target: t10, pointerId: e10.pointerId, point: d10, delta: l10, pressure: H2.getPressure(e10), shiftKey: n10, ctrlKey: o10, metaKey: C3.isDarwin() ? i10 : o10, altKey: s10, spaceKey: this.keys[" "] });
    return this.pointer = c10, c10;
  }
  pointerUp(e10, t10) {
    let { shiftKey: n10, ctrlKey: o10, metaKey: i10, altKey: s10 } = e10, a10 = this.pointer, d10 = H2.getPoint(e10, this.bounds), l10 = (a10 == null ? void 0 : a10.point) ? e.sub(d10, a10.point) : [0, 0];
    this.activePointer = void 0;
    let c10 = U2(g2({ origin: d10 }, a10), { target: t10, pointerId: e10.pointerId, point: d10, delta: l10, pressure: H2.getPressure(e10), shiftKey: n10, ctrlKey: o10, metaKey: C3.isDarwin() ? i10 : o10, altKey: s10, spaceKey: this.keys[" "] });
    return this.pointer = c10, this.pointerUpTime = performance.now(), c10;
  }
  isDoubleClick() {
    if (!this.pointer)
      return false;
    let { origin: e10, point: t10 } = this.pointer, n10 = performance.now() - this.pointerUpTime < Nn && e.dist(e10, t10) < 4;
    return n10 && (this.activePointer = void 0), n10;
  }
  clear() {
    this.pointer = void 0;
  }
  resetDoubleClick() {
    this.pointerUpTime = 0;
  }
  pinch(e10, t10) {
    let { shiftKey: n10, ctrlKey: o10, metaKey: i10, altKey: s10 } = this.keys, a10 = e.sub(t10, e10), d10 = { pointerId: 0, target: "pinch", origin: t10, delta: a10, point: e.sub(e.toFixed(e10), [this.bounds.minX, this.bounds.minY]), pressure: 0.5, shiftKey: n10, ctrlKey: o10, metaKey: C3.isDarwin() ? i10 : o10, altKey: s10, spaceKey: this.keys[" "] };
    return this.pointer = d10, d10;
  }
  reset() {
    this.pointerUpTime = 0, this.pointer = void 0, this.keyboard = void 0, this.activePointer = void 0, this.keys = {};
  }
  static getPoint(e10, t10) {
    return [+e10.clientX.toFixed(2) - t10.minX, +e10.clientY.toFixed(2) - t10.minY];
  }
  static getPressure(e10) {
    return "pressure" in e10 && +e10.pressure.toFixed(2) || 0.5;
  }
  static commandKey() {
    return C3.isDarwin() ? "\u2318" : "Ctrl";
  }
};
var Cs = new H2();
var Wn = Object.freeze({});
function An(M10) {
  var I10 = M10, { id: r10 = "tl", shapeUtils: e10, page: t10, pageState: n10, assets: o10 = Wn, users: i10, userId: s10, theme: a10, meta: d10, snapLines: l10, eraseLine: c10, grid: m10, containerRef: p10, performanceMode: u10, components: y10, hideHandles: T10 = false, hideIndicators: v11 = false, hideCloneHandles: x10 = false, hideBindingHandles: f10 = false, hideResizeHandles: L10 = false, hideRotateHandles: Y10 = false, hideBounds: X10 = false, hideGrid: S10 = true, showDashedBrush: b10 = false, hideCursors: P10 } = I10, B10 = O2(I10, ["id", "shapeUtils", "page", "pageState", "assets", "users", "userId", "theme", "meta", "snapLines", "eraseLine", "grid", "containerRef", "performanceMode", "components", "hideHandles", "hideIndicators", "hideCloneHandles", "hideBindingHandles", "hideResizeHandles", "hideRotateHandles", "hideBounds", "hideGrid", "showDashedBrush", "hideCursors"]);
  dt(a10, "#" + r10);
  let A10 = N2.useRef(null), J10 = N2.useRef(n10);
  N2.useEffect(() => {
    J10.current = n10;
  }, [n10]);
  let [Ft, Gt2] = N2.useState(() => ({ callbacks: B10, shapeUtils: e10, rSelectionBounds: A10, rPageState: J10, bounds: { minX: 0, minY: 0, maxX: 1 / 0, maxY: 1 / 0, width: 1 / 0, height: 1 / 0 }, inputs: new H2() })), jt = N2.useCallback((_t2) => {
    Gt2((Zt2) => U2(g2({}, Zt2), { bounds: _t2 }));
  }, []);
  return N2.createElement(Le.Provider, { value: Ft }, N2.createElement(zt, { id: r10, page: t10, pageState: n10, assets: o10, snapLines: l10, eraseLine: c10, grid: m10, users: i10, userId: s10, externalContainerRef: p10, hideBounds: X10, hideIndicators: v11, hideHandles: T10, hideCloneHandles: x10, hideBindingHandles: f10, hideRotateHandle: Y10, hideResizeHandles: L10, hideGrid: S10, showDashedBrush: b10, onBoundsChange: jt, performanceMode: u10, components: y10, meta: d10, hideCursors: P10 }));
}
var ks = N2.memo(An);
var Xs = me2.memo(me2.forwardRef(function(i10, o10) {
  var s10 = i10, { children: e10, className: t10 = "" } = s10, n10 = O2(s10, ["children", "className"]);
  return me2.createElement("div", g2({ ref: o10, className: `tl-positioned-div ${t10}`, draggable: false }, n10), me2.createElement("div", { className: "tl-inner-div" }, e10));
}));
var _e2 = class {
  constructor() {
    E2(this, "refMap", /* @__PURE__ */ new Map());
    E2(this, "boundsCache", /* @__PURE__ */ new WeakMap());
    E2(this, "showCloneHandles", false);
    E2(this, "hideBounds", false);
    E2(this, "isStateful", false);
    E2(this, "shouldRender", (e10, t10) => true);
    E2(this, "getRef", (e10) => (this.refMap.has(e10.id) || this.refMap.set(e10.id, Ae.createRef()), this.refMap.get(e10.id)));
    E2(this, "hitTestBounds", (e10, t10) => {
      let n10 = this.getBounds(e10), o10 = w2.getRotatedCorners(n10, e10.rotation);
      return o10.every((i10) => w2.pointInBounds(i10, t10)) || ee2(o10, t10).length > 0;
    });
    E2(this, "getRotatedBounds", (e10) => w2.getBoundsFromPoints(w2.getRotatedCorners(this.getBounds(e10), e10.rotation)));
  }
};
E2(_e2, "Component", (e10) => Ae.forwardRef(e10)), E2(_e2, "Indicator", (e10) => e10);

// node_modules/@tldraw/tldraw/dist/index.mjs
var Se3 = __toESM(require_react(), 1);
var import_react_error_boundary = __toESM(require_react_error_boundary_umd(), 1);

// node_modules/tslib/modules/index.js
var import_tslib = __toESM(require_tslib(), 1);
var {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __exportStar,
  __createBinding,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn
} = import_tslib.default;

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/src/components/createFormattedComponent.js
var React6 = __toESM(require_react());

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/src/components/useIntl.js
var React5 = __toESM(require_react());

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/src/components/injectIntl.js
var React4 = __toESM(require_react());
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/src/utils.js
var React3 = __toESM(require_react());

// node_modules/@formatjs/ecma402-abstract/lib/utils.js
function invariant(condition, message, Err) {
  if (Err === void 0) {
    Err = Error;
  }
  if (!condition) {
    throw new Err(message);
  }
}

// node_modules/@formatjs/icu-messageformat-parser/lib/error.js
var ErrorKind;
(function(ErrorKind2) {
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
  ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
  ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
  ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
  ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
  ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
  ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
  ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
  ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
  ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
  ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
  ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
  ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
  ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
  ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
})(ErrorKind || (ErrorKind = {}));

// node_modules/@formatjs/icu-messageformat-parser/lib/types.js
var TYPE;
(function(TYPE2) {
  TYPE2[TYPE2["literal"] = 0] = "literal";
  TYPE2[TYPE2["argument"] = 1] = "argument";
  TYPE2[TYPE2["number"] = 2] = "number";
  TYPE2[TYPE2["date"] = 3] = "date";
  TYPE2[TYPE2["time"] = 4] = "time";
  TYPE2[TYPE2["select"] = 5] = "select";
  TYPE2[TYPE2["plural"] = 6] = "plural";
  TYPE2[TYPE2["pound"] = 7] = "pound";
  TYPE2[TYPE2["tag"] = 8] = "tag";
})(TYPE || (TYPE = {}));
var SKELETON_TYPE;
(function(SKELETON_TYPE2) {
  SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
  SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
})(SKELETON_TYPE || (SKELETON_TYPE = {}));
function isLiteralElement(el) {
  return el.type === TYPE.literal;
}
function isArgumentElement(el) {
  return el.type === TYPE.argument;
}
function isNumberElement(el) {
  return el.type === TYPE.number;
}
function isDateElement(el) {
  return el.type === TYPE.date;
}
function isTimeElement(el) {
  return el.type === TYPE.time;
}
function isSelectElement(el) {
  return el.type === TYPE.select;
}
function isPluralElement(el) {
  return el.type === TYPE.plural;
}
function isPoundElement(el) {
  return el.type === TYPE.pound;
}
function isTagElement(el) {
  return el.type === TYPE.tag;
}
function isNumberSkeleton(el) {
  return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.number);
}
function isDateTimeSkeleton(el) {
  return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.dateTime);
}

// node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js
var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

// node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js
var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
function parseDateTimeSkeleton(skeleton) {
  var result = {};
  skeleton.replace(DATE_TIME_REGEX, function(match) {
    var len = match.length;
    switch (match[0]) {
      case "G":
        result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
        break;
      case "y":
        result.year = len === 2 ? "2-digit" : "numeric";
        break;
      case "Y":
      case "u":
      case "U":
      case "r":
        throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
      case "q":
      case "Q":
        throw new RangeError("`q/Q` (quarter) patterns are not supported");
      case "M":
      case "L":
        result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
        break;
      case "w":
      case "W":
        throw new RangeError("`w/W` (week) patterns are not supported");
      case "d":
        result.day = ["numeric", "2-digit"][len - 1];
        break;
      case "D":
      case "F":
      case "g":
        throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
      case "E":
        result.weekday = len === 4 ? "long" : len === 5 ? "narrow" : "short";
        break;
      case "e":
        if (len < 4) {
          throw new RangeError("`e..eee` (weekday) patterns are not supported");
        }
        result.weekday = ["short", "long", "narrow", "short"][len - 4];
        break;
      case "c":
        if (len < 4) {
          throw new RangeError("`c..ccc` (weekday) patterns are not supported");
        }
        result.weekday = ["short", "long", "narrow", "short"][len - 4];
        break;
      case "a":
        result.hour12 = true;
        break;
      case "b":
      case "B":
        throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
      case "h":
        result.hourCycle = "h12";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "H":
        result.hourCycle = "h23";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "K":
        result.hourCycle = "h11";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "k":
        result.hourCycle = "h24";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "j":
      case "J":
      case "C":
        throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
      case "m":
        result.minute = ["numeric", "2-digit"][len - 1];
        break;
      case "s":
        result.second = ["numeric", "2-digit"][len - 1];
        break;
      case "S":
      case "A":
        throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
      case "z":
        result.timeZoneName = len < 4 ? "short" : "long";
        break;
      case "Z":
      case "O":
      case "v":
      case "V":
      case "X":
      case "x":
        throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
    }
    return "";
  });
  return result;
}

// node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js
var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

// node_modules/@formatjs/icu-skeleton-parser/lib/number.js
function parseNumberSkeletonFromString(skeleton) {
  if (skeleton.length === 0) {
    throw new Error("Number skeleton cannot be empty");
  }
  var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function(x10) {
    return x10.length > 0;
  });
  var tokens = [];
  for (var _i2 = 0, stringTokens_1 = stringTokens; _i2 < stringTokens_1.length; _i2++) {
    var stringToken = stringTokens_1[_i2];
    var stemAndOptions = stringToken.split("/");
    if (stemAndOptions.length === 0) {
      throw new Error("Invalid number skeleton");
    }
    var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
    for (var _a3 = 0, options_1 = options; _a3 < options_1.length; _a3++) {
      var option = options_1[_a3];
      if (option.length === 0) {
        throw new Error("Invalid number skeleton");
      }
    }
    tokens.push({ stem, options });
  }
  return tokens;
}
function icuUnitToEcma(unit) {
  return unit.replace(/^(.*?)-/, "");
}
var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
function parseSignificantPrecision(str) {
  var result = {};
  if (str[str.length - 1] === "r") {
    result.roundingPriority = "morePrecision";
  } else if (str[str.length - 1] === "s") {
    result.roundingPriority = "lessPrecision";
  }
  str.replace(SIGNIFICANT_PRECISION_REGEX, function(_10, g12, g23) {
    if (typeof g23 !== "string") {
      result.minimumSignificantDigits = g12.length;
      result.maximumSignificantDigits = g12.length;
    } else if (g23 === "+") {
      result.minimumSignificantDigits = g12.length;
    } else if (g12[0] === "#") {
      result.maximumSignificantDigits = g12.length;
    } else {
      result.minimumSignificantDigits = g12.length;
      result.maximumSignificantDigits = g12.length + (typeof g23 === "string" ? g23.length : 0);
    }
    return "";
  });
  return result;
}
function parseSign(str) {
  switch (str) {
    case "sign-auto":
      return {
        signDisplay: "auto"
      };
    case "sign-accounting":
    case "()":
      return {
        currencySign: "accounting"
      };
    case "sign-always":
    case "+!":
      return {
        signDisplay: "always"
      };
    case "sign-accounting-always":
    case "()!":
      return {
        signDisplay: "always",
        currencySign: "accounting"
      };
    case "sign-except-zero":
    case "+?":
      return {
        signDisplay: "exceptZero"
      };
    case "sign-accounting-except-zero":
    case "()?":
      return {
        signDisplay: "exceptZero",
        currencySign: "accounting"
      };
    case "sign-never":
    case "+_":
      return {
        signDisplay: "never"
      };
  }
}
function parseConciseScientificAndEngineeringStem(stem) {
  var result;
  if (stem[0] === "E" && stem[1] === "E") {
    result = {
      notation: "engineering"
    };
    stem = stem.slice(2);
  } else if (stem[0] === "E") {
    result = {
      notation: "scientific"
    };
    stem = stem.slice(1);
  }
  if (result) {
    var signDisplay = stem.slice(0, 2);
    if (signDisplay === "+!") {
      result.signDisplay = "always";
      stem = stem.slice(2);
    } else if (signDisplay === "+?") {
      result.signDisplay = "exceptZero";
      stem = stem.slice(2);
    }
    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
      throw new Error("Malformed concise eng/scientific notation");
    }
    result.minimumIntegerDigits = stem.length;
  }
  return result;
}
function parseNotationOptions(opt) {
  var result = {};
  var signOpts = parseSign(opt);
  if (signOpts) {
    return signOpts;
  }
  return result;
}
function parseNumberSkeleton(tokens) {
  var result = {};
  for (var _i2 = 0, tokens_1 = tokens; _i2 < tokens_1.length; _i2++) {
    var token = tokens_1[_i2];
    switch (token.stem) {
      case "percent":
      case "%":
        result.style = "percent";
        continue;
      case "%x100":
        result.style = "percent";
        result.scale = 100;
        continue;
      case "currency":
        result.style = "currency";
        result.currency = token.options[0];
        continue;
      case "group-off":
      case ",_":
        result.useGrouping = false;
        continue;
      case "precision-integer":
      case ".":
        result.maximumFractionDigits = 0;
        continue;
      case "measure-unit":
      case "unit":
        result.style = "unit";
        result.unit = icuUnitToEcma(token.options[0]);
        continue;
      case "compact-short":
      case "K":
        result.notation = "compact";
        result.compactDisplay = "short";
        continue;
      case "compact-long":
      case "KK":
        result.notation = "compact";
        result.compactDisplay = "long";
        continue;
      case "scientific":
        result = __assign(__assign(__assign({}, result), { notation: "scientific" }), token.options.reduce(function(all, opt2) {
          return __assign(__assign({}, all), parseNotationOptions(opt2));
        }, {}));
        continue;
      case "engineering":
        result = __assign(__assign(__assign({}, result), { notation: "engineering" }), token.options.reduce(function(all, opt2) {
          return __assign(__assign({}, all), parseNotationOptions(opt2));
        }, {}));
        continue;
      case "notation-simple":
        result.notation = "standard";
        continue;
      case "unit-width-narrow":
        result.currencyDisplay = "narrowSymbol";
        result.unitDisplay = "narrow";
        continue;
      case "unit-width-short":
        result.currencyDisplay = "code";
        result.unitDisplay = "short";
        continue;
      case "unit-width-full-name":
        result.currencyDisplay = "name";
        result.unitDisplay = "long";
        continue;
      case "unit-width-iso-code":
        result.currencyDisplay = "symbol";
        continue;
      case "scale":
        result.scale = parseFloat(token.options[0]);
        continue;
      case "integer-width":
        if (token.options.length > 1) {
          throw new RangeError("integer-width stems only accept a single optional option");
        }
        token.options[0].replace(INTEGER_WIDTH_REGEX, function(_10, g12, g23, g33, g43, g53) {
          if (g12) {
            result.minimumIntegerDigits = g23.length;
          } else if (g33 && g43) {
            throw new Error("We currently do not support maximum integer digits");
          } else if (g53) {
            throw new Error("We currently do not support exact integer digits");
          }
          return "";
        });
        continue;
    }
    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
      result.minimumIntegerDigits = token.stem.length;
      continue;
    }
    if (FRACTION_PRECISION_REGEX.test(token.stem)) {
      if (token.options.length > 1) {
        throw new RangeError("Fraction-precision stems only accept a single optional option");
      }
      token.stem.replace(FRACTION_PRECISION_REGEX, function(_10, g12, g23, g33, g43, g53) {
        if (g23 === "*") {
          result.minimumFractionDigits = g12.length;
        } else if (g33 && g33[0] === "#") {
          result.maximumFractionDigits = g33.length;
        } else if (g43 && g53) {
          result.minimumFractionDigits = g43.length;
          result.maximumFractionDigits = g43.length + g53.length;
        } else {
          result.minimumFractionDigits = g12.length;
          result.maximumFractionDigits = g12.length;
        }
        return "";
      });
      var opt = token.options[0];
      if (opt === "w") {
        result = __assign(__assign({}, result), { trailingZeroDisplay: "stripIfInteger" });
      } else if (opt) {
        result = __assign(__assign({}, result), parseSignificantPrecision(opt));
      }
      continue;
    }
    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
      result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));
      continue;
    }
    var signOpts = parseSign(token.stem);
    if (signOpts) {
      result = __assign(__assign({}, result), signOpts);
    }
    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
    if (conciseScientificAndEngineeringOpts) {
      result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);
    }
  }
  return result;
}

// node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js
var timeData = {
  "001": [
    "H",
    "h"
  ],
  "AC": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "AD": [
    "H",
    "hB"
  ],
  "AE": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "AF": [
    "H",
    "hb",
    "hB",
    "h"
  ],
  "AG": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "AI": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "AL": [
    "h",
    "H",
    "hB"
  ],
  "AM": [
    "H",
    "hB"
  ],
  "AO": [
    "H",
    "hB"
  ],
  "AR": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "AS": [
    "h",
    "H"
  ],
  "AT": [
    "H",
    "hB"
  ],
  "AU": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "AW": [
    "H",
    "hB"
  ],
  "AX": [
    "H"
  ],
  "AZ": [
    "H",
    "hB",
    "h"
  ],
  "BA": [
    "H",
    "hB",
    "h"
  ],
  "BB": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "BD": [
    "h",
    "hB",
    "H"
  ],
  "BE": [
    "H",
    "hB"
  ],
  "BF": [
    "H",
    "hB"
  ],
  "BG": [
    "H",
    "hB",
    "h"
  ],
  "BH": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "BI": [
    "H",
    "h"
  ],
  "BJ": [
    "H",
    "hB"
  ],
  "BL": [
    "H",
    "hB"
  ],
  "BM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "BN": [
    "hb",
    "hB",
    "h",
    "H"
  ],
  "BO": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "BQ": [
    "H"
  ],
  "BR": [
    "H",
    "hB"
  ],
  "BS": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "BT": [
    "h",
    "H"
  ],
  "BW": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "BY": [
    "H",
    "h"
  ],
  "BZ": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CA": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "CC": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CD": [
    "hB",
    "H"
  ],
  "CF": [
    "H",
    "h",
    "hB"
  ],
  "CG": [
    "H",
    "hB"
  ],
  "CH": [
    "H",
    "hB",
    "h"
  ],
  "CI": [
    "H",
    "hB"
  ],
  "CK": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CL": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "CM": [
    "H",
    "h",
    "hB"
  ],
  "CN": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "CO": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "CP": [
    "H"
  ],
  "CR": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "CU": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "CV": [
    "H",
    "hB"
  ],
  "CW": [
    "H",
    "hB"
  ],
  "CX": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CY": [
    "h",
    "H",
    "hb",
    "hB"
  ],
  "CZ": [
    "H"
  ],
  "DE": [
    "H",
    "hB"
  ],
  "DG": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "DJ": [
    "h",
    "H"
  ],
  "DK": [
    "H"
  ],
  "DM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "DO": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "DZ": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "EA": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "EC": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "EE": [
    "H",
    "hB"
  ],
  "EG": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "EH": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "ER": [
    "h",
    "H"
  ],
  "ES": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "ET": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "FI": [
    "H"
  ],
  "FJ": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "FK": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "FM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "FO": [
    "H",
    "h"
  ],
  "FR": [
    "H",
    "hB"
  ],
  "GA": [
    "H",
    "hB"
  ],
  "GB": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "GD": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "GE": [
    "H",
    "hB",
    "h"
  ],
  "GF": [
    "H",
    "hB"
  ],
  "GG": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "GH": [
    "h",
    "H"
  ],
  "GI": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "GL": [
    "H",
    "h"
  ],
  "GM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "GN": [
    "H",
    "hB"
  ],
  "GP": [
    "H",
    "hB"
  ],
  "GQ": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "GR": [
    "h",
    "H",
    "hb",
    "hB"
  ],
  "GT": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "GU": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "GW": [
    "H",
    "hB"
  ],
  "GY": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "HK": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "HN": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "HR": [
    "H",
    "hB"
  ],
  "HU": [
    "H",
    "h"
  ],
  "IC": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "ID": [
    "H"
  ],
  "IE": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "IL": [
    "H",
    "hB"
  ],
  "IM": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "IN": [
    "h",
    "H"
  ],
  "IO": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "IQ": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "IR": [
    "hB",
    "H"
  ],
  "IS": [
    "H"
  ],
  "IT": [
    "H",
    "hB"
  ],
  "JE": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "JM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "JO": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "JP": [
    "H",
    "K",
    "h"
  ],
  "KE": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "KG": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "KH": [
    "hB",
    "h",
    "H",
    "hb"
  ],
  "KI": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "KM": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "KN": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "KP": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "KR": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "KW": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "KY": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "KZ": [
    "H",
    "hB"
  ],
  "LA": [
    "H",
    "hb",
    "hB",
    "h"
  ],
  "LB": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "LC": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "LI": [
    "H",
    "hB",
    "h"
  ],
  "LK": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "LR": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "LS": [
    "h",
    "H"
  ],
  "LT": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "LU": [
    "H",
    "h",
    "hB"
  ],
  "LV": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "LY": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "MA": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "MC": [
    "H",
    "hB"
  ],
  "MD": [
    "H",
    "hB"
  ],
  "ME": [
    "H",
    "hB",
    "h"
  ],
  "MF": [
    "H",
    "hB"
  ],
  "MG": [
    "H",
    "h"
  ],
  "MH": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "MK": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "ML": [
    "H"
  ],
  "MM": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "MN": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "MO": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "MP": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "MQ": [
    "H",
    "hB"
  ],
  "MR": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "MS": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "MT": [
    "H",
    "h"
  ],
  "MU": [
    "H",
    "h"
  ],
  "MV": [
    "H",
    "h"
  ],
  "MW": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "MX": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "MY": [
    "hb",
    "hB",
    "h",
    "H"
  ],
  "MZ": [
    "H",
    "hB"
  ],
  "NA": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "NC": [
    "H",
    "hB"
  ],
  "NE": [
    "H"
  ],
  "NF": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NG": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NI": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "NL": [
    "H",
    "hB"
  ],
  "NO": [
    "H",
    "h"
  ],
  "NP": [
    "H",
    "h",
    "hB"
  ],
  "NR": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NU": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NZ": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "OM": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "PA": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "PE": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "PF": [
    "H",
    "h",
    "hB"
  ],
  "PG": [
    "h",
    "H"
  ],
  "PH": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "PK": [
    "h",
    "hB",
    "H"
  ],
  "PL": [
    "H",
    "h"
  ],
  "PM": [
    "H",
    "hB"
  ],
  "PN": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "PR": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "PS": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "PT": [
    "H",
    "hB"
  ],
  "PW": [
    "h",
    "H"
  ],
  "PY": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "QA": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "RE": [
    "H",
    "hB"
  ],
  "RO": [
    "H",
    "hB"
  ],
  "RS": [
    "H",
    "hB",
    "h"
  ],
  "RU": [
    "H"
  ],
  "RW": [
    "H",
    "h"
  ],
  "SA": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "SB": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SC": [
    "H",
    "h",
    "hB"
  ],
  "SD": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "SE": [
    "H"
  ],
  "SG": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SH": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "SI": [
    "H",
    "hB"
  ],
  "SJ": [
    "H"
  ],
  "SK": [
    "H"
  ],
  "SL": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SM": [
    "H",
    "h",
    "hB"
  ],
  "SN": [
    "H",
    "h",
    "hB"
  ],
  "SO": [
    "h",
    "H"
  ],
  "SR": [
    "H",
    "hB"
  ],
  "SS": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "ST": [
    "H",
    "hB"
  ],
  "SV": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "SX": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "SY": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "SZ": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "TA": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "TC": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "TD": [
    "h",
    "H",
    "hB"
  ],
  "TF": [
    "H",
    "h",
    "hB"
  ],
  "TG": [
    "H",
    "hB"
  ],
  "TH": [
    "H",
    "h"
  ],
  "TJ": [
    "H",
    "h"
  ],
  "TL": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "TM": [
    "H",
    "h"
  ],
  "TN": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "TO": [
    "h",
    "H"
  ],
  "TR": [
    "H",
    "hB"
  ],
  "TT": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "TW": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "TZ": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "UA": [
    "H",
    "hB",
    "h"
  ],
  "UG": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "UM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "US": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "UY": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "UZ": [
    "H",
    "hB",
    "h"
  ],
  "VA": [
    "H",
    "h",
    "hB"
  ],
  "VC": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "VE": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "VG": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "VI": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "VN": [
    "H",
    "h"
  ],
  "VU": [
    "h",
    "H"
  ],
  "WF": [
    "H",
    "hB"
  ],
  "WS": [
    "h",
    "H"
  ],
  "XK": [
    "H",
    "hB",
    "h"
  ],
  "YE": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "YT": [
    "H",
    "hB"
  ],
  "ZA": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "ZM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "ZW": [
    "H",
    "h"
  ],
  "af-ZA": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "ar-001": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "ca-ES": [
    "H",
    "h",
    "hB"
  ],
  "en-001": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "es-BO": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-BR": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-EC": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-ES": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-GQ": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-PE": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "fr-CA": [
    "H",
    "h",
    "hB"
  ],
  "gl-ES": [
    "H",
    "h",
    "hB"
  ],
  "gu-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "hi-IN": [
    "hB",
    "h",
    "H"
  ],
  "it-CH": [
    "H",
    "h",
    "hB"
  ],
  "it-IT": [
    "H",
    "h",
    "hB"
  ],
  "kn-IN": [
    "hB",
    "h",
    "H"
  ],
  "ml-IN": [
    "hB",
    "h",
    "H"
  ],
  "mr-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "pa-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "ta-IN": [
    "hB",
    "h",
    "hb",
    "H"
  ],
  "te-IN": [
    "hB",
    "h",
    "H"
  ],
  "zu-ZA": [
    "H",
    "hB",
    "hb",
    "h"
  ]
};

// node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js
function getBestPattern(skeleton, locale) {
  var skeletonCopy = "";
  for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
    var patternChar = skeleton.charAt(patternPos);
    if (patternChar === "j") {
      var extraLength = 0;
      while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {
        extraLength++;
        patternPos++;
      }
      var hourLen = 1 + (extraLength & 1);
      var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
      var dayPeriodChar = "a";
      var hourChar = getDefaultHourSymbolFromLocale(locale);
      if (hourChar == "H" || hourChar == "k") {
        dayPeriodLen = 0;
      }
      while (dayPeriodLen-- > 0) {
        skeletonCopy += dayPeriodChar;
      }
      while (hourLen-- > 0) {
        skeletonCopy = hourChar + skeletonCopy;
      }
    } else if (patternChar === "J") {
      skeletonCopy += "H";
    } else {
      skeletonCopy += patternChar;
    }
  }
  return skeletonCopy;
}
function getDefaultHourSymbolFromLocale(locale) {
  var hourCycle = locale.hourCycle;
  if (hourCycle === void 0 && locale.hourCycles && locale.hourCycles.length) {
    hourCycle = locale.hourCycles[0];
  }
  if (hourCycle) {
    switch (hourCycle) {
      case "h24":
        return "k";
      case "h23":
        return "H";
      case "h12":
        return "h";
      case "h11":
        return "K";
      default:
        throw new Error("Invalid hourCycle");
    }
  }
  var languageTag = locale.language;
  var regionTag;
  if (languageTag !== "root") {
    regionTag = locale.maximize().region;
  }
  var hourCycles = timeData[regionTag || ""] || timeData[languageTag || ""] || timeData["".concat(languageTag, "-001")] || timeData["001"];
  return hourCycles[0];
}

// node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
var _a;
var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
function createLocation(start, end) {
  return { start, end };
}
var hasNativeStartsWith = !!String.prototype.startsWith && "_a".startsWith("a", 1);
var hasNativeFromCodePoint = !!String.fromCodePoint;
var hasNativeFromEntries = !!Object.fromEntries;
var hasNativeCodePointAt = !!String.prototype.codePointAt;
var hasTrimStart = !!String.prototype.trimStart;
var hasTrimEnd = !!String.prototype.trimEnd;
var hasNativeIsSafeInteger = !!Number.isSafeInteger;
var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n10) {
  return typeof n10 === "number" && isFinite(n10) && Math.floor(n10) === n10 && Math.abs(n10) <= 9007199254740991;
};
var REGEX_SUPPORTS_U_AND_Y = true;
try {
  re3 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
  REGEX_SUPPORTS_U_AND_Y = ((_a = re3.exec("a")) === null || _a === void 0 ? void 0 : _a[0]) === "a";
} catch (_10) {
  REGEX_SUPPORTS_U_AND_Y = false;
}
var re3;
var startsWith = hasNativeStartsWith ? function startsWith2(s10, search, position) {
  return s10.startsWith(search, position);
} : function startsWith3(s10, search, position) {
  return s10.slice(position, position + search.length) === search;
};
var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint2() {
  var codePoints = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    codePoints[_i2] = arguments[_i2];
  }
  var elements = "";
  var length = codePoints.length;
  var i10 = 0;
  var code3;
  while (length > i10) {
    code3 = codePoints[i10++];
    if (code3 > 1114111)
      throw RangeError(code3 + " is not a valid code point");
    elements += code3 < 65536 ? String.fromCharCode(code3) : String.fromCharCode(((code3 -= 65536) >> 10) + 55296, code3 % 1024 + 56320);
  }
  return elements;
};
var fromEntries = hasNativeFromEntries ? Object.fromEntries : function fromEntries2(entries) {
  var obj = {};
  for (var _i2 = 0, entries_1 = entries; _i2 < entries_1.length; _i2++) {
    var _a3 = entries_1[_i2], k10 = _a3[0], v11 = _a3[1];
    obj[k10] = v11;
  }
  return obj;
};
var codePointAt = hasNativeCodePointAt ? function codePointAt2(s10, index4) {
  return s10.codePointAt(index4);
} : function codePointAt3(s10, index4) {
  var size5 = s10.length;
  if (index4 < 0 || index4 >= size5) {
    return void 0;
  }
  var first = s10.charCodeAt(index4);
  var second;
  return first < 55296 || first > 56319 || index4 + 1 === size5 || (second = s10.charCodeAt(index4 + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
};
var trimStart = hasTrimStart ? function trimStart2(s10) {
  return s10.trimStart();
} : function trimStart3(s10) {
  return s10.replace(SPACE_SEPARATOR_START_REGEX, "");
};
var trimEnd = hasTrimEnd ? function trimEnd2(s10) {
  return s10.trimEnd();
} : function trimEnd3(s10) {
  return s10.replace(SPACE_SEPARATOR_END_REGEX, "");
};
function RE(s10, flag) {
  return new RegExp(s10, flag);
}
var matchIdentifierAtIndex;
if (REGEX_SUPPORTS_U_AND_Y) {
  IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
  matchIdentifierAtIndex = function matchIdentifierAtIndex2(s10, index4) {
    var _a3;
    IDENTIFIER_PREFIX_RE_1.lastIndex = index4;
    var match = IDENTIFIER_PREFIX_RE_1.exec(s10);
    return (_a3 = match[1]) !== null && _a3 !== void 0 ? _a3 : "";
  };
} else {
  matchIdentifierAtIndex = function matchIdentifierAtIndex2(s10, index4) {
    var match = [];
    while (true) {
      var c10 = codePointAt(s10, index4);
      if (c10 === void 0 || _isWhiteSpace(c10) || _isPatternSyntax(c10)) {
        break;
      }
      match.push(c10);
      index4 += c10 >= 65536 ? 2 : 1;
    }
    return fromCodePoint.apply(void 0, match);
  };
}
var IDENTIFIER_PREFIX_RE_1;
var Parser = function() {
  function Parser2(message, options) {
    if (options === void 0) {
      options = {};
    }
    this.message = message;
    this.position = { offset: 0, line: 1, column: 1 };
    this.ignoreTag = !!options.ignoreTag;
    this.locale = options.locale;
    this.requiresOtherClause = !!options.requiresOtherClause;
    this.shouldParseSkeletons = !!options.shouldParseSkeletons;
  }
  Parser2.prototype.parse = function() {
    if (this.offset() !== 0) {
      throw Error("parser can only be used once");
    }
    return this.parseMessage(0, "", false);
  };
  Parser2.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
    var elements = [];
    while (!this.isEOF()) {
      var char = this.char();
      if (char === 123) {
        var result = this.parseArgument(nestingLevel, expectingCloseTag);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      } else if (char === 125 && nestingLevel > 0) {
        break;
      } else if (char === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
        var position = this.clonePosition();
        this.bump();
        elements.push({
          type: TYPE.pound,
          location: createLocation(position, this.clonePosition())
        });
      } else if (char === 60 && !this.ignoreTag && this.peek() === 47) {
        if (expectingCloseTag) {
          break;
        } else {
          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
        }
      } else if (char === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
        var result = this.parseTag(nestingLevel, parentArgType);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      } else {
        var result = this.parseLiteral(nestingLevel, parentArgType);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      }
    }
    return { val: elements, err: null };
  };
  Parser2.prototype.parseTag = function(nestingLevel, parentArgType) {
    var startPosition = this.clonePosition();
    this.bump();
    var tagName = this.parseTagName();
    this.bumpSpace();
    if (this.bumpIf("/>")) {
      return {
        val: {
          type: TYPE.literal,
          value: "<".concat(tagName, "/>"),
          location: createLocation(startPosition, this.clonePosition())
        },
        err: null
      };
    } else if (this.bumpIf(">")) {
      var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
      if (childrenResult.err) {
        return childrenResult;
      }
      var children = childrenResult.val;
      var endTagStartPosition = this.clonePosition();
      if (this.bumpIf("</")) {
        if (this.isEOF() || !_isAlpha(this.char())) {
          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
        }
        var closingTagNameStartPosition = this.clonePosition();
        var closingTagName = this.parseTagName();
        if (tagName !== closingTagName) {
          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
        }
        this.bumpSpace();
        if (!this.bumpIf(">")) {
          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
        }
        return {
          val: {
            type: TYPE.tag,
            value: tagName,
            children,
            location: createLocation(startPosition, this.clonePosition())
          },
          err: null
        };
      } else {
        return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
      }
    } else {
      return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
    }
  };
  Parser2.prototype.parseTagName = function() {
    var startOffset = this.offset();
    this.bump();
    while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
      this.bump();
    }
    return this.message.slice(startOffset, this.offset());
  };
  Parser2.prototype.parseLiteral = function(nestingLevel, parentArgType) {
    var start = this.clonePosition();
    var value = "";
    while (true) {
      var parseQuoteResult = this.tryParseQuote(parentArgType);
      if (parseQuoteResult) {
        value += parseQuoteResult;
        continue;
      }
      var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
      if (parseUnquotedResult) {
        value += parseUnquotedResult;
        continue;
      }
      var parseLeftAngleResult = this.tryParseLeftAngleBracket();
      if (parseLeftAngleResult) {
        value += parseLeftAngleResult;
        continue;
      }
      break;
    }
    var location2 = createLocation(start, this.clonePosition());
    return {
      val: { type: TYPE.literal, value, location: location2 },
      err: null
    };
  };
  Parser2.prototype.tryParseLeftAngleBracket = function() {
    if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || !_isAlphaOrSlash(this.peek() || 0))) {
      this.bump();
      return "<";
    }
    return null;
  };
  Parser2.prototype.tryParseQuote = function(parentArgType) {
    if (this.isEOF() || this.char() !== 39) {
      return null;
    }
    switch (this.peek()) {
      case 39:
        this.bump();
        this.bump();
        return "'";
      case 123:
      case 60:
      case 62:
      case 125:
        break;
      case 35:
        if (parentArgType === "plural" || parentArgType === "selectordinal") {
          break;
        }
        return null;
      default:
        return null;
    }
    this.bump();
    var codePoints = [this.char()];
    this.bump();
    while (!this.isEOF()) {
      var ch2 = this.char();
      if (ch2 === 39) {
        if (this.peek() === 39) {
          codePoints.push(39);
          this.bump();
        } else {
          this.bump();
          break;
        }
      } else {
        codePoints.push(ch2);
      }
      this.bump();
    }
    return fromCodePoint.apply(void 0, codePoints);
  };
  Parser2.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
    if (this.isEOF()) {
      return null;
    }
    var ch2 = this.char();
    if (ch2 === 60 || ch2 === 123 || ch2 === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch2 === 125 && nestingLevel > 0) {
      return null;
    } else {
      this.bump();
      return fromCodePoint(ch2);
    }
  };
  Parser2.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
    var openingBracePosition = this.clonePosition();
    this.bump();
    this.bumpSpace();
    if (this.isEOF()) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    if (this.char() === 125) {
      this.bump();
      return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
    var value = this.parseIdentifierIfPossible().value;
    if (!value) {
      return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
    this.bumpSpace();
    if (this.isEOF()) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    switch (this.char()) {
      case 125: {
        this.bump();
        return {
          val: {
            type: TYPE.argument,
            value,
            location: createLocation(openingBracePosition, this.clonePosition())
          },
          err: null
        };
      }
      case 44: {
        this.bump();
        this.bumpSpace();
        if (this.isEOF()) {
          return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
      }
      default:
        return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
  };
  Parser2.prototype.parseIdentifierIfPossible = function() {
    var startingPosition = this.clonePosition();
    var startOffset = this.offset();
    var value = matchIdentifierAtIndex(this.message, startOffset);
    var endOffset = startOffset + value.length;
    this.bumpTo(endOffset);
    var endPosition = this.clonePosition();
    var location2 = createLocation(startingPosition, endPosition);
    return { value, location: location2 };
  };
  Parser2.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
    var _a3;
    var typeStartPosition = this.clonePosition();
    var argType = this.parseIdentifierIfPossible().value;
    var typeEndPosition = this.clonePosition();
    switch (argType) {
      case "":
        return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
      case "number":
      case "date":
      case "time": {
        this.bumpSpace();
        var styleAndLocation = null;
        if (this.bumpIf(",")) {
          this.bumpSpace();
          var styleStartPosition = this.clonePosition();
          var result = this.parseSimpleArgStyleIfPossible();
          if (result.err) {
            return result;
          }
          var style = trimEnd(result.val);
          if (style.length === 0) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
          }
          var styleLocation = createLocation(styleStartPosition, this.clonePosition());
          styleAndLocation = { style, styleLocation };
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        var location_1 = createLocation(openingBracePosition, this.clonePosition());
        if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
          var skeleton = trimStart(styleAndLocation.style.slice(2));
          if (argType === "number") {
            var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
            if (result.err) {
              return result;
            }
            return {
              val: { type: TYPE.number, value, location: location_1, style: result.val },
              err: null
            };
          } else {
            if (skeleton.length === 0) {
              return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
            }
            var dateTimePattern = skeleton;
            if (this.locale) {
              dateTimePattern = getBestPattern(skeleton, this.locale);
            }
            var style = {
              type: SKELETON_TYPE.dateTime,
              pattern: dateTimePattern,
              location: styleAndLocation.styleLocation,
              parsedOptions: this.shouldParseSkeletons ? parseDateTimeSkeleton(dateTimePattern) : {}
            };
            var type = argType === "date" ? TYPE.date : TYPE.time;
            return {
              val: { type, value, location: location_1, style },
              err: null
            };
          }
        }
        return {
          val: {
            type: argType === "number" ? TYPE.number : argType === "date" ? TYPE.date : TYPE.time,
            value,
            location: location_1,
            style: (_a3 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a3 !== void 0 ? _a3 : null
          },
          err: null
        };
      }
      case "plural":
      case "selectordinal":
      case "select": {
        var typeEndPosition_1 = this.clonePosition();
        this.bumpSpace();
        if (!this.bumpIf(",")) {
          return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));
        }
        this.bumpSpace();
        var identifierAndLocation = this.parseIdentifierIfPossible();
        var pluralOffset = 0;
        if (argType !== "select" && identifierAndLocation.value === "offset") {
          if (!this.bumpIf(":")) {
            return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
          }
          this.bumpSpace();
          var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
          if (result.err) {
            return result;
          }
          this.bumpSpace();
          identifierAndLocation = this.parseIdentifierIfPossible();
          pluralOffset = result.val;
        }
        var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
        if (optionsResult.err) {
          return optionsResult;
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        var location_2 = createLocation(openingBracePosition, this.clonePosition());
        if (argType === "select") {
          return {
            val: {
              type: TYPE.select,
              value,
              options: fromEntries(optionsResult.val),
              location: location_2
            },
            err: null
          };
        } else {
          return {
            val: {
              type: TYPE.plural,
              value,
              options: fromEntries(optionsResult.val),
              offset: pluralOffset,
              pluralType: argType === "plural" ? "cardinal" : "ordinal",
              location: location_2
            },
            err: null
          };
        }
      }
      default:
        return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
    }
  };
  Parser2.prototype.tryParseArgumentClose = function(openingBracePosition) {
    if (this.isEOF() || this.char() !== 125) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    this.bump();
    return { val: true, err: null };
  };
  Parser2.prototype.parseSimpleArgStyleIfPossible = function() {
    var nestedBraces = 0;
    var startPosition = this.clonePosition();
    while (!this.isEOF()) {
      var ch2 = this.char();
      switch (ch2) {
        case 39: {
          this.bump();
          var apostrophePosition = this.clonePosition();
          if (!this.bumpUntil("'")) {
            return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
          }
          this.bump();
          break;
        }
        case 123: {
          nestedBraces += 1;
          this.bump();
          break;
        }
        case 125: {
          if (nestedBraces > 0) {
            nestedBraces -= 1;
          } else {
            return {
              val: this.message.slice(startPosition.offset, this.offset()),
              err: null
            };
          }
          break;
        }
        default:
          this.bump();
          break;
      }
    }
    return {
      val: this.message.slice(startPosition.offset, this.offset()),
      err: null
    };
  };
  Parser2.prototype.parseNumberSkeletonFromString = function(skeleton, location2) {
    var tokens = [];
    try {
      tokens = parseNumberSkeletonFromString(skeleton);
    } catch (e10) {
      return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location2);
    }
    return {
      val: {
        type: SKELETON_TYPE.number,
        tokens,
        location: location2,
        parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens) : {}
      },
      err: null
    };
  };
  Parser2.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
    var _a3;
    var hasOtherClause = false;
    var options = [];
    var parsedSelectors = /* @__PURE__ */ new Set();
    var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
    while (true) {
      if (selector.length === 0) {
        var startPosition = this.clonePosition();
        if (parentArgType !== "select" && this.bumpIf("=")) {
          var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
          if (result.err) {
            return result;
          }
          selectorLocation = createLocation(startPosition, this.clonePosition());
          selector = this.message.slice(startPosition.offset, this.offset());
        } else {
          break;
        }
      }
      if (parsedSelectors.has(selector)) {
        return this.error(parentArgType === "select" ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
      }
      if (selector === "other") {
        hasOtherClause = true;
      }
      this.bumpSpace();
      var openingBracePosition = this.clonePosition();
      if (!this.bumpIf("{")) {
        return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
      }
      var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
      if (fragmentResult.err) {
        return fragmentResult;
      }
      var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
      if (argCloseResult.err) {
        return argCloseResult;
      }
      options.push([
        selector,
        {
          value: fragmentResult.val,
          location: createLocation(openingBracePosition, this.clonePosition())
        }
      ]);
      parsedSelectors.add(selector);
      this.bumpSpace();
      _a3 = this.parseIdentifierIfPossible(), selector = _a3.value, selectorLocation = _a3.location;
    }
    if (options.length === 0) {
      return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
    }
    if (this.requiresOtherClause && !hasOtherClause) {
      return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
    }
    return { val: options, err: null };
  };
  Parser2.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
    var sign = 1;
    var startingPosition = this.clonePosition();
    if (this.bumpIf("+")) {
    } else if (this.bumpIf("-")) {
      sign = -1;
    }
    var hasDigits = false;
    var decimal = 0;
    while (!this.isEOF()) {
      var ch2 = this.char();
      if (ch2 >= 48 && ch2 <= 57) {
        hasDigits = true;
        decimal = decimal * 10 + (ch2 - 48);
        this.bump();
      } else {
        break;
      }
    }
    var location2 = createLocation(startingPosition, this.clonePosition());
    if (!hasDigits) {
      return this.error(expectNumberError, location2);
    }
    decimal *= sign;
    if (!isSafeInteger(decimal)) {
      return this.error(invalidNumberError, location2);
    }
    return { val: decimal, err: null };
  };
  Parser2.prototype.offset = function() {
    return this.position.offset;
  };
  Parser2.prototype.isEOF = function() {
    return this.offset() === this.message.length;
  };
  Parser2.prototype.clonePosition = function() {
    return {
      offset: this.position.offset,
      line: this.position.line,
      column: this.position.column
    };
  };
  Parser2.prototype.char = function() {
    var offset3 = this.position.offset;
    if (offset3 >= this.message.length) {
      throw Error("out of bound");
    }
    var code3 = codePointAt(this.message, offset3);
    if (code3 === void 0) {
      throw Error("Offset ".concat(offset3, " is at invalid UTF-16 code unit boundary"));
    }
    return code3;
  };
  Parser2.prototype.error = function(kind, location2) {
    return {
      val: null,
      err: {
        kind,
        message: this.message,
        location: location2
      }
    };
  };
  Parser2.prototype.bump = function() {
    if (this.isEOF()) {
      return;
    }
    var code3 = this.char();
    if (code3 === 10) {
      this.position.line += 1;
      this.position.column = 1;
      this.position.offset += 1;
    } else {
      this.position.column += 1;
      this.position.offset += code3 < 65536 ? 1 : 2;
    }
  };
  Parser2.prototype.bumpIf = function(prefix) {
    if (startsWith(this.message, prefix, this.offset())) {
      for (var i10 = 0; i10 < prefix.length; i10++) {
        this.bump();
      }
      return true;
    }
    return false;
  };
  Parser2.prototype.bumpUntil = function(pattern) {
    var currentOffset = this.offset();
    var index4 = this.message.indexOf(pattern, currentOffset);
    if (index4 >= 0) {
      this.bumpTo(index4);
      return true;
    } else {
      this.bumpTo(this.message.length);
      return false;
    }
  };
  Parser2.prototype.bumpTo = function(targetOffset) {
    if (this.offset() > targetOffset) {
      throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
    }
    targetOffset = Math.min(targetOffset, this.message.length);
    while (true) {
      var offset3 = this.offset();
      if (offset3 === targetOffset) {
        break;
      }
      if (offset3 > targetOffset) {
        throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
      }
      this.bump();
      if (this.isEOF()) {
        break;
      }
    }
  };
  Parser2.prototype.bumpSpace = function() {
    while (!this.isEOF() && _isWhiteSpace(this.char())) {
      this.bump();
    }
  };
  Parser2.prototype.peek = function() {
    if (this.isEOF()) {
      return null;
    }
    var code3 = this.char();
    var offset3 = this.offset();
    var nextCode = this.message.charCodeAt(offset3 + (code3 >= 65536 ? 2 : 1));
    return nextCode !== null && nextCode !== void 0 ? nextCode : null;
  };
  return Parser2;
}();
function _isAlpha(codepoint) {
  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
}
function _isAlphaOrSlash(codepoint) {
  return _isAlpha(codepoint) || codepoint === 47;
}
function _isPotentialElementNameChar(c10) {
  return c10 === 45 || c10 === 46 || c10 >= 48 && c10 <= 57 || c10 === 95 || c10 >= 97 && c10 <= 122 || c10 >= 65 && c10 <= 90 || c10 == 183 || c10 >= 192 && c10 <= 214 || c10 >= 216 && c10 <= 246 || c10 >= 248 && c10 <= 893 || c10 >= 895 && c10 <= 8191 || c10 >= 8204 && c10 <= 8205 || c10 >= 8255 && c10 <= 8256 || c10 >= 8304 && c10 <= 8591 || c10 >= 11264 && c10 <= 12271 || c10 >= 12289 && c10 <= 55295 || c10 >= 63744 && c10 <= 64975 || c10 >= 65008 && c10 <= 65533 || c10 >= 65536 && c10 <= 983039;
}
function _isWhiteSpace(c10) {
  return c10 >= 9 && c10 <= 13 || c10 === 32 || c10 === 133 || c10 >= 8206 && c10 <= 8207 || c10 === 8232 || c10 === 8233;
}
function _isPatternSyntax(c10) {
  return c10 >= 33 && c10 <= 35 || c10 === 36 || c10 >= 37 && c10 <= 39 || c10 === 40 || c10 === 41 || c10 === 42 || c10 === 43 || c10 === 44 || c10 === 45 || c10 >= 46 && c10 <= 47 || c10 >= 58 && c10 <= 59 || c10 >= 60 && c10 <= 62 || c10 >= 63 && c10 <= 64 || c10 === 91 || c10 === 92 || c10 === 93 || c10 === 94 || c10 === 96 || c10 === 123 || c10 === 124 || c10 === 125 || c10 === 126 || c10 === 161 || c10 >= 162 && c10 <= 165 || c10 === 166 || c10 === 167 || c10 === 169 || c10 === 171 || c10 === 172 || c10 === 174 || c10 === 176 || c10 === 177 || c10 === 182 || c10 === 187 || c10 === 191 || c10 === 215 || c10 === 247 || c10 >= 8208 && c10 <= 8213 || c10 >= 8214 && c10 <= 8215 || c10 === 8216 || c10 === 8217 || c10 === 8218 || c10 >= 8219 && c10 <= 8220 || c10 === 8221 || c10 === 8222 || c10 === 8223 || c10 >= 8224 && c10 <= 8231 || c10 >= 8240 && c10 <= 8248 || c10 === 8249 || c10 === 8250 || c10 >= 8251 && c10 <= 8254 || c10 >= 8257 && c10 <= 8259 || c10 === 8260 || c10 === 8261 || c10 === 8262 || c10 >= 8263 && c10 <= 8273 || c10 === 8274 || c10 === 8275 || c10 >= 8277 && c10 <= 8286 || c10 >= 8592 && c10 <= 8596 || c10 >= 8597 && c10 <= 8601 || c10 >= 8602 && c10 <= 8603 || c10 >= 8604 && c10 <= 8607 || c10 === 8608 || c10 >= 8609 && c10 <= 8610 || c10 === 8611 || c10 >= 8612 && c10 <= 8613 || c10 === 8614 || c10 >= 8615 && c10 <= 8621 || c10 === 8622 || c10 >= 8623 && c10 <= 8653 || c10 >= 8654 && c10 <= 8655 || c10 >= 8656 && c10 <= 8657 || c10 === 8658 || c10 === 8659 || c10 === 8660 || c10 >= 8661 && c10 <= 8691 || c10 >= 8692 && c10 <= 8959 || c10 >= 8960 && c10 <= 8967 || c10 === 8968 || c10 === 8969 || c10 === 8970 || c10 === 8971 || c10 >= 8972 && c10 <= 8991 || c10 >= 8992 && c10 <= 8993 || c10 >= 8994 && c10 <= 9e3 || c10 === 9001 || c10 === 9002 || c10 >= 9003 && c10 <= 9083 || c10 === 9084 || c10 >= 9085 && c10 <= 9114 || c10 >= 9115 && c10 <= 9139 || c10 >= 9140 && c10 <= 9179 || c10 >= 9180 && c10 <= 9185 || c10 >= 9186 && c10 <= 9254 || c10 >= 9255 && c10 <= 9279 || c10 >= 9280 && c10 <= 9290 || c10 >= 9291 && c10 <= 9311 || c10 >= 9472 && c10 <= 9654 || c10 === 9655 || c10 >= 9656 && c10 <= 9664 || c10 === 9665 || c10 >= 9666 && c10 <= 9719 || c10 >= 9720 && c10 <= 9727 || c10 >= 9728 && c10 <= 9838 || c10 === 9839 || c10 >= 9840 && c10 <= 10087 || c10 === 10088 || c10 === 10089 || c10 === 10090 || c10 === 10091 || c10 === 10092 || c10 === 10093 || c10 === 10094 || c10 === 10095 || c10 === 10096 || c10 === 10097 || c10 === 10098 || c10 === 10099 || c10 === 10100 || c10 === 10101 || c10 >= 10132 && c10 <= 10175 || c10 >= 10176 && c10 <= 10180 || c10 === 10181 || c10 === 10182 || c10 >= 10183 && c10 <= 10213 || c10 === 10214 || c10 === 10215 || c10 === 10216 || c10 === 10217 || c10 === 10218 || c10 === 10219 || c10 === 10220 || c10 === 10221 || c10 === 10222 || c10 === 10223 || c10 >= 10224 && c10 <= 10239 || c10 >= 10240 && c10 <= 10495 || c10 >= 10496 && c10 <= 10626 || c10 === 10627 || c10 === 10628 || c10 === 10629 || c10 === 10630 || c10 === 10631 || c10 === 10632 || c10 === 10633 || c10 === 10634 || c10 === 10635 || c10 === 10636 || c10 === 10637 || c10 === 10638 || c10 === 10639 || c10 === 10640 || c10 === 10641 || c10 === 10642 || c10 === 10643 || c10 === 10644 || c10 === 10645 || c10 === 10646 || c10 === 10647 || c10 === 10648 || c10 >= 10649 && c10 <= 10711 || c10 === 10712 || c10 === 10713 || c10 === 10714 || c10 === 10715 || c10 >= 10716 && c10 <= 10747 || c10 === 10748 || c10 === 10749 || c10 >= 10750 && c10 <= 11007 || c10 >= 11008 && c10 <= 11055 || c10 >= 11056 && c10 <= 11076 || c10 >= 11077 && c10 <= 11078 || c10 >= 11079 && c10 <= 11084 || c10 >= 11085 && c10 <= 11123 || c10 >= 11124 && c10 <= 11125 || c10 >= 11126 && c10 <= 11157 || c10 === 11158 || c10 >= 11159 && c10 <= 11263 || c10 >= 11776 && c10 <= 11777 || c10 === 11778 || c10 === 11779 || c10 === 11780 || c10 === 11781 || c10 >= 11782 && c10 <= 11784 || c10 === 11785 || c10 === 11786 || c10 === 11787 || c10 === 11788 || c10 === 11789 || c10 >= 11790 && c10 <= 11798 || c10 === 11799 || c10 >= 11800 && c10 <= 11801 || c10 === 11802 || c10 === 11803 || c10 === 11804 || c10 === 11805 || c10 >= 11806 && c10 <= 11807 || c10 === 11808 || c10 === 11809 || c10 === 11810 || c10 === 11811 || c10 === 11812 || c10 === 11813 || c10 === 11814 || c10 === 11815 || c10 === 11816 || c10 === 11817 || c10 >= 11818 && c10 <= 11822 || c10 === 11823 || c10 >= 11824 && c10 <= 11833 || c10 >= 11834 && c10 <= 11835 || c10 >= 11836 && c10 <= 11839 || c10 === 11840 || c10 === 11841 || c10 === 11842 || c10 >= 11843 && c10 <= 11855 || c10 >= 11856 && c10 <= 11857 || c10 === 11858 || c10 >= 11859 && c10 <= 11903 || c10 >= 12289 && c10 <= 12291 || c10 === 12296 || c10 === 12297 || c10 === 12298 || c10 === 12299 || c10 === 12300 || c10 === 12301 || c10 === 12302 || c10 === 12303 || c10 === 12304 || c10 === 12305 || c10 >= 12306 && c10 <= 12307 || c10 === 12308 || c10 === 12309 || c10 === 12310 || c10 === 12311 || c10 === 12312 || c10 === 12313 || c10 === 12314 || c10 === 12315 || c10 === 12316 || c10 === 12317 || c10 >= 12318 && c10 <= 12319 || c10 === 12320 || c10 === 12336 || c10 === 64830 || c10 === 64831 || c10 >= 65093 && c10 <= 65094;
}

// node_modules/@formatjs/icu-messageformat-parser/lib/index.js
function pruneLocation(els) {
  els.forEach(function(el) {
    delete el.location;
    if (isSelectElement(el) || isPluralElement(el)) {
      for (var k10 in el.options) {
        delete el.options[k10].location;
        pruneLocation(el.options[k10].value);
      }
    } else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
      delete el.style.location;
    } else if ((isDateElement(el) || isTimeElement(el)) && isDateTimeSkeleton(el.style)) {
      delete el.style.location;
    } else if (isTagElement(el)) {
      pruneLocation(el.children);
    }
  });
}
function parse(message, opts) {
  if (opts === void 0) {
    opts = {};
  }
  opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
  var result = new Parser(message, opts).parse();
  if (result.err) {
    var error = SyntaxError(ErrorKind[result.err.kind]);
    error.location = result.err.location;
    error.originalMessage = result.err.message;
    throw error;
  }
  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
    pruneLocation(result.val);
  }
  return result.val;
}

// node_modules/@formatjs/fast-memoize/lib/index.js
function memoize(fn3, options) {
  var cache = options && options.cache ? options.cache : cacheDefault;
  var serializer = options && options.serializer ? options.serializer : serializerDefault;
  var strategy = options && options.strategy ? options.strategy : strategyDefault;
  return strategy(fn3, {
    cache,
    serializer
  });
}
function isPrimitive(value) {
  return value == null || typeof value === "number" || typeof value === "boolean";
}
function monadic(fn3, cache, serializer, arg) {
  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
  var computedValue = cache.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn3.call(this, arg);
    cache.set(cacheKey, computedValue);
  }
  return computedValue;
}
function variadic(fn3, cache, serializer) {
  var args = Array.prototype.slice.call(arguments, 3);
  var cacheKey = serializer(args);
  var computedValue = cache.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn3.apply(this, args);
    cache.set(cacheKey, computedValue);
  }
  return computedValue;
}
function assemble(fn3, context, strategy, cache, serialize) {
  return strategy.bind(context, fn3, cache, serialize);
}
function strategyDefault(fn3, options) {
  var strategy = fn3.length === 1 ? monadic : variadic;
  return assemble(fn3, this, strategy, options.cache.create(), options.serializer);
}
function strategyVariadic(fn3, options) {
  return assemble(fn3, this, variadic, options.cache.create(), options.serializer);
}
function strategyMonadic(fn3, options) {
  return assemble(fn3, this, monadic, options.cache.create(), options.serializer);
}
var serializerDefault = function() {
  return JSON.stringify(arguments);
};
function ObjectWithoutPrototypeCache() {
  this.cache = /* @__PURE__ */ Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.get = function(key) {
  return this.cache[key];
};
ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
  this.cache[key] = value;
};
var cacheDefault = {
  create: function create() {
    return new ObjectWithoutPrototypeCache();
  }
};
var strategies = {
  variadic: strategyVariadic,
  monadic: strategyMonadic
};

// node_modules/intl-messageformat/lib/src/error.js
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
  ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
  ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode || (ErrorCode = {}));
var FormatError = function(_super) {
  __extends(FormatError2, _super);
  function FormatError2(msg, code3, originalMessage) {
    var _this = _super.call(this, msg) || this;
    _this.code = code3;
    _this.originalMessage = originalMessage;
    return _this;
  }
  FormatError2.prototype.toString = function() {
    return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
  };
  return FormatError2;
}(Error);
var InvalidValueError = function(_super) {
  __extends(InvalidValueError2, _super);
  function InvalidValueError2(variableId, value, options, originalMessage) {
    return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value, '". Options are "').concat(Object.keys(options).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
  }
  return InvalidValueError2;
}(FormatError);
var InvalidValueTypeError = function(_super) {
  __extends(InvalidValueTypeError2, _super);
  function InvalidValueTypeError2(value, type, originalMessage) {
    return _super.call(this, 'Value for "'.concat(value, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
  }
  return InvalidValueTypeError2;
}(FormatError);
var MissingValueError = function(_super) {
  __extends(MissingValueError2, _super);
  function MissingValueError2(variableId, originalMessage) {
    return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
  }
  return MissingValueError2;
}(FormatError);

// node_modules/intl-messageformat/lib/src/formatters.js
var PART_TYPE;
(function(PART_TYPE2) {
  PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
  PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
})(PART_TYPE || (PART_TYPE = {}));
function mergeLiteral(parts) {
  if (parts.length < 2) {
    return parts;
  }
  return parts.reduce(function(all, part) {
    var lastPart = all[all.length - 1];
    if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
      all.push(part);
    } else {
      lastPart.value += part.value;
    }
    return all;
  }, []);
}
function isFormatXMLElementFn(el) {
  return typeof el === "function";
}
function formatToParts(els, locales, formatters, formats, values, currentPluralValue, originalMessage) {
  if (els.length === 1 && isLiteralElement(els[0])) {
    return [
      {
        type: PART_TYPE.literal,
        value: els[0].value
      }
    ];
  }
  var result = [];
  for (var _i2 = 0, els_1 = els; _i2 < els_1.length; _i2++) {
    var el = els_1[_i2];
    if (isLiteralElement(el)) {
      result.push({
        type: PART_TYPE.literal,
        value: el.value
      });
      continue;
    }
    if (isPoundElement(el)) {
      if (typeof currentPluralValue === "number") {
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getNumberFormat(locales).format(currentPluralValue)
        });
      }
      continue;
    }
    var varName = el.value;
    if (!(values && varName in values)) {
      throw new MissingValueError(varName, originalMessage);
    }
    var value = values[varName];
    if (isArgumentElement(el)) {
      if (!value || typeof value === "string" || typeof value === "number") {
        value = typeof value === "string" || typeof value === "number" ? String(value) : "";
      }
      result.push({
        type: typeof value === "string" ? PART_TYPE.literal : PART_TYPE.object,
        value
      });
      continue;
    }
    if (isDateElement(el)) {
      var style = typeof el.style === "string" ? formats.date[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : void 0;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }
    if (isTimeElement(el)) {
      var style = typeof el.style === "string" ? formats.time[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : formats.time.medium;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }
    if (isNumberElement(el)) {
      var style = typeof el.style === "string" ? formats.number[el.style] : isNumberSkeleton(el.style) ? el.style.parsedOptions : void 0;
      if (style && style.scale) {
        value = value * (style.scale || 1);
      }
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getNumberFormat(locales, style).format(value)
      });
      continue;
    }
    if (isTagElement(el)) {
      var children = el.children, value_1 = el.value;
      var formatFn = values[value_1];
      if (!isFormatXMLElementFn(formatFn)) {
        throw new InvalidValueTypeError(value_1, "function", originalMessage);
      }
      var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
      var chunks = formatFn(parts.map(function(p10) {
        return p10.value;
      }));
      if (!Array.isArray(chunks)) {
        chunks = [chunks];
      }
      result.push.apply(result, chunks.map(function(c10) {
        return {
          type: typeof c10 === "string" ? PART_TYPE.literal : PART_TYPE.object,
          value: c10
        };
      }));
    }
    if (isSelectElement(el)) {
      var opt = el.options[value] || el.options.other;
      if (!opt) {
        throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
      }
      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
      continue;
    }
    if (isPluralElement(el)) {
      var opt = el.options["=".concat(value)];
      if (!opt) {
        if (!Intl.PluralRules) {
          throw new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API, originalMessage);
        }
        var rule = formatters.getPluralRules(locales, { type: el.pluralType }).select(value - (el.offset || 0));
        opt = el.options[rule] || el.options.other;
      }
      if (!opt) {
        throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
      }
      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
      continue;
    }
  }
  return mergeLiteral(result);
}

// node_modules/intl-messageformat/lib/src/core.js
function mergeConfig(c12, c23) {
  if (!c23) {
    return c12;
  }
  return __assign(__assign(__assign({}, c12 || {}), c23 || {}), Object.keys(c12).reduce(function(all, k10) {
    all[k10] = __assign(__assign({}, c12[k10]), c23[k10] || {});
    return all;
  }, {}));
}
function mergeConfigs(defaultConfig, configs) {
  if (!configs) {
    return defaultConfig;
  }
  return Object.keys(defaultConfig).reduce(function(all, k10) {
    all[k10] = mergeConfig(defaultConfig[k10], configs[k10]);
    return all;
  }, __assign({}, defaultConfig));
}
function createFastMemoizeCache(store) {
  return {
    create: function() {
      return {
        get: function(key) {
          return store[key];
        },
        set: function(key, value) {
          store[key] = value;
        }
      };
    }
  };
}
function createDefaultFormatters(cache) {
  if (cache === void 0) {
    cache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
  }
  return {
    getNumberFormat: memoize(function() {
      var _a3;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new ((_a3 = Intl.NumberFormat).bind.apply(_a3, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.number),
      strategy: strategies.variadic
    }),
    getDateTimeFormat: memoize(function() {
      var _a3;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new ((_a3 = Intl.DateTimeFormat).bind.apply(_a3, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.dateTime),
      strategy: strategies.variadic
    }),
    getPluralRules: memoize(function() {
      var _a3;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new ((_a3 = Intl.PluralRules).bind.apply(_a3, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.pluralRules),
      strategy: strategies.variadic
    })
  };
}
var IntlMessageFormat = function() {
  function IntlMessageFormat2(message, locales, overrideFormats, opts) {
    var _this = this;
    if (locales === void 0) {
      locales = IntlMessageFormat2.defaultLocale;
    }
    this.formatterCache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
    this.format = function(values) {
      var parts = _this.formatToParts(values);
      if (parts.length === 1) {
        return parts[0].value;
      }
      var result = parts.reduce(function(all, part) {
        if (!all.length || part.type !== PART_TYPE.literal || typeof all[all.length - 1] !== "string") {
          all.push(part.value);
        } else {
          all[all.length - 1] += part.value;
        }
        return all;
      }, []);
      if (result.length <= 1) {
        return result[0] || "";
      }
      return result;
    };
    this.formatToParts = function(values) {
      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, void 0, _this.message);
    };
    this.resolvedOptions = function() {
      var _a4;
      return {
        locale: ((_a4 = _this.resolvedLocale) === null || _a4 === void 0 ? void 0 : _a4.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
      };
    };
    this.getAst = function() {
      return _this.ast;
    };
    this.locales = locales;
    this.resolvedLocale = IntlMessageFormat2.resolveLocale(locales);
    if (typeof message === "string") {
      this.message = message;
      if (!IntlMessageFormat2.__parse) {
        throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
      }
      var _a3 = opts || {}, formatters = _a3.formatters, parseOpts = __rest(_a3, ["formatters"]);
      this.ast = IntlMessageFormat2.__parse(message, __assign(__assign({}, parseOpts), { locale: this.resolvedLocale }));
    } else {
      this.ast = message;
    }
    if (!Array.isArray(this.ast)) {
      throw new TypeError("A message must be provided as a String or AST.");
    }
    this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
  }
  Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
    get: function() {
      if (!IntlMessageFormat2.memoizedDefaultLocale) {
        IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
      }
      return IntlMessageFormat2.memoizedDefaultLocale;
    },
    enumerable: false,
    configurable: true
  });
  IntlMessageFormat2.memoizedDefaultLocale = null;
  IntlMessageFormat2.resolveLocale = function(locales) {
    if (typeof Intl.Locale === "undefined") {
      return;
    }
    var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
    if (supportedLocales.length > 0) {
      return new Intl.Locale(supportedLocales[0]);
    }
    return new Intl.Locale(typeof locales === "string" ? locales : locales[0]);
  };
  IntlMessageFormat2.__parse = parse;
  IntlMessageFormat2.formats = {
    number: {
      integer: {
        maximumFractionDigits: 0
      },
      currency: {
        style: "currency"
      },
      percent: {
        style: "percent"
      }
    },
    date: {
      short: {
        month: "numeric",
        day: "numeric",
        year: "2-digit"
      },
      medium: {
        month: "short",
        day: "numeric",
        year: "numeric"
      },
      long: {
        month: "long",
        day: "numeric",
        year: "numeric"
      },
      full: {
        weekday: "long",
        month: "long",
        day: "numeric",
        year: "numeric"
      }
    },
    time: {
      short: {
        hour: "numeric",
        minute: "numeric"
      },
      medium: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
      },
      long: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        timeZoneName: "short"
      },
      full: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        timeZoneName: "short"
      }
    }
  };
  return IntlMessageFormat2;
}();

// node_modules/@tldraw/tldraw/node_modules/@formatjs/intl/lib/src/error.js
var IntlErrorCode;
(function(IntlErrorCode2) {
  IntlErrorCode2["FORMAT_ERROR"] = "FORMAT_ERROR";
  IntlErrorCode2["UNSUPPORTED_FORMATTER"] = "UNSUPPORTED_FORMATTER";
  IntlErrorCode2["INVALID_CONFIG"] = "INVALID_CONFIG";
  IntlErrorCode2["MISSING_DATA"] = "MISSING_DATA";
  IntlErrorCode2["MISSING_TRANSLATION"] = "MISSING_TRANSLATION";
})(IntlErrorCode || (IntlErrorCode = {}));
var IntlError = function(_super) {
  __extends(IntlError2, _super);
  function IntlError2(code3, message, exception) {
    var _this = this;
    var err = exception ? exception instanceof Error ? exception : new Error(String(exception)) : void 0;
    _this = _super.call(this, "[@formatjs/intl Error ".concat(code3, "] ").concat(message, "\n").concat(err ? "\n".concat(err.message, "\n").concat(err.stack) : "")) || this;
    _this.code = code3;
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(_this, IntlError2);
    }
    return _this;
  }
  return IntlError2;
}(Error);
var UnsupportedFormatterError = function(_super) {
  __extends(UnsupportedFormatterError2, _super);
  function UnsupportedFormatterError2(message, exception) {
    return _super.call(this, IntlErrorCode.UNSUPPORTED_FORMATTER, message, exception) || this;
  }
  return UnsupportedFormatterError2;
}(IntlError);
var InvalidConfigError = function(_super) {
  __extends(InvalidConfigError2, _super);
  function InvalidConfigError2(message, exception) {
    return _super.call(this, IntlErrorCode.INVALID_CONFIG, message, exception) || this;
  }
  return InvalidConfigError2;
}(IntlError);
var MissingDataError = function(_super) {
  __extends(MissingDataError2, _super);
  function MissingDataError2(message, exception) {
    return _super.call(this, IntlErrorCode.MISSING_DATA, message, exception) || this;
  }
  return MissingDataError2;
}(IntlError);
var IntlFormatError = function(_super) {
  __extends(IntlFormatError2, _super);
  function IntlFormatError2(message, locale, exception) {
    var _this = _super.call(this, IntlErrorCode.FORMAT_ERROR, "".concat(message, "\nLocale: ").concat(locale, "\n"), exception) || this;
    _this.locale = locale;
    return _this;
  }
  return IntlFormatError2;
}(IntlError);
var MessageFormatError = function(_super) {
  __extends(MessageFormatError2, _super);
  function MessageFormatError2(message, locale, descriptor, exception) {
    var _this = _super.call(this, "".concat(message, "\nMessageID: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.id, "\nDefault Message: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.defaultMessage, "\nDescription: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.description, "\n"), locale, exception) || this;
    _this.descriptor = descriptor;
    _this.locale = locale;
    return _this;
  }
  return MessageFormatError2;
}(IntlFormatError);
var MissingTranslationError = function(_super) {
  __extends(MissingTranslationError2, _super);
  function MissingTranslationError2(descriptor, locale) {
    var _this = _super.call(this, IntlErrorCode.MISSING_TRANSLATION, 'Missing message: "'.concat(descriptor.id, '" for locale "').concat(locale, '", using ').concat(descriptor.defaultMessage ? "default message (".concat(typeof descriptor.defaultMessage === "string" ? descriptor.defaultMessage : descriptor.defaultMessage.map(function(e10) {
      var _a3;
      return (_a3 = e10.value) !== null && _a3 !== void 0 ? _a3 : JSON.stringify(e10);
    }).join(), ")") : "id", " as fallback.")) || this;
    _this.descriptor = descriptor;
    return _this;
  }
  return MissingTranslationError2;
}(IntlError);

// node_modules/@tldraw/tldraw/node_modules/@formatjs/intl/lib/src/utils.js
function filterProps(props, allowlist, defaults) {
  if (defaults === void 0) {
    defaults = {};
  }
  return allowlist.reduce(function(filtered, name) {
    if (name in props) {
      filtered[name] = props[name];
    } else if (name in defaults) {
      filtered[name] = defaults[name];
    }
    return filtered;
  }, {});
}
var defaultErrorHandler = function(error) {
  if (true) {
    console.error(error);
  }
};
var defaultWarnHandler = function(warning) {
  if (true) {
    console.warn(warning);
  }
};
var DEFAULT_INTL_CONFIG = {
  formats: {},
  messages: {},
  timeZone: void 0,
  defaultLocale: "en",
  defaultFormats: {},
  fallbackOnEmptyString: true,
  onError: defaultErrorHandler,
  onWarn: defaultWarnHandler
};
function createIntlCache() {
  return {
    dateTime: {},
    number: {},
    message: {},
    relativeTime: {},
    pluralRules: {},
    list: {},
    displayNames: {}
  };
}
function createFastMemoizeCache2(store) {
  return {
    create: function() {
      return {
        get: function(key) {
          return store[key];
        },
        set: function(key, value) {
          store[key] = value;
        }
      };
    }
  };
}
function createFormatters(cache) {
  if (cache === void 0) {
    cache = createIntlCache();
  }
  var RelativeTimeFormat = Intl.RelativeTimeFormat;
  var ListFormat = Intl.ListFormat;
  var DisplayNames = Intl.DisplayNames;
  var getDateTimeFormat = memoize(function() {
    var _a3;
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    return new ((_a3 = Intl.DateTimeFormat).bind.apply(_a3, __spreadArray([void 0], args, false)))();
  }, {
    cache: createFastMemoizeCache2(cache.dateTime),
    strategy: strategies.variadic
  });
  var getNumberFormat = memoize(function() {
    var _a3;
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    return new ((_a3 = Intl.NumberFormat).bind.apply(_a3, __spreadArray([void 0], args, false)))();
  }, {
    cache: createFastMemoizeCache2(cache.number),
    strategy: strategies.variadic
  });
  var getPluralRules = memoize(function() {
    var _a3;
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    return new ((_a3 = Intl.PluralRules).bind.apply(_a3, __spreadArray([void 0], args, false)))();
  }, {
    cache: createFastMemoizeCache2(cache.pluralRules),
    strategy: strategies.variadic
  });
  return {
    getDateTimeFormat,
    getNumberFormat,
    getMessageFormat: memoize(function(message, locales, overrideFormats, opts) {
      return new IntlMessageFormat(message, locales, overrideFormats, __assign({ formatters: {
        getNumberFormat,
        getDateTimeFormat,
        getPluralRules
      } }, opts || {}));
    }, {
      cache: createFastMemoizeCache2(cache.message),
      strategy: strategies.variadic
    }),
    getRelativeTimeFormat: memoize(function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new (RelativeTimeFormat.bind.apply(RelativeTimeFormat, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.relativeTime),
      strategy: strategies.variadic
    }),
    getPluralRules,
    getListFormat: memoize(function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new (ListFormat.bind.apply(ListFormat, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.list),
      strategy: strategies.variadic
    }),
    getDisplayNames: memoize(function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new (DisplayNames.bind.apply(DisplayNames, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.displayNames),
      strategy: strategies.variadic
    })
  };
}
function getNamedFormat(formats, type, name, onError) {
  var formatType = formats && formats[type];
  var format;
  if (formatType) {
    format = formatType[name];
  }
  if (format) {
    return format;
  }
  onError(new UnsupportedFormatterError("No ".concat(type, " format named: ").concat(name)));
}

// node_modules/@tldraw/tldraw/node_modules/@formatjs/intl/lib/src/message.js
function setTimeZoneInOptions(opts, timeZone) {
  return Object.keys(opts).reduce(function(all, k10) {
    all[k10] = __assign({ timeZone }, opts[k10]);
    return all;
  }, {});
}
function deepMergeOptions(opts1, opts2) {
  var keys = Object.keys(__assign(__assign({}, opts1), opts2));
  return keys.reduce(function(all, k10) {
    all[k10] = __assign(__assign({}, opts1[k10] || {}), opts2[k10] || {});
    return all;
  }, {});
}
function deepMergeFormatsAndSetTimeZone(f12, timeZone) {
  if (!timeZone) {
    return f12;
  }
  var mfFormats = IntlMessageFormat.formats;
  return __assign(__assign(__assign({}, mfFormats), f12), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f12.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f12.time || {}, timeZone)) });
}
var formatMessage = function(_a3, state, messageDescriptor, values, opts) {
  var locale = _a3.locale, formats = _a3.formats, messages = _a3.messages, defaultLocale = _a3.defaultLocale, defaultFormats = _a3.defaultFormats, fallbackOnEmptyString = _a3.fallbackOnEmptyString, onError = _a3.onError, timeZone = _a3.timeZone, defaultRichTextElements = _a3.defaultRichTextElements;
  if (messageDescriptor === void 0) {
    messageDescriptor = { id: "" };
  }
  var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;
  invariant(!!msgId, "[@formatjs/intl] An `id` must be provided to format a message. You can either:\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\nto autofix this issue");
  var id = String(msgId);
  var message = messages && Object.prototype.hasOwnProperty.call(messages, id) && messages[id];
  if (Array.isArray(message) && message.length === 1 && message[0].type === TYPE.literal) {
    return message[0].value;
  }
  if (!values && message && typeof message === "string" && !defaultRichTextElements) {
    return message.replace(/'\{(.*?)\}'/gi, "{$1}");
  }
  values = __assign(__assign({}, defaultRichTextElements), values || {});
  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);
  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);
  if (!message) {
    if (fallbackOnEmptyString === false && message === "") {
      return message;
    }
    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {
      onError(new MissingTranslationError(messageDescriptor, locale));
    }
    if (defaultMessage) {
      try {
        var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
        return formatter.format(values);
      } catch (e10) {
        onError(new MessageFormatError('Error formatting default message for: "'.concat(id, '", rendering default message verbatim'), locale, messageDescriptor, e10));
        return typeof defaultMessage === "string" ? defaultMessage : id;
      }
    }
    return id;
  }
  try {
    var formatter = state.getMessageFormat(message, locale, formats, __assign({ formatters: state }, opts || {}));
    return formatter.format(values);
  } catch (e10) {
    onError(new MessageFormatError('Error formatting message: "'.concat(id, '", using ').concat(defaultMessage ? "default message" : "id", " as fallback."), locale, messageDescriptor, e10));
  }
  if (defaultMessage) {
    try {
      var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
      return formatter.format(values);
    } catch (e10) {
      onError(new MessageFormatError('Error formatting the default message for: "'.concat(id, '", rendering message verbatim'), locale, messageDescriptor, e10));
    }
  }
  if (typeof message === "string") {
    return message;
  }
  if (typeof defaultMessage === "string") {
    return defaultMessage;
  }
  return id;
};

// node_modules/@tldraw/tldraw/node_modules/@formatjs/intl/lib/src/dateTime.js
var DATE_TIME_FORMAT_OPTIONS = [
  "formatMatcher",
  "timeZone",
  "hour12",
  "weekday",
  "era",
  "year",
  "month",
  "day",
  "hour",
  "minute",
  "second",
  "timeZoneName",
  "hourCycle",
  "dateStyle",
  "timeStyle",
  "calendar",
  "numberingSystem",
  "fractionalSecondDigits"
];
function getFormatter(_a3, type, getDateTimeFormat, options) {
  var locale = _a3.locale, formats = _a3.formats, onError = _a3.onError, timeZone = _a3.timeZone;
  if (options === void 0) {
    options = {};
  }
  var format = options.format;
  var defaults = __assign(__assign({}, timeZone && { timeZone }), format && getNamedFormat(formats, type, format, onError));
  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);
  if (type === "time" && !filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second && !filteredOptions.timeStyle && !filteredOptions.dateStyle) {
    filteredOptions = __assign(__assign({}, filteredOptions), { hour: "numeric", minute: "numeric" });
  }
  return getDateTimeFormat(locale, filteredOptions);
}
function formatDate(config, getDateTimeFormat) {
  var _a3 = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    _a3[_i2 - 2] = arguments[_i2];
  }
  var value = _a3[0], _b2 = _a3[1], options = _b2 === void 0 ? {} : _b2;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "date", getDateTimeFormat, options).format(date);
  } catch (e10) {
    config.onError(new IntlFormatError("Error formatting date.", config.locale, e10));
  }
  return String(date);
}
function formatTime(config, getDateTimeFormat) {
  var _a3 = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    _a3[_i2 - 2] = arguments[_i2];
  }
  var value = _a3[0], _b2 = _a3[1], options = _b2 === void 0 ? {} : _b2;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "time", getDateTimeFormat, options).format(date);
  } catch (e10) {
    config.onError(new IntlFormatError("Error formatting time.", config.locale, e10));
  }
  return String(date);
}
function formatDateTimeRange(config, getDateTimeFormat) {
  var _a3 = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    _a3[_i2 - 2] = arguments[_i2];
  }
  var from = _a3[0], to2 = _a3[1], _b2 = _a3[2], options = _b2 === void 0 ? {} : _b2;
  var timeZone = config.timeZone, locale = config.locale, onError = config.onError;
  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, timeZone ? { timeZone } : {});
  try {
    return getDateTimeFormat(locale, filteredOptions).formatRange(from, to2);
  } catch (e10) {
    onError(new IntlFormatError("Error formatting date time range.", config.locale, e10));
  }
  return String(from);
}
function formatDateToParts(config, getDateTimeFormat) {
  var _a3 = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    _a3[_i2 - 2] = arguments[_i2];
  }
  var value = _a3[0], _b2 = _a3[1], options = _b2 === void 0 ? {} : _b2;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "date", getDateTimeFormat, options).formatToParts(date);
  } catch (e10) {
    config.onError(new IntlFormatError("Error formatting date.", config.locale, e10));
  }
  return [];
}
function formatTimeToParts(config, getDateTimeFormat) {
  var _a3 = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    _a3[_i2 - 2] = arguments[_i2];
  }
  var value = _a3[0], _b2 = _a3[1], options = _b2 === void 0 ? {} : _b2;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "time", getDateTimeFormat, options).formatToParts(date);
  } catch (e10) {
    config.onError(new IntlFormatError("Error formatting time.", config.locale, e10));
  }
  return [];
}

// node_modules/@tldraw/tldraw/node_modules/@formatjs/intl/lib/src/displayName.js
var DISPLAY_NAMES_OPTONS = [
  "style",
  "type",
  "fallback",
  "languageDisplay"
];
function formatDisplayName(_a3, getDisplayNames, value, options) {
  var locale = _a3.locale, onError = _a3.onError;
  var DisplayNames = Intl.DisplayNames;
  if (!DisplayNames) {
    onError(new FormatError('Intl.DisplayNames is not available in this environment.\nTry polyfilling it using "@formatjs/intl-displaynames"\n', ErrorCode.MISSING_INTL_API));
  }
  var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);
  try {
    return getDisplayNames(locale, filteredOptions).of(value);
  } catch (e10) {
    onError(new IntlFormatError("Error formatting display name.", locale, e10));
  }
}

// node_modules/@tldraw/tldraw/node_modules/@formatjs/intl/lib/src/list.js
var LIST_FORMAT_OPTIONS = [
  "type",
  "style"
];
var now = Date.now();
function generateToken(i10) {
  return "".concat(now, "_").concat(i10, "_").concat(now);
}
function formatList(opts, getListFormat, values, options) {
  if (options === void 0) {
    options = {};
  }
  var results = formatListToParts(opts, getListFormat, values, options).reduce(function(all, el) {
    var val = el.value;
    if (typeof val !== "string") {
      all.push(val);
    } else if (typeof all[all.length - 1] === "string") {
      all[all.length - 1] += val;
    } else {
      all.push(val);
    }
    return all;
  }, []);
  return results.length === 1 ? results[0] : results.length === 0 ? "" : results;
}
function formatListToParts(_a3, getListFormat, values, options) {
  var locale = _a3.locale, onError = _a3.onError;
  if (options === void 0) {
    options = {};
  }
  var ListFormat = Intl.ListFormat;
  if (!ListFormat) {
    onError(new FormatError('Intl.ListFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-listformat"\n', ErrorCode.MISSING_INTL_API));
  }
  var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);
  try {
    var richValues_1 = {};
    var serializedValues = values.map(function(v11, i10) {
      if (typeof v11 === "object") {
        var id = generateToken(i10);
        richValues_1[id] = v11;
        return id;
      }
      return String(v11);
    });
    return getListFormat(locale, filteredOptions).formatToParts(serializedValues).map(function(part) {
      return part.type === "literal" ? part : __assign(__assign({}, part), { value: richValues_1[part.value] || part.value });
    });
  } catch (e10) {
    onError(new IntlFormatError("Error formatting list.", locale, e10));
  }
  return values;
}

// node_modules/@tldraw/tldraw/node_modules/@formatjs/intl/lib/src/plural.js
var PLURAL_FORMAT_OPTIONS = ["type"];
function formatPlural(_a3, getPluralRules, value, options) {
  var locale = _a3.locale, onError = _a3.onError;
  if (options === void 0) {
    options = {};
  }
  if (!Intl.PluralRules) {
    onError(new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API));
  }
  var filteredOptions = filterProps(options, PLURAL_FORMAT_OPTIONS);
  try {
    return getPluralRules(locale, filteredOptions).select(value);
  } catch (e10) {
    onError(new IntlFormatError("Error formatting plural.", locale, e10));
  }
  return "other";
}

// node_modules/@tldraw/tldraw/node_modules/@formatjs/intl/lib/src/relativeTime.js
var RELATIVE_TIME_FORMAT_OPTIONS = ["numeric", "style"];
function getFormatter2(_a3, getRelativeTimeFormat, options) {
  var locale = _a3.locale, formats = _a3.formats, onError = _a3.onError;
  if (options === void 0) {
    options = {};
  }
  var format = options.format;
  var defaults = !!format && getNamedFormat(formats, "relative", format, onError) || {};
  var filteredOptions = filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);
  return getRelativeTimeFormat(locale, filteredOptions);
}
function formatRelativeTime(config, getRelativeTimeFormat, value, unit, options) {
  if (options === void 0) {
    options = {};
  }
  if (!unit) {
    unit = "second";
  }
  var RelativeTimeFormat = Intl.RelativeTimeFormat;
  if (!RelativeTimeFormat) {
    config.onError(new FormatError('Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-relativetimeformat"\n', ErrorCode.MISSING_INTL_API));
  }
  try {
    return getFormatter2(config, getRelativeTimeFormat, options).format(value, unit);
  } catch (e10) {
    config.onError(new IntlFormatError("Error formatting relative time.", config.locale, e10));
  }
  return String(value);
}

// node_modules/@tldraw/tldraw/node_modules/@formatjs/intl/lib/src/number.js
var NUMBER_FORMAT_OPTIONS = [
  "style",
  "currency",
  "currencyDisplay",
  "unit",
  "unitDisplay",
  "useGrouping",
  "minimumIntegerDigits",
  "minimumFractionDigits",
  "maximumFractionDigits",
  "minimumSignificantDigits",
  "maximumSignificantDigits",
  "compactDisplay",
  "currencyDisplay",
  "currencySign",
  "notation",
  "signDisplay",
  "unit",
  "unitDisplay",
  "numberingSystem"
];
function getFormatter3(_a3, getNumberFormat, options) {
  var locale = _a3.locale, formats = _a3.formats, onError = _a3.onError;
  if (options === void 0) {
    options = {};
  }
  var format = options.format;
  var defaults = format && getNamedFormat(formats, "number", format, onError) || {};
  var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);
  return getNumberFormat(locale, filteredOptions);
}
function formatNumber(config, getNumberFormat, value, options) {
  if (options === void 0) {
    options = {};
  }
  try {
    return getFormatter3(config, getNumberFormat, options).format(value);
  } catch (e10) {
    config.onError(new IntlFormatError("Error formatting number.", config.locale, e10));
  }
  return String(value);
}
function formatNumberToParts(config, getNumberFormat, value, options) {
  if (options === void 0) {
    options = {};
  }
  try {
    return getFormatter3(config, getNumberFormat, options).formatToParts(value);
  } catch (e10) {
    config.onError(new IntlFormatError("Error formatting number.", config.locale, e10));
  }
  return [];
}

// node_modules/@tldraw/tldraw/node_modules/@formatjs/intl/lib/src/create-intl.js
function messagesContainString(messages) {
  var firstMessage = messages ? messages[Object.keys(messages)[0]] : void 0;
  return typeof firstMessage === "string";
}
function verifyConfigMessages(config) {
  if (config.onWarn && config.defaultRichTextElements && messagesContainString(config.messages || {})) {
    config.onWarn('[@formatjs/intl] "defaultRichTextElements" was specified but "message" was not pre-compiled. \nPlease consider using "@formatjs/cli" to pre-compile your messages for performance.\nFor more details see https://formatjs.io/docs/getting-started/message-distribution');
  }
}
function createIntl(config, cache) {
  var formatters = createFormatters(cache);
  var resolvedConfig = __assign(__assign({}, DEFAULT_INTL_CONFIG), config);
  var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;
  if (!locale) {
    if (onError) {
      onError(new InvalidConfigError('"locale" was not configured, using "'.concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details')));
    }
    resolvedConfig.locale = resolvedConfig.defaultLocale || "en";
  } else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {
    onError(new MissingDataError('Missing locale data for locale: "'.concat(locale, '" in Intl.NumberFormat. Using default locale: "').concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details')));
  } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length && onError) {
    onError(new MissingDataError('Missing locale data for locale: "'.concat(locale, '" in Intl.DateTimeFormat. Using default locale: "').concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details')));
  }
  verifyConfigMessages(resolvedConfig);
  return __assign(__assign({}, resolvedConfig), {
    formatters,
    formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat),
    formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat),
    formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat),
    formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat),
    formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),
    formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat),
    formatDateTimeRange: formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat),
    formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),
    formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules),
    formatMessage: formatMessage.bind(null, resolvedConfig, formatters),
    $t: formatMessage.bind(null, resolvedConfig, formatters),
    formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat),
    formatListToParts: formatListToParts.bind(null, resolvedConfig, formatters.getListFormat),
    formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames)
  });
}

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/src/utils.js
function invariantIntlContext(intl) {
  invariant(intl, "[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry.");
}
var DEFAULT_INTL_CONFIG2 = __assign(__assign({}, DEFAULT_INTL_CONFIG), { textComponent: React3.Fragment });
function assignUniqueKeysToParts(formatXMLElementFn) {
  return function(parts) {
    return formatXMLElementFn(React3.Children.toArray(parts));
  };
}
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  if (!objA || !objB) {
    return false;
  }
  var aKeys = Object.keys(objA);
  var bKeys = Object.keys(objB);
  var len = aKeys.length;
  if (bKeys.length !== len) {
    return false;
  }
  for (var i10 = 0; i10 < len; i10++) {
    var key = aKeys[i10];
    if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {
      return false;
    }
  }
  return true;
}

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/src/components/injectIntl.js
var IntlContext = typeof window !== "undefined" && !window.__REACT_INTL_BYPASS_GLOBAL_CONTEXT__ ? window.__REACT_INTL_CONTEXT__ || (window.__REACT_INTL_CONTEXT__ = React4.createContext(null)) : React4.createContext(null);
var IntlConsumer = IntlContext.Consumer;
var IntlProvider = IntlContext.Provider;
var Provider = IntlProvider;
var Context = IntlContext;

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/src/components/useIntl.js
function useIntl() {
  var intl = React5.useContext(Context);
  invariantIntlContext(intl);
  return intl;
}

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/src/components/createFormattedComponent.js
var DisplayName;
(function(DisplayName2) {
  DisplayName2["formatDate"] = "FormattedDate";
  DisplayName2["formatTime"] = "FormattedTime";
  DisplayName2["formatNumber"] = "FormattedNumber";
  DisplayName2["formatList"] = "FormattedList";
  DisplayName2["formatDisplayName"] = "FormattedDisplayName";
})(DisplayName || (DisplayName = {}));
var DisplayNameParts;
(function(DisplayNameParts2) {
  DisplayNameParts2["formatDate"] = "FormattedDateParts";
  DisplayNameParts2["formatTime"] = "FormattedTimeParts";
  DisplayNameParts2["formatNumber"] = "FormattedNumberParts";
  DisplayNameParts2["formatList"] = "FormattedListParts";
})(DisplayNameParts || (DisplayNameParts = {}));
var FormattedNumberParts = function(props) {
  var intl = useIntl();
  var value = props.value, children = props.children, formatProps = __rest(props, ["value", "children"]);
  return children(intl.formatNumberToParts(value, formatProps));
};
FormattedNumberParts.displayName = "FormattedNumberParts";
FormattedNumberParts.displayName = "FormattedNumberParts";
function createFormattedDateTimePartsComponent(name) {
  var ComponentParts = function(props) {
    var intl = useIntl();
    var value = props.value, children = props.children, formatProps = __rest(props, ["value", "children"]);
    var date = typeof value === "string" ? new Date(value || 0) : value;
    var formattedParts = name === "formatDate" ? intl.formatDateToParts(date, formatProps) : intl.formatTimeToParts(date, formatProps);
    return children(formattedParts);
  };
  ComponentParts.displayName = DisplayNameParts[name];
  return ComponentParts;
}
function createFormattedComponent(name) {
  var Component = function(props) {
    var intl = useIntl();
    var value = props.value, children = props.children, formatProps = __rest(props, ["value", "children"]);
    var formattedValue = intl[name](value, formatProps);
    if (typeof children === "function") {
      return children(formattedValue);
    }
    var Text = intl.textComponent || React6.Fragment;
    return React6.createElement(Text, null, formattedValue);
  };
  Component.displayName = DisplayName[name];
  return Component;
}

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/src/components/provider.js
var React7 = __toESM(require_react());
function processIntlConfig(config) {
  return {
    locale: config.locale,
    timeZone: config.timeZone,
    fallbackOnEmptyString: config.fallbackOnEmptyString,
    formats: config.formats,
    textComponent: config.textComponent,
    messages: config.messages,
    defaultLocale: config.defaultLocale,
    defaultFormats: config.defaultFormats,
    onError: config.onError,
    onWarn: config.onWarn,
    wrapRichTextChunksInFragment: config.wrapRichTextChunksInFragment,
    defaultRichTextElements: config.defaultRichTextElements
  };
}
function assignUniqueKeysToFormatXMLElementFnArgument(values) {
  if (!values) {
    return values;
  }
  return Object.keys(values).reduce(function(acc, k10) {
    var v11 = values[k10];
    acc[k10] = isFormatXMLElementFn(v11) ? assignUniqueKeysToParts(v11) : v11;
    return acc;
  }, {});
}
var formatMessage2 = function(config, formatters, descriptor, rawValues) {
  var rest = [];
  for (var _i2 = 4; _i2 < arguments.length; _i2++) {
    rest[_i2 - 4] = arguments[_i2];
  }
  var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);
  var chunks = formatMessage.apply(void 0, __spreadArray([
    config,
    formatters,
    descriptor,
    values
  ], rest, false));
  if (Array.isArray(chunks)) {
    return React7.Children.toArray(chunks);
  }
  return chunks;
};
var createIntl2 = function(_a3, cache) {
  var rawDefaultRichTextElements = _a3.defaultRichTextElements, config = __rest(_a3, ["defaultRichTextElements"]);
  var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);
  var coreIntl = createIntl(__assign(__assign(__assign({}, DEFAULT_INTL_CONFIG2), config), { defaultRichTextElements }), cache);
  var resolvedConfig = {
    locale: coreIntl.locale,
    timeZone: coreIntl.timeZone,
    fallbackOnEmptyString: coreIntl.fallbackOnEmptyString,
    formats: coreIntl.formats,
    defaultLocale: coreIntl.defaultLocale,
    defaultFormats: coreIntl.defaultFormats,
    messages: coreIntl.messages,
    onError: coreIntl.onError,
    defaultRichTextElements
  };
  return __assign(__assign({}, coreIntl), {
    formatMessage: formatMessage2.bind(null, resolvedConfig, coreIntl.formatters),
    $t: formatMessage2.bind(null, resolvedConfig, coreIntl.formatters)
  });
};
var IntlProvider2 = function(_super) {
  __extends(IntlProvider3, _super);
  function IntlProvider3() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.cache = createIntlCache();
    _this.state = {
      cache: _this.cache,
      intl: createIntl2(processIntlConfig(_this.props), _this.cache),
      prevConfig: processIntlConfig(_this.props)
    };
    return _this;
  }
  IntlProvider3.getDerivedStateFromProps = function(props, _a3) {
    var prevConfig = _a3.prevConfig, cache = _a3.cache;
    var config = processIntlConfig(props);
    if (!shallowEqual(prevConfig, config)) {
      return {
        intl: createIntl2(config, cache),
        prevConfig: config
      };
    }
    return null;
  };
  IntlProvider3.prototype.render = function() {
    invariantIntlContext(this.state.intl);
    return React7.createElement(Provider, { value: this.state.intl }, this.props.children);
  };
  IntlProvider3.displayName = "IntlProvider";
  IntlProvider3.defaultProps = DEFAULT_INTL_CONFIG2;
  return IntlProvider3;
}(React7.PureComponent);
var provider_default = IntlProvider2;

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/src/components/message.js
var React8 = __toESM(require_react());
function areEqual(prevProps, nextProps) {
  var values = prevProps.values, otherProps = __rest(prevProps, ["values"]);
  var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, ["values"]);
  return shallowEqual(nextValues, values) && shallowEqual(otherProps, nextOtherProps);
}
function FormattedMessage(props) {
  var intl = useIntl();
  var formatMessage3 = intl.formatMessage, _a3 = intl.textComponent, Text = _a3 === void 0 ? React8.Fragment : _a3;
  var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b2 = props.tagName, Component = _b2 === void 0 ? Text : _b2, ignoreTag = props.ignoreTag;
  var descriptor = { id, description, defaultMessage };
  var nodes = formatMessage3(descriptor, values, {
    ignoreTag
  });
  if (typeof children === "function") {
    return children(Array.isArray(nodes) ? nodes : [nodes]);
  }
  if (Component) {
    return React8.createElement(Component, null, React8.Children.toArray(nodes));
  }
  return React8.createElement(React8.Fragment, null, nodes);
}
FormattedMessage.displayName = "FormattedMessage";
var MemoizedFormattedMessage = React8.memo(FormattedMessage, areEqual);
MemoizedFormattedMessage.displayName = "MemoizedFormattedMessage";
var message_default = MemoizedFormattedMessage;

// node_modules/@tldraw/tldraw/node_modules/react-intl/lib/index.js
var FormattedDate = createFormattedComponent("formatDate");
var FormattedTime = createFormattedComponent("formatTime");
var FormattedNumber = createFormattedComponent("formatNumber");
var FormattedList = createFormattedComponent("formatList");
var FormattedDisplayName = createFormattedComponent("formatDisplayName");
var FormattedDateParts = createFormattedDateTimePartsComponent("formatDate");
var FormattedTimeParts = createFormattedDateTimePartsComponent("formatTime");

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i10 = 1; i10 < arguments.length; i10++) {
      var source = arguments[i10];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

// node_modules/@radix-ui/react-context-menu/dist/index.module.js
var import_react47 = __toESM(require_react());

// node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/primitive/dist/index.module.js
function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented)
      return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  };
}

// node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-context/dist/index.module.js
var import_react4 = __toESM(require_react());
function $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
    const BaseContext = /* @__PURE__ */ (0, import_react4.createContext)(defaultContext);
    const index4 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider2(props) {
      const { scope, children, ...context } = props;
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const value = (0, import_react4.useMemo)(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_react4.createElement)(Context2.Provider, {
        value
      }, children);
    }
    function useContext6(consumerName, scope) {
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const context = (0, import_react4.useContext)(Context2);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider2.displayName = rootComponentName + "Provider";
    return [
      Provider2,
      useContext6
    ];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return /* @__PURE__ */ (0, import_react4.createContext)(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
      return (0, import_react4.useMemo)(() => ({
        [`__scope${scopeName}`]: {
          ...scope,
          [scopeName]: contexts
        }
      }), [
        scope,
        contexts
      ]);
    };
  };
  createScope.scopeName = scopeName;
  return [
    $c512c27ab02ef895$export$fd42f52fd3ae11092,
    $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope1 = () => {
    const scopeHooks = scopes.map((createScope) => ({
      useScope: createScope(),
      scopeName: createScope.scopeName
    }));
    return function useComposedScopes(overrideScopes) {
      const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope = scopeProps[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope
        };
      }, {});
      return (0, import_react4.useMemo)(() => ({
        [`__scope${baseScope.scopeName}`]: nextScopes1
      }), [
        nextScopes1
      ]);
    };
  };
  createScope1.scopeName = baseScope.scopeName;
  return createScope1;
}

// node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-primitive/dist/index.module.js
var import_react7 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-slot/dist/index.module.js
var import_react6 = __toESM(require_react());

// node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-compose-refs/dist/index.module.js
var import_react5 = __toESM(require_react());
function $6ed0406888f73fc4$var$setRef(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
  return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef(ref, node));
}

// node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-slot/dist/index.module.js
var $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /* @__PURE__ */ (0, import_react6.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = import_react6.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (import_react6.Children.count(newElement) > 1)
          return import_react6.Children.only(null);
        return /* @__PURE__ */ (0, import_react6.isValidElement)(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ (0, import_react6.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ (0, import_react6.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react6.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ (0, import_react6.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone = /* @__PURE__ */ (0, import_react6.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ (0, import_react6.isValidElement)(children))
    return /* @__PURE__ */ (0, import_react6.cloneElement)(children, {
      ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),
      ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref)
    });
  return import_react6.Children.count(children) > 1 ? import_react6.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children }) => {
  return /* @__PURE__ */ (0, import_react6.createElement)(import_react6.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable(child) {
  return /* @__PURE__ */ (0, import_react6.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
}
function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler)
      overrideProps[propName] = (...args) => {
        childPropValue === null || childPropValue === void 0 || childPropValue(...args);
        slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
      };
    else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-primitive/dist/index.module.js
var $8927f6f2acc4f386$var$NODES = [
  "a",
  "button",
  "div",
  "h2",
  "h3",
  "img",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
var $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node) => {
  const Node2 = /* @__PURE__ */ (0, import_react7.forwardRef)((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node;
    (0, import_react7.useEffect)(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ (0, import_react7.createElement)(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node2.displayName = `Primitive.${node}`;
  return {
    ...primitive,
    [node]: Node2
  };
}, {});

// node_modules/@radix-ui/react-menu/dist/index.module.js
var import_react46 = __toESM(require_react());

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/primitive/dist/index.module.js
function $e42e1063c40fb3ef$export$b9ecd428b558ff102(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented)
      return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  };
}

// node_modules/@radix-ui/react-collection/dist/index.module.js
var import_react11 = __toESM(require_react());

// node_modules/@radix-ui/react-collection/node_modules/@radix-ui/react-context/dist/index.module.js
var import_react8 = __toESM(require_react());
function $c512c27ab02ef895$export$50c7b4e9d9f19c12(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
    const BaseContext = /* @__PURE__ */ (0, import_react8.createContext)(defaultContext);
    const index4 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider2(props) {
      const { scope, children, ...context } = props;
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const value = (0, import_react8.useMemo)(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_react8.createElement)(Context2.Provider, {
        value
      }, children);
    }
    function useContext6(consumerName, scope) {
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const context = (0, import_react8.useContext)(Context2);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider2.displayName = rootComponentName + "Provider";
    return [
      Provider2,
      useContext6
    ];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return /* @__PURE__ */ (0, import_react8.createContext)(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
      return (0, import_react8.useMemo)(() => ({
        [`__scope${scopeName}`]: {
          ...scope,
          [scopeName]: contexts
        }
      }), [
        scope,
        contexts
      ]);
    };
  };
  createScope.scopeName = scopeName;
  return [
    $c512c27ab02ef895$export$fd42f52fd3ae11092,
    $c512c27ab02ef895$var$composeContextScopes2(createScope, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes2(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope1 = () => {
    const scopeHooks = scopes.map((createScope) => ({
      useScope: createScope(),
      scopeName: createScope.scopeName
    }));
    return function useComposedScopes(overrideScopes) {
      const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope = scopeProps[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope
        };
      }, {});
      return (0, import_react8.useMemo)(() => ({
        [`__scope${baseScope.scopeName}`]: nextScopes1
      }), [
        nextScopes1
      ]);
    };
  };
  createScope1.scopeName = baseScope.scopeName;
  return createScope1;
}

// node_modules/@radix-ui/react-collection/node_modules/@radix-ui/react-compose-refs/dist/index.module.js
var import_react9 = __toESM(require_react());
function $6ed0406888f73fc4$var$setRef2(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af2(...refs) {
  return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef2(ref, node));
}
function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {
  return (0, import_react9.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af2(...refs), refs);
}

// node_modules/@radix-ui/react-collection/node_modules/@radix-ui/react-slot/dist/index.module.js
var import_react10 = __toESM(require_react());
var $5e63c961fc1ce211$export$8c6ed5c666ac13602 = /* @__PURE__ */ (0, import_react10.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = import_react10.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable2);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (import_react10.Children.count(newElement) > 1)
          return import_react10.Children.only(null);
        return /* @__PURE__ */ (0, import_react10.isValidElement)(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ (0, import_react10.createElement)($5e63c961fc1ce211$var$SlotClone2, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ (0, import_react10.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react10.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ (0, import_react10.createElement)($5e63c961fc1ce211$var$SlotClone2, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac13602.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone2 = /* @__PURE__ */ (0, import_react10.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ (0, import_react10.isValidElement)(children))
    return /* @__PURE__ */ (0, import_react10.cloneElement)(children, {
      ...$5e63c961fc1ce211$var$mergeProps2(slotProps, children.props),
      ref: $6ed0406888f73fc4$export$43e446d32b3d21af2(forwardedRef, children.ref)
    });
  return import_react10.Children.count(children) > 1 ? import_react10.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone2.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d452 = ({ children }) => {
  return /* @__PURE__ */ (0, import_react10.createElement)(import_react10.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable2(child) {
  return /* @__PURE__ */ (0, import_react10.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d452;
}
function $5e63c961fc1ce211$var$mergeProps2(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler)
      overrideProps[propName] = (...args) => {
        childPropValue === null || childPropValue === void 0 || childPropValue(...args);
        slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
      };
    else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// node_modules/@radix-ui/react-collection/dist/index.module.js
function $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {
  const PROVIDER_NAME = name + "CollectionProvider";
  const [createCollectionContext, createCollectionScope] = $c512c27ab02ef895$export$50c7b4e9d9f19c12(PROVIDER_NAME);
  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
    collectionRef: {
      current: null
    },
    itemMap: /* @__PURE__ */ new Map()
  });
  const CollectionProvider = (props) => {
    const { scope, children } = props;
    const ref = import_react11.default.useRef(null);
    const itemMap = import_react11.default.useRef(/* @__PURE__ */ new Map()).current;
    return /* @__PURE__ */ import_react11.default.createElement(CollectionProviderImpl, {
      scope,
      itemMap,
      collectionRef: ref
    }, children);
  };
  /* @__PURE__ */ Object.assign(CollectionProvider, {
    displayName: PROVIDER_NAME
  });
  const COLLECTION_SLOT_NAME = name + "CollectionSlot";
  const CollectionSlot = /* @__PURE__ */ import_react11.default.forwardRef((props, forwardedRef) => {
    const { scope, children } = props;
    const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.collectionRef);
    return /* @__PURE__ */ import_react11.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac13602, {
      ref: composedRefs
    }, children);
  });
  /* @__PURE__ */ Object.assign(CollectionSlot, {
    displayName: COLLECTION_SLOT_NAME
  });
  const ITEM_SLOT_NAME = name + "CollectionItemSlot";
  const ITEM_DATA_ATTR = "data-radix-collection-item";
  const CollectionItemSlot = /* @__PURE__ */ import_react11.default.forwardRef((props, forwardedRef) => {
    const { scope, children, ...itemData } = props;
    const ref = import_react11.default.useRef(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const context = useCollectionContext(ITEM_SLOT_NAME, scope);
    import_react11.default.useEffect(() => {
      context.itemMap.set(ref, {
        ref,
        ...itemData
      });
      return () => void context.itemMap.delete(ref);
    });
    return /* @__PURE__ */ import_react11.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac13602, {
      [ITEM_DATA_ATTR]: "",
      ref: composedRefs
    }, children);
  });
  /* @__PURE__ */ Object.assign(CollectionItemSlot, {
    displayName: ITEM_SLOT_NAME
  });
  function useCollection(scope) {
    const context = useCollectionContext(name + "CollectionConsumer", scope);
    const getItems = import_react11.default.useCallback(() => {
      const collectionNode = context.collectionRef.current;
      if (!collectionNode)
        return [];
      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
      const items = Array.from(context.itemMap.values());
      const orderedItems = items.sort((a10, b10) => orderedNodes.indexOf(a10.ref.current) - orderedNodes.indexOf(b10.ref.current));
      return orderedItems;
    }, [
      context.collectionRef,
      context.itemMap
    ]);
    return getItems;
  }
  return [
    {
      Provider: CollectionProvider,
      Slot: CollectionSlot,
      ItemSlot: CollectionItemSlot
    },
    useCollection,
    createCollectionScope
  ];
}

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-compose-refs/dist/index.module.js
var import_react12 = __toESM(require_react());
function $6ed0406888f73fc4$var$setRef3(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af3(...refs) {
  return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef3(ref, node));
}
function $6ed0406888f73fc4$export$c7b2cbe3552a0d052(...refs) {
  return (0, import_react12.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af3(...refs), refs);
}

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-context/dist/index.module.js
var import_react13 = __toESM(require_react());
function $c512c27ab02ef895$export$50c7b4e9d9f19c13(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
    const BaseContext = /* @__PURE__ */ (0, import_react13.createContext)(defaultContext);
    const index4 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider2(props) {
      const { scope, children, ...context } = props;
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const value = (0, import_react13.useMemo)(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_react13.createElement)(Context2.Provider, {
        value
      }, children);
    }
    function useContext6(consumerName, scope) {
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const context = (0, import_react13.useContext)(Context2);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider2.displayName = rootComponentName + "Provider";
    return [
      Provider2,
      useContext6
    ];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return /* @__PURE__ */ (0, import_react13.createContext)(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
      return (0, import_react13.useMemo)(() => ({
        [`__scope${scopeName}`]: {
          ...scope,
          [scopeName]: contexts
        }
      }), [
        scope,
        contexts
      ]);
    };
  };
  createScope.scopeName = scopeName;
  return [
    $c512c27ab02ef895$export$fd42f52fd3ae11092,
    $c512c27ab02ef895$var$composeContextScopes3(createScope, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes3(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope1 = () => {
    const scopeHooks = scopes.map((createScope) => ({
      useScope: createScope(),
      scopeName: createScope.scopeName
    }));
    return function useComposedScopes(overrideScopes) {
      const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope = scopeProps[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope
        };
      }, {});
      return (0, import_react13.useMemo)(() => ({
        [`__scope${baseScope.scopeName}`]: nextScopes1
      }), [
        nextScopes1
      ]);
    };
  };
  createScope1.scopeName = baseScope.scopeName;
  return createScope1;
}

// node_modules/@radix-ui/react-direction/dist/index.module.js
var import_react14 = __toESM(require_react());
var $f631663db3294ace$var$DirectionContext = /* @__PURE__ */ (0, import_react14.createContext)(void 0);
function $f631663db3294ace$export$b39126d51d94e6f3(localDir) {
  const globalDir = (0, import_react14.useContext)($f631663db3294ace$var$DirectionContext);
  return localDir || globalDir || "ltr";
}

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-dismissable-layer/dist/index.module.js
var import_react19 = __toESM(require_react());

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-primitive/dist/index.module.js
var import_react16 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-slot/dist/index.module.js
var import_react15 = __toESM(require_react());
var $5e63c961fc1ce211$export$8c6ed5c666ac13603 = /* @__PURE__ */ (0, import_react15.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = import_react15.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable3);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (import_react15.Children.count(newElement) > 1)
          return import_react15.Children.only(null);
        return /* @__PURE__ */ (0, import_react15.isValidElement)(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ (0, import_react15.createElement)($5e63c961fc1ce211$var$SlotClone3, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ (0, import_react15.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react15.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ (0, import_react15.createElement)($5e63c961fc1ce211$var$SlotClone3, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac13603.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone3 = /* @__PURE__ */ (0, import_react15.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ (0, import_react15.isValidElement)(children))
    return /* @__PURE__ */ (0, import_react15.cloneElement)(children, {
      ...$5e63c961fc1ce211$var$mergeProps3(slotProps, children.props),
      ref: $6ed0406888f73fc4$export$43e446d32b3d21af3(forwardedRef, children.ref)
    });
  return import_react15.Children.count(children) > 1 ? import_react15.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone3.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d453 = ({ children }) => {
  return /* @__PURE__ */ (0, import_react15.createElement)(import_react15.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable3(child) {
  return /* @__PURE__ */ (0, import_react15.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d453;
}
function $5e63c961fc1ce211$var$mergeProps3(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler)
      overrideProps[propName] = (...args) => {
        childPropValue === null || childPropValue === void 0 || childPropValue(...args);
        slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
      };
    else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-primitive/dist/index.module.js
var $8927f6f2acc4f386$var$NODES2 = [
  "a",
  "button",
  "div",
  "h2",
  "h3",
  "img",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
var $8927f6f2acc4f386$export$250ffa63cdc0d0342 = $8927f6f2acc4f386$var$NODES2.reduce((primitive, node) => {
  const Node2 = /* @__PURE__ */ (0, import_react16.forwardRef)((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac13603 : node;
    (0, import_react16.useEffect)(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ (0, import_react16.createElement)(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node2.displayName = `Primitive.${node}`;
  return {
    ...primitive,
    [node]: Node2
  };
}, {});
function $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {
  if (target)
    (0, import_react_dom2.flushSync)(() => target.dispatchEvent(event));
}

// node_modules/@radix-ui/react-use-callback-ref/dist/index.module.js
var import_react17 = __toESM(require_react());
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {
  const callbackRef = (0, import_react17.useRef)(callback);
  (0, import_react17.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react17.useMemo)(() => (...args) => {
    var _callbackRef$current;
    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
  }, []);
}

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-use-escape-keydown/dist/index.module.js
var import_react18 = __toESM(require_react());
function $addc16e1bbe58fd0$export$3a72a57244d6e765(onEscapeKeyDownProp) {
  const onEscapeKeyDown = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEscapeKeyDownProp);
  (0, import_react18.useEffect)(() => {
    const handleKeyDown = (event) => {
      if (event.key === "Escape")
        onEscapeKeyDown(event);
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [
    onEscapeKeyDown
  ]);
}

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-dismissable-layer/dist/index.module.js
var $5cb92bef7577960e$var$CONTEXT_UPDATE = "dismissableLayer.update";
var $5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
var $5cb92bef7577960e$var$FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
var $5cb92bef7577960e$var$originalBodyPointerEvents;
var $5cb92bef7577960e$var$DismissableLayerContext = /* @__PURE__ */ (0, import_react19.createContext)({
  layers: /* @__PURE__ */ new Set(),
  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
  branches: /* @__PURE__ */ new Set()
});
var $5cb92bef7577960e$export$177fb62ff3ec1f22 = /* @__PURE__ */ (0, import_react19.forwardRef)((props, forwardedRef) => {
  const { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, ...layerProps } = props;
  const context = (0, import_react19.useContext)($5cb92bef7577960e$var$DismissableLayerContext);
  const [node1, setNode] = (0, import_react19.useState)(null);
  const [, force] = (0, import_react19.useState)({});
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, (node) => setNode(node));
  const layers = Array.from(context.layers);
  const [highestLayerWithOutsidePointerEventsDisabled] = [
    ...context.layersWithOutsidePointerEventsDisabled
  ].slice(-1);
  const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
  const index4 = node1 ? layers.indexOf(node1) : -1;
  const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
  const isPointerEventsEnabled = index4 >= highestLayerWithOutsidePointerEventsDisabledIndex;
  const pointerDownOutside = $5cb92bef7577960e$var$usePointerDownOutside((event) => {
    const target = event.target;
    const isPointerDownOnBranch = [
      ...context.branches
    ].some((branch) => branch.contains(target));
    if (!isPointerEventsEnabled || isPointerDownOnBranch)
      return;
    onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);
    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
    if (!event.defaultPrevented)
      onDismiss === null || onDismiss === void 0 || onDismiss();
  });
  const focusOutside = $5cb92bef7577960e$var$useFocusOutside((event) => {
    const target = event.target;
    const isFocusInBranch = [
      ...context.branches
    ].some((branch) => branch.contains(target));
    if (isFocusInBranch)
      return;
    onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);
    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
    if (!event.defaultPrevented)
      onDismiss === null || onDismiss === void 0 || onDismiss();
  });
  $addc16e1bbe58fd0$export$3a72a57244d6e765((event) => {
    const isHighestLayer = index4 === context.layers.size - 1;
    if (!isHighestLayer)
      return;
    onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);
    if (!event.defaultPrevented && onDismiss) {
      event.preventDefault();
      onDismiss();
    }
  });
  (0, import_react19.useEffect)(() => {
    if (!node1)
      return;
    if (disableOutsidePointerEvents) {
      if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
        $5cb92bef7577960e$var$originalBodyPointerEvents = document.body.style.pointerEvents;
        document.body.style.pointerEvents = "none";
      }
      context.layersWithOutsidePointerEventsDisabled.add(node1);
    }
    context.layers.add(node1);
    $5cb92bef7577960e$var$dispatchUpdate();
    return () => {
      if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1)
        document.body.style.pointerEvents = $5cb92bef7577960e$var$originalBodyPointerEvents;
    };
  }, [
    node1,
    disableOutsidePointerEvents,
    context
  ]);
  (0, import_react19.useEffect)(() => {
    return () => {
      if (!node1)
        return;
      context.layers.delete(node1);
      context.layersWithOutsidePointerEventsDisabled.delete(node1);
      $5cb92bef7577960e$var$dispatchUpdate();
    };
  }, [
    node1,
    context
  ]);
  (0, import_react19.useEffect)(() => {
    const handleUpdate = () => force({});
    document.addEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
    return () => document.removeEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
  }, []);
  return /* @__PURE__ */ (0, import_react19.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({}, layerProps, {
    ref: composedRefs,
    style: {
      pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
      ...props.style
    },
    onFocusCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onFocusCapture, focusOutside.onFocusCapture),
    onBlurCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onBlurCapture, focusOutside.onBlurCapture),
    onPointerDownCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
  }));
});
function $5cb92bef7577960e$var$usePointerDownOutside(onPointerDownOutside) {
  const handlePointerDownOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPointerDownOutside);
  const isPointerInsideReactTreeRef = (0, import_react19.useRef)(false);
  const handleClickRef = (0, import_react19.useRef)(() => {
  });
  (0, import_react19.useEffect)(() => {
    const handlePointerDown = (event) => {
      if (event.target && !isPointerInsideReactTreeRef.current) {
        let handleAndDispatchPointerDownOutsideEvent = function() {
          $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {
            discrete: true
          });
        };
        const eventDetail = {
          originalEvent: event
        };
        if (event.pointerType === "touch") {
          document.removeEventListener("click", handleClickRef.current);
          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;
          document.addEventListener("click", handleClickRef.current, {
            once: true
          });
        } else
          handleAndDispatchPointerDownOutsideEvent();
      }
      isPointerInsideReactTreeRef.current = false;
    };
    const timerId = window.setTimeout(() => {
      document.addEventListener("pointerdown", handlePointerDown);
    }, 0);
    return () => {
      window.clearTimeout(timerId);
      document.removeEventListener("pointerdown", handlePointerDown);
      document.removeEventListener("click", handleClickRef.current);
    };
  }, [
    handlePointerDownOutside
  ]);
  return {
    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
  };
}
function $5cb92bef7577960e$var$useFocusOutside(onFocusOutside) {
  const handleFocusOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onFocusOutside);
  const isFocusInsideReactTreeRef = (0, import_react19.useRef)(false);
  (0, import_react19.useEffect)(() => {
    const handleFocus = (event) => {
      if (event.target && !isFocusInsideReactTreeRef.current) {
        const eventDetail = {
          originalEvent: event
        };
        $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
          discrete: false
        });
      }
    };
    document.addEventListener("focusin", handleFocus);
    return () => document.removeEventListener("focusin", handleFocus);
  }, [
    handleFocusOutside
  ]);
  return {
    onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
    onBlurCapture: () => isFocusInsideReactTreeRef.current = false
  };
}
function $5cb92bef7577960e$var$dispatchUpdate() {
  const event = new CustomEvent($5cb92bef7577960e$var$CONTEXT_UPDATE);
  document.dispatchEvent(event);
}
function $5cb92bef7577960e$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
  const target = detail.originalEvent.target;
  const event = new CustomEvent(name, {
    bubbles: false,
    cancelable: true,
    detail
  });
  if (handler)
    target.addEventListener(name, handler, {
      once: true
    });
  if (discrete)
    $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event);
  else
    target.dispatchEvent(event);
}

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-focus-guards/dist/index.module.js
var import_react20 = __toESM(require_react());
var $3db38b7d1fb3fe6a$var$count = 0;
function $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c() {
  (0, import_react20.useEffect)(() => {
    var _edgeGuards$, _edgeGuards$2;
    const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
    document.body.insertAdjacentElement("afterbegin", (_edgeGuards$ = edgeGuards[0]) !== null && _edgeGuards$ !== void 0 ? _edgeGuards$ : $3db38b7d1fb3fe6a$var$createFocusGuard());
    document.body.insertAdjacentElement("beforeend", (_edgeGuards$2 = edgeGuards[1]) !== null && _edgeGuards$2 !== void 0 ? _edgeGuards$2 : $3db38b7d1fb3fe6a$var$createFocusGuard());
    $3db38b7d1fb3fe6a$var$count++;
    return () => {
      if ($3db38b7d1fb3fe6a$var$count === 1)
        document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
      $3db38b7d1fb3fe6a$var$count--;
    };
  }, []);
}
function $3db38b7d1fb3fe6a$var$createFocusGuard() {
  const element = document.createElement("span");
  element.setAttribute("data-radix-focus-guard", "");
  element.tabIndex = 0;
  element.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none";
  return element;
}

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-focus-scope/dist/index.module.js
var import_react21 = __toESM(require_react());
var $d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
var $d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
var $d3863c46a17e8a28$var$EVENT_OPTIONS = {
  bubbles: false,
  cancelable: true
};
var $d3863c46a17e8a28$export$20e40289641fbbb6 = /* @__PURE__ */ (0, import_react21.forwardRef)((props, forwardedRef) => {
  const { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp, ...scopeProps } = props;
  const [container1, setContainer] = (0, import_react21.useState)(null);
  const onMountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onMountAutoFocusProp);
  const onUnmountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onUnmountAutoFocusProp);
  const lastFocusedElementRef = (0, import_react21.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, (node) => setContainer(node));
  const focusScope = (0, import_react21.useRef)({
    paused: false,
    pause() {
      this.paused = true;
    },
    resume() {
      this.paused = false;
    }
  }).current;
  (0, import_react21.useEffect)(() => {
    if (trapped) {
      let handleFocusIn = function(event) {
        if (focusScope.paused || !container1)
          return;
        const target = event.target;
        if (container1.contains(target))
          lastFocusedElementRef.current = target;
        else
          $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
            select: true
          });
      }, handleFocusOut = function(event) {
        if (focusScope.paused || !container1)
          return;
        if (!container1.contains(event.relatedTarget))
          $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
            select: true
          });
      };
      document.addEventListener("focusin", handleFocusIn);
      document.addEventListener("focusout", handleFocusOut);
      return () => {
        document.removeEventListener("focusin", handleFocusIn);
        document.removeEventListener("focusout", handleFocusOut);
      };
    }
  }, [
    trapped,
    container1,
    focusScope.paused
  ]);
  (0, import_react21.useEffect)(() => {
    if (container1) {
      $d3863c46a17e8a28$var$focusScopesStack.add(focusScope);
      const previouslyFocusedElement = document.activeElement;
      const hasFocusedCandidate = container1.contains(previouslyFocusedElement);
      if (!hasFocusedCandidate) {
        const mountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
        container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        container1.dispatchEvent(mountEvent);
        if (!mountEvent.defaultPrevented) {
          $d3863c46a17e8a28$var$focusFirst($d3863c46a17e8a28$var$removeLinks($d3863c46a17e8a28$var$getTabbableCandidates(container1)), {
            select: true
          });
          if (document.activeElement === previouslyFocusedElement)
            $d3863c46a17e8a28$var$focus(container1);
        }
      }
      return () => {
        container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        setTimeout(() => {
          const unmountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
          container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          container1.dispatchEvent(unmountEvent);
          if (!unmountEvent.defaultPrevented)
            $d3863c46a17e8a28$var$focus(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {
              select: true
            });
          container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          $d3863c46a17e8a28$var$focusScopesStack.remove(focusScope);
        }, 0);
      };
    }
  }, [
    container1,
    onMountAutoFocus,
    onUnmountAutoFocus,
    focusScope
  ]);
  const handleKeyDown = (0, import_react21.useCallback)((event) => {
    if (!loop && !trapped)
      return;
    if (focusScope.paused)
      return;
    const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
    const focusedElement = document.activeElement;
    if (isTabKey && focusedElement) {
      const container = event.currentTarget;
      const [first, last] = $d3863c46a17e8a28$var$getTabbableEdges(container);
      const hasTabbableElementsInside = first && last;
      if (!hasTabbableElementsInside) {
        if (focusedElement === container)
          event.preventDefault();
      } else {
        if (!event.shiftKey && focusedElement === last) {
          event.preventDefault();
          if (loop)
            $d3863c46a17e8a28$var$focus(first, {
              select: true
            });
        } else if (event.shiftKey && focusedElement === first) {
          event.preventDefault();
          if (loop)
            $d3863c46a17e8a28$var$focus(last, {
              select: true
            });
        }
      }
    }
  }, [
    loop,
    trapped,
    focusScope.paused
  ]);
  return /* @__PURE__ */ (0, import_react21.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({
    tabIndex: -1
  }, scopeProps, {
    ref: composedRefs,
    onKeyDown: handleKeyDown
  }));
});
function $d3863c46a17e8a28$var$focusFirst(candidates, { select = false } = {}) {
  const previouslyFocusedElement = document.activeElement;
  for (const candidate of candidates) {
    $d3863c46a17e8a28$var$focus(candidate, {
      select
    });
    if (document.activeElement !== previouslyFocusedElement)
      return;
  }
}
function $d3863c46a17e8a28$var$getTabbableEdges(container) {
  const candidates = $d3863c46a17e8a28$var$getTabbableCandidates(container);
  const first = $d3863c46a17e8a28$var$findVisible(candidates, container);
  const last = $d3863c46a17e8a28$var$findVisible(candidates.reverse(), container);
  return [
    first,
    last
  ];
}
function $d3863c46a17e8a28$var$getTabbableCandidates(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
}
function $d3863c46a17e8a28$var$findVisible(elements, container) {
  for (const element of elements) {
    if (!$d3863c46a17e8a28$var$isHidden(element, {
      upTo: container
    }))
      return element;
  }
}
function $d3863c46a17e8a28$var$isHidden(node, { upTo }) {
  if (getComputedStyle(node).visibility === "hidden")
    return true;
  while (node) {
    if (upTo !== void 0 && node === upTo)
      return false;
    if (getComputedStyle(node).display === "none")
      return true;
    node = node.parentElement;
  }
  return false;
}
function $d3863c46a17e8a28$var$isSelectableInput(element) {
  return element instanceof HTMLInputElement && "select" in element;
}
function $d3863c46a17e8a28$var$focus(element, { select = false } = {}) {
  if (element && element.focus) {
    const previouslyFocusedElement = document.activeElement;
    element.focus({
      preventScroll: true
    });
    if (element !== previouslyFocusedElement && $d3863c46a17e8a28$var$isSelectableInput(element) && select)
      element.select();
  }
}
var $d3863c46a17e8a28$var$focusScopesStack = $d3863c46a17e8a28$var$createFocusScopesStack();
function $d3863c46a17e8a28$var$createFocusScopesStack() {
  let stack = [];
  return {
    add(focusScope) {
      const activeFocusScope = stack[0];
      if (focusScope !== activeFocusScope)
        activeFocusScope === null || activeFocusScope === void 0 || activeFocusScope.pause();
      stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope);
      stack.unshift(focusScope);
    },
    remove(focusScope) {
      var _stack$;
      stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope);
      (_stack$ = stack[0]) === null || _stack$ === void 0 || _stack$.resume();
    }
  };
}
function $d3863c46a17e8a28$var$arrayRemove(array, item) {
  const updatedArray = [
    ...array
  ];
  const index4 = updatedArray.indexOf(item);
  if (index4 !== -1)
    updatedArray.splice(index4, 1);
  return updatedArray;
}
function $d3863c46a17e8a28$var$removeLinks(items) {
  return items.filter((item) => item.tagName !== "A");
}

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-id/dist/index.module.js
var $2AODx$react = __toESM(require_react());

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
var import_react22 = __toESM(require_react());
var $9f79659886946c16$export$e5c5a5f917a5871c = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react22.useLayoutEffect : () => {
};

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-id/dist/index.module.js
var $1746a345f3d73bb7$var$useReactId = $2AODx$react["useId".toString()] || (() => void 0);
var $1746a345f3d73bb7$var$count = 0;
function $1746a345f3d73bb7$export$f680877a34711e37(deterministicId) {
  const [id, setId] = $2AODx$react.useState($1746a345f3d73bb7$var$useReactId());
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (!deterministicId)
      setId((reactId) => reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count++));
  }, [
    deterministicId
  ]);
  return deterministicId || (id ? `radix-${id}` : "");
}

// node_modules/@radix-ui/react-popper/dist/index.module.js
var import_react35 = __toESM(require_react());

// node_modules/@floating-ui/core/dist/floating-ui.core.browser.min.mjs
function t2(t10) {
  return t10.split("-")[0];
}
function e2(t10) {
  return t10.split("-")[1];
}
function n(e10) {
  return ["top", "bottom"].includes(t2(e10)) ? "x" : "y";
}
function r(t10) {
  return t10 === "y" ? "height" : "width";
}
function i(i10, o10, a10) {
  let { reference: l10, floating: s10 } = i10;
  const c10 = l10.x + l10.width / 2 - s10.width / 2, f10 = l10.y + l10.height / 2 - s10.height / 2, u10 = n(o10), m10 = r(u10), g10 = l10[m10] / 2 - s10[m10] / 2, d10 = u10 === "x";
  let p10;
  switch (t2(o10)) {
    case "top":
      p10 = { x: c10, y: l10.y - s10.height };
      break;
    case "bottom":
      p10 = { x: c10, y: l10.y + l10.height };
      break;
    case "right":
      p10 = { x: l10.x + l10.width, y: f10 };
      break;
    case "left":
      p10 = { x: l10.x - s10.width, y: f10 };
      break;
    default:
      p10 = { x: l10.x, y: l10.y };
  }
  switch (e2(o10)) {
    case "start":
      p10[u10] -= g10 * (a10 && d10 ? -1 : 1);
      break;
    case "end":
      p10[u10] += g10 * (a10 && d10 ? -1 : 1);
  }
  return p10;
}
var o = async (t10, e10, n10) => {
  const { placement: r10 = "bottom", strategy: o10 = "absolute", middleware: a10 = [], platform: l10 } = n10, s10 = await (l10.isRTL == null ? void 0 : l10.isRTL(e10));
  let c10 = await l10.getElementRects({ reference: t10, floating: e10, strategy: o10 }), { x: f10, y: u10 } = i(c10, r10, s10), m10 = r10, g10 = {}, d10 = 0;
  for (let n11 = 0; n11 < a10.length; n11++) {
    const { name: p10, fn: h10 } = a10[n11], { x: y10, y: x10, data: w10, reset: v11 } = await h10({ x: f10, y: u10, initialPlacement: r10, placement: m10, strategy: o10, middlewareData: g10, rects: c10, platform: l10, elements: { reference: t10, floating: e10 } });
    f10 = y10 != null ? y10 : f10, u10 = x10 != null ? x10 : u10, g10 = { ...g10, [p10]: { ...g10[p10], ...w10 } }, v11 && d10 <= 50 && (d10++, typeof v11 == "object" && (v11.placement && (m10 = v11.placement), v11.rects && (c10 = v11.rects === true ? await l10.getElementRects({ reference: t10, floating: e10, strategy: o10 }) : v11.rects), { x: f10, y: u10 } = i(c10, m10, s10)), n11 = -1);
  }
  return { x: f10, y: u10, placement: m10, strategy: o10, middlewareData: g10 };
};
function a3(t10) {
  return typeof t10 != "number" ? function(t11) {
    return { top: 0, right: 0, bottom: 0, left: 0, ...t11 };
  }(t10) : { top: t10, right: t10, bottom: t10, left: t10 };
}
function l3(t10) {
  return { ...t10, top: t10.y, left: t10.x, right: t10.x + t10.width, bottom: t10.y + t10.height };
}
async function s(t10, e10) {
  var n10;
  e10 === void 0 && (e10 = {});
  const { x: r10, y: i10, platform: o10, rects: s10, elements: c10, strategy: f10 } = t10, { boundary: u10 = "clippingAncestors", rootBoundary: m10 = "viewport", elementContext: g10 = "floating", altBoundary: d10 = false, padding: p10 = 0 } = e10, h10 = a3(p10), y10 = c10[d10 ? g10 === "floating" ? "reference" : "floating" : g10], x10 = l3(await o10.getClippingRect({ element: (n10 = await (o10.isElement == null ? void 0 : o10.isElement(y10))) == null || n10 ? y10 : y10.contextElement || await (o10.getDocumentElement == null ? void 0 : o10.getDocumentElement(c10.floating)), boundary: u10, rootBoundary: m10, strategy: f10 })), w10 = l3(o10.convertOffsetParentRelativeRectToViewportRelativeRect ? await o10.convertOffsetParentRelativeRectToViewportRelativeRect({ rect: g10 === "floating" ? { ...s10.floating, x: r10, y: i10 } : s10.reference, offsetParent: await (o10.getOffsetParent == null ? void 0 : o10.getOffsetParent(c10.floating)), strategy: f10 }) : s10[g10]);
  return { top: x10.top - w10.top + h10.top, bottom: w10.bottom - x10.bottom + h10.bottom, left: x10.left - w10.left + h10.left, right: w10.right - x10.right + h10.right };
}
var c = Math.min;
var f = Math.max;
function u(t10, e10, n10) {
  return f(t10, c(e10, n10));
}
var m2 = (t10) => ({ name: "arrow", options: t10, async fn(i10) {
  const { element: o10, padding: l10 = 0 } = t10 != null ? t10 : {}, { x: s10, y: c10, placement: f10, rects: m10, platform: g10 } = i10;
  if (o10 == null)
    return {};
  const d10 = a3(l10), p10 = { x: s10, y: c10 }, h10 = n(f10), y10 = e2(f10), x10 = r(h10), w10 = await g10.getDimensions(o10), v11 = h10 === "y" ? "top" : "left", b10 = h10 === "y" ? "bottom" : "right", R10 = m10.reference[x10] + m10.reference[h10] - p10[h10] - m10.floating[x10], A10 = p10[h10] - m10.reference[h10], P10 = await (g10.getOffsetParent == null ? void 0 : g10.getOffsetParent(o10));
  let T10 = P10 ? h10 === "y" ? P10.clientHeight || 0 : P10.clientWidth || 0 : 0;
  T10 === 0 && (T10 = m10.floating[x10]);
  const O10 = R10 / 2 - A10 / 2, D10 = d10[v11], L10 = T10 - w10[x10] - d10[b10], k10 = T10 / 2 - w10[x10] / 2 + O10, E10 = u(D10, k10, L10), C10 = (y10 === "start" ? d10[v11] : d10[b10]) > 0 && k10 !== E10 && m10.reference[x10] <= m10.floating[x10];
  return { [h10]: p10[h10] - (C10 ? k10 < D10 ? D10 - k10 : L10 - k10 : 0), data: { [h10]: E10, centerOffset: k10 - E10 } };
} });
var g3 = { left: "right", right: "left", bottom: "top", top: "bottom" };
function d2(t10) {
  return t10.replace(/left|right|bottom|top/g, (t11) => g3[t11]);
}
function p2(t10, i10, o10) {
  o10 === void 0 && (o10 = false);
  const a10 = e2(t10), l10 = n(t10), s10 = r(l10);
  let c10 = l10 === "x" ? a10 === (o10 ? "end" : "start") ? "right" : "left" : a10 === "start" ? "bottom" : "top";
  return i10.reference[s10] > i10.floating[s10] && (c10 = d2(c10)), { main: c10, cross: d2(c10) };
}
var h2 = { start: "end", end: "start" };
function y2(t10) {
  return t10.replace(/start|end/g, (t11) => h2[t11]);
}
var x2 = ["top", "right", "bottom", "left"];
var w3 = x2.reduce((t10, e10) => t10.concat(e10, e10 + "-start", e10 + "-end"), []);
var b2 = function(e10) {
  return e10 === void 0 && (e10 = {}), { name: "flip", options: e10, async fn(n10) {
    var r10;
    const { placement: i10, middlewareData: o10, rects: a10, initialPlacement: l10, platform: c10, elements: f10 } = n10, { mainAxis: u10 = true, crossAxis: m10 = true, fallbackPlacements: g10, fallbackStrategy: h10 = "bestFit", flipAlignment: x10 = true, ...w10 } = e10, v11 = t2(i10), b10 = g10 || (v11 === l10 || !x10 ? [d2(l10)] : function(t10) {
      const e11 = d2(t10);
      return [y2(t10), e11, y2(e11)];
    }(l10)), R10 = [l10, ...b10], A10 = await s(n10, w10), P10 = [];
    let T10 = ((r10 = o10.flip) == null ? void 0 : r10.overflows) || [];
    if (u10 && P10.push(A10[v11]), m10) {
      const { main: t10, cross: e11 } = p2(i10, a10, await (c10.isRTL == null ? void 0 : c10.isRTL(f10.floating)));
      P10.push(A10[t10], A10[e11]);
    }
    if (T10 = [...T10, { placement: i10, overflows: P10 }], !P10.every((t10) => t10 <= 0)) {
      var O10, D10;
      const t10 = ((O10 = (D10 = o10.flip) == null ? void 0 : D10.index) != null ? O10 : 0) + 1, e11 = R10[t10];
      if (e11)
        return { data: { index: t10, overflows: T10 }, reset: { placement: e11 } };
      let n11 = "bottom";
      switch (h10) {
        case "bestFit": {
          var L10;
          const t11 = (L10 = T10.map((t12) => [t12, t12.overflows.filter((t13) => t13 > 0).reduce((t13, e12) => t13 + e12, 0)]).sort((t12, e12) => t12[1] - e12[1])[0]) == null ? void 0 : L10[0].placement;
          t11 && (n11 = t11);
          break;
        }
        case "initialPlacement":
          n11 = l10;
      }
      if (i10 !== n11)
        return { reset: { placement: n11 } };
    }
    return {};
  } };
};
function R4(t10, e10) {
  return { top: t10.top - e10.height, right: t10.right - e10.width, bottom: t10.bottom - e10.height, left: t10.left - e10.width };
}
function A3(t10) {
  return x2.some((e10) => t10[e10] >= 0);
}
var P = function(t10) {
  let { strategy: e10 = "referenceHidden", ...n10 } = t10 === void 0 ? {} : t10;
  return { name: "hide", async fn(t11) {
    const { rects: r10 } = t11;
    switch (e10) {
      case "referenceHidden": {
        const e11 = R4(await s(t11, { ...n10, elementContext: "reference" }), r10.reference);
        return { data: { referenceHiddenOffsets: e11, referenceHidden: A3(e11) } };
      }
      case "escaped": {
        const e11 = R4(await s(t11, { ...n10, altBoundary: true }), r10.floating);
        return { data: { escapedOffsets: e11, escaped: A3(e11) } };
      }
      default:
        return {};
    }
  } };
};
var T2 = function(r10) {
  return r10 === void 0 && (r10 = 0), { name: "offset", options: r10, async fn(i10) {
    const { x: o10, y: a10 } = i10, l10 = await async function(r11, i11) {
      const { placement: o11, platform: a11, elements: l11 } = r11, s10 = await (a11.isRTL == null ? void 0 : a11.isRTL(l11.floating)), c10 = t2(o11), f10 = e2(o11), u10 = n(o11) === "x", m10 = ["left", "top"].includes(c10) ? -1 : 1, g10 = s10 && u10 ? -1 : 1, d10 = typeof i11 == "function" ? i11(r11) : i11;
      let { mainAxis: p10, crossAxis: h10, alignmentAxis: y10 } = typeof d10 == "number" ? { mainAxis: d10, crossAxis: 0, alignmentAxis: null } : { mainAxis: 0, crossAxis: 0, alignmentAxis: null, ...d10 };
      return f10 && typeof y10 == "number" && (h10 = f10 === "end" ? -1 * y10 : y10), u10 ? { x: h10 * g10, y: p10 * m10 } : { x: p10 * m10, y: h10 * g10 };
    }(i10, r10);
    return { x: o10 + l10.x, y: a10 + l10.y, data: l10 };
  } };
};
function O3(t10) {
  return t10 === "x" ? "y" : "x";
}
var D3 = function(e10) {
  return e10 === void 0 && (e10 = {}), { name: "shift", options: e10, async fn(r10) {
    const { x: i10, y: o10, placement: a10 } = r10, { mainAxis: l10 = true, crossAxis: c10 = false, limiter: f10 = { fn: (t10) => {
      let { x: e11, y: n10 } = t10;
      return { x: e11, y: n10 };
    } }, ...m10 } = e10, g10 = { x: i10, y: o10 }, d10 = await s(r10, m10), p10 = n(t2(a10)), h10 = O3(p10);
    let y10 = g10[p10], x10 = g10[h10];
    if (l10) {
      const t10 = p10 === "y" ? "bottom" : "right";
      y10 = u(y10 + d10[p10 === "y" ? "top" : "left"], y10, y10 - d10[t10]);
    }
    if (c10) {
      const t10 = h10 === "y" ? "bottom" : "right";
      x10 = u(x10 + d10[h10 === "y" ? "top" : "left"], x10, x10 - d10[t10]);
    }
    const w10 = f10.fn({ ...r10, [p10]: y10, [h10]: x10 });
    return { ...w10, data: { x: w10.x - i10, y: w10.y - o10 } };
  } };
};
var L2 = function(e10) {
  return e10 === void 0 && (e10 = {}), { options: e10, fn(r10) {
    const { x: i10, y: o10, placement: a10, rects: l10, middlewareData: s10 } = r10, { offset: c10 = 0, mainAxis: f10 = true, crossAxis: u10 = true } = e10, m10 = { x: i10, y: o10 }, g10 = n(a10), d10 = O3(g10);
    let p10 = m10[g10], h10 = m10[d10];
    const y10 = typeof c10 == "function" ? c10({ ...l10, placement: a10 }) : c10, x10 = typeof y10 == "number" ? { mainAxis: y10, crossAxis: 0 } : { mainAxis: 0, crossAxis: 0, ...y10 };
    if (f10) {
      const t10 = g10 === "y" ? "height" : "width", e11 = l10.reference[g10] - l10.floating[t10] + x10.mainAxis, n10 = l10.reference[g10] + l10.reference[t10] - x10.mainAxis;
      p10 < e11 ? p10 = e11 : p10 > n10 && (p10 = n10);
    }
    if (u10) {
      var w10, v11, b10, R10;
      const e11 = g10 === "y" ? "width" : "height", n10 = ["top", "left"].includes(t2(a10)), r11 = l10.reference[d10] - l10.floating[e11] + (n10 && (w10 = (v11 = s10.offset) == null ? void 0 : v11[d10]) != null ? w10 : 0) + (n10 ? 0 : x10.crossAxis), i11 = l10.reference[d10] + l10.reference[e11] + (n10 ? 0 : (b10 = (R10 = s10.offset) == null ? void 0 : R10[d10]) != null ? b10 : 0) - (n10 ? x10.crossAxis : 0);
      h10 < r11 ? h10 = r11 : h10 > i11 && (h10 = i11);
    }
    return { [g10]: p10, [d10]: h10 };
  } };
};

// node_modules/@floating-ui/dom/dist/floating-ui.dom.browser.min.mjs
function n2(t10) {
  return t10 && t10.document && t10.location && t10.alert && t10.setInterval;
}
function o2(t10) {
  if (t10 == null)
    return window;
  if (!n2(t10)) {
    const e10 = t10.ownerDocument;
    return e10 && e10.defaultView || window;
  }
  return t10;
}
function i2(t10) {
  return o2(t10).getComputedStyle(t10);
}
function r2(t10) {
  return n2(t10) ? "" : t10 ? (t10.nodeName || "").toLowerCase() : "";
}
function l4() {
  const t10 = navigator.userAgentData;
  return t10 != null && t10.brands ? t10.brands.map((t11) => t11.brand + "/" + t11.version).join(" ") : navigator.userAgent;
}
function c2(t10) {
  return t10 instanceof o2(t10).HTMLElement;
}
function f2(t10) {
  return t10 instanceof o2(t10).Element;
}
function s2(t10) {
  if (typeof ShadowRoot == "undefined")
    return false;
  return t10 instanceof o2(t10).ShadowRoot || t10 instanceof ShadowRoot;
}
function u2(t10) {
  const { overflow: e10, overflowX: n10, overflowY: o10 } = i2(t10);
  return /auto|scroll|overlay|hidden/.test(e10 + o10 + n10);
}
function d3(t10) {
  return ["table", "td", "th"].includes(r2(t10));
}
function h3(t10) {
  const e10 = /firefox/i.test(l4()), n10 = i2(t10);
  return n10.transform !== "none" || n10.perspective !== "none" || n10.contain === "paint" || ["transform", "perspective"].includes(n10.willChange) || e10 && n10.willChange === "filter" || e10 && !!n10.filter && n10.filter !== "none";
}
function a4() {
  return !/^((?!chrome|android).)*safari/i.test(l4());
}
var g4 = Math.min;
var p3 = Math.max;
var m3 = Math.round;
function w4(t10, e10, n10) {
  var i10, r10, l10, s10;
  e10 === void 0 && (e10 = false), n10 === void 0 && (n10 = false);
  const u10 = t10.getBoundingClientRect();
  let d10 = 1, h10 = 1;
  e10 && c2(t10) && (d10 = t10.offsetWidth > 0 && m3(u10.width) / t10.offsetWidth || 1, h10 = t10.offsetHeight > 0 && m3(u10.height) / t10.offsetHeight || 1);
  const g10 = f2(t10) ? o2(t10) : window, p10 = !a4() && n10, w10 = (u10.left + (p10 && (i10 = (r10 = g10.visualViewport) == null ? void 0 : r10.offsetLeft) != null ? i10 : 0)) / d10, v11 = (u10.top + (p10 && (l10 = (s10 = g10.visualViewport) == null ? void 0 : s10.offsetTop) != null ? l10 : 0)) / h10, y10 = u10.width / d10, x10 = u10.height / h10;
  return { width: y10, height: x10, top: v11, right: w10 + y10, bottom: v11 + x10, left: w10, x: w10, y: v11 };
}
function v3(t10) {
  return (e10 = t10, (e10 instanceof o2(e10).Node ? t10.ownerDocument : t10.document) || window.document).documentElement;
  var e10;
}
function y3(t10) {
  return f2(t10) ? { scrollLeft: t10.scrollLeft, scrollTop: t10.scrollTop } : { scrollLeft: t10.pageXOffset, scrollTop: t10.pageYOffset };
}
function x3(t10) {
  return w4(v3(t10)).left + y3(t10).scrollLeft;
}
function b3(t10, e10, n10) {
  const o10 = c2(e10), i10 = v3(e10), l10 = w4(t10, o10 && function(t11) {
    const e11 = w4(t11);
    return m3(e11.width) !== t11.offsetWidth || m3(e11.height) !== t11.offsetHeight;
  }(e10), n10 === "fixed");
  let f10 = { scrollLeft: 0, scrollTop: 0 };
  const s10 = { x: 0, y: 0 };
  if (o10 || !o10 && n10 !== "fixed")
    if ((r2(e10) !== "body" || u2(i10)) && (f10 = y3(e10)), c2(e10)) {
      const t11 = w4(e10, true);
      s10.x = t11.x + e10.clientLeft, s10.y = t11.y + e10.clientTop;
    } else
      i10 && (s10.x = x3(i10));
  return { x: l10.left + f10.scrollLeft - s10.x, y: l10.top + f10.scrollTop - s10.y, width: l10.width, height: l10.height };
}
function L3(t10) {
  return r2(t10) === "html" ? t10 : t10.assignedSlot || t10.parentNode || (s2(t10) ? t10.host : null) || v3(t10);
}
function R5(t10) {
  return c2(t10) && getComputedStyle(t10).position !== "fixed" ? t10.offsetParent : null;
}
function T3(t10) {
  const e10 = o2(t10);
  let n10 = R5(t10);
  for (; n10 && d3(n10) && getComputedStyle(n10).position === "static"; )
    n10 = R5(n10);
  return n10 && (r2(n10) === "html" || r2(n10) === "body" && getComputedStyle(n10).position === "static" && !h3(n10)) ? e10 : n10 || function(t11) {
    let e11 = L3(t11);
    for (s2(e11) && (e11 = e11.host); c2(e11) && !["html", "body"].includes(r2(e11)); ) {
      if (h3(e11))
        return e11;
      e11 = e11.parentNode;
    }
    return null;
  }(t10) || e10;
}
function W3(t10) {
  if (c2(t10))
    return { width: t10.offsetWidth, height: t10.offsetHeight };
  const e10 = w4(t10);
  return { width: e10.width, height: e10.height };
}
function E4(t10) {
  const e10 = L3(t10);
  return ["html", "body", "#document"].includes(r2(e10)) ? t10.ownerDocument.body : c2(e10) && u2(e10) ? e10 : E4(e10);
}
function H3(t10, e10) {
  var n10;
  e10 === void 0 && (e10 = []);
  const i10 = E4(t10), r10 = i10 === ((n10 = t10.ownerDocument) == null ? void 0 : n10.body), l10 = o2(i10), c10 = r10 ? [l10].concat(l10.visualViewport || [], u2(i10) ? i10 : []) : i10, f10 = e10.concat(c10);
  return r10 ? f10 : f10.concat(H3(c10));
}
function C4(e10, n10, r10) {
  return n10 === "viewport" ? l3(function(t10, e11) {
    const n11 = o2(t10), i10 = v3(t10), r11 = n11.visualViewport;
    let l10 = i10.clientWidth, c10 = i10.clientHeight, f10 = 0, s10 = 0;
    if (r11) {
      l10 = r11.width, c10 = r11.height;
      const t11 = a4();
      (t11 || !t11 && e11 === "fixed") && (f10 = r11.offsetLeft, s10 = r11.offsetTop);
    }
    return { width: l10, height: c10, x: f10, y: s10 };
  }(e10, r10)) : f2(n10) ? function(t10, e11) {
    const n11 = w4(t10, false, e11 === "fixed"), o10 = n11.top + t10.clientTop, i10 = n11.left + t10.clientLeft;
    return { top: o10, left: i10, x: i10, y: o10, right: i10 + t10.clientWidth, bottom: o10 + t10.clientHeight, width: t10.clientWidth, height: t10.clientHeight };
  }(n10, r10) : l3(function(t10) {
    var e11;
    const n11 = v3(t10), o10 = y3(t10), r11 = (e11 = t10.ownerDocument) == null ? void 0 : e11.body, l10 = p3(n11.scrollWidth, n11.clientWidth, r11 ? r11.scrollWidth : 0, r11 ? r11.clientWidth : 0), c10 = p3(n11.scrollHeight, n11.clientHeight, r11 ? r11.scrollHeight : 0, r11 ? r11.clientHeight : 0);
    let f10 = -o10.scrollLeft + x3(t10);
    const s10 = -o10.scrollTop;
    return i2(r11 || n11).direction === "rtl" && (f10 += p3(n11.clientWidth, r11 ? r11.clientWidth : 0) - l10), { width: l10, height: c10, x: f10, y: s10 };
  }(v3(e10)));
}
function S2(t10) {
  const e10 = H3(t10), n10 = ["absolute", "fixed"].includes(i2(t10).position) && c2(t10) ? T3(t10) : t10;
  return f2(n10) ? e10.filter((t11) => f2(t11) && function(t12, e11) {
    const n11 = e11.getRootNode == null ? void 0 : e11.getRootNode();
    if (t12.contains(e11))
      return true;
    if (n11 && s2(n11)) {
      let n12 = e11;
      do {
        if (n12 && t12 === n12)
          return true;
        n12 = n12.parentNode || n12.host;
      } while (n12);
    }
    return false;
  }(t11, n10) && r2(t11) !== "body") : [];
}
var D4 = { getClippingRect: function(t10) {
  let { element: e10, boundary: n10, rootBoundary: o10, strategy: i10 } = t10;
  const r10 = [...n10 === "clippingAncestors" ? S2(e10) : [].concat(n10), o10], l10 = r10[0], c10 = r10.reduce((t11, n11) => {
    const o11 = C4(e10, n11, i10);
    return t11.top = p3(o11.top, t11.top), t11.right = g4(o11.right, t11.right), t11.bottom = g4(o11.bottom, t11.bottom), t11.left = p3(o11.left, t11.left), t11;
  }, C4(e10, l10, i10));
  return { width: c10.right - c10.left, height: c10.bottom - c10.top, x: c10.left, y: c10.top };
}, convertOffsetParentRelativeRectToViewportRelativeRect: function(t10) {
  let { rect: e10, offsetParent: n10, strategy: o10 } = t10;
  const i10 = c2(n10), l10 = v3(n10);
  if (n10 === l10)
    return e10;
  let f10 = { scrollLeft: 0, scrollTop: 0 };
  const s10 = { x: 0, y: 0 };
  if ((i10 || !i10 && o10 !== "fixed") && ((r2(n10) !== "body" || u2(l10)) && (f10 = y3(n10)), c2(n10))) {
    const t11 = w4(n10, true);
    s10.x = t11.x + n10.clientLeft, s10.y = t11.y + n10.clientTop;
  }
  return { ...e10, x: e10.x - f10.scrollLeft + s10.x, y: e10.y - f10.scrollTop + s10.y };
}, isElement: f2, getDimensions: W3, getOffsetParent: T3, getDocumentElement: v3, getElementRects: (t10) => {
  let { reference: e10, floating: n10, strategy: o10 } = t10;
  return { reference: b3(e10, T3(n10), o10), floating: { ...W3(n10), x: 0, y: 0 } };
}, getClientRects: (t10) => Array.from(t10.getClientRects()), isRTL: (t10) => i2(t10).direction === "rtl" };
function N3(t10, e10, n10, o10) {
  o10 === void 0 && (o10 = {});
  const { ancestorScroll: i10 = true, ancestorResize: r10 = true, elementResize: l10 = true, animationFrame: c10 = false } = o10, s10 = i10 && !c10, u10 = r10 && !c10, d10 = s10 || u10 ? [...f2(t10) ? H3(t10) : [], ...H3(e10)] : [];
  d10.forEach((t11) => {
    s10 && t11.addEventListener("scroll", n10, { passive: true }), u10 && t11.addEventListener("resize", n10);
  });
  let h10, a10 = null;
  if (l10) {
    let o11 = true;
    a10 = new ResizeObserver(() => {
      o11 || n10(), o11 = false;
    }), f2(t10) && !c10 && a10.observe(t10), a10.observe(e10);
  }
  let g10 = c10 ? w4(t10) : null;
  return c10 && function e11() {
    const o11 = w4(t10);
    !g10 || o11.x === g10.x && o11.y === g10.y && o11.width === g10.width && o11.height === g10.height || n10();
    g10 = o11, h10 = requestAnimationFrame(e11);
  }(), n10(), () => {
    var t11;
    d10.forEach((t12) => {
      s10 && t12.removeEventListener("scroll", n10), u10 && t12.removeEventListener("resize", n10);
    }), (t11 = a10) == null || t11.disconnect(), a10 = null, c10 && cancelAnimationFrame(h10);
  };
}
var z3 = (t10, n10, o10) => o(t10, n10, { platform: D4, ...o10 });

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React9 = __toESM(require_react(), 1);
var import_react23 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var index = typeof document !== "undefined" ? import_react23.useLayoutEffect : import_react23.useEffect;
function deepEqual(a10, b10) {
  if (a10 === b10) {
    return true;
  }
  if (typeof a10 !== typeof b10) {
    return false;
  }
  if (typeof a10 === "function" && a10.toString() === b10.toString()) {
    return true;
  }
  let length, i10, keys;
  if (a10 && b10 && typeof a10 == "object") {
    if (Array.isArray(a10)) {
      length = a10.length;
      if (length != b10.length)
        return false;
      for (i10 = length; i10-- !== 0; ) {
        if (!deepEqual(a10[i10], b10[i10])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a10);
    length = keys.length;
    if (length !== Object.keys(b10).length) {
      return false;
    }
    for (i10 = length; i10-- !== 0; ) {
      if (!Object.prototype.hasOwnProperty.call(b10, keys[i10])) {
        return false;
      }
    }
    for (i10 = length; i10-- !== 0; ) {
      const key = keys[i10];
      if (key === "_owner" && a10.$$typeof) {
        continue;
      }
      if (!deepEqual(a10[key], b10[key])) {
        return false;
      }
    }
    return true;
  }
  return a10 !== a10 && b10 !== b10;
}
function useLatestRef(value) {
  const ref = React9.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(_temp) {
  let {
    middleware,
    placement = "bottom",
    strategy = "absolute",
    whileElementsMounted
  } = _temp === void 0 ? {} : _temp;
  const reference = React9.useRef(null);
  const floating = React9.useRef(null);
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const cleanupRef = React9.useRef(null);
  const [data, setData] = React9.useState({
    x: null,
    y: null,
    strategy,
    placement,
    middlewareData: {}
  });
  const [latestMiddleware, setLatestMiddleware] = React9.useState(middleware);
  if (!deepEqual(latestMiddleware == null ? void 0 : latestMiddleware.map((_ref) => {
    let {
      options
    } = _ref;
    return options;
  }), middleware == null ? void 0 : middleware.map((_ref2) => {
    let {
      options
    } = _ref2;
    return options;
  }))) {
    setLatestMiddleware(middleware);
  }
  const update = React9.useCallback(() => {
    if (!reference.current || !floating.current) {
      return;
    }
    z3(reference.current, floating.current, {
      middleware: latestMiddleware,
      placement,
      strategy
    }).then((data2) => {
      if (isMountedRef.current) {
        ReactDOM.flushSync(() => {
          setData(data2);
        });
      }
    });
  }, [latestMiddleware, placement, strategy]);
  index(() => {
    if (isMountedRef.current) {
      update();
    }
  }, [update]);
  const isMountedRef = React9.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  const runElementMountCallback = React9.useCallback(() => {
    if (typeof cleanupRef.current === "function") {
      cleanupRef.current();
      cleanupRef.current = null;
    }
    if (reference.current && floating.current) {
      if (whileElementsMountedRef.current) {
        const cleanupFn = whileElementsMountedRef.current(reference.current, floating.current, update);
        cleanupRef.current = cleanupFn;
      } else {
        update();
      }
    }
  }, [update, whileElementsMountedRef]);
  const setReference = React9.useCallback((node) => {
    reference.current = node;
    runElementMountCallback();
  }, [runElementMountCallback]);
  const setFloating = React9.useCallback((node) => {
    floating.current = node;
    runElementMountCallback();
  }, [runElementMountCallback]);
  const refs = React9.useMemo(() => ({
    reference,
    floating
  }), []);
  return React9.useMemo(() => ({
    ...data,
    update,
    refs,
    reference: setReference,
    floating: setFloating
  }), [data, update, refs, setReference, setFloating]);
}
var arrow = (options) => {
  const {
    element,
    padding
  } = options;
  function isRef(value) {
    return Object.prototype.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(args) {
      if (isRef(element)) {
        if (element.current != null) {
          return m2({
            element: element.current,
            padding
          }).fn(args);
        }
        return {};
      } else if (element) {
        return m2({
          element,
          padding
        }).fn(args);
      }
      return {};
    }
  };
};

// node_modules/@radix-ui/react-arrow/dist/index.module.js
var import_react27 = __toESM(require_react());

// node_modules/@radix-ui/react-arrow/node_modules/@radix-ui/react-primitive/dist/index.module.js
var import_react26 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());

// node_modules/@radix-ui/react-arrow/node_modules/@radix-ui/react-slot/dist/index.module.js
var import_react25 = __toESM(require_react());

// node_modules/@radix-ui/react-arrow/node_modules/@radix-ui/react-compose-refs/dist/index.module.js
var import_react24 = __toESM(require_react());
function $6ed0406888f73fc4$var$setRef4(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af4(...refs) {
  return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef4(ref, node));
}

// node_modules/@radix-ui/react-arrow/node_modules/@radix-ui/react-slot/dist/index.module.js
var $5e63c961fc1ce211$export$8c6ed5c666ac13604 = /* @__PURE__ */ (0, import_react25.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = import_react25.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable4);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (import_react25.Children.count(newElement) > 1)
          return import_react25.Children.only(null);
        return /* @__PURE__ */ (0, import_react25.isValidElement)(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ (0, import_react25.createElement)($5e63c961fc1ce211$var$SlotClone4, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ (0, import_react25.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react25.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ (0, import_react25.createElement)($5e63c961fc1ce211$var$SlotClone4, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac13604.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone4 = /* @__PURE__ */ (0, import_react25.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ (0, import_react25.isValidElement)(children))
    return /* @__PURE__ */ (0, import_react25.cloneElement)(children, {
      ...$5e63c961fc1ce211$var$mergeProps4(slotProps, children.props),
      ref: $6ed0406888f73fc4$export$43e446d32b3d21af4(forwardedRef, children.ref)
    });
  return import_react25.Children.count(children) > 1 ? import_react25.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone4.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d454 = ({ children }) => {
  return /* @__PURE__ */ (0, import_react25.createElement)(import_react25.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable4(child) {
  return /* @__PURE__ */ (0, import_react25.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d454;
}
function $5e63c961fc1ce211$var$mergeProps4(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler)
      overrideProps[propName] = (...args) => {
        childPropValue === null || childPropValue === void 0 || childPropValue(...args);
        slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
      };
    else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// node_modules/@radix-ui/react-arrow/node_modules/@radix-ui/react-primitive/dist/index.module.js
var $8927f6f2acc4f386$var$NODES3 = [
  "a",
  "button",
  "div",
  "h2",
  "h3",
  "img",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
var $8927f6f2acc4f386$export$250ffa63cdc0d0343 = $8927f6f2acc4f386$var$NODES3.reduce((primitive, node) => {
  const Node2 = /* @__PURE__ */ (0, import_react26.forwardRef)((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac13604 : node;
    (0, import_react26.useEffect)(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ (0, import_react26.createElement)(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node2.displayName = `Primitive.${node}`;
  return {
    ...primitive,
    [node]: Node2
  };
}, {});

// node_modules/@radix-ui/react-arrow/dist/index.module.js
var $7e8f5cd07187803e$export$21b07c8f274aebd5 = /* @__PURE__ */ (0, import_react27.forwardRef)((props, forwardedRef) => {
  const { children, width = 10, height = 5, ...arrowProps } = props;
  return /* @__PURE__ */ (0, import_react27.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0343.svg, _extends({}, arrowProps, {
    ref: forwardedRef,
    width,
    height,
    viewBox: "0 0 30 10",
    preserveAspectRatio: "none"
  }), props.asChild ? children : /* @__PURE__ */ (0, import_react27.createElement)("polygon", {
    points: "0,0 30,0 15,10"
  }));
});
var $7e8f5cd07187803e$export$be92b6f5f03c0fe9 = $7e8f5cd07187803e$export$21b07c8f274aebd5;

// node_modules/@radix-ui/react-popper/node_modules/@radix-ui/react-compose-refs/dist/index.module.js
var import_react28 = __toESM(require_react());
function $6ed0406888f73fc4$var$setRef5(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af5(...refs) {
  return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef5(ref, node));
}
function $6ed0406888f73fc4$export$c7b2cbe3552a0d053(...refs) {
  return (0, import_react28.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af5(...refs), refs);
}

// node_modules/@radix-ui/react-popper/node_modules/@radix-ui/react-context/dist/index.module.js
var import_react29 = __toESM(require_react());
function $c512c27ab02ef895$export$50c7b4e9d9f19c14(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
    const BaseContext = /* @__PURE__ */ (0, import_react29.createContext)(defaultContext);
    const index4 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider2(props) {
      const { scope, children, ...context } = props;
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const value = (0, import_react29.useMemo)(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_react29.createElement)(Context2.Provider, {
        value
      }, children);
    }
    function useContext6(consumerName, scope) {
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const context = (0, import_react29.useContext)(Context2);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider2.displayName = rootComponentName + "Provider";
    return [
      Provider2,
      useContext6
    ];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return /* @__PURE__ */ (0, import_react29.createContext)(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
      return (0, import_react29.useMemo)(() => ({
        [`__scope${scopeName}`]: {
          ...scope,
          [scopeName]: contexts
        }
      }), [
        scope,
        contexts
      ]);
    };
  };
  createScope.scopeName = scopeName;
  return [
    $c512c27ab02ef895$export$fd42f52fd3ae11092,
    $c512c27ab02ef895$var$composeContextScopes4(createScope, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes4(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope1 = () => {
    const scopeHooks = scopes.map((createScope) => ({
      useScope: createScope(),
      scopeName: createScope.scopeName
    }));
    return function useComposedScopes(overrideScopes) {
      const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope = scopeProps[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope
        };
      }, {});
      return (0, import_react29.useMemo)(() => ({
        [`__scope${baseScope.scopeName}`]: nextScopes1
      }), [
        nextScopes1
      ]);
    };
  };
  createScope1.scopeName = baseScope.scopeName;
  return createScope1;
}

// node_modules/@radix-ui/react-popper/node_modules/@radix-ui/react-primitive/dist/index.module.js
var import_react31 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());

// node_modules/@radix-ui/react-popper/node_modules/@radix-ui/react-slot/dist/index.module.js
var import_react30 = __toESM(require_react());
var $5e63c961fc1ce211$export$8c6ed5c666ac13605 = /* @__PURE__ */ (0, import_react30.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = import_react30.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable5);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (import_react30.Children.count(newElement) > 1)
          return import_react30.Children.only(null);
        return /* @__PURE__ */ (0, import_react30.isValidElement)(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ (0, import_react30.createElement)($5e63c961fc1ce211$var$SlotClone5, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ (0, import_react30.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react30.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ (0, import_react30.createElement)($5e63c961fc1ce211$var$SlotClone5, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac13605.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone5 = /* @__PURE__ */ (0, import_react30.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ (0, import_react30.isValidElement)(children))
    return /* @__PURE__ */ (0, import_react30.cloneElement)(children, {
      ...$5e63c961fc1ce211$var$mergeProps5(slotProps, children.props),
      ref: $6ed0406888f73fc4$export$43e446d32b3d21af5(forwardedRef, children.ref)
    });
  return import_react30.Children.count(children) > 1 ? import_react30.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone5.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d455 = ({ children }) => {
  return /* @__PURE__ */ (0, import_react30.createElement)(import_react30.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable5(child) {
  return /* @__PURE__ */ (0, import_react30.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d455;
}
function $5e63c961fc1ce211$var$mergeProps5(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler)
      overrideProps[propName] = (...args) => {
        childPropValue === null || childPropValue === void 0 || childPropValue(...args);
        slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
      };
    else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// node_modules/@radix-ui/react-popper/node_modules/@radix-ui/react-primitive/dist/index.module.js
var $8927f6f2acc4f386$var$NODES4 = [
  "a",
  "button",
  "div",
  "h2",
  "h3",
  "img",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
var $8927f6f2acc4f386$export$250ffa63cdc0d0344 = $8927f6f2acc4f386$var$NODES4.reduce((primitive, node) => {
  const Node2 = /* @__PURE__ */ (0, import_react31.forwardRef)((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac13605 : node;
    (0, import_react31.useEffect)(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ (0, import_react31.createElement)(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node2.displayName = `Primitive.${node}`;
  return {
    ...primitive,
    [node]: Node2
  };
}, {});

// node_modules/@radix-ui/react-popper/node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
var import_react32 = __toESM(require_react());
var $9f79659886946c16$export$e5c5a5f917a5871c2 = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react32.useLayoutEffect : () => {
};

// node_modules/@radix-ui/react-use-size/dist/index.module.js
var import_react34 = __toESM(require_react());

// node_modules/@radix-ui/react-use-size/node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
var import_react33 = __toESM(require_react());
var $9f79659886946c16$export$e5c5a5f917a5871c3 = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react33.useLayoutEffect : () => {
};

// node_modules/@radix-ui/react-use-size/dist/index.module.js
function $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {
  const [size5, setSize] = (0, import_react34.useState)(void 0);
  $9f79659886946c16$export$e5c5a5f917a5871c3(() => {
    if (element) {
      setSize({
        width: element.offsetWidth,
        height: element.offsetHeight
      });
      const resizeObserver = new ResizeObserver((entries) => {
        if (!Array.isArray(entries))
          return;
        if (!entries.length)
          return;
        const entry = entries[0];
        let width;
        let height;
        if ("borderBoxSize" in entry) {
          const borderSizeEntry = entry["borderBoxSize"];
          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
          width = borderSize["inlineSize"];
          height = borderSize["blockSize"];
        } else {
          width = element.offsetWidth;
          height = element.offsetHeight;
        }
        setSize({
          width,
          height
        });
      });
      resizeObserver.observe(element, {
        box: "border-box"
      });
      return () => resizeObserver.unobserve(element);
    } else
      setSize(void 0);
  }, [
    element
  ]);
  return size5;
}

// node_modules/@radix-ui/react-popper/dist/index.module.js
var $cf1ac5d9fe0e8206$var$POPPER_NAME = "Popper";
var [$cf1ac5d9fe0e8206$var$createPopperContext, $cf1ac5d9fe0e8206$export$722aac194ae923] = $c512c27ab02ef895$export$50c7b4e9d9f19c14($cf1ac5d9fe0e8206$var$POPPER_NAME);
var [$cf1ac5d9fe0e8206$var$PopperProvider, $cf1ac5d9fe0e8206$var$usePopperContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$POPPER_NAME);
var $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9 = (props) => {
  const { __scopePopper, children } = props;
  const [anchor, setAnchor] = (0, import_react35.useState)(null);
  return /* @__PURE__ */ (0, import_react35.createElement)($cf1ac5d9fe0e8206$var$PopperProvider, {
    scope: __scopePopper,
    anchor,
    onAnchorChange: setAnchor
  }, children);
};
var $cf1ac5d9fe0e8206$var$ANCHOR_NAME = "PopperAnchor";
var $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d = /* @__PURE__ */ (0, import_react35.forwardRef)((props, forwardedRef) => {
  const { __scopePopper, virtualRef, ...anchorProps } = props;
  const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$ANCHOR_NAME, __scopePopper);
  const ref = (0, import_react35.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d053(forwardedRef, ref);
  (0, import_react35.useEffect)(() => {
    context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
  });
  return virtualRef ? null : /* @__PURE__ */ (0, import_react35.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0344.div, _extends({}, anchorProps, {
    ref: composedRefs
  }));
});
var $cf1ac5d9fe0e8206$var$CONTENT_NAME = "PopperContent";
var [$cf1ac5d9fe0e8206$var$PopperContentProvider, $cf1ac5d9fe0e8206$var$useContentContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME);
var [$cf1ac5d9fe0e8206$var$PositionContextProvider, $cf1ac5d9fe0e8206$var$usePositionContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, {
  hasParent: false,
  positionUpdateFns: /* @__PURE__ */ new Set()
});
var $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc = /* @__PURE__ */ (0, import_react35.forwardRef)((props, forwardedRef) => {
  var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$hide, _middlewareData$trans, _middlewareData$trans2;
  const { __scopePopper, side = "bottom", sideOffset = 0, align = "center", alignOffset = 0, arrowPadding = 0, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = "partial", hideWhenDetached = false, avoidCollisions = true, ...contentProps } = props;
  const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, __scopePopper);
  const [content, setContent] = (0, import_react35.useState)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d053(forwardedRef, (node) => setContent(node));
  const [arrow8, setArrow] = (0, import_react35.useState)(null);
  const arrowSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(arrow8);
  const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;
  const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;
  const desiredPlacement = side + (align !== "center" ? "-" + align : "");
  const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...collisionPaddingProp
  };
  const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
    collisionBoundary
  ];
  const hasExplicitBoundaries = boundary.length > 0;
  const detectOverflowOptions = {
    padding: collisionPadding,
    boundary: boundary.filter($cf1ac5d9fe0e8206$var$isNotNull),
    altBoundary: hasExplicitBoundaries
  };
  const { reference, floating, strategy, x: x10, y: y10, placement, middlewareData, update } = useFloating({
    strategy: "fixed",
    placement: desiredPlacement,
    whileElementsMounted: N3,
    middleware: [
      T2({
        mainAxis: sideOffset + arrowHeight,
        alignmentAxis: alignOffset
      }),
      avoidCollisions ? D3({
        mainAxis: true,
        crossAxis: false,
        limiter: sticky === "partial" ? L2() : void 0,
        ...detectOverflowOptions
      }) : void 0,
      arrow8 ? arrow({
        element: arrow8,
        padding: arrowPadding
      }) : void 0,
      avoidCollisions ? b2({
        ...detectOverflowOptions
      }) : void 0,
      $cf1ac5d9fe0e8206$var$transformOrigin({
        arrowWidth,
        arrowHeight
      }),
      hideWhenDetached ? P({
        strategy: "referenceHidden"
      }) : void 0
    ].filter($cf1ac5d9fe0e8206$var$isDefined)
  });
  $9f79659886946c16$export$e5c5a5f917a5871c2(() => {
    reference(context.anchor);
  }, [
    reference,
    context.anchor
  ]);
  const isPlaced = x10 !== null && y10 !== null;
  const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);
  const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;
  const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;
  const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;
  const [contentZIndex, setContentZIndex] = (0, import_react35.useState)();
  $9f79659886946c16$export$e5c5a5f917a5871c2(() => {
    if (content)
      setContentZIndex(window.getComputedStyle(content).zIndex);
  }, [
    content
  ]);
  const { hasParent, positionUpdateFns } = $cf1ac5d9fe0e8206$var$usePositionContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, __scopePopper);
  const isRoot = !hasParent;
  (0, import_react35.useLayoutEffect)(() => {
    if (!isRoot) {
      positionUpdateFns.add(update);
      return () => {
        positionUpdateFns.delete(update);
      };
    }
  }, [
    isRoot,
    positionUpdateFns,
    update
  ]);
  (0, import_react35.useLayoutEffect)(() => {
    if (isRoot && isPlaced)
      Array.from(positionUpdateFns).reverse().forEach((fn3) => requestAnimationFrame(fn3));
  }, [
    isRoot,
    isPlaced,
    positionUpdateFns
  ]);
  const commonProps = {
    "data-side": placedSide,
    "data-align": placedAlign,
    ...contentProps,
    ref: composedRefs,
    style: {
      ...contentProps.style,
      animation: !isPlaced ? "none" : void 0,
      opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : void 0
    }
  };
  return /* @__PURE__ */ (0, import_react35.createElement)("div", {
    ref: floating,
    "data-radix-popper-content-wrapper": "",
    style: {
      position: strategy,
      left: 0,
      top: 0,
      transform: isPlaced ? `translate3d(${Math.round(x10)}px, ${Math.round(y10)}px, 0)` : "translate3d(0, -200%, 0)",
      minWidth: "max-content",
      zIndex: contentZIndex,
      ["--radix-popper-transform-origin"]: [
        (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
        (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
      ].join(" ")
    }
  }, /* @__PURE__ */ (0, import_react35.createElement)($cf1ac5d9fe0e8206$var$PopperContentProvider, {
    scope: __scopePopper,
    placedSide,
    onArrowChange: setArrow,
    arrowX,
    arrowY,
    shouldHideArrow: cannotCenterArrow
  }, isRoot ? /* @__PURE__ */ (0, import_react35.createElement)($cf1ac5d9fe0e8206$var$PositionContextProvider, {
    scope: __scopePopper,
    hasParent: true,
    positionUpdateFns
  }, /* @__PURE__ */ (0, import_react35.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0344.div, commonProps)) : /* @__PURE__ */ (0, import_react35.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0344.div, commonProps)));
});
var $cf1ac5d9fe0e8206$var$ARROW_NAME = "PopperArrow";
var $cf1ac5d9fe0e8206$var$OPPOSITE_SIDE = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
var $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0 = /* @__PURE__ */ (0, import_react35.forwardRef)(function $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd02(props, forwardedRef) {
  const { __scopePopper, ...arrowProps } = props;
  const contentContext = $cf1ac5d9fe0e8206$var$useContentContext($cf1ac5d9fe0e8206$var$ARROW_NAME, __scopePopper);
  const baseSide = $cf1ac5d9fe0e8206$var$OPPOSITE_SIDE[contentContext.placedSide];
  return /* @__PURE__ */ (0, import_react35.createElement)("span", {
    ref: contentContext.onArrowChange,
    style: {
      position: "absolute",
      left: contentContext.arrowX,
      top: contentContext.arrowY,
      [baseSide]: 0,
      transformOrigin: {
        top: "",
        right: "0 0",
        bottom: "center 0",
        left: "100% 0"
      }[contentContext.placedSide],
      transform: {
        top: "translateY(100%)",
        right: "translateY(50%) rotate(90deg) translateX(-50%)",
        bottom: `rotate(180deg)`,
        left: "translateY(50%) rotate(-90deg) translateX(50%)"
      }[contentContext.placedSide],
      visibility: contentContext.shouldHideArrow ? "hidden" : void 0
    }
  }, /* @__PURE__ */ (0, import_react35.createElement)($7e8f5cd07187803e$export$be92b6f5f03c0fe9, _extends({}, arrowProps, {
    ref: forwardedRef,
    style: {
      ...arrowProps.style,
      display: "block"
    }
  })));
});
function $cf1ac5d9fe0e8206$var$isDefined(value) {
  return value !== void 0;
}
function $cf1ac5d9fe0e8206$var$isNotNull(value) {
  return value !== null;
}
var $cf1ac5d9fe0e8206$var$transformOrigin = (options) => ({
  name: "transformOrigin",
  options,
  fn(data) {
    var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
    const { placement, rects, middlewareData } = data;
    const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;
    const isArrowHidden = cannotCenterArrow;
    const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
    const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
    const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);
    const noArrowAlign = {
      start: "0%",
      center: "50%",
      end: "100%"
    }[placedAlign];
    const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;
    const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;
    let x10 = "";
    let y10 = "";
    if (placedSide === "bottom") {
      x10 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y10 = `${-arrowHeight}px`;
    } else if (placedSide === "top") {
      x10 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y10 = `${rects.floating.height + arrowHeight}px`;
    } else if (placedSide === "right") {
      x10 = `${-arrowHeight}px`;
      y10 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    } else if (placedSide === "left") {
      x10 = `${rects.floating.width + arrowHeight}px`;
      y10 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    }
    return {
      data: {
        x: x10,
        y: y10
      }
    };
  }
});
function $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement) {
  const [side, align = "center"] = placement.split("-");
  return [
    side,
    align
  ];
}
var $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9;
var $cf1ac5d9fe0e8206$export$b688253958b8dfe7 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d;
var $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc;
var $cf1ac5d9fe0e8206$export$21b07c8f274aebd5 = $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0;

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-portal/dist/index.module.js
var import_react36 = __toESM(require_react());
var import_react_dom6 = __toESM(require_react_dom());
var $f1701beae083dbae$export$602eac185826482c = /* @__PURE__ */ (0, import_react36.forwardRef)((props, forwardedRef) => {
  var _globalThis$document;
  const { container = globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.body, ...portalProps } = props;
  return container ? /* @__PURE__ */ import_react_dom6.default.createPortal(/* @__PURE__ */ (0, import_react36.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({}, portalProps, {
    ref: forwardedRef
  })), container) : null;
});

// node_modules/@radix-ui/react-menu/node_modules/@radix-ui/react-presence/dist/index.module.js
var import_react37 = __toESM(require_react());
var import_react_dom7 = __toESM(require_react_dom());
function $fe963b355347cc68$export$3e6543de14f8614f(initialState, machine) {
  return (0, import_react37.useReducer)((state, event) => {
    const nextState = machine[state][event];
    return nextState !== null && nextState !== void 0 ? nextState : state;
  }, initialState);
}
var $921a889cee6df7e8$export$99c2b779aa4e8b8b = (props) => {
  const { present, children } = props;
  const presence = $921a889cee6df7e8$var$usePresence(present);
  const child = typeof children === "function" ? children({
    present: presence.isPresent
  }) : import_react37.Children.only(children);
  const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(presence.ref, child.ref);
  const forceMount = typeof children === "function";
  return forceMount || presence.isPresent ? /* @__PURE__ */ (0, import_react37.cloneElement)(child, {
    ref
  }) : null;
};
$921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = "Presence";
function $921a889cee6df7e8$var$usePresence(present) {
  const [node1, setNode] = (0, import_react37.useState)();
  const stylesRef = (0, import_react37.useRef)({});
  const prevPresentRef = (0, import_react37.useRef)(present);
  const prevAnimationNameRef = (0, import_react37.useRef)("none");
  const initialState = present ? "mounted" : "unmounted";
  const [state, send] = $fe963b355347cc68$export$3e6543de14f8614f(initialState, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  (0, import_react37.useEffect)(() => {
    const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
    prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
  }, [
    state
  ]);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    const styles = stylesRef.current;
    const wasPresent = prevPresentRef.current;
    const hasPresentChanged = wasPresent !== present;
    if (hasPresentChanged) {
      const prevAnimationName = prevAnimationNameRef.current;
      const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles);
      if (present)
        send("MOUNT");
      else if (currentAnimationName === "none" || (styles === null || styles === void 0 ? void 0 : styles.display) === "none")
        send("UNMOUNT");
      else {
        const isAnimating = prevAnimationName !== currentAnimationName;
        if (wasPresent && isAnimating)
          send("ANIMATION_OUT");
        else
          send("UNMOUNT");
      }
      prevPresentRef.current = present;
    }
  }, [
    present,
    send
  ]);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (node1) {
      const handleAnimationEnd = (event) => {
        const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
        const isCurrentAnimation = currentAnimationName.includes(event.animationName);
        if (event.target === node1 && isCurrentAnimation)
          (0, import_react_dom7.flushSync)(() => send("ANIMATION_END"));
      };
      const handleAnimationStart = (event) => {
        if (event.target === node1)
          prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
      };
      node1.addEventListener("animationstart", handleAnimationStart);
      node1.addEventListener("animationcancel", handleAnimationEnd);
      node1.addEventListener("animationend", handleAnimationEnd);
      return () => {
        node1.removeEventListener("animationstart", handleAnimationStart);
        node1.removeEventListener("animationcancel", handleAnimationEnd);
        node1.removeEventListener("animationend", handleAnimationEnd);
      };
    } else
      send("ANIMATION_END");
  }, [
    node1,
    send
  ]);
  return {
    isPresent: [
      "mounted",
      "unmountSuspended"
    ].includes(state),
    ref: (0, import_react37.useCallback)((node) => {
      if (node)
        stylesRef.current = getComputedStyle(node);
      setNode(node);
    }, [])
  };
}
function $921a889cee6df7e8$var$getAnimationName(styles) {
  return (styles === null || styles === void 0 ? void 0 : styles.animationName) || "none";
}

// node_modules/@radix-ui/react-roving-focus/dist/index.module.js
var import_react44 = __toESM(require_react());

// node_modules/@radix-ui/react-roving-focus/node_modules/@radix-ui/primitive/dist/index.module.js
function $e42e1063c40fb3ef$export$b9ecd428b558ff103(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented)
      return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  };
}

// node_modules/@radix-ui/react-roving-focus/node_modules/@radix-ui/react-compose-refs/dist/index.module.js
var import_react38 = __toESM(require_react());
function $6ed0406888f73fc4$var$setRef6(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af6(...refs) {
  return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef6(ref, node));
}
function $6ed0406888f73fc4$export$c7b2cbe3552a0d054(...refs) {
  return (0, import_react38.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af6(...refs), refs);
}

// node_modules/@radix-ui/react-roving-focus/node_modules/@radix-ui/react-context/dist/index.module.js
var import_react39 = __toESM(require_react());
function $c512c27ab02ef895$export$50c7b4e9d9f19c15(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
    const BaseContext = /* @__PURE__ */ (0, import_react39.createContext)(defaultContext);
    const index4 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider2(props) {
      const { scope, children, ...context } = props;
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const value = (0, import_react39.useMemo)(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_react39.createElement)(Context2.Provider, {
        value
      }, children);
    }
    function useContext6(consumerName, scope) {
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const context = (0, import_react39.useContext)(Context2);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider2.displayName = rootComponentName + "Provider";
    return [
      Provider2,
      useContext6
    ];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return /* @__PURE__ */ (0, import_react39.createContext)(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
      return (0, import_react39.useMemo)(() => ({
        [`__scope${scopeName}`]: {
          ...scope,
          [scopeName]: contexts
        }
      }), [
        scope,
        contexts
      ]);
    };
  };
  createScope.scopeName = scopeName;
  return [
    $c512c27ab02ef895$export$fd42f52fd3ae11092,
    $c512c27ab02ef895$var$composeContextScopes5(createScope, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes5(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope1 = () => {
    const scopeHooks = scopes.map((createScope) => ({
      useScope: createScope(),
      scopeName: createScope.scopeName
    }));
    return function useComposedScopes(overrideScopes) {
      const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope = scopeProps[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope
        };
      }, {});
      return (0, import_react39.useMemo)(() => ({
        [`__scope${baseScope.scopeName}`]: nextScopes1
      }), [
        nextScopes1
      ]);
    };
  };
  createScope1.scopeName = baseScope.scopeName;
  return createScope1;
}

// node_modules/@radix-ui/react-roving-focus/node_modules/@radix-ui/react-id/dist/index.module.js
var $2AODx$react2 = __toESM(require_react());

// node_modules/@radix-ui/react-roving-focus/node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
var import_react40 = __toESM(require_react());
var $9f79659886946c16$export$e5c5a5f917a5871c4 = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react40.useLayoutEffect : () => {
};

// node_modules/@radix-ui/react-roving-focus/node_modules/@radix-ui/react-id/dist/index.module.js
var $1746a345f3d73bb7$var$useReactId2 = $2AODx$react2["useId".toString()] || (() => void 0);
var $1746a345f3d73bb7$var$count2 = 0;
function $1746a345f3d73bb7$export$f680877a34711e372(deterministicId) {
  const [id, setId] = $2AODx$react2.useState($1746a345f3d73bb7$var$useReactId2());
  $9f79659886946c16$export$e5c5a5f917a5871c4(() => {
    if (!deterministicId)
      setId((reactId) => reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count2++));
  }, [
    deterministicId
  ]);
  return deterministicId || (id ? `radix-${id}` : "");
}

// node_modules/@radix-ui/react-roving-focus/node_modules/@radix-ui/react-primitive/dist/index.module.js
var import_react42 = __toESM(require_react());
var import_react_dom8 = __toESM(require_react_dom());

// node_modules/@radix-ui/react-roving-focus/node_modules/@radix-ui/react-slot/dist/index.module.js
var import_react41 = __toESM(require_react());
var $5e63c961fc1ce211$export$8c6ed5c666ac13606 = /* @__PURE__ */ (0, import_react41.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = import_react41.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable6);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (import_react41.Children.count(newElement) > 1)
          return import_react41.Children.only(null);
        return /* @__PURE__ */ (0, import_react41.isValidElement)(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ (0, import_react41.createElement)($5e63c961fc1ce211$var$SlotClone6, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ (0, import_react41.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react41.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ (0, import_react41.createElement)($5e63c961fc1ce211$var$SlotClone6, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac13606.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone6 = /* @__PURE__ */ (0, import_react41.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ (0, import_react41.isValidElement)(children))
    return /* @__PURE__ */ (0, import_react41.cloneElement)(children, {
      ...$5e63c961fc1ce211$var$mergeProps6(slotProps, children.props),
      ref: $6ed0406888f73fc4$export$43e446d32b3d21af6(forwardedRef, children.ref)
    });
  return import_react41.Children.count(children) > 1 ? import_react41.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone6.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d456 = ({ children }) => {
  return /* @__PURE__ */ (0, import_react41.createElement)(import_react41.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable6(child) {
  return /* @__PURE__ */ (0, import_react41.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d456;
}
function $5e63c961fc1ce211$var$mergeProps6(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler)
      overrideProps[propName] = (...args) => {
        childPropValue === null || childPropValue === void 0 || childPropValue(...args);
        slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
      };
    else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// node_modules/@radix-ui/react-roving-focus/node_modules/@radix-ui/react-primitive/dist/index.module.js
var $8927f6f2acc4f386$var$NODES5 = [
  "a",
  "button",
  "div",
  "h2",
  "h3",
  "img",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
var $8927f6f2acc4f386$export$250ffa63cdc0d0345 = $8927f6f2acc4f386$var$NODES5.reduce((primitive, node) => {
  const Node2 = /* @__PURE__ */ (0, import_react42.forwardRef)((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac13606 : node;
    (0, import_react42.useEffect)(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ (0, import_react42.createElement)(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node2.displayName = `Primitive.${node}`;
  return {
    ...primitive,
    [node]: Node2
  };
}, {});

// node_modules/@radix-ui/react-use-controllable-state/dist/index.module.js
var import_react43 = __toESM(require_react());
function $71cd76cc60e0454e$export$6f32135080cb4c3({ prop, defaultProp, onChange = () => {
} }) {
  const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({
    defaultProp,
    onChange
  });
  const isControlled = prop !== void 0;
  const value1 = isControlled ? prop : uncontrolledProp;
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
  const setValue = (0, import_react43.useCallback)((nextValue) => {
    if (isControlled) {
      const setter = nextValue;
      const value = typeof nextValue === "function" ? setter(prop) : nextValue;
      if (value !== prop)
        handleChange(value);
    } else
      setUncontrolledProp(nextValue);
  }, [
    isControlled,
    prop,
    setUncontrolledProp,
    handleChange
  ]);
  return [
    value1,
    setValue
  ];
}
function $71cd76cc60e0454e$var$useUncontrolledState({ defaultProp, onChange }) {
  const uncontrolledState = (0, import_react43.useState)(defaultProp);
  const [value] = uncontrolledState;
  const prevValueRef = (0, import_react43.useRef)(value);
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
  (0, import_react43.useEffect)(() => {
    if (prevValueRef.current !== value) {
      handleChange(value);
      prevValueRef.current = value;
    }
  }, [
    value,
    prevValueRef,
    handleChange
  ]);
  return uncontrolledState;
}

// node_modules/@radix-ui/react-roving-focus/dist/index.module.js
var $d7bdfb9eb0fdf311$var$ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
var $d7bdfb9eb0fdf311$var$EVENT_OPTIONS = {
  bubbles: false,
  cancelable: true
};
var $d7bdfb9eb0fdf311$var$GROUP_NAME = "RovingFocusGroup";
var [$d7bdfb9eb0fdf311$var$Collection, $d7bdfb9eb0fdf311$var$useCollection, $d7bdfb9eb0fdf311$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($d7bdfb9eb0fdf311$var$GROUP_NAME);
var [$d7bdfb9eb0fdf311$var$createRovingFocusGroupContext, $d7bdfb9eb0fdf311$export$c7109489551a4f4] = $c512c27ab02ef895$export$50c7b4e9d9f19c15($d7bdfb9eb0fdf311$var$GROUP_NAME, [
  $d7bdfb9eb0fdf311$var$createCollectionScope
]);
var [$d7bdfb9eb0fdf311$var$RovingFocusProvider, $d7bdfb9eb0fdf311$var$useRovingFocusContext] = $d7bdfb9eb0fdf311$var$createRovingFocusGroupContext($d7bdfb9eb0fdf311$var$GROUP_NAME);
var $d7bdfb9eb0fdf311$export$8699f7c8af148338 = /* @__PURE__ */ (0, import_react44.forwardRef)((props, forwardedRef) => {
  return /* @__PURE__ */ (0, import_react44.createElement)($d7bdfb9eb0fdf311$var$Collection.Provider, {
    scope: props.__scopeRovingFocusGroup
  }, /* @__PURE__ */ (0, import_react44.createElement)($d7bdfb9eb0fdf311$var$Collection.Slot, {
    scope: props.__scopeRovingFocusGroup
  }, /* @__PURE__ */ (0, import_react44.createElement)($d7bdfb9eb0fdf311$var$RovingFocusGroupImpl, _extends({}, props, {
    ref: forwardedRef
  }))));
});
var $d7bdfb9eb0fdf311$var$RovingFocusGroupImpl = /* @__PURE__ */ (0, import_react44.forwardRef)((props, forwardedRef) => {
  const { __scopeRovingFocusGroup, orientation, loop = false, dir, currentTabStopId: currentTabStopIdProp, defaultCurrentTabStopId, onCurrentTabStopIdChange, onEntryFocus, ...groupProps } = props;
  const ref = (0, import_react44.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d054(forwardedRef, ref);
  const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  const [currentTabStopId = null, setCurrentTabStopId] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: currentTabStopIdProp,
    defaultProp: defaultCurrentTabStopId,
    onChange: onCurrentTabStopIdChange
  });
  const [isTabbingBackOut, setIsTabbingBackOut] = (0, import_react44.useState)(false);
  const handleEntryFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEntryFocus);
  const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
  const isClickFocusRef = (0, import_react44.useRef)(false);
  (0, import_react44.useEffect)(() => {
    const node = ref.current;
    if (node) {
      node.addEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
      return () => node.removeEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
    }
  }, [
    handleEntryFocus
  ]);
  return /* @__PURE__ */ (0, import_react44.createElement)($d7bdfb9eb0fdf311$var$RovingFocusProvider, {
    scope: __scopeRovingFocusGroup,
    orientation,
    dir: direction,
    loop,
    currentTabStopId,
    onItemFocus: (0, import_react44.useCallback)((tabStopId) => setCurrentTabStopId(tabStopId), [
      setCurrentTabStopId
    ]),
    onItemShiftTab: (0, import_react44.useCallback)(() => setIsTabbingBackOut(true), [])
  }, /* @__PURE__ */ (0, import_react44.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0345.div, _extends({
    tabIndex: isTabbingBackOut ? -1 : 0,
    "data-orientation": orientation
  }, groupProps, {
    ref: composedRefs,
    style: {
      outline: "none",
      ...props.style
    },
    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff103(props.onMouseDown, () => {
      isClickFocusRef.current = true;
    }),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff103(props.onFocus, (event) => {
      const isKeyboardFocus = !isClickFocusRef.current;
      if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
        const entryFocusEvent = new CustomEvent($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, $d7bdfb9eb0fdf311$var$EVENT_OPTIONS);
        event.currentTarget.dispatchEvent(entryFocusEvent);
        if (!entryFocusEvent.defaultPrevented) {
          const items = getItems().filter((item) => item.focusable);
          const activeItem = items.find((item) => item.active);
          const currentItem = items.find((item) => item.id === currentTabStopId);
          const candidateItems = [
            activeItem,
            currentItem,
            ...items
          ].filter(Boolean);
          const candidateNodes = candidateItems.map((item) => item.ref.current);
          $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes);
        }
      }
      isClickFocusRef.current = false;
    }),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff103(props.onBlur, () => setIsTabbingBackOut(false))
  })));
});
var $d7bdfb9eb0fdf311$var$ITEM_NAME = "RovingFocusGroupItem";
var $d7bdfb9eb0fdf311$export$ab9df7c53fe8454 = /* @__PURE__ */ (0, import_react44.forwardRef)((props, forwardedRef) => {
  const { __scopeRovingFocusGroup, focusable = true, active = false, ...itemProps } = props;
  const id = $1746a345f3d73bb7$export$f680877a34711e372();
  const context = $d7bdfb9eb0fdf311$var$useRovingFocusContext($d7bdfb9eb0fdf311$var$ITEM_NAME, __scopeRovingFocusGroup);
  const isCurrentTabStop = context.currentTabStopId === id;
  const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
  return /* @__PURE__ */ (0, import_react44.createElement)($d7bdfb9eb0fdf311$var$Collection.ItemSlot, {
    scope: __scopeRovingFocusGroup,
    id,
    focusable,
    active
  }, /* @__PURE__ */ (0, import_react44.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0345.span, _extends({
    tabIndex: isCurrentTabStop ? 0 : -1,
    "data-orientation": context.orientation
  }, itemProps, {
    ref: forwardedRef,
    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff103(props.onMouseDown, (event) => {
      if (!focusable)
        event.preventDefault();
      else
        context.onItemFocus(id);
    }),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff103(props.onFocus, () => context.onItemFocus(id)),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff103(props.onKeyDown, (event) => {
      if (event.key === "Tab" && event.shiftKey) {
        context.onItemShiftTab();
        return;
      }
      if (event.target !== event.currentTarget)
        return;
      const focusIntent = $d7bdfb9eb0fdf311$var$getFocusIntent(event, context.orientation, context.dir);
      if (focusIntent !== void 0) {
        event.preventDefault();
        const items = getItems().filter((item) => item.focusable);
        let candidateNodes = items.map((item) => item.ref.current);
        if (focusIntent === "last")
          candidateNodes.reverse();
        else if (focusIntent === "prev" || focusIntent === "next") {
          if (focusIntent === "prev")
            candidateNodes.reverse();
          const currentIndex = candidateNodes.indexOf(event.currentTarget);
          candidateNodes = context.loop ? $d7bdfb9eb0fdf311$var$wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
        }
        setTimeout(() => $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes));
      }
    })
  })));
});
var $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT = {
  ArrowLeft: "prev",
  ArrowUp: "prev",
  ArrowRight: "next",
  ArrowDown: "next",
  PageUp: "first",
  Home: "first",
  PageDown: "last",
  End: "last"
};
function $d7bdfb9eb0fdf311$var$getDirectionAwareKey(key, dir) {
  if (dir !== "rtl")
    return key;
  return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
}
function $d7bdfb9eb0fdf311$var$getFocusIntent(event, orientation, dir) {
  const key = $d7bdfb9eb0fdf311$var$getDirectionAwareKey(event.key, dir);
  if (orientation === "vertical" && [
    "ArrowLeft",
    "ArrowRight"
  ].includes(key))
    return void 0;
  if (orientation === "horizontal" && [
    "ArrowUp",
    "ArrowDown"
  ].includes(key))
    return void 0;
  return $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT[key];
}
function $d7bdfb9eb0fdf311$var$focusFirst(candidates) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
      return;
    candidate.focus();
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
      return;
  }
}
function $d7bdfb9eb0fdf311$var$wrapArray(array, startIndex) {
  return array.map((_10, index4) => array[(startIndex + index4) % array.length]);
}
var $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9 = $d7bdfb9eb0fdf311$export$8699f7c8af148338;
var $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2 = $d7bdfb9eb0fdf311$export$ab9df7c53fe8454;

// node_modules/aria-hidden/dist/es2015/index.js
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
var markerMap = {};
var lockCount = 0;
var unwrapHost = function(node) {
  return node && (node.host || unwrapHost(node.parentNode));
};
var correctTargets = function(parent, targets) {
  return targets.map(function(target) {
    if (parent.contains(target)) {
      return target;
    }
    var correctedTarget = unwrapHost(target);
    if (correctedTarget && parent.contains(correctedTarget)) {
      return correctedTarget;
    }
    console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
    return null;
  }).filter(function(x10) {
    return Boolean(x10);
  });
};
var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
  var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = /* @__PURE__ */ new Set();
  var elementsToStop = new Set(targets);
  var keep = function(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    keep(el.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node) {
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        var attr = node.getAttribute(controlAttribute);
        var alreadyHidden = attr !== null && attr !== "false";
        var counterValue = (counterMap.get(node) || 0) + 1;
        var markerValue = (markerCounter.get(node) || 0) + 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        hiddenNodes.push(node);
        if (counterValue === 1 && alreadyHidden) {
          uncontrolledNodes.set(node, true);
        }
        if (markerValue === 1) {
          node.setAttribute(markerName, "true");
        }
        if (!alreadyHidden) {
          node.setAttribute(controlAttribute, "true");
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node) {
      var counterValue = counterMap.get(node) - 1;
      var markerValue = markerCounter.get(node) - 1;
      counterMap.set(node, counterValue);
      markerCounter.set(node, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node)) {
          node.removeAttribute(controlAttribute);
        }
        uncontrolledNodes.delete(node);
      }
      if (!markerValue) {
        node.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = /* @__PURE__ */ new WeakMap();
      counterMap = /* @__PURE__ */ new WeakMap();
      uncontrolledNodes = /* @__PURE__ */ new WeakMap();
      markerMap = {};
    }
  };
};
var hideOthers = function(originalTarget, parentNode, markerName) {
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  var activeParentNode = parentNode || getDefaultParent(originalTarget);
  if (!activeParentNode) {
    return function() {
      return null;
    };
  }
  targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
  return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
};

// node_modules/@radix-ui/react-menu/node_modules/react-remove-scroll/dist/es2015/Combination.js
var React16 = __toESM(require_react());

// node_modules/@radix-ui/react-menu/node_modules/react-remove-scroll/dist/es2015/UI.js
var React12 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react45 = __toESM(require_react());
function useCallbackRef(initialValue, callback) {
  var ref = (0, import_react45.useState)(function() {
    return {
      value: initialValue,
      callback,
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
var React10 = __toESM(require_react());
var currentValues = /* @__PURE__ */ new WeakMap();
function useMergeRefs(refs, defaultValue) {
  var callbackRef = useCallbackRef(defaultValue || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
  React10.useLayoutEffect(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}

// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a10) {
  return a10;
}
function innerCreateMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x10) {
          return x10 !== item;
        });
      };
    },
    assignSyncMedium: function(cb2) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
      }
      buffer = {
        push: function(x10) {
          return cb2(x10);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb2) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb2);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x10) {
          pendingQueue.push(x10);
          cycle();
        },
        filter: function(filter2) {
          pendingQueue = pendingQueue.filter(filter2);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options);
  return medium;
}

// node_modules/use-sidecar/dist/es2015/exports.js
var React11 = __toESM(require_react());
var SideCar = function(_a3) {
  var sideCar = _a3.sideCar, rest = __rest(_a3, ["sideCar"]);
  if (!sideCar) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React11.createElement(Target, __assign({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar;
}

// node_modules/@radix-ui/react-menu/node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar = createSidecarMedium();

// node_modules/@radix-ui/react-menu/node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing = function() {
  return;
};
var RemoveScroll = React12.forwardRef(function(props, parentRef) {
  var ref = React12.useRef(null);
  var _a3 = React12.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a3[0], setCallbacks = _a3[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b2 = props.as, Container = _b2 === void 0 ? "div" : _b2, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([ref, parentRef]);
  var containerProps = __assign(__assign({}, rest), callbacks);
  return React12.createElement(React12.Fragment, null, enabled && React12.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }), forwardProps ? React12.cloneElement(React12.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React12.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children));
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// node_modules/@radix-ui/react-menu/node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React15 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var React14 = __toESM(require_react());

// node_modules/react-style-singleton/dist/es2015/hook.js
var React13 = __toESM(require_react());

// node_modules/get-nonce/dist/es2015/index.js
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};

// node_modules/react-style-singleton/dist/es2015/singleton.js
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css;
  } else {
    tag.appendChild(document.createTextNode(css));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter = 0;
  var stylesheet = null;
  return {
    add: function(style) {
      if (counter == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter++;
    },
    remove: function() {
      counter--;
      if (!counter && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};

// node_modules/react-style-singleton/dist/es2015/hook.js
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles, isDynamic) {
    React13.useEffect(function() {
      sheet.add(styles);
      return function() {
        sheet.remove();
      };
    }, [styles && isDynamic]);
  };
};

// node_modules/react-style-singleton/dist/es2015/component.js
var styleSingleton = function() {
  var useStyle = styleHookSingleton();
  var Sheet = function(_a3) {
    var styles = _a3.styles, dynamic = _a3.dynamic;
    useStyle(styles, dynamic);
    return null;
  };
  return Sheet;
};

// node_modules/react-remove-scroll-bar/dist/es2015/utils.js
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse2 = function(x10) {
  return parseInt(x10 || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs2 = window.getComputedStyle(document.body);
  var left = cs2[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top2 = cs2[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right = cs2[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse2(left), parse2(top2), parse2(right)];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var Style = styleSingleton();
var getStyles = function(_a3, allowRelative, gapMode, important) {
  var left = _a3.left, top2 = _a3.top, right = _a3.right, gap = _a3.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
    allowRelative && "position: relative ".concat(important, ";"),
    gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top2, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
    gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
  ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
};
var RemoveScrollBar = function(props) {
  var noRelative = props.noRelative, noImportant = props.noImportant, _a3 = props.gapMode, gapMode = _a3 === void 0 ? "margin" : _a3;
  var gap = React14.useMemo(function() {
    return getGapWidth(gapMode);
  }, [gapMode]);
  return React14.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};

// node_modules/@radix-ui/react-menu/node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var options;
var nonPassive = passiveSupported ? { passive: false } : false;

// node_modules/@radix-ui/react-menu/node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var elementCouldBeVScrolled = function(node) {
  var styles = window.getComputedStyle(node);
  return styles.overflowY !== "hidden" && !(styles.overflowY === styles.overflowX && styles.overflowY === "visible");
};
var elementCouldBeHScrolled = function(node) {
  var styles = window.getComputedStyle(node);
  return styles.overflowX !== "hidden" && !(styles.overflowY === styles.overflowX && styles.overflowX === "visible");
};
var locationCouldBeScrolled = function(axis, node) {
  var current = node;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current);
    if (isScrollable) {
      var _a3 = getScrollVariables(axis, current), s10 = _a3[1], d10 = _a3[2];
      if (s10 > d10) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== document.body);
  return false;
};
var getVScrollVariables = function(_a3) {
  var scrollTop = _a3.scrollTop, scrollHeight = _a3.scrollHeight, clientHeight = _a3.clientHeight;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables = function(_a3) {
  var scrollLeft = _a3.scrollLeft, scrollWidth = _a3.scrollWidth, clientWidth = _a3.clientWidth;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled = function(axis, node) {
  return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
};
var getScrollVariables = function(axis, node) {
  return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
};
var getDirectionFactor = function(axis, direction) {
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a3 = getScrollVariables(axis, target), position = _a3[0], scroll_1 = _a3[1], capacity = _a3[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position;
    if (position || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position;
      }
    }
    target = target.parentNode;
  } while (!targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target));
  if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// node_modules/@radix-ui/react-menu/node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x10, y10) {
  return x10[0] === y10[0] && x10[1] === y10[1];
};
var generateStyle = function(id) {
  return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = React15.useRef([]);
  var touchStartRef = React15.useRef([0, 0]);
  var activeAxis = React15.useRef();
  var id = React15.useState(idCounter++)[0];
  var Style2 = React15.useState(function() {
    return styleSingleton();
  })[0];
  var lastProps = React15.useRef(props);
  React15.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React15.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-".concat(id));
      var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-".concat(id));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id));
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-".concat(id));
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React15.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React15.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e10) {
      return e10.name === event.type && e10.target === event.target && deltaCompare(e10.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      event.preventDefault();
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
        return node.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        event.preventDefault();
      }
    }
  }, []);
  var shouldCancel = React15.useCallback(function(name, delta, target, should) {
    var event = { name, delta, target, should };
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e10) {
        return e10 !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React15.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = React15.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = React15.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  React15.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return React15.createElement(React15.Fragment, null, inert ? React15.createElement(Style2, { styles: generateStyle(id) }) : null, removeScrollBar ? React15.createElement(RemoveScrollBar, { gapMode: "margin" }) : null);
}

// node_modules/@radix-ui/react-menu/node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

// node_modules/@radix-ui/react-menu/node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll = React16.forwardRef(function(props, ref) {
  return React16.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: sidecar_default }));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var Combination_default = ReactRemoveScroll;

// node_modules/@radix-ui/react-menu/dist/index.module.js
var $6cc32821e9371a1c$var$SELECTION_KEYS = [
  "Enter",
  " "
];
var $6cc32821e9371a1c$var$FIRST_KEYS = [
  "ArrowDown",
  "PageUp",
  "Home"
];
var $6cc32821e9371a1c$var$LAST_KEYS = [
  "ArrowUp",
  "PageDown",
  "End"
];
var $6cc32821e9371a1c$var$FIRST_LAST_KEYS = [
  ...$6cc32821e9371a1c$var$FIRST_KEYS,
  ...$6cc32821e9371a1c$var$LAST_KEYS
];
var $6cc32821e9371a1c$var$SUB_OPEN_KEYS = {
  ltr: [
    ...$6cc32821e9371a1c$var$SELECTION_KEYS,
    "ArrowRight"
  ],
  rtl: [
    ...$6cc32821e9371a1c$var$SELECTION_KEYS,
    "ArrowLeft"
  ]
};
var $6cc32821e9371a1c$var$SUB_CLOSE_KEYS = {
  ltr: [
    "ArrowLeft"
  ],
  rtl: [
    "ArrowRight"
  ]
};
var $6cc32821e9371a1c$var$MENU_NAME = "Menu";
var [$6cc32821e9371a1c$var$Collection, $6cc32821e9371a1c$var$useCollection, $6cc32821e9371a1c$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($6cc32821e9371a1c$var$MENU_NAME);
var [$6cc32821e9371a1c$var$createMenuContext, $6cc32821e9371a1c$export$4027731b685e72eb] = $c512c27ab02ef895$export$50c7b4e9d9f19c13($6cc32821e9371a1c$var$MENU_NAME, [
  $6cc32821e9371a1c$var$createCollectionScope,
  $cf1ac5d9fe0e8206$export$722aac194ae923,
  $d7bdfb9eb0fdf311$export$c7109489551a4f4
]);
var $6cc32821e9371a1c$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae923();
var $6cc32821e9371a1c$var$useRovingFocusGroupScope = $d7bdfb9eb0fdf311$export$c7109489551a4f4();
var [$6cc32821e9371a1c$var$MenuProvider, $6cc32821e9371a1c$var$useMenuContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$MENU_NAME);
var [$6cc32821e9371a1c$var$MenuRootProvider, $6cc32821e9371a1c$var$useMenuRootContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$MENU_NAME);
var $6cc32821e9371a1c$export$d9b273488cd8ce6f = (props) => {
  const { __scopeMenu, open = false, children, dir, onOpenChange, modal = true } = props;
  const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
  const [content, setContent] = (0, import_react46.useState)(null);
  const isUsingKeyboardRef = (0, import_react46.useRef)(false);
  const handleOpenChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
  const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  (0, import_react46.useEffect)(() => {
    const handleKeyDown = () => {
      isUsingKeyboardRef.current = true;
      document.addEventListener("pointerdown", handlePointer, {
        capture: true,
        once: true
      });
      document.addEventListener("pointermove", handlePointer, {
        capture: true,
        once: true
      });
    };
    const handlePointer = () => isUsingKeyboardRef.current = false;
    document.addEventListener("keydown", handleKeyDown, {
      capture: true
    });
    return () => {
      document.removeEventListener("keydown", handleKeyDown, {
        capture: true
      });
      document.removeEventListener("pointerdown", handlePointer, {
        capture: true
      });
      document.removeEventListener("pointermove", handlePointer, {
        capture: true
      });
    };
  }, []);
  return /* @__PURE__ */ (0, import_react46.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuProvider, {
    scope: __scopeMenu,
    open,
    onOpenChange: handleOpenChange,
    content,
    onContentChange: setContent
  }, /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuRootProvider, {
    scope: __scopeMenu,
    onClose: (0, import_react46.useCallback)(() => handleOpenChange(false), [
      handleOpenChange
    ]),
    isUsingKeyboardRef,
    dir: direction,
    modal
  }, children)));
};
var $6cc32821e9371a1c$export$9fa5ebd18bee4d43 = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, ...anchorProps } = props;
  const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
  return /* @__PURE__ */ (0, import_react46.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, _extends({}, popperScope, anchorProps, {
    ref: forwardedRef
  }));
});
var $6cc32821e9371a1c$var$PORTAL_NAME = "MenuPortal";
var [$6cc32821e9371a1c$var$PortalProvider, $6cc32821e9371a1c$var$usePortalContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$PORTAL_NAME, {
  forceMount: void 0
});
var $6cc32821e9371a1c$export$793392f970497feb = (props) => {
  const { __scopeMenu, forceMount, children, container } = props;
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$PORTAL_NAME, __scopeMenu);
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$PortalProvider, {
    scope: __scopeMenu,
    forceMount
  }, /* @__PURE__ */ (0, import_react46.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react46.createElement)($f1701beae083dbae$export$602eac185826482c, {
    asChild: true,
    container
  }, children)));
};
var $6cc32821e9371a1c$var$CONTENT_NAME = "MenuContent";
var [$6cc32821e9371a1c$var$MenuContentProvider, $6cc32821e9371a1c$var$useMenuContentContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$CONTENT_NAME);
var $6cc32821e9371a1c$export$479f0f2f71193efe = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const portalContext = $6cc32821e9371a1c$var$usePortalContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const { forceMount = portalContext.forceMount, ...contentProps } = props;
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$Collection.Provider, {
    scope: props.__scopeMenu
  }, /* @__PURE__ */ (0, import_react46.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$Collection.Slot, {
    scope: props.__scopeMenu
  }, rootContext.modal ? /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuRootContentModal, _extends({}, contentProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuRootContentNonModal, _extends({}, contentProps, {
    ref: forwardedRef
  })))));
});
var $6cc32821e9371a1c$var$MenuRootContentModal = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const ref = (0, import_react46.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, ref);
  (0, import_react46.useEffect)(() => {
    const content = ref.current;
    if (content)
      return hideOthers(content);
  }, []);
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({}, props, {
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: context.open,
    disableOutsideScroll: true,
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onFocusOutside, (event) => event.preventDefault(), {
      checkForDefaultPrevented: false
    }),
    onDismiss: () => context.onOpenChange(false)
  }));
});
var $6cc32821e9371a1c$var$MenuRootContentNonModal = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({}, props, {
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    disableOutsideScroll: false,
    onDismiss: () => context.onOpenChange(false)
  }));
});
var $6cc32821e9371a1c$var$MenuContentImpl = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, loop = false, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, disableOutsideScroll, ...contentProps } = props;
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, __scopeMenu);
  const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, __scopeMenu);
  const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
  const rovingFocusGroupScope = $6cc32821e9371a1c$var$useRovingFocusGroupScope(__scopeMenu);
  const getItems = $6cc32821e9371a1c$var$useCollection(__scopeMenu);
  const [currentItemId, setCurrentItemId] = (0, import_react46.useState)(null);
  const contentRef = (0, import_react46.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, contentRef, context.onContentChange);
  const timerRef = (0, import_react46.useRef)(0);
  const searchRef = (0, import_react46.useRef)("");
  const pointerGraceTimerRef = (0, import_react46.useRef)(0);
  const pointerGraceIntentRef = (0, import_react46.useRef)(null);
  const pointerDirRef = (0, import_react46.useRef)("right");
  const lastPointerXRef = (0, import_react46.useRef)(0);
  const ScrollLockWrapper = disableOutsideScroll ? Combination_default : import_react46.Fragment;
  const scrollLockWrapperProps = disableOutsideScroll ? {
    as: $5e63c961fc1ce211$export$8c6ed5c666ac13603,
    allowPinchZoom: true
  } : void 0;
  const handleTypeaheadSearch = (key) => {
    var _items$find, _items$find2;
    const search = searchRef.current + key;
    const items = getItems().filter((item) => !item.disabled);
    const currentItem = document.activeElement;
    const currentMatch = (_items$find = items.find((item) => item.ref.current === currentItem)) === null || _items$find === void 0 ? void 0 : _items$find.textValue;
    const values = items.map((item) => item.textValue);
    const nextMatch = $6cc32821e9371a1c$var$getNextMatch(values, search, currentMatch);
    const newItem = (_items$find2 = items.find((item) => item.textValue === nextMatch)) === null || _items$find2 === void 0 ? void 0 : _items$find2.ref.current;
    (function updateSearch(value) {
      searchRef.current = value;
      window.clearTimeout(timerRef.current);
      if (value !== "")
        timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
    })(search);
    if (newItem)
      setTimeout(() => newItem.focus());
  };
  (0, import_react46.useEffect)(() => {
    return () => window.clearTimeout(timerRef.current);
  }, []);
  $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
  const isPointerMovingToSubmenu = (0, import_react46.useCallback)((event) => {
    var _pointerGraceIntentRe, _pointerGraceIntentRe2;
    const isMovingTowards = pointerDirRef.current === ((_pointerGraceIntentRe = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe === void 0 ? void 0 : _pointerGraceIntentRe.side);
    return isMovingTowards && $6cc32821e9371a1c$var$isPointerInGraceArea(event, (_pointerGraceIntentRe2 = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe2 === void 0 ? void 0 : _pointerGraceIntentRe2.area);
  }, []);
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuContentProvider, {
    scope: __scopeMenu,
    searchRef,
    onItemEnter: (0, import_react46.useCallback)((event) => {
      if (isPointerMovingToSubmenu(event))
        event.preventDefault();
    }, [
      isPointerMovingToSubmenu
    ]),
    onItemLeave: (0, import_react46.useCallback)((event) => {
      var _contentRef$current;
      if (isPointerMovingToSubmenu(event))
        return;
      (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 || _contentRef$current.focus();
      setCurrentItemId(null);
    }, [
      isPointerMovingToSubmenu
    ]),
    onTriggerLeave: (0, import_react46.useCallback)((event) => {
      if (isPointerMovingToSubmenu(event))
        event.preventDefault();
    }, [
      isPointerMovingToSubmenu
    ]),
    pointerGraceTimerRef,
    onPointerGraceIntentChange: (0, import_react46.useCallback)((intent) => {
      pointerGraceIntentRef.current = intent;
    }, [])
  }, /* @__PURE__ */ (0, import_react46.createElement)(ScrollLockWrapper, scrollLockWrapperProps, /* @__PURE__ */ (0, import_react46.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
    asChild: true,
    trapped: trapFocus,
    onMountAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff102(onOpenAutoFocus, (event) => {
      var _contentRef$current2;
      event.preventDefault();
      (_contentRef$current2 = contentRef.current) === null || _contentRef$current2 === void 0 || _contentRef$current2.focus();
    }),
    onUnmountAutoFocus: onCloseAutoFocus
  }, /* @__PURE__ */ (0, import_react46.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, {
    asChild: true,
    disableOutsidePointerEvents,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    onDismiss
  }, /* @__PURE__ */ (0, import_react46.createElement)($d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9, _extends({
    asChild: true
  }, rovingFocusGroupScope, {
    dir: rootContext.dir,
    orientation: "vertical",
    loop,
    currentTabStopId: currentItemId,
    onCurrentTabStopIdChange: setCurrentItemId,
    onEntryFocus: (event) => {
      if (!rootContext.isUsingKeyboardRef.current)
        event.preventDefault();
    }
  }), /* @__PURE__ */ (0, import_react46.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2, _extends({
    role: "menu",
    "aria-orientation": "vertical",
    "data-state": $6cc32821e9371a1c$var$getOpenState(context.open),
    dir: rootContext.dir
  }, popperScope, contentProps, {
    ref: composedRefs,
    style: {
      outline: "none",
      ...contentProps.style
    },
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff102(contentProps.onKeyDown, (event) => {
      const target = event.target;
      const isKeyDownInside = target.closest('[role="menu"]') === event.currentTarget;
      const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
      const isCharacterKey = event.key.length === 1;
      if (isKeyDownInside) {
        if (event.key === "Tab")
          event.preventDefault();
        if (!isModifierKey && isCharacterKey)
          handleTypeaheadSearch(event.key);
      }
      const content = contentRef.current;
      if (event.target !== content)
        return;
      if (!$6cc32821e9371a1c$var$FIRST_LAST_KEYS.includes(event.key))
        return;
      event.preventDefault();
      const items = getItems().filter((item) => !item.disabled);
      const candidateNodes = items.map((item) => item.ref.current);
      if ($6cc32821e9371a1c$var$LAST_KEYS.includes(event.key))
        candidateNodes.reverse();
      $6cc32821e9371a1c$var$focusFirst(candidateNodes);
    }),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onBlur, (event) => {
      if (!event.currentTarget.contains(event.target)) {
        window.clearTimeout(timerRef.current);
        searchRef.current = "";
      }
    }),
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
      const target = event.target;
      const pointerXHasChanged = lastPointerXRef.current !== event.clientX;
      if (event.currentTarget.contains(target) && pointerXHasChanged) {
        const newDir = event.clientX > lastPointerXRef.current ? "right" : "left";
        pointerDirRef.current = newDir;
        lastPointerXRef.current = event.clientX;
      }
    }))
  })))))));
});
var $6cc32821e9371a1c$export$22a631d1f72787bb = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, ...groupProps } = props;
  return /* @__PURE__ */ (0, import_react46.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({
    role: "group"
  }, groupProps, {
    ref: forwardedRef
  }));
});
var $6cc32821e9371a1c$var$ITEM_NAME = "MenuItem";
var $6cc32821e9371a1c$var$ITEM_SELECT = "menu.itemSelect";
var $6cc32821e9371a1c$export$2ce376c2cc3355c8 = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { disabled = false, onSelect, ...itemProps } = props;
  const ref = (0, import_react46.useRef)(null);
  const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$ITEM_NAME, props.__scopeMenu);
  const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$ITEM_NAME, props.__scopeMenu);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, ref);
  const isPointerDownRef = (0, import_react46.useRef)(false);
  const handleSelect = () => {
    const menuItem = ref.current;
    if (!disabled && menuItem) {
      const itemSelectEvent = new CustomEvent($6cc32821e9371a1c$var$ITEM_SELECT, {
        bubbles: true,
        cancelable: true
      });
      menuItem.addEventListener($6cc32821e9371a1c$var$ITEM_SELECT, (event) => onSelect === null || onSelect === void 0 ? void 0 : onSelect(event), {
        once: true
      });
      $8927f6f2acc4f386$export$6d1a0317bde7de7f(menuItem, itemSelectEvent);
      if (itemSelectEvent.defaultPrevented)
        isPointerDownRef.current = false;
      else
        rootContext.onClose();
    }
  };
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuItemImpl, _extends({}, itemProps, {
    ref: composedRefs,
    disabled,
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onClick, handleSelect),
    onPointerDown: (event) => {
      var _props$onPointerDown;
      (_props$onPointerDown = props.onPointerDown) === null || _props$onPointerDown === void 0 || _props$onPointerDown.call(props, event);
      isPointerDownRef.current = true;
    },
    onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onPointerUp, (event) => {
      var _event$currentTarget;
      if (!isPointerDownRef.current)
        (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || _event$currentTarget.click();
    }),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onKeyDown, (event) => {
      const isTypingAhead = contentContext.searchRef.current !== "";
      if (disabled || isTypingAhead && event.key === " ")
        return;
      if ($6cc32821e9371a1c$var$SELECTION_KEYS.includes(event.key)) {
        event.currentTarget.click();
        event.preventDefault();
      }
    })
  }));
});
var $6cc32821e9371a1c$var$MenuItemImpl = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, disabled = false, textValue, ...itemProps } = props;
  const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$ITEM_NAME, __scopeMenu);
  const rovingFocusGroupScope = $6cc32821e9371a1c$var$useRovingFocusGroupScope(__scopeMenu);
  const ref = (0, import_react46.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, ref);
  const [isFocused, setIsFocused] = (0, import_react46.useState)(false);
  const [textContent, setTextContent] = (0, import_react46.useState)("");
  (0, import_react46.useEffect)(() => {
    const menuItem = ref.current;
    if (menuItem) {
      var _menuItem$textContent;
      setTextContent(((_menuItem$textContent = menuItem.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : "").trim());
    }
  }, [
    itemProps.children
  ]);
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$Collection.ItemSlot, {
    scope: __scopeMenu,
    disabled,
    textValue: textValue !== null && textValue !== void 0 ? textValue : textContent
  }, /* @__PURE__ */ (0, import_react46.createElement)($d7bdfb9eb0fdf311$export$6d08773d2e66f8f2, _extends({
    asChild: true
  }, rovingFocusGroupScope, {
    focusable: !disabled
  }), /* @__PURE__ */ (0, import_react46.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({
    role: "menuitem",
    "data-highlighted": isFocused ? "" : void 0,
    "aria-disabled": disabled || void 0,
    "data-disabled": disabled ? "" : void 0
  }, itemProps, {
    ref: composedRefs,
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
      if (disabled)
        contentContext.onItemLeave(event);
      else {
        contentContext.onItemEnter(event);
        if (!event.defaultPrevented) {
          const item = event.currentTarget;
          item.focus();
        }
      }
    })),
    onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onPointerLeave, $6cc32821e9371a1c$var$whenMouse((event) => contentContext.onItemLeave(event))),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onFocus, () => setIsFocused(true)),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onBlur, () => setIsFocused(false))
  }))));
});
var $6cc32821e9371a1c$export$f6f243521332502d = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { checked = false, onCheckedChange, ...checkboxItemProps } = props;
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$ItemIndicatorProvider, {
    scope: props.__scopeMenu,
    checked
  }, /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$export$2ce376c2cc3355c8, _extends({
    role: "menuitemcheckbox",
    "aria-checked": checked
  }, checkboxItemProps, {
    ref: forwardedRef,
    "data-state": $6cc32821e9371a1c$var$getCheckedState(checked),
    onSelect: $e42e1063c40fb3ef$export$b9ecd428b558ff102(checkboxItemProps.onSelect, () => onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange(!checked), {
      checkForDefaultPrevented: false
    })
  })));
});
var $6cc32821e9371a1c$var$RADIO_GROUP_NAME = "MenuRadioGroup";
var [$6cc32821e9371a1c$var$RadioGroupProvider, $6cc32821e9371a1c$var$useRadioGroupContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$RADIO_GROUP_NAME, {
  value: void 0,
  onValueChange: () => {
  }
});
var $6cc32821e9371a1c$export$ea2200c9eee416b3 = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { value, onValueChange, ...groupProps } = props;
  const handleValueChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onValueChange);
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$RadioGroupProvider, {
    scope: props.__scopeMenu,
    value,
    onValueChange: handleValueChange
  }, /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$export$22a631d1f72787bb, _extends({}, groupProps, {
    ref: forwardedRef
  })));
});
var $6cc32821e9371a1c$var$RADIO_ITEM_NAME = "MenuRadioItem";
var $6cc32821e9371a1c$export$69bd225e9817f6d0 = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { value, ...radioItemProps } = props;
  const context = $6cc32821e9371a1c$var$useRadioGroupContext($6cc32821e9371a1c$var$RADIO_ITEM_NAME, props.__scopeMenu);
  const checked = value === context.value;
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$ItemIndicatorProvider, {
    scope: props.__scopeMenu,
    checked
  }, /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$export$2ce376c2cc3355c8, _extends({
    role: "menuitemradio",
    "aria-checked": checked
  }, radioItemProps, {
    ref: forwardedRef,
    "data-state": $6cc32821e9371a1c$var$getCheckedState(checked),
    onSelect: $e42e1063c40fb3ef$export$b9ecd428b558ff102(radioItemProps.onSelect, () => {
      var _context$onValueChang;
      return (_context$onValueChang = context.onValueChange) === null || _context$onValueChang === void 0 ? void 0 : _context$onValueChang.call(context, value);
    }, {
      checkForDefaultPrevented: false
    })
  })));
});
var $6cc32821e9371a1c$var$ITEM_INDICATOR_NAME = "MenuItemIndicator";
var [$6cc32821e9371a1c$var$ItemIndicatorProvider, $6cc32821e9371a1c$var$useItemIndicatorContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$ITEM_INDICATOR_NAME, {
  checked: false
});
var $6cc32821e9371a1c$export$a2593e23056970a3 = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, forceMount, ...itemIndicatorProps } = props;
  const indicatorContext = $6cc32821e9371a1c$var$useItemIndicatorContext($6cc32821e9371a1c$var$ITEM_INDICATOR_NAME, __scopeMenu);
  return /* @__PURE__ */ (0, import_react46.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || indicatorContext.checked
  }, /* @__PURE__ */ (0, import_react46.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.span, _extends({}, itemIndicatorProps, {
    ref: forwardedRef,
    "data-state": $6cc32821e9371a1c$var$getCheckedState(indicatorContext.checked)
  })));
});
var $6cc32821e9371a1c$export$1cec7dcdd713e220 = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, ...separatorProps } = props;
  return /* @__PURE__ */ (0, import_react46.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0342.div, _extends({
    role: "separator",
    "aria-orientation": "horizontal"
  }, separatorProps, {
    ref: forwardedRef
  }));
});
var $6cc32821e9371a1c$export$bcdda4773debf5fa = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, ...arrowProps } = props;
  const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
  return /* @__PURE__ */ (0, import_react46.createElement)($cf1ac5d9fe0e8206$export$21b07c8f274aebd5, _extends({}, popperScope, arrowProps, {
    ref: forwardedRef
  }));
});
var $6cc32821e9371a1c$var$SUB_NAME = "MenuSub";
var [$6cc32821e9371a1c$var$MenuSubProvider, $6cc32821e9371a1c$var$useMenuSubContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$SUB_NAME);
var $6cc32821e9371a1c$export$71bdb9d1e2909932 = (props) => {
  const { __scopeMenu, children, open = false, onOpenChange } = props;
  const parentMenuContext = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$SUB_NAME, __scopeMenu);
  const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
  const [trigger2, setTrigger] = (0, import_react46.useState)(null);
  const [content, setContent] = (0, import_react46.useState)(null);
  const handleOpenChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
  (0, import_react46.useEffect)(() => {
    if (parentMenuContext.open === false)
      handleOpenChange(false);
    return () => handleOpenChange(false);
  }, [
    parentMenuContext.open,
    handleOpenChange
  ]);
  return /* @__PURE__ */ (0, import_react46.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuProvider, {
    scope: __scopeMenu,
    open,
    onOpenChange: handleOpenChange,
    content,
    onContentChange: setContent
  }, /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuSubProvider, {
    scope: __scopeMenu,
    contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
    triggerId: $1746a345f3d73bb7$export$f680877a34711e37(),
    trigger: trigger2,
    onTriggerChange: setTrigger
  }, children)));
};
var $6cc32821e9371a1c$var$SUB_TRIGGER_NAME = "MenuSubTrigger";
var $6cc32821e9371a1c$export$5fbbb3ba7297405f = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
  const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
  const subContext = $6cc32821e9371a1c$var$useMenuSubContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
  const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
  const openTimerRef = (0, import_react46.useRef)(null);
  const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;
  const scope = {
    __scopeMenu: props.__scopeMenu
  };
  const clearOpenTimer = (0, import_react46.useCallback)(() => {
    if (openTimerRef.current)
      window.clearTimeout(openTimerRef.current);
    openTimerRef.current = null;
  }, []);
  (0, import_react46.useEffect)(() => clearOpenTimer, [
    clearOpenTimer
  ]);
  (0, import_react46.useEffect)(() => {
    const pointerGraceTimer = pointerGraceTimerRef.current;
    return () => {
      window.clearTimeout(pointerGraceTimer);
      onPointerGraceIntentChange(null);
    };
  }, [
    pointerGraceTimerRef,
    onPointerGraceIntentChange
  ]);
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$export$9fa5ebd18bee4d43, _extends({
    asChild: true
  }, scope), /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuItemImpl, _extends({
    id: subContext.triggerId,
    "aria-haspopup": "menu",
    "aria-expanded": context.open,
    "aria-controls": subContext.contentId,
    "data-state": $6cc32821e9371a1c$var$getOpenState(context.open)
  }, props, {
    ref: $6ed0406888f73fc4$export$43e446d32b3d21af3(forwardedRef, subContext.onTriggerChange),
    onClick: (event) => {
      var _props$onClick;
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, event);
      if (props.disabled || event.defaultPrevented)
        return;
      event.currentTarget.focus();
      if (!context.open)
        context.onOpenChange(true);
    },
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
      contentContext.onItemEnter(event);
      if (event.defaultPrevented)
        return;
      if (!props.disabled && !context.open && !openTimerRef.current) {
        contentContext.onPointerGraceIntentChange(null);
        openTimerRef.current = window.setTimeout(() => {
          context.onOpenChange(true);
          clearOpenTimer();
        }, 100);
      }
    })),
    onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onPointerLeave, $6cc32821e9371a1c$var$whenMouse((event) => {
      var _context$content;
      clearOpenTimer();
      const contentRect = (_context$content = context.content) === null || _context$content === void 0 ? void 0 : _context$content.getBoundingClientRect();
      if (contentRect) {
        var _context$content2;
        const side = (_context$content2 = context.content) === null || _context$content2 === void 0 ? void 0 : _context$content2.dataset.side;
        const rightSide = side === "right";
        const bleed = rightSide ? -5 : 5;
        const contentNearEdge = contentRect[rightSide ? "left" : "right"];
        const contentFarEdge = contentRect[rightSide ? "right" : "left"];
        contentContext.onPointerGraceIntentChange({
          area: [
            {
              x: event.clientX + bleed,
              y: event.clientY
            },
            {
              x: contentNearEdge,
              y: contentRect.top
            },
            {
              x: contentFarEdge,
              y: contentRect.top
            },
            {
              x: contentFarEdge,
              y: contentRect.bottom
            },
            {
              x: contentNearEdge,
              y: contentRect.bottom
            }
          ],
          side
        });
        window.clearTimeout(pointerGraceTimerRef.current);
        pointerGraceTimerRef.current = window.setTimeout(() => contentContext.onPointerGraceIntentChange(null), 300);
      } else {
        contentContext.onTriggerLeave(event);
        if (event.defaultPrevented)
          return;
        contentContext.onPointerGraceIntentChange(null);
      }
    })),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onKeyDown, (event) => {
      const isTypingAhead = contentContext.searchRef.current !== "";
      if (props.disabled || isTypingAhead && event.key === " ")
        return;
      if ($6cc32821e9371a1c$var$SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {
        var _context$content3;
        context.onOpenChange(true);
        (_context$content3 = context.content) === null || _context$content3 === void 0 || _context$content3.focus();
        event.preventDefault();
      }
    })
  })));
});
var $6cc32821e9371a1c$var$SUB_CONTENT_NAME = "MenuSubContent";
var $6cc32821e9371a1c$export$e7142ab31822bde6 = /* @__PURE__ */ (0, import_react46.forwardRef)((props, forwardedRef) => {
  const portalContext = $6cc32821e9371a1c$var$usePortalContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const { forceMount = portalContext.forceMount, ...subContentProps } = props;
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const subContext = $6cc32821e9371a1c$var$useMenuSubContext($6cc32821e9371a1c$var$SUB_CONTENT_NAME, props.__scopeMenu);
  const ref = (0, import_react46.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d052(forwardedRef, ref);
  return /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$Collection.Provider, {
    scope: props.__scopeMenu
  }, /* @__PURE__ */ (0, import_react46.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$Collection.Slot, {
    scope: props.__scopeMenu
  }, /* @__PURE__ */ (0, import_react46.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({
    id: subContext.contentId,
    "aria-labelledby": subContext.triggerId
  }, subContentProps, {
    ref: composedRefs,
    align: "start",
    side: rootContext.dir === "rtl" ? "left" : "right",
    disableOutsidePointerEvents: false,
    disableOutsideScroll: false,
    trapFocus: false,
    onOpenAutoFocus: (event) => {
      var _ref$current;
      if (rootContext.isUsingKeyboardRef.current)
        (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.focus();
      event.preventDefault();
    },
    onCloseAutoFocus: (event) => event.preventDefault(),
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onFocusOutside, (event) => {
      if (event.target !== subContext.trigger)
        context.onOpenChange(false);
    }),
    onEscapeKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onEscapeKeyDown, rootContext.onClose),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff102(props.onKeyDown, (event) => {
      const isKeyDownInside = event.currentTarget.contains(event.target);
      const isCloseKey = $6cc32821e9371a1c$var$SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);
      if (isKeyDownInside && isCloseKey) {
        var _subContext$trigger;
        context.onOpenChange(false);
        (_subContext$trigger = subContext.trigger) === null || _subContext$trigger === void 0 || _subContext$trigger.focus();
        event.preventDefault();
      }
    })
  })))));
});
function $6cc32821e9371a1c$var$getOpenState(open) {
  return open ? "open" : "closed";
}
function $6cc32821e9371a1c$var$getCheckedState(checked) {
  return checked ? "checked" : "unchecked";
}
function $6cc32821e9371a1c$var$focusFirst(candidates) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
      return;
    candidate.focus();
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
      return;
  }
}
function $6cc32821e9371a1c$var$wrapArray(array, startIndex) {
  return array.map((_10, index4) => array[(startIndex + index4) % array.length]);
}
function $6cc32821e9371a1c$var$getNextMatch(values, search, currentMatch) {
  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
  const normalizedSearch = isRepeated ? search[0] : search;
  const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;
  let wrappedValues = $6cc32821e9371a1c$var$wrapArray(values, Math.max(currentMatchIndex, 0));
  const excludeCurrentMatch = normalizedSearch.length === 1;
  if (excludeCurrentMatch)
    wrappedValues = wrappedValues.filter((v11) => v11 !== currentMatch);
  const nextMatch = wrappedValues.find((value) => value.toLowerCase().startsWith(normalizedSearch.toLowerCase()));
  return nextMatch !== currentMatch ? nextMatch : void 0;
}
function $6cc32821e9371a1c$var$isPointInPolygon(point, polygon) {
  const { x: x10, y: y10 } = point;
  let inside = false;
  for (let i10 = 0, j10 = polygon.length - 1; i10 < polygon.length; j10 = i10++) {
    const xi2 = polygon[i10].x;
    const yi2 = polygon[i10].y;
    const xj2 = polygon[j10].x;
    const yj2 = polygon[j10].y;
    const intersect = yi2 > y10 !== yj2 > y10 && x10 < (xj2 - xi2) * (y10 - yi2) / (yj2 - yi2) + xi2;
    if (intersect)
      inside = !inside;
  }
  return inside;
}
function $6cc32821e9371a1c$var$isPointerInGraceArea(event, area) {
  if (!area)
    return false;
  const cursorPos = {
    x: event.clientX,
    y: event.clientY
  };
  return $6cc32821e9371a1c$var$isPointInPolygon(cursorPos, area);
}
function $6cc32821e9371a1c$var$whenMouse(handler) {
  return (event) => event.pointerType === "mouse" ? handler(event) : void 0;
}
var $6cc32821e9371a1c$export$be92b6f5f03c0fe9 = $6cc32821e9371a1c$export$d9b273488cd8ce6f;
var $6cc32821e9371a1c$export$b688253958b8dfe7 = $6cc32821e9371a1c$export$9fa5ebd18bee4d43;
var $6cc32821e9371a1c$export$602eac185826482c = $6cc32821e9371a1c$export$793392f970497feb;
var $6cc32821e9371a1c$export$7c6e2c02157bb7d2 = $6cc32821e9371a1c$export$479f0f2f71193efe;
var $6cc32821e9371a1c$export$6d08773d2e66f8f2 = $6cc32821e9371a1c$export$2ce376c2cc3355c8;
var $6cc32821e9371a1c$export$16ce288f89fa631c = $6cc32821e9371a1c$export$f6f243521332502d;
var $6cc32821e9371a1c$export$a98f0dcb43a68a25 = $6cc32821e9371a1c$export$ea2200c9eee416b3;
var $6cc32821e9371a1c$export$371ab307eab489c0 = $6cc32821e9371a1c$export$69bd225e9817f6d0;
var $6cc32821e9371a1c$export$c3468e2714d175fa = $6cc32821e9371a1c$export$a2593e23056970a3;
var $6cc32821e9371a1c$export$1ff3c3f08ae963c0 = $6cc32821e9371a1c$export$1cec7dcdd713e220;
var $6cc32821e9371a1c$export$21b07c8f274aebd5 = $6cc32821e9371a1c$export$bcdda4773debf5fa;
var $6cc32821e9371a1c$export$d7a01e11500dfb6f = $6cc32821e9371a1c$export$71bdb9d1e2909932;
var $6cc32821e9371a1c$export$2ea8a7a591ac5eac = $6cc32821e9371a1c$export$5fbbb3ba7297405f;
var $6cc32821e9371a1c$export$6d4de93b380beddf = $6cc32821e9371a1c$export$e7142ab31822bde6;

// node_modules/@radix-ui/react-context-menu/dist/index.module.js
var $1b0217ee4a91d156$var$CONTEXT_MENU_NAME = "ContextMenu";
var [$1b0217ee4a91d156$var$createContextMenuContext, $1b0217ee4a91d156$export$1059331f43ddcc82] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($1b0217ee4a91d156$var$CONTEXT_MENU_NAME, [
  $6cc32821e9371a1c$export$4027731b685e72eb
]);
var $1b0217ee4a91d156$var$useMenuScope = $6cc32821e9371a1c$export$4027731b685e72eb();
var [$1b0217ee4a91d156$var$ContextMenuProvider, $1b0217ee4a91d156$var$useContextMenuContext] = $1b0217ee4a91d156$var$createContextMenuContext($1b0217ee4a91d156$var$CONTEXT_MENU_NAME);
var $1b0217ee4a91d156$export$8dc6765e8be191c7 = (props) => {
  const { __scopeContextMenu, children, onOpenChange, dir, modal = true } = props;
  const [open1, setOpen] = (0, import_react47.useState)(false);
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  const handleOpenChangeProp = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
  const handleOpenChange = (0, import_react47.useCallback)((open) => {
    setOpen(open);
    handleOpenChangeProp(open);
  }, [
    handleOpenChangeProp
  ]);
  return /* @__PURE__ */ (0, import_react47.createElement)($1b0217ee4a91d156$var$ContextMenuProvider, {
    scope: __scopeContextMenu,
    open: open1,
    onOpenChange: handleOpenChange,
    modal
  }, /* @__PURE__ */ (0, import_react47.createElement)($6cc32821e9371a1c$export$be92b6f5f03c0fe9, _extends({}, menuScope, {
    dir,
    open: open1,
    onOpenChange: handleOpenChange,
    modal
  }), children));
};
var $1b0217ee4a91d156$var$TRIGGER_NAME = "ContextMenuTrigger";
var $1b0217ee4a91d156$export$be6fc7b1d5b0beb9 = /* @__PURE__ */ (0, import_react47.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...triggerProps } = props;
  const context = $1b0217ee4a91d156$var$useContextMenuContext($1b0217ee4a91d156$var$TRIGGER_NAME, __scopeContextMenu);
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  const pointRef = (0, import_react47.useRef)({
    x: 0,
    y: 0
  });
  const virtualRef = (0, import_react47.useRef)({
    getBoundingClientRect: () => DOMRect.fromRect({
      width: 0,
      height: 0,
      ...pointRef.current
    })
  });
  const longPressTimerRef = (0, import_react47.useRef)(0);
  const clearLongPress = (0, import_react47.useCallback)(() => window.clearTimeout(longPressTimerRef.current), []);
  const handleOpen = (event) => {
    pointRef.current = {
      x: event.clientX,
      y: event.clientY
    };
    context.onOpenChange(true);
  };
  (0, import_react47.useEffect)(() => clearLongPress, [
    clearLongPress
  ]);
  return /* @__PURE__ */ (0, import_react47.createElement)(import_react47.Fragment, null, /* @__PURE__ */ (0, import_react47.createElement)($6cc32821e9371a1c$export$b688253958b8dfe7, _extends({}, menuScope, {
    virtualRef
  })), /* @__PURE__ */ (0, import_react47.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    "data-state": context.open ? "open" : "closed"
  }, triggerProps, {
    ref: forwardedRef,
    style: {
      WebkitTouchCallout: "none",
      ...props.style
    },
    onContextMenu: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onContextMenu, (event) => {
      clearLongPress();
      handleOpen(event);
      event.preventDefault();
    }),
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, $1b0217ee4a91d156$var$whenTouchOrPen((event) => {
      clearLongPress();
      longPressTimerRef.current = window.setTimeout(() => handleOpen(event), 700);
    })),
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
    onPointerCancel: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerCancel, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
    onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress))
  })));
});
var $1b0217ee4a91d156$export$14afd0be83e45060 = (props) => {
  const { __scopeContextMenu, ...portalProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react47.createElement)($6cc32821e9371a1c$export$602eac185826482c, _extends({}, menuScope, portalProps));
};
var $1b0217ee4a91d156$var$CONTENT_NAME = "ContextMenuContent";
var $1b0217ee4a91d156$export$572205900c9369e = /* @__PURE__ */ (0, import_react47.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...contentProps } = props;
  const context = $1b0217ee4a91d156$var$useContextMenuContext($1b0217ee4a91d156$var$CONTENT_NAME, __scopeContextMenu);
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  const hasInteractedOutsideRef = (0, import_react47.useRef)(false);
  return /* @__PURE__ */ (0, import_react47.createElement)($6cc32821e9371a1c$export$7c6e2c02157bb7d2, _extends({}, menuScope, contentProps, {
    ref: forwardedRef,
    side: "right",
    sideOffset: 2,
    align: "start",
    onCloseAutoFocus: (event) => {
      var _props$onCloseAutoFoc;
      (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
      if (!event.defaultPrevented && hasInteractedOutsideRef.current)
        event.preventDefault();
      hasInteractedOutsideRef.current = false;
    },
    onInteractOutside: (event) => {
      var _props$onInteractOuts;
      (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
      if (!event.defaultPrevented && !context.modal)
        hasInteractedOutsideRef.current = true;
    },
    style: {
      ...props.style,
      ["--radix-context-menu-content-transform-origin"]: "var(--radix-popper-transform-origin)"
    }
  }));
});
var $1b0217ee4a91d156$export$16a26dc176a49100 = /* @__PURE__ */ (0, import_react47.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...itemProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react47.createElement)($6cc32821e9371a1c$export$6d08773d2e66f8f2, _extends({}, menuScope, itemProps, {
    ref: forwardedRef
  }));
});
var $1b0217ee4a91d156$export$f47d0a58228a61e2 = /* @__PURE__ */ (0, import_react47.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...arrowProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react47.createElement)($6cc32821e9371a1c$export$21b07c8f274aebd5, _extends({}, menuScope, arrowProps, {
    ref: forwardedRef
  }));
});
var $1b0217ee4a91d156$export$5bc21d1c00c4b201 = (props) => {
  const { __scopeContextMenu, children, onOpenChange, open: openProp, defaultOpen } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  const [open, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react47.createElement)($6cc32821e9371a1c$export$d7a01e11500dfb6f, _extends({}, menuScope, {
    open,
    onOpenChange: setOpen
  }), children);
};
var $1b0217ee4a91d156$export$30b2b5c64556d316 = /* @__PURE__ */ (0, import_react47.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...triggerItemProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react47.createElement)($6cc32821e9371a1c$export$2ea8a7a591ac5eac, _extends({}, menuScope, triggerItemProps, {
    ref: forwardedRef
  }));
});
var $1b0217ee4a91d156$export$2c967063bd2dc512 = /* @__PURE__ */ (0, import_react47.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...subContentProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react47.createElement)($6cc32821e9371a1c$export$6d4de93b380beddf, _extends({}, menuScope, subContentProps, {
    ref: forwardedRef,
    style: {
      ...props.style,
      ["--radix-context-menu-content-transform-origin"]: "var(--radix-popper-transform-origin)"
    }
  }));
});
function $1b0217ee4a91d156$var$whenTouchOrPen(handler) {
  return (event) => event.pointerType !== "mouse" ? handler(event) : void 0;
}
var $1b0217ee4a91d156$export$be92b6f5f03c0fe9 = $1b0217ee4a91d156$export$8dc6765e8be191c7;
var $1b0217ee4a91d156$export$41fb9f06171c75f4 = $1b0217ee4a91d156$export$be6fc7b1d5b0beb9;
var $1b0217ee4a91d156$export$602eac185826482c = $1b0217ee4a91d156$export$14afd0be83e45060;
var $1b0217ee4a91d156$export$7c6e2c02157bb7d2 = $1b0217ee4a91d156$export$572205900c9369e;
var $1b0217ee4a91d156$export$d7a01e11500dfb6f = $1b0217ee4a91d156$export$5bc21d1c00c4b201;
var $1b0217ee4a91d156$export$2ea8a7a591ac5eac = $1b0217ee4a91d156$export$30b2b5c64556d316;
var $1b0217ee4a91d156$export$6d4de93b380beddf = $1b0217ee4a91d156$export$2c967063bd2dc512;

// node_modules/@radix-ui/react-icons/dist/react-icons.esm.js
var import_react48 = __toESM(require_react());
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i10;
  for (i10 = 0; i10 < sourceKeys.length; i10++) {
    key = sourceKeys[i10];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$3 = ["color"];
var AlignBottomIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$3);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M9 3C9 2.44772 8.55229 2 8 2H7C6.44772 2 6 2.44772 6 3L6 14H1.5C1.22386 14 1 14.2239 1 14.5C1 14.7761 1.22386 15 1.5 15L6 15H9H13.5C13.7761 15 14 14.7761 14 14.5C14 14.2239 13.7761 14 13.5 14H9V3Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4 = ["color"];
var AlignCenterHorizontallyIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$4);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M1.99988 6C1.44759 6 0.999877 6.44772 0.999877 7L0.999877 8C0.999877 8.55228 1.44759 9 1.99988 9L6.99988 9L6.99988 13.5C6.99988 13.7761 7.22374 14 7.49988 14C7.77602 14 7.99988 13.7761 7.99988 13.5L7.99988 9L12.9999 9C13.5522 9 13.9999 8.55228 13.9999 8L13.9999 7C13.9999 6.44772 13.5522 6 12.9999 6L7.99988 6L7.99988 1.5C7.99988 1.22386 7.77602 1 7.49988 1C7.22373 1 6.99988 1.22386 6.99988 1.5L6.99988 6L1.99988 6Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$5 = ["color"];
var AlignCenterVerticallyIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$5);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M6.99988 1C6.44759 1 5.99988 1.44772 5.99988 2V7H1.49988C1.22374 7 0.999878 7.22386 0.999878 7.5C0.999878 7.77614 1.22374 8 1.49988 8H5.99988V13C5.99988 13.5523 6.44759 14 6.99988 14H7.99988C8.55216 14 8.99988 13.5523 8.99988 13V8H13.4999C13.776 8 13.9999 7.77614 13.9999 7.5C13.9999 7.22386 13.776 7 13.4999 7H8.99988V2C8.99988 1.44772 8.55216 1 7.99988 1L6.99988 1Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$6 = ["color"];
var AlignLeftIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$6);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M0.499995 0.999995C0.223855 0.999995 -5.58458e-07 1.22385 -5.46388e-07 1.49999L-2.18554e-08 13.4999C-9.78492e-09 13.776 0.223855 13.9999 0.499995 13.9999C0.776136 13.9999 0.999991 13.776 0.999991 13.4999L0.999991 8.99993L12 8.99993C12.5523 8.99993 13 8.55222 13 7.99993L13 6.99994C13 6.44766 12.5523 5.99995 12 5.99995L0.999991 5.99995L0.999991 1.49999C0.999991 1.22385 0.776135 0.999995 0.499995 0.999995Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$7 = ["color"];
var AlignRightIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$7);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M14.4999 1C14.2237 1 13.9999 1.22386 13.9999 1.5L13.9999 6L2.99988 6C2.44759 6 1.99988 6.44772 1.99988 7L1.99988 8C1.99988 8.55228 2.44759 9 2.99988 9L13.9999 9L13.9999 13.5C13.9999 13.7761 14.2237 14 14.4999 14C14.776 14 14.9999 13.7761 14.9999 13.5L14.9999 9L14.9999 6L14.9999 1.5C14.9999 1.22386 14.776 1 14.4999 1Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$8 = ["color"];
var AlignTopIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$8);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M1.5 0C1.22386 0 1 0.223858 1 0.5C1 0.776142 1.22386 1 1.5 1H6V12C6 12.5523 6.44772 13 7 13H8C8.55228 13 9 12.5523 9 12V1H13.5C13.7761 1 14 0.776142 14 0.5C14 0.223858 13.7761 0 13.5 0H9H6H1.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$a = ["color"];
var AngleIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$a);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M8.8914 2.1937C9.1158 2.35464 9.16725 2.66701 9.00631 2.89141L2.47388 12H13.5C13.7761 12 14 12.2239 14 12.5C14 12.7762 13.7761 13 13.5 13H1.5C1.31254 13 1.14082 12.8952 1.0552 12.7284C0.969578 12.5616 0.984438 12.361 1.09369 12.2086L8.19369 2.30862C8.35462 2.08422 8.667 2.03277 8.8914 2.1937ZM11.1 6.50001C11.1 6.22387 11.3238 6.00001 11.6 6.00001C11.8761 6.00001 12.1 6.22387 12.1 6.50001C12.1 6.77615 11.8761 7.00001 11.6 7.00001C11.3238 7.00001 11.1 6.77615 11.1 6.50001ZM10.4 4.00001C10.1239 4.00001 9.90003 4.22387 9.90003 4.50001C9.90003 4.77615 10.1239 5.00001 10.4 5.00001C10.6762 5.00001 10.9 4.77615 10.9 4.50001C10.9 4.22387 10.6762 4.00001 10.4 4.00001ZM12.1 8.50001C12.1 8.22387 12.3238 8.00001 12.6 8.00001C12.8761 8.00001 13.1 8.22387 13.1 8.50001C13.1 8.77615 12.8761 9.00001 12.6 9.00001C12.3238 9.00001 12.1 8.77615 12.1 8.50001ZM13.4 10C13.1239 10 12.9 10.2239 12.9 10.5C12.9 10.7761 13.1239 11 13.4 11C13.6762 11 13.9 10.7761 13.9 10.5C13.9 10.2239 13.6762 10 13.4 10Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$e = ["color"];
var ArrowDownIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$e);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M7.5 2C7.77614 2 8 2.22386 8 2.5L8 11.2929L11.1464 8.14645C11.3417 7.95118 11.6583 7.95118 11.8536 8.14645C12.0488 8.34171 12.0488 8.65829 11.8536 8.85355L7.85355 12.8536C7.75979 12.9473 7.63261 13 7.5 13C7.36739 13 7.24021 12.9473 7.14645 12.8536L3.14645 8.85355C2.95118 8.65829 2.95118 8.34171 3.14645 8.14645C3.34171 7.95118 3.65829 7.95118 3.85355 8.14645L7 11.2929L7 2.5C7 2.22386 7.22386 2 7.5 2Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$i = ["color"];
var ArrowTopRightIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$i);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L10.2929 4L6 4C5.72386 4 5.5 3.77614 5.5 3.5C5.5 3.22386 5.72386 3 6 3L11.5 3C11.6326 3 11.7598 3.05268 11.8536 3.14645C11.9473 3.24022 12 3.36739 12 3.5L12 9.00001C12 9.27615 11.7761 9.50001 11.5 9.50001C11.2239 9.50001 11 9.27615 11 9.00001V4.70711L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$j = ["color"];
var ArrowUpIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$j);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M7.14645 2.14645C7.34171 1.95118 7.65829 1.95118 7.85355 2.14645L11.8536 6.14645C12.0488 6.34171 12.0488 6.65829 11.8536 6.85355C11.6583 7.04882 11.3417 7.04882 11.1464 6.85355L8 3.70711L8 12.5C8 12.7761 7.77614 13 7.5 13C7.22386 13 7 12.7761 7 12.5L7 3.70711L3.85355 6.85355C3.65829 7.04882 3.34171 7.04882 3.14645 6.85355C2.95118 6.65829 2.95118 6.34171 3.14645 6.14645L7.14645 2.14645Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$k = ["color"];
var AspectRatioIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$k);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M2.5 2H12.5C12.7761 2 13 2.22386 13 2.5V12.5C13 12.7761 12.7761 13 12.5 13H2.5C2.22386 13 2 12.7761 2 12.5V2.5C2 2.22386 2.22386 2 2.5 2ZM1 2.5C1 1.67157 1.67157 1 2.5 1H12.5C13.3284 1 14 1.67157 14 2.5V12.5C14 13.3284 13.3284 14 12.5 14H2.5C1.67157 14 1 13.3284 1 12.5V2.5ZM7.5 4C7.77614 4 8 3.77614 8 3.5C8 3.22386 7.77614 3 7.5 3C7.22386 3 7 3.22386 7 3.5C7 3.77614 7.22386 4 7.5 4ZM8 5.5C8 5.77614 7.77614 6 7.5 6C7.22386 6 7 5.77614 7 5.5C7 5.22386 7.22386 5 7.5 5C7.77614 5 8 5.22386 8 5.5ZM7.5 8C7.77614 8 8 7.77614 8 7.5C8 7.22386 7.77614 7 7.5 7C7.22386 7 7 7.22386 7 7.5C7 7.77614 7.22386 8 7.5 8ZM10 7.5C10 7.77614 9.77614 8 9.5 8C9.22386 8 9 7.77614 9 7.5C9 7.22386 9.22386 7 9.5 7C9.77614 7 10 7.22386 10 7.5ZM11.5 8C11.7761 8 12 7.77614 12 7.5C12 7.22386 11.7761 7 11.5 7C11.2239 7 11 7.22386 11 7.5C11 7.77614 11.2239 8 11.5 8Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$F = ["color"];
var BoxIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$F);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M12.5 2H2.5C2.22386 2 2 2.22386 2 2.5V12.5C2 12.7761 2.22386 13 2.5 13H12.5C12.7761 13 13 12.7761 13 12.5V2.5C13 2.22386 12.7761 2 12.5 2ZM2.5 1C1.67157 1 1 1.67157 1 2.5V12.5C1 13.3284 1.67157 14 2.5 14H12.5C13.3284 14 14 13.3284 14 12.5V2.5C14 1.67157 13.3284 1 12.5 1H2.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$T = ["color"];
var CheckIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$T);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$Y = ["color"];
var ChevronRightIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$Y);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$_ = ["color"];
var CircleIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$_);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M0.877075 7.49991C0.877075 3.84222 3.84222 0.877075 7.49991 0.877075C11.1576 0.877075 14.1227 3.84222 14.1227 7.49991C14.1227 11.1576 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1576 0.877075 7.49991ZM7.49991 1.82708C4.36689 1.82708 1.82708 4.36689 1.82708 7.49991C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49991C13.1727 4.36689 10.6329 1.82708 7.49991 1.82708Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$10 = ["color"];
var ClipboardIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$10);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M5 2V1H10V2H5ZM4.75 0C4.33579 0 4 0.335786 4 0.75V1H3.5C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H11.5C12.3284 14 13 13.3284 13 12.5V2.5C13 1.67157 12.3284 1 11.5 1H11V0.75C11 0.335786 10.6642 0 10.25 0H4.75ZM11 2V2.25C11 2.66421 10.6642 3 10.25 3H4.75C4.33579 3 4 2.66421 4 2.25V2H3.5C3.22386 2 3 2.22386 3 2.5V12.5C3 12.7761 3.22386 13 3.5 13H11.5C11.7761 13 12 12.7761 12 12.5V2.5C12 2.22386 11.7761 2 11.5 2H11Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1h = ["color"];
var CopyIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$1h);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M1 9.50006C1 10.3285 1.67157 11.0001 2.5 11.0001H4L4 10.0001H2.5C2.22386 10.0001 2 9.7762 2 9.50006L2 2.50006C2 2.22392 2.22386 2.00006 2.5 2.00006L9.5 2.00006C9.77614 2.00006 10 2.22392 10 2.50006V4.00002H5.5C4.67158 4.00002 4 4.67159 4 5.50002V12.5C4 13.3284 4.67158 14 5.5 14H12.5C13.3284 14 14 13.3284 14 12.5V5.50002C14 4.67159 13.3284 4.00002 12.5 4.00002H11V2.50006C11 1.67163 10.3284 1.00006 9.5 1.00006H2.5C1.67157 1.00006 1 1.67163 1 2.50006V9.50006ZM5 5.50002C5 5.22388 5.22386 5.00002 5.5 5.00002H12.5C12.7761 5.00002 13 5.22388 13 5.50002V12.5C13 12.7762 12.7761 13 12.5 13H5.5C5.22386 13 5 12.7762 5 12.5V5.50002Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1r = ["color"];
var Cross2Icon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$1r);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1x = ["color"];
var CursorArrowIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$1x);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M3.29227 0.048984C3.47033 -0.032338 3.67946 -0.00228214 3.8274 0.125891L12.8587 7.95026C13.0134 8.08432 13.0708 8.29916 13.0035 8.49251C12.9362 8.68586 12.7578 8.81866 12.5533 8.82768L9.21887 8.97474L11.1504 13.2187C11.2648 13.47 11.1538 13.7664 10.9026 13.8808L8.75024 14.8613C8.499 14.9758 8.20255 14.8649 8.08802 14.6137L6.15339 10.3703L3.86279 12.7855C3.72196 12.934 3.50487 12.9817 3.31479 12.9059C3.1247 12.8301 3 12.6461 3 12.4414V0.503792C3 0.308048 3.11422 0.130306 3.29227 0.048984ZM4 1.59852V11.1877L5.93799 9.14425C6.05238 9.02363 6.21924 8.96776 6.38319 8.99516C6.54715 9.02256 6.68677 9.12965 6.75573 9.2809L8.79056 13.7441L10.0332 13.178L8.00195 8.71497C7.93313 8.56376 7.94391 8.38824 8.03072 8.24659C8.11753 8.10494 8.26903 8.01566 8.435 8.00834L11.2549 7.88397L4 1.59852Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1I = ["color"];
var DotFilledIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$1I);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M9.875 7.5C9.875 8.81168 8.81168 9.875 7.5 9.875C6.18832 9.875 5.125 8.81168 5.125 7.5C5.125 6.18832 6.18832 5.125 7.5 5.125C8.81168 5.125 9.875 6.18832 9.875 7.5Z",
    fill: color
  }));
});
var _excluded$1J = ["color"];
var DotsHorizontalIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$1J);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M3.625 7.5C3.625 8.12132 3.12132 8.625 2.5 8.625C1.87868 8.625 1.375 8.12132 1.375 7.5C1.375 6.87868 1.87868 6.375 2.5 6.375C3.12132 6.375 3.625 6.87868 3.625 7.5ZM8.625 7.5C8.625 8.12132 8.12132 8.625 7.5 8.625C6.87868 8.625 6.375 8.12132 6.375 7.5C6.375 6.87868 6.87868 6.375 7.5 6.375C8.12132 6.375 8.625 6.87868 8.625 7.5ZM12.5 8.625C13.1213 8.625 13.625 8.12132 13.625 7.5C13.625 6.87868 13.1213 6.375 12.5 6.375C11.8787 6.375 11.375 6.87868 11.375 7.5C11.375 8.12132 11.8787 8.625 12.5 8.625Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$23 = ["color"];
var ExternalLinkIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$23);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M3 2C2.44772 2 2 2.44772 2 3V12C2 12.5523 2.44772 13 3 13H12C12.5523 13 13 12.5523 13 12V8.5C13 8.22386 12.7761 8 12.5 8C12.2239 8 12 8.22386 12 8.5V12H3V3L6.5 3C6.77614 3 7 2.77614 7 2.5C7 2.22386 6.77614 2 6.5 2H3ZM12.8536 2.14645C12.9015 2.19439 12.9377 2.24964 12.9621 2.30861C12.9861 2.36669 12.9996 2.4303 13 2.497L13 2.5V2.50049V5.5C13 5.77614 12.7761 6 12.5 6C12.2239 6 12 5.77614 12 5.5V3.70711L6.85355 8.85355C6.65829 9.04882 6.34171 9.04882 6.14645 8.85355C5.95118 8.65829 5.95118 8.34171 6.14645 8.14645L11.2929 3H9.5C9.22386 3 9 2.77614 9 2.5C9 2.22386 9.22386 2 9.5 2H12.4999H12.5C12.5678 2 12.6324 2.01349 12.6914 2.03794C12.7504 2.06234 12.8056 2.09851 12.8536 2.14645Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2m = ["color"];
var GitHubLogoIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$2m);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M7.49933 0.25C3.49635 0.25 0.25 3.49593 0.25 7.50024C0.25 10.703 2.32715 13.4206 5.2081 14.3797C5.57084 14.446 5.70302 14.2222 5.70302 14.0299C5.70302 13.8576 5.69679 13.4019 5.69323 12.797C3.67661 13.235 3.25112 11.825 3.25112 11.825C2.92132 10.9874 2.44599 10.7644 2.44599 10.7644C1.78773 10.3149 2.49584 10.3238 2.49584 10.3238C3.22353 10.375 3.60629 11.0711 3.60629 11.0711C4.25298 12.1788 5.30335 11.8588 5.71638 11.6732C5.78225 11.205 5.96962 10.8854 6.17658 10.7043C4.56675 10.5209 2.87415 9.89918 2.87415 7.12104C2.87415 6.32925 3.15677 5.68257 3.62053 5.17563C3.54576 4.99226 3.29697 4.25521 3.69174 3.25691C3.69174 3.25691 4.30015 3.06196 5.68522 3.99973C6.26337 3.83906 6.8838 3.75895 7.50022 3.75583C8.1162 3.75895 8.73619 3.83906 9.31523 3.99973C10.6994 3.06196 11.3069 3.25691 11.3069 3.25691C11.7026 4.25521 11.4538 4.99226 11.3795 5.17563C11.8441 5.68257 12.1245 6.32925 12.1245 7.12104C12.1245 9.9063 10.4292 10.5192 8.81452 10.6985C9.07444 10.9224 9.30633 11.3648 9.30633 12.0413C9.30633 13.0102 9.29742 13.7922 9.29742 14.0299C9.29742 14.2239 9.42828 14.4496 9.79591 14.3788C12.6746 13.4179 14.75 10.7025 14.75 7.50024C14.75 3.49593 11.5036 0.25 7.49933 0.25Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2p = ["color"];
var GroupIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$2p);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M1.44995 0.949951C1.31734 0.949951 1.19016 1.00263 1.0964 1.0964C1.00263 1.19017 0.949951 1.31735 0.949951 1.44995L0.949966 3.44995C0.949969 3.7261 1.17383 3.94995 1.44997 3.94995C1.72611 3.94995 1.94997 3.72609 1.94997 3.44995L1.94995 1.94995H3.44997C3.72611 1.94995 3.94997 1.72609 3.94997 1.44995C3.94997 1.17381 3.72611 0.949951 3.44997 0.949951H1.44995ZM5.94995 0.949951C5.67381 0.949951 5.44995 1.17381 5.44995 1.44995C5.44995 1.72609 5.67381 1.94995 5.94995 1.94995H8.94995C9.22609 1.94995 9.44995 1.72609 9.44995 1.44995C9.44995 1.17381 9.22609 0.949951 8.94995 0.949951H5.94995ZM5.44995 13.45C5.44995 13.1738 5.67381 12.95 5.94995 12.95H8.94995C9.22609 12.95 9.44995 13.1738 9.44995 13.45C9.44995 13.7261 9.22609 13.95 8.94995 13.95H5.94995C5.67381 13.95 5.44995 13.7261 5.44995 13.45ZM1.94995 5.94995C1.94995 5.67381 1.72609 5.44995 1.44995 5.44995C1.17381 5.44995 0.949951 5.67381 0.949951 5.94995V8.94995C0.949951 9.22609 1.17381 9.44995 1.44995 9.44995C1.72609 9.44995 1.94995 9.22609 1.94995 8.94995V5.94995ZM13.45 5.44995C13.7261 5.44995 13.95 5.67381 13.95 5.94995V8.94995C13.95 9.22609 13.7261 9.44995 13.45 9.44995C13.1738 9.44995 12.95 9.22609 12.95 8.94995V5.94995C12.95 5.67381 13.1738 5.44995 13.45 5.44995ZM11.45 0.949951C11.1738 0.949951 10.95 1.17381 10.95 1.44995C10.95 1.72609 11.1738 1.94995 11.45 1.94995H12.9499V3.44995C12.9499 3.72609 13.1738 3.94995 13.4499 3.94995C13.7261 3.94995 13.9499 3.72609 13.9499 3.44995V1.44995C13.9499 1.17381 13.7252 0.949951 13.449 0.949951H11.45ZM1.44995 10.95C1.72609 10.95 1.94995 11.1738 1.94995 11.45V12.95H3.44997C3.72611 12.95 3.94997 13.1738 3.94997 13.45C3.94997 13.7261 3.72611 13.95 3.44997 13.95H1.44995C1.17381 13.95 0.949951 13.7261 0.949951 13.45V11.45C0.949951 11.1738 1.17381 10.95 1.44995 10.95ZM13.95 11.45C13.95 11.1738 13.7261 10.95 13.45 10.95C13.1738 10.9499 12.95 11.1738 12.95 11.4499L12.9491 12.95H11.45C11.1738 12.95 10.95 13.1738 10.95 13.45C10.95 13.7261 11.1738 13.95 11.45 13.95H13.4499C13.7261 13.95 13.9499 13.7261 13.9499 13.45L13.95 11.45Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2s = ["color"];
var HamburgerMenuIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$2s);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M1.5 3C1.22386 3 1 3.22386 1 3.5C1 3.77614 1.22386 4 1.5 4H13.5C13.7761 4 14 3.77614 14 3.5C14 3.22386 13.7761 3 13.5 3H1.5ZM1 7.5C1 7.22386 1.22386 7 1.5 7H13.5C13.7761 7 14 7.22386 14 7.5C14 7.77614 13.7761 8 13.5 8H1.5C1.22386 8 1 7.77614 1 7.5ZM1 11.5C1 11.2239 1.22386 11 1.5 11H13.5C13.7761 11 14 11.2239 14 11.5C14 11.7761 13.7761 12 13.5 12H1.5C1.22386 12 1 11.7761 1 11.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2w = ["color"];
var HeartFilledIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$2w);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M1.35248 4.90532C1.35248 2.94498 2.936 1.35248 4.89346 1.35248C6.25769 1.35248 6.86058 1.92336 7.50002 2.93545C8.13946 1.92336 8.74235 1.35248 10.1066 1.35248C12.064 1.35248 13.6476 2.94498 13.6476 4.90532C13.6476 6.74041 12.6013 8.50508 11.4008 9.96927C10.2636 11.3562 8.92194 12.5508 8.00601 13.3664C7.94645 13.4194 7.88869 13.4709 7.83291 13.5206C7.64324 13.6899 7.3568 13.6899 7.16713 13.5206C7.11135 13.4709 7.05359 13.4194 6.99403 13.3664C6.0781 12.5508 4.73641 11.3562 3.59926 9.96927C2.39872 8.50508 1.35248 6.74041 1.35248 4.90532Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2C = ["color"];
var ImageIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$2C);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M2.5 1H12.5C13.3284 1 14 1.67157 14 2.5V12.5C14 13.3284 13.3284 14 12.5 14H2.5C1.67157 14 1 13.3284 1 12.5V2.5C1 1.67157 1.67157 1 2.5 1ZM2.5 2C2.22386 2 2 2.22386 2 2.5V8.3636L3.6818 6.6818C3.76809 6.59551 3.88572 6.54797 4.00774 6.55007C4.12975 6.55216 4.24568 6.60372 4.32895 6.69293L7.87355 10.4901L10.6818 7.6818C10.8575 7.50607 11.1425 7.50607 11.3182 7.6818L13 9.3636V2.5C13 2.22386 12.7761 2 12.5 2H2.5ZM2 12.5V9.6364L3.98887 7.64753L7.5311 11.4421L8.94113 13H2.5C2.22386 13 2 12.7761 2 12.5ZM12.5 13H10.155L8.48336 11.153L11 8.6364L13 10.6364V12.5C13 12.7761 12.7761 13 12.5 13ZM6.64922 5.5C6.64922 5.03013 7.03013 4.64922 7.5 4.64922C7.96987 4.64922 8.35078 5.03013 8.35078 5.5C8.35078 5.96987 7.96987 6.35078 7.5 6.35078C7.03013 6.35078 6.64922 5.96987 6.64922 5.5ZM7.5 3.74922C6.53307 3.74922 5.74922 4.53307 5.74922 5.5C5.74922 6.46693 6.53307 7.25078 7.5 7.25078C8.46693 7.25078 9.25078 6.46693 9.25078 5.5C9.25078 4.53307 8.46693 3.74922 7.5 3.74922Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2_ = ["color"];
var LockClosedIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$2_);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M5 4.63601C5 3.76031 5.24219 3.1054 5.64323 2.67357C6.03934 2.24705 6.64582 1.9783 7.5014 1.9783C8.35745 1.9783 8.96306 2.24652 9.35823 2.67208C9.75838 3.10299 10 3.75708 10 4.63325V5.99999H5V4.63601ZM4 5.99999V4.63601C4 3.58148 4.29339 2.65754 4.91049 1.99307C5.53252 1.32329 6.42675 0.978302 7.5014 0.978302C8.57583 0.978302 9.46952 1.32233 10.091 1.99162C10.7076 2.65557 11 3.57896 11 4.63325V5.99999H12C12.5523 5.99999 13 6.44771 13 6.99999V13C13 13.5523 12.5523 14 12 14H3C2.44772 14 2 13.5523 2 13V6.99999C2 6.44771 2.44772 5.99999 3 5.99999H4ZM3 6.99999H12V13H3V6.99999Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2$ = ["color"];
var LockOpen1Icon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$2$);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M7.4986 0C6.3257 0 5.36107 0.38943 4.73753 1.19361C4.23745 1.83856 4 2.68242 4 3.63325H5C5 2.84313 5.19691 2.23312 5.5278 1.80636C5.91615 1.30552 6.55152 1 7.4986 1C8.35683 1 8.96336 1.26502 9.35846 1.68623C9.75793 2.11211 10 2.76044 10 3.63601V6H3C2.44772 6 2 6.44772 2 7V13C2 13.5523 2.44772 14 3 14H12C12.5523 14 13 13.5523 13 13V7C13 6.44771 12.5523 6 12 6H11V3.63601C11 2.58135 10.7065 1.66167 10.0878 1.0021C9.46477 0.337871 8.57061 0 7.4986 0ZM3 7H12V13H3V7Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3b = ["color"];
var MixerVerticalIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$3b);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M5 1.5C5 1.22386 4.77614 1 4.5 1C4.22386 1 4 1.22386 4 1.5L4 7C4 7.01671 4.00082 7.03323 4.00242 7.04952C2.86009 7.28022 2 8.28967 2 9.5C2 10.7103 2.86009 11.7198 4.00242 11.9505C4.00082 11.9668 4 11.9833 4 12V13.5C4 13.7761 4.22386 14 4.5 14C4.77614 14 5 13.7761 5 13.5V12C5 11.9833 4.99918 11.9668 4.99758 11.9505C6.1399 11.7198 7 10.7103 7 9.5C7 8.28967 6.1399 7.28022 4.99758 7.04952C4.99918 7.03323 5 7.01671 5 7L5 1.5ZM11 1.5C11 1.22386 10.7761 1 10.5 1C10.2239 1 10 1.22386 10 1.5V3C10 3.01671 10.0008 3.03323 10.0024 3.04952C8.8601 3.28022 8 4.28967 8 5.5C8 6.71033 8.8601 7.71978 10.0024 7.95048C10.0008 7.96677 10 7.98329 10 8V13.5C10 13.7761 10.2239 14 10.5 14C10.7761 14 11 13.7761 11 13.5V8C11 7.98329 10.9992 7.96677 10.9976 7.95048C12.1399 7.71978 13 6.71033 13 5.5C13 4.28967 12.1399 3.28022 10.9976 3.04952C10.9992 3.03323 11 3.01671 11 3V1.5ZM4.5 8C3.67157 8 3 8.67157 3 9.5C3 10.3284 3.67157 11 4.5 11C5.32843 11 6 10.3284 6 9.5C6 8.67157 5.32843 8 4.5 8ZM9 5.5C9 4.67157 9.67157 4 10.5 4C11.3284 4 12 4.67157 12 5.5C12 6.32843 11.3284 7 10.5 7C9.67157 7 9 6.32843 9 5.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3n = ["color"];
var Pencil1Icon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$3n);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M11.8536 1.14645C11.6583 0.951184 11.3417 0.951184 11.1465 1.14645L3.71455 8.57836C3.62459 8.66832 3.55263 8.77461 3.50251 8.89155L2.04044 12.303C1.9599 12.491 2.00189 12.709 2.14646 12.8536C2.29103 12.9981 2.50905 13.0401 2.69697 12.9596L6.10847 11.4975C6.2254 11.4474 6.3317 11.3754 6.42166 11.2855L13.8536 3.85355C14.0488 3.65829 14.0488 3.34171 13.8536 3.14645L11.8536 1.14645ZM4.42166 9.28547L11.5 2.20711L12.7929 3.5L5.71455 10.5784L4.21924 11.2192L3.78081 10.7808L4.42166 9.28547Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3o = ["color"];
var Pencil2Icon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$3o);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M12.1464 1.14645C12.3417 0.951184 12.6583 0.951184 12.8535 1.14645L14.8535 3.14645C15.0488 3.34171 15.0488 3.65829 14.8535 3.85355L10.9109 7.79618C10.8349 7.87218 10.7471 7.93543 10.651 7.9835L6.72359 9.94721C6.53109 10.0435 6.29861 10.0057 6.14643 9.85355C5.99425 9.70137 5.95652 9.46889 6.05277 9.27639L8.01648 5.34897C8.06455 5.25283 8.1278 5.16507 8.2038 5.08907L12.1464 1.14645ZM12.5 2.20711L8.91091 5.79618L7.87266 7.87267L8.12731 8.12732L10.2038 7.08907L13.7929 3.5L12.5 2.20711ZM9.99998 2L8.99998 3H4.9C4.47171 3 4.18056 3.00039 3.95552 3.01877C3.73631 3.03668 3.62421 3.06915 3.54601 3.10899C3.35785 3.20487 3.20487 3.35785 3.10899 3.54601C3.06915 3.62421 3.03669 3.73631 3.01878 3.95552C3.00039 4.18056 3 4.47171 3 4.9V11.1C3 11.5283 3.00039 11.8194 3.01878 12.0445C3.03669 12.2637 3.06915 12.3758 3.10899 12.454C3.20487 12.6422 3.35785 12.7951 3.54601 12.891C3.62421 12.9309 3.73631 12.9633 3.95552 12.9812C4.18056 12.9996 4.47171 13 4.9 13H11.1C11.5283 13 11.8194 12.9996 12.0445 12.9812C12.2637 12.9633 12.3758 12.9309 12.454 12.891C12.6422 12.7951 12.7951 12.6422 12.891 12.454C12.9309 12.3758 12.9633 12.2637 12.9812 12.0445C12.9996 11.8194 13 11.5283 13 11.1V6.99998L14 5.99998V11.1V11.1207C14 11.5231 14 11.8553 13.9779 12.1259C13.9549 12.407 13.9057 12.6653 13.782 12.908C13.5903 13.2843 13.2843 13.5903 12.908 13.782C12.6653 13.9057 12.407 13.9549 12.1259 13.9779C11.8553 14 11.5231 14 11.1207 14H11.1H4.9H4.87934C4.47686 14 4.14468 14 3.87409 13.9779C3.59304 13.9549 3.33469 13.9057 3.09202 13.782C2.7157 13.5903 2.40973 13.2843 2.21799 12.908C2.09434 12.6653 2.04506 12.407 2.0221 12.1259C1.99999 11.8553 1.99999 11.5231 2 11.1207V11.1206V11.1V4.9V4.87935V4.87932V4.87931C1.99999 4.47685 1.99999 4.14468 2.0221 3.87409C2.04506 3.59304 2.09434 3.33469 2.21799 3.09202C2.40973 2.71569 2.7157 2.40973 3.09202 2.21799C3.33469 2.09434 3.59304 2.04506 3.87409 2.0221C4.14468 1.99999 4.47685 1.99999 4.87932 2H4.87935H4.9H9.99998Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3s = ["color"];
var PinBottomIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$3s);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M13.5 13.95C13.7485 13.95 13.95 13.7485 13.95 13.5C13.95 13.2514 13.7485 13.05 13.5 13.05L1.49995 13.05C1.25142 13.05 1.04995 13.2514 1.04995 13.5C1.04995 13.7485 1.25142 13.95 1.49995 13.95L13.5 13.95ZM11.0681 7.5683C11.2439 7.39257 11.2439 7.10764 11.0681 6.93191C10.8924 6.75617 10.6075 6.75617 10.4317 6.93191L7.94993 9.41371L7.94993 1.49998C7.94993 1.25146 7.74846 1.04998 7.49993 1.04998C7.2514 1.04998 7.04993 1.25146 7.04993 1.49998L7.04993 9.41371L4.56813 6.93191C4.39239 6.75617 4.10746 6.75617 3.93173 6.93191C3.75599 7.10764 3.75599 7.39257 3.93173 7.5683L7.18173 10.8183C7.35746 10.994 7.64239 10.994 7.81812 10.8183L11.0681 7.5683Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3v = ["color"];
var PinTopIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$3v);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M1.50005 1.05005C1.25152 1.05005 1.05005 1.25152 1.05005 1.50005C1.05005 1.74858 1.25152 1.95005 1.50005 1.95005L13.5 1.95005C13.7486 1.95005 13.95 1.74858 13.95 1.50005C13.95 1.25152 13.7486 1.05005 13.5 1.05005H1.50005ZM3.93188 7.43169C3.75614 7.60743 3.75614 7.89236 3.93188 8.06809C4.10761 8.24383 4.39254 8.24383 4.56827 8.06809L7.05007 5.58629V13.5C7.05007 13.7485 7.25155 13.95 7.50007 13.95C7.7486 13.95 7.95007 13.7485 7.95007 13.5L7.95007 5.58629L10.4319 8.06809C10.6076 8.24383 10.8925 8.24383 11.0683 8.06809C11.244 7.89235 11.244 7.60743 11.0683 7.43169L7.81827 4.18169C7.64254 4.00596 7.35761 4.00596 7.18188 4.18169L3.93188 7.43169Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3x = ["color"];
var PlusIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$3x);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M8 2.75C8 2.47386 7.77614 2.25 7.5 2.25C7.22386 2.25 7 2.47386 7 2.75V7H2.75C2.47386 7 2.25 7.22386 2.25 7.5C2.25 7.77614 2.47386 8 2.75 8H7V12.25C7 12.5261 7.22386 12.75 7.5 12.75C7.77614 12.75 8 12.5261 8 12.25V8H12.25C12.5261 8 12.75 7.77614 12.75 7.5C12.75 7.22386 12.5261 7 12.25 7H8V2.75Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3z = ["color"];
var QuestionMarkIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$3z);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M5.07505 4.10001C5.07505 2.91103 6.25727 1.92502 7.50005 1.92502C8.74283 1.92502 9.92505 2.91103 9.92505 4.10001C9.92505 5.19861 9.36782 5.71436 8.61854 6.37884L8.58757 6.4063C7.84481 7.06467 6.92505 7.87995 6.92505 9.5C6.92505 9.81757 7.18248 10.075 7.50005 10.075C7.81761 10.075 8.07505 9.81757 8.07505 9.5C8.07505 8.41517 8.62945 7.90623 9.38156 7.23925L9.40238 7.22079C10.1496 6.55829 11.075 5.73775 11.075 4.10001C11.075 2.12757 9.21869 0.775024 7.50005 0.775024C5.7814 0.775024 3.92505 2.12757 3.92505 4.10001C3.92505 4.41758 4.18249 4.67501 4.50005 4.67501C4.81761 4.67501 5.07505 4.41758 5.07505 4.10001ZM7.50005 13.3575C7.9833 13.3575 8.37505 12.9657 8.37505 12.4825C8.37505 11.9992 7.9833 11.6075 7.50005 11.6075C7.0168 11.6075 6.62505 11.9992 6.62505 12.4825C6.62505 12.9657 7.0168 13.3575 7.50005 13.3575Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3I = ["color"];
var RotateCounterClockwiseIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$3I);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M7.59664 2.93628C7.76085 3.06401 8.00012 2.94698 8.00012 2.73895V1.99998C9.98143 2 11.1848 2.3637 11.9105 3.08945C12.6363 3.81522 13 5.0186 13 6.99998C13 7.27613 13.2239 7.49998 13.5 7.49998C13.7761 7.49998 14 7.27613 14 6.99998C14 4.9438 13.6325 3.39719 12.6176 2.38234C11.6028 1.36752 10.0562 0.999999 8.00012 0.999984V0.261266C8.00012 0.0532293 7.76085 -0.0637944 7.59664 0.063928L6.00384 1.30277C5.87516 1.40286 5.87516 1.59735 6.00384 1.69744L7.59664 2.93628ZM9.5 5H2.5C2.22386 5 2 5.22386 2 5.5V12.5C2 12.7761 2.22386 13 2.5 13H9.5C9.77614 13 10 12.7761 10 12.5V5.5C10 5.22386 9.77614 5 9.5 5ZM2.5 4C1.67157 4 1 4.67157 1 5.5V12.5C1 13.3284 1.67157 14 2.5 14H9.5C10.3284 14 11 13.3284 11 12.5V5.5C11 4.67157 10.3284 4 9.5 4H2.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$42 = ["color"];
var SpaceEvenlyHorizontallyIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$42);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M14.4999 0.999992C14.2237 0.999992 13.9999 1.22385 13.9999 1.49999L13.9999 13.4999C13.9999 13.776 14.2237 13.9999 14.4999 13.9999C14.776 13.9999 14.9999 13.776 14.9999 13.4999L14.9999 1.49999C14.9999 1.22385 14.776 0.999992 14.4999 0.999992ZM0.499996 0.999992C0.223856 0.999992 -9.78509e-09 1.22385 -2.18556e-08 1.49999L4.07279e-07 13.4999C3.95208e-07 13.776 0.223855 13.9999 0.499996 13.9999C0.776136 13.9999 0.999992 13.776 0.999992 13.4999L0.999992 1.49999C0.999992 1.22385 0.776136 0.999992 0.499996 0.999992ZM1.99998 6.99994C1.99998 6.44766 2.44769 5.99995 2.99998 5.99995L5.99995 5.99995C6.55223 5.99995 6.99994 6.44766 6.99994 6.99994L6.99994 7.99993C6.99994 8.55221 6.55223 8.99992 5.99995 8.99992L2.99998 8.99992C2.4477 8.99992 1.99998 8.55221 1.99998 7.99993L1.99998 6.99994ZM8.99993 5.99995C8.44765 5.99995 7.99993 6.44766 7.99993 6.99994L7.99993 7.99993C7.99993 8.55221 8.44765 8.99992 8.99993 8.99992L11.9999 8.99992C12.5522 8.99992 12.9999 8.55221 12.9999 7.99993L12.9999 6.99994C12.9999 6.44766 12.5522 5.99995 11.9999 5.99995L8.99993 5.99995Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$43 = ["color"];
var SpaceEvenlyVerticallyIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$43);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M0.999878 0.5C0.999878 0.223858 1.22374 0 1.49988 0H13.4999C13.776 0 13.9999 0.223858 13.9999 0.5C13.9999 0.776142 13.776 1 13.4999 1H1.49988C1.22374 1 0.999878 0.776142 0.999878 0.5ZM7 2C6.44772 2 6 2.44772 6 3V6C6 6.55228 6.44772 7 7 7H8C8.55228 7 9 6.55228 9 6V3C9 2.44772 8.55228 2 8 2H7ZM7 8C6.44772 8 6 8.44771 6 9V12C6 12.5523 6.44772 13 7 13H8C8.55228 13 9 12.5523 9 12V9C9 8.44772 8.55228 8 8 8H7ZM1.49988 14C1.22374 14 0.999878 14.2239 0.999878 14.5C0.999878 14.7761 1.22374 15 1.49988 15H13.4999C13.776 15 13.9999 14.7761 13.9999 14.5C13.9999 14.2239 13.776 14 13.4999 14H1.49988Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$48 = ["color"];
var SquareIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$48);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M1 1H1.5H13.5H14V1.5V13.5V14H13.5H1.5H1V13.5V1.5V1ZM2 2V13H13V2H2Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4f = ["color"];
var StretchHorizontallyIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$4f);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M14.4999 0.999992C14.2237 0.999992 13.9999 1.22385 13.9999 1.49999L13.9999 5.99995L0.999992 5.99995L0.999992 1.49999C0.999992 1.22385 0.776136 0.999992 0.499996 0.999992C0.223856 0.999992 -9.78509e-09 1.22385 -2.18556e-08 1.49999L4.07279e-07 13.4999C3.95208e-07 13.776 0.223855 13.9999 0.499996 13.9999C0.776136 13.9999 0.999992 13.776 0.999992 13.4999L0.999992 8.99992L13.9999 8.99992L13.9999 13.4999C13.9999 13.776 14.2237 13.9999 14.4999 13.9999C14.776 13.9999 14.9999 13.776 14.9999 13.4999L14.9999 1.49999C14.9999 1.22385 14.776 0.999992 14.4999 0.999992Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4g = ["color"];
var StretchVerticallyIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$4g);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M0.999878 0.5C0.999878 0.223858 1.22374 0 1.49988 0H13.4999C13.776 0 13.9999 0.223858 13.9999 0.5C13.9999 0.776142 13.776 1 13.4999 1H6H1.49988C1.22374 1 0.999878 0.776142 0.999878 0.5ZM9 14V1L6 1V14H1.49988C1.22374 14 0.999878 14.2239 0.999878 14.5C0.999878 14.7761 1.22374 15 1.49988 15H13.4999C13.776 15 13.9999 14.7761 13.9999 14.5C13.9999 14.2239 13.776 14 13.4999 14H9Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4n = ["color"];
var TextIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$4n);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M3.94993 2.95002L3.94993 4.49998C3.94993 4.74851 3.74845 4.94998 3.49993 4.94998C3.2514 4.94998 3.04993 4.74851 3.04993 4.49998V2.50004C3.04993 2.45246 3.05731 2.40661 3.07099 2.36357C3.12878 2.18175 3.29897 2.05002 3.49993 2.05002H11.4999C11.6553 2.05002 11.7922 2.12872 11.8731 2.24842C11.9216 2.32024 11.9499 2.40682 11.9499 2.50002L11.9499 2.50004V4.49998C11.9499 4.74851 11.7485 4.94998 11.4999 4.94998C11.2514 4.94998 11.0499 4.74851 11.0499 4.49998V2.95002H8.04993V12.05H9.25428C9.50281 12.05 9.70428 12.2515 9.70428 12.5C9.70428 12.7486 9.50281 12.95 9.25428 12.95H5.75428C5.50575 12.95 5.30428 12.7486 5.30428 12.5C5.30428 12.2515 5.50575 12.05 5.75428 12.05H6.94993V2.95002H3.94993Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4p = ["color"];
var TextAlignCenterIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$4p);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM4 7.5C4 7.22386 4.22386 7 4.5 7H10.5C10.7761 7 11 7.22386 11 7.5C11 7.77614 10.7761 8 10.5 8H4.5C4.22386 8 4 7.77614 4 7.5ZM3 10.5C3 10.2239 3.22386 10 3.5 10H11.5C11.7761 10 12 10.2239 12 10.5C12 10.7761 11.7761 11 11.5 11H3.5C3.22386 11 3 10.7761 3 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4q = ["color"];
var TextAlignJustifyIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$4q);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M2.5 4C2.22386 4 2 4.22386 2 4.5C2 4.77614 2.22386 5 2.5 5H12.5C12.7761 5 13 4.77614 13 4.5C13 4.22386 12.7761 4 12.5 4H2.5ZM2 7.5C2 7.22386 2.22386 7 2.5 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H2.5C2.22386 8 2 7.77614 2 7.5ZM2 10.5C2 10.2239 2.22386 10 2.5 10H12.5C12.7761 10 13 10.2239 13 10.5C13 10.7761 12.7761 11 12.5 11H2.5C2.22386 11 2 10.7761 2 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4r = ["color"];
var TextAlignLeftIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$4r);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM2 7.5C2 7.22386 2.22386 7 2.5 7H7.5C7.77614 7 8 7.22386 8 7.5C8 7.77614 7.77614 8 7.5 8H2.5C2.22386 8 2 7.77614 2 7.5ZM2 10.5C2 10.2239 2.22386 10 2.5 10H10.5C10.7761 10 11 10.2239 11 10.5C11 10.7761 10.7761 11 10.5 11H2.5C2.22386 11 2 10.7761 2 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4t = ["color"];
var TextAlignRightIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$4t);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM7 7.5C7 7.22386 7.22386 7 7.5 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H7.5C7.22386 8 7 7.77614 7 7.5ZM4 10.5C4 10.2239 4.22386 10 4.5 10H12.5C12.7761 10 13 10.2239 13 10.5C13 10.7761 12.7761 11 12.5 11H4.5C4.22386 11 4 10.7761 4 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4L = ["color"];
var TwitterLogoIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$4L);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M7.23336 4.69629C7.23336 2.96884 8.63335 1.56857 10.36 1.56857C11.3736 1.56857 12.183 2.04804 12.7254 2.74385C13.3079 2.62467 13.8557 2.40913 14.3513 2.11508C14.1559 2.72598 13.7424 3.2396 13.2033 3.56463C13.2038 3.56568 13.2042 3.56674 13.2047 3.56779C13.7334 3.50361 14.2364 3.36302 14.7048 3.15546L14.7037 3.15715C14.3667 3.66183 13.9431 4.10736 13.4561 4.47034C13.4823 4.64672 13.4956 4.82427 13.4956 5.00079C13.4956 8.6871 10.6873 12.9746 5.52122 12.9746C3.93906 12.9746 2.46544 12.511 1.22505 11.7152C0.992632 11.5661 0.925108 11.2568 1.07423 11.0244C1.0874 11.0038 1.10183 10.9846 1.11734 10.9666C1.20582 10.8202 1.37438 10.7309 1.5554 10.7522C2.47066 10.8601 3.38568 10.7485 4.19219 10.3962C3.39226 10.0434 2.77129 9.35975 2.50204 8.51974C2.45359 8.3686 2.48835 8.20311 2.59351 8.08422C2.59716 8.0801 2.60087 8.07606 2.60464 8.0721C1.96391 7.50819 1.55973 6.68208 1.55973 5.76143V5.72759C1.55973 5.56814 1.64411 5.42059 1.78155 5.33974C1.82671 5.31317 1.87537 5.29511 1.92532 5.28558C1.70549 4.86154 1.58116 4.37984 1.58116 3.86958C1.58116 3.40165 1.58384 2.81192 1.91332 2.28081C1.98718 2.16175 2.10758 2.08915 2.2364 2.07195C2.42588 2.01237 2.64087 2.06969 2.77406 2.23302C3.86536 3.57126 5.44066 4.49583 7.23366 4.73961L7.23336 4.69629ZM5.52122 11.9746C4.73387 11.9746 3.97781 11.8435 3.27248 11.6023C4.13012 11.4538 4.95307 11.1159 5.66218 10.5602C5.81211 10.4427 5.87182 10.2435 5.81126 10.0629C5.7507 9.88234 5.583 9.75943 5.39255 9.75607C4.68968 9.74366 4.06712 9.39716 3.67793 8.86845C3.86828 8.85306 4.05428 8.82039 4.23445 8.77167C4.43603 8.71716 4.57363 8.53114 4.56674 8.32243C4.55985 8.11372 4.41029 7.93718 4.20555 7.89607C3.42694 7.73977 2.79883 7.16764 2.56169 6.42174C2.76255 6.47025 2.97102 6.4991 3.18482 6.5061C3.38563 6.51267 3.56646 6.38533 3.62795 6.19405C3.68943 6.00277 3.61666 5.79391 3.44963 5.68224C2.86523 5.29155 2.48116 4.62464 2.48116 3.86958C2.48116 3.70213 2.48352 3.55268 2.49355 3.41719C3.85115 4.79913 5.70873 5.68931 7.77588 5.79338C7.93225 5.80126 8.08328 5.73543 8.18395 5.61553C8.28463 5.49562 8.32332 5.33548 8.28851 5.18284C8.25255 5.02517 8.23336 4.86284 8.23336 4.69629C8.23336 3.52085 9.18591 2.56857 10.36 2.56857C11.5943 2.56857 12.4956 3.71208 12.4956 5.00079C12.4956 8.25709 10.0202 11.9746 5.52122 11.9746Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4R = ["color"];
var VercelLogoIcon = /* @__PURE__ */ (0, import_react48.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose(_ref, _excluded$4R);
  return (0, import_react48.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react48.createElement)("path", {
    d: "M7.49998 1L6.92321 2.00307L1.17498 12L0.599976 13H1.7535H13.2464H14.4L13.825 12L8.07674 2.00307L7.49998 1ZM7.49998 3.00613L2.3285 12H12.6714L7.49998 3.00613Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});

// node_modules/@tldraw/tldraw/dist/index.mjs
var C6 = __toESM(require_react(), 1);

// node_modules/@stitches/react/dist/index.mjs
var import_react49 = __toESM(require_react(), 1);
var e3 = "colors";
var t3 = "sizes";
var r3 = "space";
var n3 = { gap: r3, gridGap: r3, columnGap: r3, gridColumnGap: r3, rowGap: r3, gridRowGap: r3, inset: r3, insetBlock: r3, insetBlockEnd: r3, insetBlockStart: r3, insetInline: r3, insetInlineEnd: r3, insetInlineStart: r3, margin: r3, marginTop: r3, marginRight: r3, marginBottom: r3, marginLeft: r3, marginBlock: r3, marginBlockEnd: r3, marginBlockStart: r3, marginInline: r3, marginInlineEnd: r3, marginInlineStart: r3, padding: r3, paddingTop: r3, paddingRight: r3, paddingBottom: r3, paddingLeft: r3, paddingBlock: r3, paddingBlockEnd: r3, paddingBlockStart: r3, paddingInline: r3, paddingInlineEnd: r3, paddingInlineStart: r3, top: r3, right: r3, bottom: r3, left: r3, scrollMargin: r3, scrollMarginTop: r3, scrollMarginRight: r3, scrollMarginBottom: r3, scrollMarginLeft: r3, scrollMarginX: r3, scrollMarginY: r3, scrollMarginBlock: r3, scrollMarginBlockEnd: r3, scrollMarginBlockStart: r3, scrollMarginInline: r3, scrollMarginInlineEnd: r3, scrollMarginInlineStart: r3, scrollPadding: r3, scrollPaddingTop: r3, scrollPaddingRight: r3, scrollPaddingBottom: r3, scrollPaddingLeft: r3, scrollPaddingX: r3, scrollPaddingY: r3, scrollPaddingBlock: r3, scrollPaddingBlockEnd: r3, scrollPaddingBlockStart: r3, scrollPaddingInline: r3, scrollPaddingInlineEnd: r3, scrollPaddingInlineStart: r3, fontSize: "fontSizes", background: e3, backgroundColor: e3, backgroundImage: e3, borderImage: e3, border: e3, borderBlock: e3, borderBlockEnd: e3, borderBlockStart: e3, borderBottom: e3, borderBottomColor: e3, borderColor: e3, borderInline: e3, borderInlineEnd: e3, borderInlineStart: e3, borderLeft: e3, borderLeftColor: e3, borderRight: e3, borderRightColor: e3, borderTop: e3, borderTopColor: e3, caretColor: e3, color: e3, columnRuleColor: e3, fill: e3, outline: e3, outlineColor: e3, stroke: e3, textDecorationColor: e3, fontFamily: "fonts", fontWeight: "fontWeights", lineHeight: "lineHeights", letterSpacing: "letterSpacings", blockSize: t3, minBlockSize: t3, maxBlockSize: t3, inlineSize: t3, minInlineSize: t3, maxInlineSize: t3, width: t3, minWidth: t3, maxWidth: t3, height: t3, minHeight: t3, maxHeight: t3, flexBasis: t3, gridTemplateColumns: t3, gridTemplateRows: t3, borderWidth: "borderWidths", borderTopWidth: "borderWidths", borderRightWidth: "borderWidths", borderBottomWidth: "borderWidths", borderLeftWidth: "borderWidths", borderStyle: "borderStyles", borderTopStyle: "borderStyles", borderRightStyle: "borderStyles", borderBottomStyle: "borderStyles", borderLeftStyle: "borderStyles", borderRadius: "radii", borderTopLeftRadius: "radii", borderTopRightRadius: "radii", borderBottomRightRadius: "radii", borderBottomLeftRadius: "radii", boxShadow: "shadows", textShadow: "shadows", transition: "transitions", zIndex: "zIndices" };
var i3 = (e10, t10) => typeof t10 == "function" ? { "()": Function.prototype.toString.call(t10) } : t10;
var o3 = () => {
  const e10 = /* @__PURE__ */ Object.create(null);
  return (t10, r10, ...n10) => {
    const o10 = ((e11) => JSON.stringify(e11, i3))(t10);
    return o10 in e10 ? e10[o10] : e10[o10] = r10(t10, ...n10);
  };
};
var l5 = Symbol.for("sxs.internal");
var s3 = (e10, t10) => Object.defineProperties(e10, Object.getOwnPropertyDescriptors(t10));
var a5 = (e10) => {
  for (const t10 in e10)
    return true;
  return false;
};
var { hasOwnProperty: c3 } = Object.prototype;
var d4 = (e10) => e10.includes("-") ? e10 : e10.replace(/[A-Z]/g, (e11) => "-" + e11.toLowerCase());
var g5 = /\s+(?![^()]*\))/;
var p4 = (e10) => (t10) => e10(...typeof t10 == "string" ? String(t10).split(g5) : [t10]);
var u3 = { appearance: (e10) => ({ WebkitAppearance: e10, appearance: e10 }), backfaceVisibility: (e10) => ({ WebkitBackfaceVisibility: e10, backfaceVisibility: e10 }), backdropFilter: (e10) => ({ WebkitBackdropFilter: e10, backdropFilter: e10 }), backgroundClip: (e10) => ({ WebkitBackgroundClip: e10, backgroundClip: e10 }), boxDecorationBreak: (e10) => ({ WebkitBoxDecorationBreak: e10, boxDecorationBreak: e10 }), clipPath: (e10) => ({ WebkitClipPath: e10, clipPath: e10 }), content: (e10) => ({ content: e10.includes('"') || e10.includes("'") || /^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e10) ? e10 : `"${e10}"` }), hyphens: (e10) => ({ WebkitHyphens: e10, hyphens: e10 }), maskImage: (e10) => ({ WebkitMaskImage: e10, maskImage: e10 }), maskSize: (e10) => ({ WebkitMaskSize: e10, maskSize: e10 }), tabSize: (e10) => ({ MozTabSize: e10, tabSize: e10 }), textSizeAdjust: (e10) => ({ WebkitTextSizeAdjust: e10, textSizeAdjust: e10 }), userSelect: (e10) => ({ WebkitUserSelect: e10, userSelect: e10 }), marginBlock: p4((e10, t10) => ({ marginBlockStart: e10, marginBlockEnd: t10 || e10 })), marginInline: p4((e10, t10) => ({ marginInlineStart: e10, marginInlineEnd: t10 || e10 })), maxSize: p4((e10, t10) => ({ maxBlockSize: e10, maxInlineSize: t10 || e10 })), minSize: p4((e10, t10) => ({ minBlockSize: e10, minInlineSize: t10 || e10 })), paddingBlock: p4((e10, t10) => ({ paddingBlockStart: e10, paddingBlockEnd: t10 || e10 })), paddingInline: p4((e10, t10) => ({ paddingInlineStart: e10, paddingInlineEnd: t10 || e10 })) };
var h4 = /([\d.]+)([^]*)/;
var f3 = (e10, t10) => e10.length ? e10.reduce((e11, r10) => (e11.push(...t10.map((e12) => e12.includes("&") ? e12.replace(/&/g, /[ +>|~]/.test(r10) && /&.*&/.test(e12) ? `:is(${r10})` : r10) : r10 + " " + e12)), e11), []) : t10;
var m4 = (e10, t10) => e10 in b4 && typeof t10 == "string" ? t10.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/, (t11, r10, n10, i10) => r10 + (n10 === "stretch" ? `-moz-available${i10};${d4(e10)}:${r10}-webkit-fill-available` : `-moz-fit-content${i10};${d4(e10)}:${r10}fit-content`) + i10) : String(t10);
var b4 = { blockSize: 1, height: 1, inlineSize: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, width: 1 };
var S3 = (e10) => e10 ? e10 + "-" : "";
var k4 = (e10, t10, r10) => e10.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g, (e11, n10, i10, o10, l10) => o10 == "$" == !!i10 ? e11 : (n10 || o10 == "--" ? "calc(" : "") + "var(--" + (o10 === "$" ? S3(t10) + (l10.includes("$") ? "" : S3(r10)) + l10.replace(/\$/g, "-") : l10) + ")" + (n10 || o10 == "--" ? "*" + (n10 || "") + (i10 || "1") + ")" : ""));
var y4 = /\s*,\s*(?![^()]*\))/;
var B3 = Object.prototype.toString;
var $4 = (e10, t10, r10, n10, i10) => {
  let o10, l10, s10;
  const a10 = (e11, t11, r11) => {
    let c10, g10;
    const p10 = (e12) => {
      for (c10 in e12) {
        const R10 = c10.charCodeAt(0) === 64, z10 = R10 && Array.isArray(e12[c10]) ? e12[c10] : [e12[c10]];
        for (g10 of z10) {
          const e13 = /[A-Z]/.test($10 = c10) ? $10 : $10.replace(/-[^]/g, (e14) => e14[1].toUpperCase()), z11 = typeof g10 == "object" && g10 && g10.toString === B3 && (!n10.utils[e13] || !t11.length);
          if (e13 in n10.utils && !z11) {
            const t12 = n10.utils[e13];
            if (t12 !== l10) {
              l10 = t12, p10(t12(g10)), l10 = null;
              continue;
            }
          } else if (e13 in u3) {
            const t12 = u3[e13];
            if (t12 !== s10) {
              s10 = t12, p10(t12(g10)), s10 = null;
              continue;
            }
          }
          if (R10 && (b10 = c10.slice(1) in n10.media ? "@media " + n10.media[c10.slice(1)] : c10, c10 = b10.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g, (e14, t12, r12, n11, i11, o11) => {
            const l11 = h4.test(t12), s11 = 0.0625 * (l11 ? -1 : 1), [a11, c11] = l11 ? [n11, t12] : [t12, n11];
            return "(" + (r12[0] === "=" ? "" : r12[0] === ">" === l11 ? "max-" : "min-") + a11 + ":" + (r12[0] !== "=" && r12.length === 1 ? c11.replace(h4, (e15, t13, n12) => Number(t13) + s11 * (r12 === ">" ? 1 : -1) + n12) : c11) + (i11 ? ") and (" + (i11[0] === ">" ? "min-" : "max-") + a11 + ":" + (i11.length === 1 ? o11.replace(h4, (e15, t13, r13) => Number(t13) + s11 * (i11 === ">" ? -1 : 1) + r13) : o11) : "") + ")";
          })), z11) {
            const e14 = R10 ? r11.concat(c10) : [...r11], n11 = R10 ? [...t11] : f3(t11, c10.split(y4));
            o10 !== void 0 && i10(x4(...o10)), o10 = void 0, a10(g10, n11, e14);
          } else
            o10 === void 0 && (o10 = [[], t11, r11]), c10 = R10 || c10.charCodeAt(0) !== 36 ? c10 : `--${S3(n10.prefix)}${c10.slice(1).replace(/\$/g, "-")}`, g10 = z11 ? g10 : typeof g10 == "number" ? g10 && e13 in I2 ? String(g10) + "px" : String(g10) : k4(m4(e13, g10 == null ? "" : g10), n10.prefix, n10.themeMap[e13]), o10[0].push(`${R10 ? `${c10} ` : `${d4(c10)}:`}${g10}`);
        }
      }
      var b10, $10;
    };
    p10(e11), o10 !== void 0 && i10(x4(...o10)), o10 = void 0;
  };
  a10(e10, t10, r10);
};
var x4 = (e10, t10, r10) => `${r10.map((e11) => `${e11}{`).join("")}${t10.length ? `${t10.join(",")}{` : ""}${e10.join(";")}${t10.length ? "}" : ""}${Array(r10.length ? r10.length + 1 : 0).join("}")}`;
var I2 = { animationDelay: 1, animationDuration: 1, backgroundSize: 1, blockSize: 1, border: 1, borderBlock: 1, borderBlockEnd: 1, borderBlockEndWidth: 1, borderBlockStart: 1, borderBlockStartWidth: 1, borderBlockWidth: 1, borderBottom: 1, borderBottomLeftRadius: 1, borderBottomRightRadius: 1, borderBottomWidth: 1, borderEndEndRadius: 1, borderEndStartRadius: 1, borderInlineEnd: 1, borderInlineEndWidth: 1, borderInlineStart: 1, borderInlineStartWidth: 1, borderInlineWidth: 1, borderLeft: 1, borderLeftWidth: 1, borderRadius: 1, borderRight: 1, borderRightWidth: 1, borderSpacing: 1, borderStartEndRadius: 1, borderStartStartRadius: 1, borderTop: 1, borderTopLeftRadius: 1, borderTopRightRadius: 1, borderTopWidth: 1, borderWidth: 1, bottom: 1, columnGap: 1, columnRule: 1, columnRuleWidth: 1, columnWidth: 1, containIntrinsicSize: 1, flexBasis: 1, fontSize: 1, gap: 1, gridAutoColumns: 1, gridAutoRows: 1, gridTemplateColumns: 1, gridTemplateRows: 1, height: 1, inlineSize: 1, inset: 1, insetBlock: 1, insetBlockEnd: 1, insetBlockStart: 1, insetInline: 1, insetInlineEnd: 1, insetInlineStart: 1, left: 1, letterSpacing: 1, margin: 1, marginBlock: 1, marginBlockEnd: 1, marginBlockStart: 1, marginBottom: 1, marginInline: 1, marginInlineEnd: 1, marginInlineStart: 1, marginLeft: 1, marginRight: 1, marginTop: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, offsetDistance: 1, offsetRotate: 1, outline: 1, outlineOffset: 1, outlineWidth: 1, overflowClipMargin: 1, padding: 1, paddingBlock: 1, paddingBlockEnd: 1, paddingBlockStart: 1, paddingBottom: 1, paddingInline: 1, paddingInlineEnd: 1, paddingInlineStart: 1, paddingLeft: 1, paddingRight: 1, paddingTop: 1, perspective: 1, right: 1, rowGap: 1, scrollMargin: 1, scrollMarginBlock: 1, scrollMarginBlockEnd: 1, scrollMarginBlockStart: 1, scrollMarginBottom: 1, scrollMarginInline: 1, scrollMarginInlineEnd: 1, scrollMarginInlineStart: 1, scrollMarginLeft: 1, scrollMarginRight: 1, scrollMarginTop: 1, scrollPadding: 1, scrollPaddingBlock: 1, scrollPaddingBlockEnd: 1, scrollPaddingBlockStart: 1, scrollPaddingBottom: 1, scrollPaddingInline: 1, scrollPaddingInlineEnd: 1, scrollPaddingInlineStart: 1, scrollPaddingLeft: 1, scrollPaddingRight: 1, scrollPaddingTop: 1, shapeMargin: 1, textDecoration: 1, textDecorationThickness: 1, textIndent: 1, textUnderlineOffset: 1, top: 1, transitionDelay: 1, transitionDuration: 1, verticalAlign: 1, width: 1, wordSpacing: 1 };
var R6 = (e10) => String.fromCharCode(e10 + (e10 > 25 ? 39 : 97));
var z4 = (e10) => ((e11) => {
  let t10, r10 = "";
  for (t10 = Math.abs(e11); t10 > 52; t10 = t10 / 52 | 0)
    r10 = R6(t10 % 52) + r10;
  return R6(t10 % 52) + r10;
})(((e11, t10) => {
  let r10 = t10.length;
  for (; r10; )
    e11 = 33 * e11 ^ t10.charCodeAt(--r10);
  return e11;
})(5381, JSON.stringify(e10)) >>> 0);
var W4 = ["themed", "global", "styled", "onevar", "resonevar", "allvar", "inline"];
var j3 = (e10) => {
  if (e10.href && !e10.href.startsWith(location.origin))
    return false;
  try {
    return !!e10.cssRules;
  } catch (e11) {
    return false;
  }
};
var E5 = (e10) => {
  let t10;
  const r10 = () => {
    const { cssRules: e11 } = t10.sheet;
    return [].map.call(e11, (r11, n11) => {
      const { cssText: i10 } = r11;
      let o10 = "";
      if (i10.startsWith("--sxs"))
        return "";
      if (e11[n11 - 1] && (o10 = e11[n11 - 1].cssText).startsWith("--sxs")) {
        if (!r11.cssRules.length)
          return "";
        for (const e12 in t10.rules)
          if (t10.rules[e12].group === r11)
            return `--sxs{--sxs:${[...t10.rules[e12].cache].join(" ")}}${i10}`;
        return r11.cssRules.length ? `${o10}${i10}` : "";
      }
      return i10;
    }).join("");
  }, n10 = () => {
    if (t10) {
      const { rules: e11, sheet: r11 } = t10;
      if (!r11.deleteRule) {
        for (; Object(Object(r11.cssRules)[0]).type === 3; )
          r11.cssRules.splice(0, 1);
        r11.cssRules = [];
      }
      for (const t11 in e11)
        delete e11[t11];
    }
    const i10 = Object(e10).styleSheets || [];
    for (const e11 of i10)
      if (j3(e11)) {
        for (let i11 = 0, o11 = e11.cssRules; o11[i11]; ++i11) {
          const l11 = Object(o11[i11]);
          if (l11.type !== 1)
            continue;
          const s10 = Object(o11[i11 + 1]);
          if (s10.type !== 4)
            continue;
          ++i11;
          const { cssText: a10 } = l11;
          if (!a10.startsWith("--sxs"))
            continue;
          const c10 = a10.slice(14, -3).trim().split(/\s+/), d10 = W4[c10[0]];
          d10 && (t10 || (t10 = { sheet: e11, reset: n10, rules: {}, toString: r10 }), t10.rules[d10] = { group: s10, index: i11, cache: new Set(c10) });
        }
        if (t10)
          break;
      }
    if (!t10) {
      const i11 = (e11, t11) => ({ type: t11, cssRules: [], insertRule(e12, t12) {
        this.cssRules.splice(t12, 0, i11(e12, { import: 3, undefined: 1 }[(e12.toLowerCase().match(/^@([a-z]+)/) || [])[1]] || 4));
      }, get cssText() {
        return e11 === "@media{}" ? `@media{${[].map.call(this.cssRules, (e12) => e12.cssText).join("")}}` : e11;
      } });
      t10 = { sheet: e10 ? (e10.head || e10).appendChild(document.createElement("style")).sheet : i11("", "text/css"), rules: {}, reset: n10, toString: r10 };
    }
    const { sheet: o10, rules: l10 } = t10;
    for (let e11 = W4.length - 1; e11 >= 0; --e11) {
      const t11 = W4[e11];
      if (!l10[t11]) {
        const r11 = W4[e11 + 1], n11 = l10[r11] ? l10[r11].index : o10.cssRules.length;
        o10.insertRule("@media{}", n11), o10.insertRule(`--sxs{--sxs:${e11}}`, n11), l10[t11] = { group: o10.cssRules[n11 + 1], index: n11, cache: /* @__PURE__ */ new Set([e11]) };
      }
      v4(l10[t11]);
    }
  };
  return n10(), t10;
};
var v4 = (e10) => {
  const t10 = e10.group;
  let r10 = t10.cssRules.length;
  e10.apply = (e11) => {
    try {
      t10.insertRule(e11, r10), ++r10;
    } catch (e12) {
    }
  };
};
var T4 = Symbol();
var w5 = o3();
var M2 = (e10, t10) => w5(e10, () => (...r10) => {
  let n10 = { type: null, composers: /* @__PURE__ */ new Set() };
  for (const t11 of r10)
    if (t11 != null)
      if (t11[l5]) {
        n10.type == null && (n10.type = t11[l5].type);
        for (const e11 of t11[l5].composers)
          n10.composers.add(e11);
      } else
        t11.constructor !== Object || t11.$$typeof ? n10.type == null && (n10.type = t11) : n10.composers.add(C5(t11, e10));
  return n10.type == null && (n10.type = "span"), n10.composers.size || n10.composers.add(["PJLV", {}, [], [], {}, []]), P2(e10, n10, t10);
});
var C5 = ({ variants: e10, compoundVariants: t10, defaultVariants: r10, ...n10 }, i10) => {
  const o10 = `${S3(i10.prefix)}c-${z4(n10)}`, l10 = [], s10 = [], d10 = /* @__PURE__ */ Object.create(null), g10 = [];
  for (const e11 in r10)
    d10[e11] = String(r10[e11]);
  if (typeof e10 == "object" && e10)
    for (const t11 in e10) {
      p10 = d10, u10 = t11, c3.call(p10, u10) || (d10[t11] = "undefined");
      const r11 = e10[t11];
      for (const e11 in r11) {
        const n11 = { [t11]: String(e11) };
        String(e11) === "undefined" && g10.push(t11);
        const i11 = r11[e11], o11 = [n11, i11, !a5(i11)];
        l10.push(o11);
      }
    }
  var p10, u10;
  if (typeof t10 == "object" && t10)
    for (const e11 of t10) {
      let { css: t11, ...r11 } = e11;
      t11 = typeof t11 == "object" && t11 || {};
      for (const e12 in r11)
        r11[e12] = String(r11[e12]);
      const n11 = [r11, t11, !a5(t11)];
      s10.push(n11);
    }
  return [o10, n10, l10, s10, d10, g10];
};
var P2 = (e10, t10, r10) => {
  const [n10, i10, o10, a10] = L4(t10.composers), c10 = typeof t10.type == "function" || t10.type.$$typeof ? ((e11) => {
    function t11() {
      for (let r11 = 0; r11 < t11[T4].length; r11++) {
        const [n11, i11] = t11[T4][r11];
        e11.rules[n11].apply(i11);
      }
      return t11[T4] = [], null;
    }
    return t11[T4] = [], t11.rules = {}, W4.forEach((e12) => t11.rules[e12] = { apply: (r11) => t11[T4].push([e12, r11]) }), t11;
  })(r10) : null, d10 = (c10 || r10).rules, g10 = `.${n10}${i10.length > 1 ? `:where(.${i10.slice(1).join(".")})` : ""}`, p10 = (l10) => {
    l10 = typeof l10 == "object" && l10 || A4;
    const { css: s10, ...p11 } = l10, u10 = {};
    for (const e11 in o10)
      if (delete p11[e11], e11 in l10) {
        let t11 = l10[e11];
        typeof t11 == "object" && t11 ? u10[e11] = { "@initial": o10[e11], ...t11 } : (t11 = String(t11), u10[e11] = t11 !== "undefined" || a10.has(e11) ? t11 : o10[e11]);
      } else
        u10[e11] = o10[e11];
    const h10 = /* @__PURE__ */ new Set([...i10]);
    for (const [n11, i11, o11, l11] of t10.composers) {
      r10.rules.styled.cache.has(n11) || (r10.rules.styled.cache.add(n11), $4(i11, [`.${n11}`], [], e10, (e11) => {
        d10.styled.apply(e11);
      }));
      const t11 = O4(o11, u10, e10.media), s11 = O4(l11, u10, e10.media, true);
      for (const i12 of t11)
        if (i12 !== void 0)
          for (const [t12, o12, l12] of i12) {
            const i13 = `${n11}-${z4(o12)}-${t12}`;
            h10.add(i13);
            const s12 = (l12 ? r10.rules.resonevar : r10.rules.onevar).cache, a11 = l12 ? d10.resonevar : d10.onevar;
            s12.has(i13) || (s12.add(i13), $4(o12, [`.${i13}`], [], e10, (e11) => {
              a11.apply(e11);
            }));
          }
      for (const t12 of s11)
        if (t12 !== void 0)
          for (const [i12, o12] of t12) {
            const t13 = `${n11}-${z4(o12)}-${i12}`;
            h10.add(t13), r10.rules.allvar.cache.has(t13) || (r10.rules.allvar.cache.add(t13), $4(o12, [`.${t13}`], [], e10, (e11) => {
              d10.allvar.apply(e11);
            }));
          }
    }
    if (typeof s10 == "object" && s10) {
      const t11 = `${n10}-i${z4(s10)}-css`;
      h10.add(t11), r10.rules.inline.cache.has(t11) || (r10.rules.inline.cache.add(t11), $4(s10, [`.${t11}`], [], e10, (e11) => {
        d10.inline.apply(e11);
      }));
    }
    for (const e11 of String(l10.className || "").trim().split(/\s+/))
      e11 && h10.add(e11);
    const f10 = p11.className = [...h10].join(" ");
    return { type: t10.type, className: f10, selector: g10, props: p11, toString: () => f10, deferredInjector: c10 };
  };
  return s3(p10, { className: n10, selector: g10, [l5]: t10, toString: () => (r10.rules.styled.cache.has(n10) || p10(), n10) });
};
var L4 = (e10) => {
  let t10 = "";
  const r10 = [], n10 = {}, i10 = [];
  for (const [o10, , , , l10, s10] of e10) {
    t10 === "" && (t10 = o10), r10.push(o10), i10.push(...s10);
    for (const e11 in l10) {
      const t11 = l10[e11];
      (n10[e11] === void 0 || t11 !== "undefined" || s10.includes(t11)) && (n10[e11] = t11);
    }
  }
  return [t10, r10, n10, new Set(i10)];
};
var O4 = (e10, t10, r10, n10) => {
  const i10 = [];
  e:
    for (let [o10, l10, s10] of e10) {
      if (s10)
        continue;
      let e11, a10 = 0, c10 = false;
      for (e11 in o10) {
        const n11 = o10[e11];
        let i11 = t10[e11];
        if (i11 !== n11) {
          if (typeof i11 != "object" || !i11)
            continue e;
          {
            let e12, t11, o11 = 0;
            for (const l11 in i11) {
              if (n11 === String(i11[l11])) {
                if (l11 !== "@initial") {
                  const e13 = l11.slice(1);
                  (t11 = t11 || []).push(e13 in r10 ? r10[e13] : l11.replace(/^@media ?/, "")), c10 = true;
                }
                a10 += o11, e12 = true;
              }
              ++o11;
            }
            if (t11 && t11.length && (l10 = { ["@media " + t11.join(", ")]: l10 }), !e12)
              continue e;
          }
        }
      }
      (i10[a10] = i10[a10] || []).push([n10 ? "cv" : `${e11}-${o10[e11]}`, l10, c10]);
    }
  return i10;
};
var A4 = {};
var N4 = o3();
var D5 = (e10, t10) => N4(e10, () => (...r10) => {
  const n10 = () => {
    for (let n11 of r10) {
      n11 = typeof n11 == "object" && n11 || {};
      let r11 = z4(n11);
      if (!t10.rules.global.cache.has(r11)) {
        if (t10.rules.global.cache.add(r11), "@import" in n11) {
          let e11 = [].indexOf.call(t10.sheet.cssRules, t10.rules.themed.group) - 1;
          for (let r12 of [].concat(n11["@import"]))
            r12 = r12.includes('"') || r12.includes("'") ? r12 : `"${r12}"`, t10.sheet.insertRule(`@import ${r12};`, e11++);
          delete n11["@import"];
        }
        $4(n11, [], [], e10, (e11) => {
          t10.rules.global.apply(e11);
        });
      }
    }
    return "";
  };
  return s3(n10, { toString: n10 });
});
var H4 = o3();
var V4 = (e10, t10) => H4(e10, () => (r10) => {
  const n10 = `${S3(e10.prefix)}k-${z4(r10)}`, i10 = () => {
    if (!t10.rules.global.cache.has(n10)) {
      t10.rules.global.cache.add(n10);
      const i11 = [];
      $4(r10, [], [], e10, (e11) => i11.push(e11));
      const o10 = `@keyframes ${n10}{${i11.join("")}}`;
      t10.rules.global.apply(o10);
    }
    return n10;
  };
  return s3(i10, { get name() {
    return i10();
  }, toString: i10 });
});
var G4 = class {
  constructor(e10, t10, r10, n10) {
    this.token = e10 == null ? "" : String(e10), this.value = t10 == null ? "" : String(t10), this.scale = r10 == null ? "" : String(r10), this.prefix = n10 == null ? "" : String(n10);
  }
  get computedValue() {
    return "var(" + this.variable + ")";
  }
  get variable() {
    return "--" + S3(this.prefix) + S3(this.scale) + this.token;
  }
  toString() {
    return this.computedValue;
  }
};
var F3 = o3();
var J2 = (e10, t10) => F3(e10, () => (r10, n10) => {
  n10 = typeof r10 == "object" && r10 || Object(n10);
  const i10 = `.${r10 = (r10 = typeof r10 == "string" ? r10 : "") || `${S3(e10.prefix)}t-${z4(n10)}`}`, o10 = {}, l10 = [];
  for (const t11 in n10) {
    o10[t11] = {};
    for (const r11 in n10[t11]) {
      const i11 = `--${S3(e10.prefix)}${t11}-${r11}`, s11 = k4(String(n10[t11][r11]), e10.prefix, t11);
      o10[t11][r11] = new G4(r11, s11, t11, e10.prefix), l10.push(`${i11}:${s11}`);
    }
  }
  const s10 = () => {
    if (l10.length && !t10.rules.themed.cache.has(r10)) {
      t10.rules.themed.cache.add(r10);
      const i11 = `${n10 === e10.theme ? ":root," : ""}.${r10}{${l10.join(";")}}`;
      t10.rules.themed.apply(i11);
    }
    return r10;
  };
  return { ...o10, get className() {
    return s10();
  }, selector: i10, toString: s10 };
});
var U3 = o3();
var X2;
var Y2 = o3();
var q3 = (e10) => {
  const t10 = ((e11) => {
    let t11 = false;
    const r10 = U3(e11, (e12) => {
      t11 = true;
      const r11 = "prefix" in (e12 = typeof e12 == "object" && e12 || {}) ? String(e12.prefix) : "", i10 = typeof e12.media == "object" && e12.media || {}, o10 = typeof e12.root == "object" ? e12.root || null : globalThis.document || null, l10 = typeof e12.theme == "object" && e12.theme || {}, s10 = { prefix: r11, media: i10, theme: l10, themeMap: typeof e12.themeMap == "object" && e12.themeMap || { ...n3 }, utils: typeof e12.utils == "object" && e12.utils || {} }, a10 = E5(o10), c10 = { css: M2(s10, a10), globalCss: D5(s10, a10), keyframes: V4(s10, a10), createTheme: J2(s10, a10), reset() {
        a10.reset(), c10.theme.toString();
      }, theme: {}, sheet: a10, config: s10, prefix: r11, getCssText: a10.toString, toString: a10.toString };
      return String(c10.theme = c10.createTheme(l10)), c10;
    });
    return t11 || r10.reset(), r10;
  })(e10);
  return t10.styled = (({ config: e11, sheet: t11 }) => Y2(e11, () => {
    const r10 = M2(e11, t11);
    return (...e12) => {
      const t12 = r10(...e12), n10 = t12[l5].type, i10 = import_react49.default.forwardRef((e13, r11) => {
        const i11 = e13 && e13.as || n10, { props: o10, deferredInjector: l10 } = t12(e13);
        return delete o10.as, o10.ref = r11, l10 ? import_react49.default.createElement(import_react49.default.Fragment, null, import_react49.default.createElement(i11, o10), import_react49.default.createElement(l10, null)) : import_react49.default.createElement(i11, o10);
      });
      return i10.className = t12.className, i10.displayName = `Styled.${n10.displayName || n10.name || n10}`, i10.selector = t12.selector, i10.toString = () => t12.selector, i10[l5] = t12[l5], i10;
    };
  }))(t10), t10;
};
var K4 = () => X2 || (X2 = q3());
var re2 = (...e10) => K4().styled(...e10);

// node_modules/@radix-ui/react-dropdown-menu/dist/index.module.js
var import_react55 = __toESM(require_react());

// node_modules/@radix-ui/react-dropdown-menu/node_modules/@radix-ui/primitive/dist/index.module.js
function $e42e1063c40fb3ef$export$b9ecd428b558ff104(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented)
      return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  };
}

// node_modules/@radix-ui/react-dropdown-menu/node_modules/@radix-ui/react-compose-refs/dist/index.module.js
var import_react50 = __toESM(require_react());
function $6ed0406888f73fc4$var$setRef7(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af7(...refs) {
  return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef7(ref, node));
}

// node_modules/@radix-ui/react-dropdown-menu/node_modules/@radix-ui/react-context/dist/index.module.js
var import_react51 = __toESM(require_react());
function $c512c27ab02ef895$export$50c7b4e9d9f19c16(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
    const BaseContext = /* @__PURE__ */ (0, import_react51.createContext)(defaultContext);
    const index4 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider2(props) {
      const { scope, children, ...context } = props;
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const value = (0, import_react51.useMemo)(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_react51.createElement)(Context2.Provider, {
        value
      }, children);
    }
    function useContext6(consumerName, scope) {
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const context = (0, import_react51.useContext)(Context2);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider2.displayName = rootComponentName + "Provider";
    return [
      Provider2,
      useContext6
    ];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return /* @__PURE__ */ (0, import_react51.createContext)(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
      return (0, import_react51.useMemo)(() => ({
        [`__scope${scopeName}`]: {
          ...scope,
          [scopeName]: contexts
        }
      }), [
        scope,
        contexts
      ]);
    };
  };
  createScope.scopeName = scopeName;
  return [
    $c512c27ab02ef895$export$fd42f52fd3ae11092,
    $c512c27ab02ef895$var$composeContextScopes6(createScope, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes6(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope1 = () => {
    const scopeHooks = scopes.map((createScope) => ({
      useScope: createScope(),
      scopeName: createScope.scopeName
    }));
    return function useComposedScopes(overrideScopes) {
      const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope = scopeProps[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope
        };
      }, {});
      return (0, import_react51.useMemo)(() => ({
        [`__scope${baseScope.scopeName}`]: nextScopes1
      }), [
        nextScopes1
      ]);
    };
  };
  createScope1.scopeName = baseScope.scopeName;
  return createScope1;
}

// node_modules/@radix-ui/react-dropdown-menu/node_modules/@radix-ui/react-primitive/dist/index.module.js
var import_react53 = __toESM(require_react());
var import_react_dom9 = __toESM(require_react_dom());

// node_modules/@radix-ui/react-dropdown-menu/node_modules/@radix-ui/react-slot/dist/index.module.js
var import_react52 = __toESM(require_react());
var $5e63c961fc1ce211$export$8c6ed5c666ac13607 = /* @__PURE__ */ (0, import_react52.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = import_react52.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable7);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (import_react52.Children.count(newElement) > 1)
          return import_react52.Children.only(null);
        return /* @__PURE__ */ (0, import_react52.isValidElement)(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ (0, import_react52.createElement)($5e63c961fc1ce211$var$SlotClone7, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ (0, import_react52.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react52.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ (0, import_react52.createElement)($5e63c961fc1ce211$var$SlotClone7, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac13607.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone7 = /* @__PURE__ */ (0, import_react52.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ (0, import_react52.isValidElement)(children))
    return /* @__PURE__ */ (0, import_react52.cloneElement)(children, {
      ...$5e63c961fc1ce211$var$mergeProps7(slotProps, children.props),
      ref: $6ed0406888f73fc4$export$43e446d32b3d21af7(forwardedRef, children.ref)
    });
  return import_react52.Children.count(children) > 1 ? import_react52.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone7.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d457 = ({ children }) => {
  return /* @__PURE__ */ (0, import_react52.createElement)(import_react52.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable7(child) {
  return /* @__PURE__ */ (0, import_react52.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d457;
}
function $5e63c961fc1ce211$var$mergeProps7(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler)
      overrideProps[propName] = (...args) => {
        childPropValue === null || childPropValue === void 0 || childPropValue(...args);
        slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
      };
    else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// node_modules/@radix-ui/react-dropdown-menu/node_modules/@radix-ui/react-primitive/dist/index.module.js
var $8927f6f2acc4f386$var$NODES6 = [
  "a",
  "button",
  "div",
  "h2",
  "h3",
  "img",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
var $8927f6f2acc4f386$export$250ffa63cdc0d0346 = $8927f6f2acc4f386$var$NODES6.reduce((primitive, node) => {
  const Node2 = /* @__PURE__ */ (0, import_react53.forwardRef)((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac13607 : node;
    (0, import_react53.useEffect)(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ (0, import_react53.createElement)(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node2.displayName = `Primitive.${node}`;
  return {
    ...primitive,
    [node]: Node2
  };
}, {});

// node_modules/@radix-ui/react-dropdown-menu/node_modules/@radix-ui/react-id/dist/index.module.js
var $2AODx$react3 = __toESM(require_react());

// node_modules/@radix-ui/react-dropdown-menu/node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
var import_react54 = __toESM(require_react());
var $9f79659886946c16$export$e5c5a5f917a5871c5 = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react54.useLayoutEffect : () => {
};

// node_modules/@radix-ui/react-dropdown-menu/node_modules/@radix-ui/react-id/dist/index.module.js
var $1746a345f3d73bb7$var$useReactId3 = $2AODx$react3["useId".toString()] || (() => void 0);
var $1746a345f3d73bb7$var$count3 = 0;
function $1746a345f3d73bb7$export$f680877a34711e373(deterministicId) {
  const [id, setId] = $2AODx$react3.useState($1746a345f3d73bb7$var$useReactId3());
  $9f79659886946c16$export$e5c5a5f917a5871c5(() => {
    if (!deterministicId)
      setId((reactId) => reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count3++));
  }, [
    deterministicId
  ]);
  return deterministicId || (id ? `radix-${id}` : "");
}

// node_modules/@radix-ui/react-dropdown-menu/dist/index.module.js
var $d08ef79370b62062$var$DROPDOWN_MENU_NAME = "DropdownMenu";
var [$d08ef79370b62062$var$createDropdownMenuContext, $d08ef79370b62062$export$c0623cd925aeb687] = $c512c27ab02ef895$export$50c7b4e9d9f19c16($d08ef79370b62062$var$DROPDOWN_MENU_NAME, [
  $6cc32821e9371a1c$export$4027731b685e72eb
]);
var $d08ef79370b62062$var$useMenuScope = $6cc32821e9371a1c$export$4027731b685e72eb();
var [$d08ef79370b62062$var$DropdownMenuProvider, $d08ef79370b62062$var$useDropdownMenuContext] = $d08ef79370b62062$var$createDropdownMenuContext($d08ef79370b62062$var$DROPDOWN_MENU_NAME);
var $d08ef79370b62062$export$e44a253a59704894 = (props) => {
  const { __scopeDropdownMenu, children, dir, open: openProp, defaultOpen, onOpenChange, modal = true } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  const triggerRef = (0, import_react55.useRef)(null);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react55.createElement)($d08ef79370b62062$var$DropdownMenuProvider, {
    scope: __scopeDropdownMenu,
    triggerId: $1746a345f3d73bb7$export$f680877a34711e373(),
    triggerRef,
    contentId: $1746a345f3d73bb7$export$f680877a34711e373(),
    open,
    onOpenChange: setOpen,
    onOpenToggle: (0, import_react55.useCallback)(() => setOpen((prevOpen) => !prevOpen), [
      setOpen
    ]),
    modal
  }, /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$be92b6f5f03c0fe9, _extends({}, menuScope, {
    open,
    onOpenChange: setOpen,
    dir,
    modal
  }), children));
};
var $d08ef79370b62062$var$TRIGGER_NAME = "DropdownMenuTrigger";
var $d08ef79370b62062$export$d2469213b3befba9 = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;
  const context = $d08ef79370b62062$var$useDropdownMenuContext($d08ef79370b62062$var$TRIGGER_NAME, __scopeDropdownMenu);
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$b688253958b8dfe7, _extends({
    asChild: true
  }, menuScope), /* @__PURE__ */ (0, import_react55.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0346.button, _extends({
    type: "button",
    id: context.triggerId,
    "aria-haspopup": "menu",
    "aria-expanded": context.open ? true : void 0,
    "aria-controls": context.open ? context.contentId : void 0,
    "data-state": context.open ? "open" : "closed",
    "data-disabled": disabled ? "" : void 0,
    disabled
  }, triggerProps, {
    ref: $6ed0406888f73fc4$export$43e446d32b3d21af7(forwardedRef, context.triggerRef),
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff104(props.onPointerDown, (event) => {
      if (!disabled && event.button === 0 && event.ctrlKey === false) {
        context.onOpenToggle();
        if (!context.open)
          event.preventDefault();
      }
    }),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff104(props.onKeyDown, (event) => {
      if (disabled)
        return;
      if ([
        "Enter",
        " "
      ].includes(event.key))
        context.onOpenToggle();
      if (event.key === "ArrowDown")
        context.onOpenChange(true);
      if ([
        " ",
        "ArrowDown"
      ].includes(event.key))
        event.preventDefault();
    })
  })));
});
var $d08ef79370b62062$export$cd369b4d4d54efc9 = (props) => {
  const { __scopeDropdownMenu, ...portalProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$602eac185826482c, _extends({}, menuScope, portalProps));
};
var $d08ef79370b62062$var$CONTENT_NAME = "DropdownMenuContent";
var $d08ef79370b62062$export$6e76d93a37c01248 = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...contentProps } = props;
  const context = $d08ef79370b62062$var$useDropdownMenuContext($d08ef79370b62062$var$CONTENT_NAME, __scopeDropdownMenu);
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  const hasInteractedOutsideRef = (0, import_react55.useRef)(false);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$7c6e2c02157bb7d2, _extends({
    id: context.contentId,
    "aria-labelledby": context.triggerId
  }, menuScope, contentProps, {
    ref: forwardedRef,
    onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff104(props.onCloseAutoFocus, (event) => {
      var _context$triggerRef$c;
      if (!hasInteractedOutsideRef.current)
        (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
      hasInteractedOutsideRef.current = false;
      event.preventDefault();
    }),
    onInteractOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff104(props.onInteractOutside, (event) => {
      const originalEvent = event.detail.originalEvent;
      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
      if (!context.modal || isRightClick)
        hasInteractedOutsideRef.current = true;
    }),
    style: {
      ...props.style,
      ["--radix-dropdown-menu-content-transform-origin"]: "var(--radix-popper-transform-origin)"
    }
  }));
});
var $d08ef79370b62062$export$ed97964d1871885d = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...itemProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$6d08773d2e66f8f2, _extends({}, menuScope, itemProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$53a69729da201fa9 = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...checkboxItemProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$16ce288f89fa631c, _extends({}, menuScope, checkboxItemProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$3323ad73d55f587e = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...radioGroupProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$a98f0dcb43a68a25, _extends({}, menuScope, radioGroupProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$e4f69b41b1637536 = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...radioItemProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$371ab307eab489c0, _extends({}, menuScope, radioItemProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$42355ae145153fb6 = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...itemIndicatorProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$c3468e2714d175fa, _extends({}, menuScope, itemIndicatorProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$da160178fd3bc7e9 = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...separatorProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$1ff3c3f08ae963c0, _extends({}, menuScope, separatorProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$34b8980744021ec5 = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...arrowProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$21b07c8f274aebd5, _extends({}, menuScope, arrowProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$2f307d81a64f5442 = (props) => {
  const { __scopeDropdownMenu, children, open: openProp, onOpenChange, defaultOpen } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$d7a01e11500dfb6f, _extends({}, menuScope, {
    open,
    onOpenChange: setOpen
  }), children);
};
var $d08ef79370b62062$export$21dcb7ec56f874cf = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...subTriggerProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$2ea8a7a591ac5eac, _extends({}, menuScope, subTriggerProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$f34ec8bc2482cc5f = /* @__PURE__ */ (0, import_react55.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...subContentProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react55.createElement)($6cc32821e9371a1c$export$6d4de93b380beddf, _extends({}, menuScope, subContentProps, {
    ref: forwardedRef,
    style: {
      ...props.style,
      ["--radix-dropdown-menu-content-transform-origin"]: "var(--radix-popper-transform-origin)"
    }
  }));
});
var $d08ef79370b62062$export$be92b6f5f03c0fe9 = $d08ef79370b62062$export$e44a253a59704894;
var $d08ef79370b62062$export$41fb9f06171c75f4 = $d08ef79370b62062$export$d2469213b3befba9;
var $d08ef79370b62062$export$602eac185826482c = $d08ef79370b62062$export$cd369b4d4d54efc9;
var $d08ef79370b62062$export$7c6e2c02157bb7d2 = $d08ef79370b62062$export$6e76d93a37c01248;
var $d08ef79370b62062$export$6d08773d2e66f8f2 = $d08ef79370b62062$export$ed97964d1871885d;
var $d08ef79370b62062$export$16ce288f89fa631c = $d08ef79370b62062$export$53a69729da201fa9;
var $d08ef79370b62062$export$a98f0dcb43a68a25 = $d08ef79370b62062$export$3323ad73d55f587e;
var $d08ef79370b62062$export$371ab307eab489c0 = $d08ef79370b62062$export$e4f69b41b1637536;
var $d08ef79370b62062$export$c3468e2714d175fa = $d08ef79370b62062$export$42355ae145153fb6;
var $d08ef79370b62062$export$1ff3c3f08ae963c0 = $d08ef79370b62062$export$da160178fd3bc7e9;
var $d08ef79370b62062$export$21b07c8f274aebd5 = $d08ef79370b62062$export$34b8980744021ec5;
var $d08ef79370b62062$export$d7a01e11500dfb6f = $d08ef79370b62062$export$2f307d81a64f5442;
var $d08ef79370b62062$export$2ea8a7a591ac5eac = $d08ef79370b62062$export$21dcb7ec56f874cf;
var $d08ef79370b62062$export$6d4de93b380beddf = $d08ef79370b62062$export$f34ec8bc2482cc5f;

// node_modules/@tldraw/tldraw/dist/index.mjs
var _t = __toESM(require_react(), 1);
var as = __toESM(require_react(), 1);
var Zt = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-tooltip/dist/index.mjs
var import_react74 = __toESM(require_react(), 1);

// node_modules/@radix-ui/primitive/dist/index.mjs
function $e42e1063c40fb3ef$export$b9ecd428b558ff105(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented)
      return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  };
}

// node_modules/@radix-ui/react-compose-refs/dist/index.mjs
var import_react56 = __toESM(require_react(), 1);
function $6ed0406888f73fc4$var$setRef8(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af8(...refs) {
  return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef8(ref, node));
}
function $6ed0406888f73fc4$export$c7b2cbe3552a0d055(...refs) {
  return (0, import_react56.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af8(...refs), refs);
}

// node_modules/@radix-ui/react-context/dist/index.mjs
var import_react57 = __toESM(require_react(), 1);
function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
  const Context2 = /* @__PURE__ */ (0, import_react57.createContext)(defaultContext);
  function Provider2(props) {
    const { children, ...context } = props;
    const value = (0, import_react57.useMemo)(() => context, Object.values(context));
    return /* @__PURE__ */ (0, import_react57.createElement)(Context2.Provider, {
      value
    }, children);
  }
  function useContext6(consumerName) {
    const context = (0, import_react57.useContext)(Context2);
    if (context)
      return context;
    if (defaultContext !== void 0)
      return defaultContext;
    throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
  }
  Provider2.displayName = rootComponentName + "Provider";
  return [
    Provider2,
    useContext6
  ];
}
function $c512c27ab02ef895$export$50c7b4e9d9f19c17(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
    const BaseContext = /* @__PURE__ */ (0, import_react57.createContext)(defaultContext);
    const index4 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider2(props) {
      const { scope, children, ...context } = props;
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const value = (0, import_react57.useMemo)(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_react57.createElement)(Context2.Provider, {
        value
      }, children);
    }
    function useContext6(consumerName, scope) {
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index4]) || BaseContext;
      const context = (0, import_react57.useContext)(Context2);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider2.displayName = rootComponentName + "Provider";
    return [
      Provider2,
      useContext6
    ];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return /* @__PURE__ */ (0, import_react57.createContext)(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
      return (0, import_react57.useMemo)(() => ({
        [`__scope${scopeName}`]: {
          ...scope,
          [scopeName]: contexts
        }
      }), [
        scope,
        contexts
      ]);
    };
  };
  createScope.scopeName = scopeName;
  return [
    $c512c27ab02ef895$export$fd42f52fd3ae11092,
    $c512c27ab02ef895$var$composeContextScopes7(createScope, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes7(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope1 = () => {
    const scopeHooks = scopes.map((createScope) => ({
      useScope: createScope(),
      scopeName: createScope.scopeName
    }));
    return function useComposedScopes(overrideScopes) {
      const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope = scopeProps[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope
        };
      }, {});
      return (0, import_react57.useMemo)(() => ({
        [`__scope${baseScope.scopeName}`]: nextScopes1
      }), [
        nextScopes1
      ]);
    };
  };
  createScope1.scopeName = baseScope.scopeName;
  return createScope1;
}

// node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
var import_react63 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-primitive/dist/index.mjs
var import_react59 = __toESM(require_react(), 1);
var import_react_dom10 = __toESM(require_react_dom(), 1);

// node_modules/@radix-ui/react-slot/dist/index.mjs
var import_react58 = __toESM(require_react(), 1);
var $5e63c961fc1ce211$export$8c6ed5c666ac13608 = /* @__PURE__ */ (0, import_react58.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = import_react58.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable8);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (import_react58.Children.count(newElement) > 1)
          return import_react58.Children.only(null);
        return /* @__PURE__ */ (0, import_react58.isValidElement)(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ (0, import_react58.createElement)($5e63c961fc1ce211$var$SlotClone8, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ (0, import_react58.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react58.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ (0, import_react58.createElement)($5e63c961fc1ce211$var$SlotClone8, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac13608.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone8 = /* @__PURE__ */ (0, import_react58.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ (0, import_react58.isValidElement)(children))
    return /* @__PURE__ */ (0, import_react58.cloneElement)(children, {
      ...$5e63c961fc1ce211$var$mergeProps8(slotProps, children.props),
      ref: forwardedRef ? $6ed0406888f73fc4$export$43e446d32b3d21af8(forwardedRef, children.ref) : children.ref
    });
  return import_react58.Children.count(children) > 1 ? import_react58.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone8.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d458 = ({ children }) => {
  return /* @__PURE__ */ (0, import_react58.createElement)(import_react58.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable8(child) {
  return /* @__PURE__ */ (0, import_react58.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d458;
}
function $5e63c961fc1ce211$var$mergeProps8(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue)
        overrideProps[propName] = (...args) => {
          childPropValue(...args);
          slotPropValue(...args);
        };
      else if (slotPropValue)
        overrideProps[propName] = slotPropValue;
    } else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// node_modules/@radix-ui/react-primitive/dist/index.mjs
var $8927f6f2acc4f386$var$NODES7 = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
var $8927f6f2acc4f386$export$250ffa63cdc0d0347 = $8927f6f2acc4f386$var$NODES7.reduce((primitive, node) => {
  const Node2 = /* @__PURE__ */ (0, import_react59.forwardRef)((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac13608 : node;
    (0, import_react59.useEffect)(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ (0, import_react59.createElement)(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node2.displayName = `Primitive.${node}`;
  return {
    ...primitive,
    [node]: Node2
  };
}, {});
function $8927f6f2acc4f386$export$6d1a0317bde7de7f2(target, event) {
  if (target)
    (0, import_react_dom10.flushSync)(() => target.dispatchEvent(event));
}

// node_modules/@radix-ui/react-dismissable-layer/node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
var import_react60 = __toESM(require_react(), 1);
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(callback) {
  const callbackRef = (0, import_react60.useRef)(callback);
  (0, import_react60.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react60.useMemo)(() => (...args) => {
    var _callbackRef$current;
    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
  }, []);
}

// node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs
var import_react62 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-use-escape-keydown/node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
var import_react61 = __toESM(require_react(), 1);
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a3(callback) {
  const callbackRef = (0, import_react61.useRef)(callback);
  (0, import_react61.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react61.useMemo)(() => (...args) => {
    var _callbackRef$current;
    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
  }, []);
}

// node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs
function $addc16e1bbe58fd0$export$3a72a57244d6e7652(onEscapeKeyDownProp, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
  const onEscapeKeyDown = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a3(onEscapeKeyDownProp);
  (0, import_react62.useEffect)(() => {
    const handleKeyDown = (event) => {
      if (event.key === "Escape")
        onEscapeKeyDown(event);
    };
    ownerDocument.addEventListener("keydown", handleKeyDown);
    return () => ownerDocument.removeEventListener("keydown", handleKeyDown);
  }, [
    onEscapeKeyDown,
    ownerDocument
  ]);
}

// node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
var $5cb92bef7577960e$var$CONTEXT_UPDATE2 = "dismissableLayer.update";
var $5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE2 = "dismissableLayer.pointerDownOutside";
var $5cb92bef7577960e$var$FOCUS_OUTSIDE2 = "dismissableLayer.focusOutside";
var $5cb92bef7577960e$var$originalBodyPointerEvents2;
var $5cb92bef7577960e$var$DismissableLayerContext2 = /* @__PURE__ */ (0, import_react63.createContext)({
  layers: /* @__PURE__ */ new Set(),
  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
  branches: /* @__PURE__ */ new Set()
});
var $5cb92bef7577960e$export$177fb62ff3ec1f222 = /* @__PURE__ */ (0, import_react63.forwardRef)((props, forwardedRef) => {
  var _node$ownerDocument;
  const { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, ...layerProps } = props;
  const context = (0, import_react63.useContext)($5cb92bef7577960e$var$DismissableLayerContext2);
  const [node1, setNode] = (0, import_react63.useState)(null);
  const ownerDocument = (_node$ownerDocument = node1 === null || node1 === void 0 ? void 0 : node1.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;
  const [, force] = (0, import_react63.useState)({});
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, (node) => setNode(node));
  const layers = Array.from(context.layers);
  const [highestLayerWithOutsidePointerEventsDisabled] = [
    ...context.layersWithOutsidePointerEventsDisabled
  ].slice(-1);
  const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
  const index4 = node1 ? layers.indexOf(node1) : -1;
  const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
  const isPointerEventsEnabled = index4 >= highestLayerWithOutsidePointerEventsDisabledIndex;
  const pointerDownOutside = $5cb92bef7577960e$var$usePointerDownOutside2((event) => {
    const target = event.target;
    const isPointerDownOnBranch = [
      ...context.branches
    ].some((branch) => branch.contains(target));
    if (!isPointerEventsEnabled || isPointerDownOnBranch)
      return;
    onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);
    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
    if (!event.defaultPrevented)
      onDismiss === null || onDismiss === void 0 || onDismiss();
  }, ownerDocument);
  const focusOutside = $5cb92bef7577960e$var$useFocusOutside2((event) => {
    const target = event.target;
    const isFocusInBranch = [
      ...context.branches
    ].some((branch) => branch.contains(target));
    if (isFocusInBranch)
      return;
    onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);
    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
    if (!event.defaultPrevented)
      onDismiss === null || onDismiss === void 0 || onDismiss();
  }, ownerDocument);
  $addc16e1bbe58fd0$export$3a72a57244d6e7652((event) => {
    const isHighestLayer = index4 === context.layers.size - 1;
    if (!isHighestLayer)
      return;
    onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);
    if (!event.defaultPrevented && onDismiss) {
      event.preventDefault();
      onDismiss();
    }
  }, ownerDocument);
  (0, import_react63.useEffect)(() => {
    if (!node1)
      return;
    if (disableOutsidePointerEvents) {
      if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
        $5cb92bef7577960e$var$originalBodyPointerEvents2 = ownerDocument.body.style.pointerEvents;
        ownerDocument.body.style.pointerEvents = "none";
      }
      context.layersWithOutsidePointerEventsDisabled.add(node1);
    }
    context.layers.add(node1);
    $5cb92bef7577960e$var$dispatchUpdate2();
    return () => {
      if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1)
        ownerDocument.body.style.pointerEvents = $5cb92bef7577960e$var$originalBodyPointerEvents2;
    };
  }, [
    node1,
    ownerDocument,
    disableOutsidePointerEvents,
    context
  ]);
  (0, import_react63.useEffect)(() => {
    return () => {
      if (!node1)
        return;
      context.layers.delete(node1);
      context.layersWithOutsidePointerEventsDisabled.delete(node1);
      $5cb92bef7577960e$var$dispatchUpdate2();
    };
  }, [
    node1,
    context
  ]);
  (0, import_react63.useEffect)(() => {
    const handleUpdate = () => force({});
    document.addEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE2, handleUpdate);
    return () => document.removeEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE2, handleUpdate);
  }, []);
  return /* @__PURE__ */ (0, import_react63.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.div, _extends({}, layerProps, {
    ref: composedRefs,
    style: {
      pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
      ...props.style
    },
    onFocusCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onFocusCapture, focusOutside.onFocusCapture),
    onBlurCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onBlurCapture, focusOutside.onBlurCapture),
    onPointerDownCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
  }));
});
function $5cb92bef7577960e$var$usePointerDownOutside2(onPointerDownOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
  const handlePointerDownOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(onPointerDownOutside);
  const isPointerInsideReactTreeRef = (0, import_react63.useRef)(false);
  const handleClickRef = (0, import_react63.useRef)(() => {
  });
  (0, import_react63.useEffect)(() => {
    const handlePointerDown = (event) => {
      if (event.target && !isPointerInsideReactTreeRef.current) {
        let handleAndDispatchPointerDownOutsideEvent = function() {
          $5cb92bef7577960e$var$handleAndDispatchCustomEvent2($5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE2, handlePointerDownOutside, eventDetail, {
            discrete: true
          });
        };
        const eventDetail = {
          originalEvent: event
        };
        if (event.pointerType === "touch") {
          ownerDocument.removeEventListener("click", handleClickRef.current);
          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;
          ownerDocument.addEventListener("click", handleClickRef.current, {
            once: true
          });
        } else
          handleAndDispatchPointerDownOutsideEvent();
      } else
        ownerDocument.removeEventListener("click", handleClickRef.current);
      isPointerInsideReactTreeRef.current = false;
    };
    const timerId = window.setTimeout(() => {
      ownerDocument.addEventListener("pointerdown", handlePointerDown);
    }, 0);
    return () => {
      window.clearTimeout(timerId);
      ownerDocument.removeEventListener("pointerdown", handlePointerDown);
      ownerDocument.removeEventListener("click", handleClickRef.current);
    };
  }, [
    ownerDocument,
    handlePointerDownOutside
  ]);
  return {
    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
  };
}
function $5cb92bef7577960e$var$useFocusOutside2(onFocusOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
  const handleFocusOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a2(onFocusOutside);
  const isFocusInsideReactTreeRef = (0, import_react63.useRef)(false);
  (0, import_react63.useEffect)(() => {
    const handleFocus = (event) => {
      if (event.target && !isFocusInsideReactTreeRef.current) {
        const eventDetail = {
          originalEvent: event
        };
        $5cb92bef7577960e$var$handleAndDispatchCustomEvent2($5cb92bef7577960e$var$FOCUS_OUTSIDE2, handleFocusOutside, eventDetail, {
          discrete: false
        });
      }
    };
    ownerDocument.addEventListener("focusin", handleFocus);
    return () => ownerDocument.removeEventListener("focusin", handleFocus);
  }, [
    ownerDocument,
    handleFocusOutside
  ]);
  return {
    onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
    onBlurCapture: () => isFocusInsideReactTreeRef.current = false
  };
}
function $5cb92bef7577960e$var$dispatchUpdate2() {
  const event = new CustomEvent($5cb92bef7577960e$var$CONTEXT_UPDATE2);
  document.dispatchEvent(event);
}
function $5cb92bef7577960e$var$handleAndDispatchCustomEvent2(name, handler, detail, { discrete }) {
  const target = detail.originalEvent.target;
  const event = new CustomEvent(name, {
    bubbles: false,
    cancelable: true,
    detail
  });
  if (handler)
    target.addEventListener(name, handler, {
      once: true
    });
  if (discrete)
    $8927f6f2acc4f386$export$6d1a0317bde7de7f2(target, event);
  else
    target.dispatchEvent(event);
}

// node_modules/@radix-ui/react-id/dist/index.mjs
var $2AODx$react4 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs
var import_react64 = __toESM(require_react(), 1);
var $9f79659886946c16$export$e5c5a5f917a5871c6 = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react64.useLayoutEffect : () => {
};

// node_modules/@radix-ui/react-id/dist/index.mjs
var $1746a345f3d73bb7$var$useReactId4 = $2AODx$react4["useId".toString()] || (() => void 0);
var $1746a345f3d73bb7$var$count4 = 0;
function $1746a345f3d73bb7$export$f680877a34711e374(deterministicId) {
  const [id, setId] = $2AODx$react4.useState($1746a345f3d73bb7$var$useReactId4());
  $9f79659886946c16$export$e5c5a5f917a5871c6(() => {
    if (!deterministicId)
      setId((reactId) => reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count4++));
  }, [
    deterministicId
  ]);
  return deterministicId || (id ? `radix-${id}` : "");
}

// node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-popper/dist/index.mjs
var import_react69 = __toESM(require_react(), 1);

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v11) => ({
  x: v11,
  y: v11
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr2 = ["left", "right"];
  const rl2 = ["right", "left"];
  const tb2 = ["top", "bottom"];
  const bt2 = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl2 : lr2;
      return isStart ? lr2 : rl2;
    case "left":
    case "right":
      return isStart ? tb2 : bt2;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}

// node_modules/@radix-ui/react-tooltip/node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform3
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform3.isRTL == null ? void 0 : platform3.isRTL(floating));
  let rects = await platform3.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x10,
    y: y10
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i10 = 0; i10 < validMiddleware.length; i10++) {
    const {
      name,
      fn: fn3
    } = validMiddleware[i10];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn3({
      x: x10,
      y: y10,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform3,
      elements: {
        reference,
        floating
      }
    });
    x10 = nextX != null ? nextX : x10;
    y10 = nextY != null ? nextY : y10;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform3.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x10,
          y: y10
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i10 = -1;
      continue;
    }
  }
  return {
    x: x10,
    y: y10,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x10,
    y: y10,
    platform: platform3,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform3.getClippingRect({
    element: ((_await$platform$isEle = await (platform3.isElement == null ? void 0 : platform3.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform3.getDocumentElement == null ? void 0 : platform3.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    ...rects.floating,
    x: x10,
    y: y10
  } : rects.reference;
  const offsetParent = await (platform3.getOffsetParent == null ? void 0 : platform3.getOffsetParent(elements.floating));
  const offsetScale = await (platform3.isElement == null ? void 0 : platform3.isElement(offsetParent)) ? await (platform3.getScale == null ? void 0 : platform3.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform3.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform3.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow2 = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x10,
      y: y10,
      placement,
      rects,
      platform: platform3,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x10,
      y: y10
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform3.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform3.getOffsetParent == null ? void 0 : platform3.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform3.isElement == null ? void 0 : platform3.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset3 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset3 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset3,
        centerOffset: center - offset3 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform3,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform3.isRTL == null ? void 0 : platform3.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d10) => d10.overflows[0] <= 0).sort((a10, b10) => a10.overflows[1] - b10.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d10) => [d10.placement, d10.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a10, b10) => a10[1] - b10[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
var hide = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "hide",
    options,
    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = "referenceHidden",
        ...detectOverflowOptions
      } = evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            elementContext: "reference"
          });
          const offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets)
            }
          };
        }
        case "escaped": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            altBoundary: true
          });
          const offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets)
            }
          };
        }
        default: {
          return {};
        }
      }
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform3,
    elements
  } = state;
  const rtl = await (platform3.isRTL == null ? void 0 : platform3.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x: x10,
        y: y10,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x10 + diffCoords.x,
        y: y10 + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x10,
        y: y10,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x11,
              y: y11
            } = _ref;
            return {
              x: x11,
              y: y11
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x10,
        y: y10
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x10,
          y: limitedCoords.y - y10
        }
      };
    }
  };
};
var limitShift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const {
        x: x10,
        y: y10,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset: offset3 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = evaluate(options, state);
      const coords = {
        x: x10,
        y: y10
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset3, state);
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};
var size = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      const {
        placement,
        rects,
        platform: platform3,
        elements
      } = state;
      const {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform3.isRTL == null ? void 0 : platform3.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const overflowAvailableHeight = height - overflow[heightSide];
      const overflowAvailableWidth = width - overflow[widthSide];
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if (isYAxis) {
        const maximumClippingWidth = width - overflow.left - overflow.right;
        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
      } else {
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform3.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle2(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = node.assignedSlot || node.parentNode || isShadowRoot(node) && node.host || getDocumentElement(node);
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

// node_modules/@radix-ui/react-tooltip/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $: $10
  } = getCssDimensions(domElement);
  let x10 = ($10 ? round(rect.width) : rect.width) / width;
  let y10 = ($10 ? round(rect.height) : rect.height) / height;
  if (!x10 || !Number.isFinite(x10)) {
    x10 = 1;
  }
  if (!y10 || !Number.isFinite(y10)) {
    y10 = 1;
  }
  return {
    x: x10,
    y: y10
  };
}
var noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x10 = (clientRect.left + visualOffsets.x) / scale.x;
  let y10 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top2 = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x10 *= iframeScale.x;
      y10 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x10 += left;
      y10 += top2;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x10,
    y: y10
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x10 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y10 = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x10 += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x10,
    y: y10
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x10 = 0;
  let y10 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x10 = visualViewport.offsetLeft;
      y10 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x10,
    y: y10
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top2 = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x10 = left * scale.x;
  const y10 = top2 * scale.y;
  return {
    width,
    height,
    x: x10,
    y: y10
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const window2 = getWindow(element);
  if (!isHTMLElement(element)) {
    return window2;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
var getElementRects = async function(_ref) {
  let {
    reference,
    floating,
    strategy
  } = _ref;
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
    floating: {
      x: 0,
      y: 0,
      ...await getDimensionsFn(floating)
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    clearTimeout(timeoutId);
    io && io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top: top2,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top2);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top2 + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        root: root.ownerDocument
      });
    } catch (e10) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          resizeObserver && resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo && cleanupIo();
    resizeObserver && resizeObserver.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var shift2 = shift;
var flip2 = flip;
var size2 = size;
var hide2 = hide;
var arrow3 = arrow2;
var limitShift2 = limitShift;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@radix-ui/react-tooltip/node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React17 = __toESM(require_react(), 1);
var import_react65 = __toESM(require_react(), 1);
var ReactDOM2 = __toESM(require_react_dom(), 1);
var arrow4 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow3({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      } else if (element) {
        return arrow3({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var index2 = typeof document !== "undefined" ? import_react65.useLayoutEffect : import_react65.useEffect;
function deepEqual2(a10, b10) {
  if (a10 === b10) {
    return true;
  }
  if (typeof a10 !== typeof b10) {
    return false;
  }
  if (typeof a10 === "function" && a10.toString() === b10.toString()) {
    return true;
  }
  let length, i10, keys;
  if (a10 && b10 && typeof a10 == "object") {
    if (Array.isArray(a10)) {
      length = a10.length;
      if (length != b10.length)
        return false;
      for (i10 = length; i10-- !== 0; ) {
        if (!deepEqual2(a10[i10], b10[i10])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a10);
    length = keys.length;
    if (length !== Object.keys(b10).length) {
      return false;
    }
    for (i10 = length; i10-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b10, keys[i10])) {
        return false;
      }
    }
    for (i10 = length; i10-- !== 0; ) {
      const key = keys[i10];
      if (key === "_owner" && a10.$$typeof) {
        continue;
      }
      if (!deepEqual2(a10[key], b10[key])) {
        return false;
      }
    }
    return true;
  }
  return a10 !== a10 && b10 !== b10;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef2(value) {
  const ref = React17.useRef(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating2(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform3,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React17.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React17.useState(middleware);
  if (!deepEqual2(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React17.useState(null);
  const [_floating, _setFloating] = React17.useState(null);
  const setReference = React17.useCallback((node) => {
    if (node != referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, [_setReference]);
  const setFloating = React17.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, [_setFloating]);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React17.useRef(null);
  const floatingRef = React17.useRef(null);
  const dataRef = React17.useRef(data);
  const whileElementsMountedRef = useLatestRef2(whileElementsMounted);
  const platformRef = useLatestRef2(platform3);
  const update = React17.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual2(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM2.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index2(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React17.useRef(false);
  index2(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index2(() => {
    if (referenceEl)
      referenceRef.current = referenceEl;
    if (floatingEl)
      floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      } else {
        update();
      }
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef]);
  const refs = React17.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React17.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React17.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x10 = roundByDPR(elements.floating, data.x);
    const y10 = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x10 + "px, " + y10 + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x10,
      top: y10
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React17.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}

// node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-arrow/dist/index.mjs
var import_react66 = __toESM(require_react(), 1);
var $7e8f5cd07187803e$export$21b07c8f274aebd52 = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
  const { children, width = 10, height = 5, ...arrowProps } = props;
  return /* @__PURE__ */ (0, import_react66.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.svg, _extends({}, arrowProps, {
    ref: forwardedRef,
    width,
    height,
    viewBox: "0 0 30 10",
    preserveAspectRatio: "none"
  }), props.asChild ? children : /* @__PURE__ */ (0, import_react66.createElement)("polygon", {
    points: "0,0 30,0 15,10"
  }));
});
var $7e8f5cd07187803e$export$be92b6f5f03c0fe92 = $7e8f5cd07187803e$export$21b07c8f274aebd52;

// node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
var import_react67 = __toESM(require_react(), 1);
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a4(callback) {
  const callbackRef = (0, import_react67.useRef)(callback);
  (0, import_react67.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react67.useMemo)(() => (...args) => {
    var _callbackRef$current;
    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
  }, []);
}

// node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-use-size/dist/index.mjs
var import_react68 = __toESM(require_react(), 1);
function $db6c3485150b8e66$export$1ab7ae714698c4b82(element) {
  const [size5, setSize] = (0, import_react68.useState)(void 0);
  $9f79659886946c16$export$e5c5a5f917a5871c6(() => {
    if (element) {
      setSize({
        width: element.offsetWidth,
        height: element.offsetHeight
      });
      const resizeObserver = new ResizeObserver((entries) => {
        if (!Array.isArray(entries))
          return;
        if (!entries.length)
          return;
        const entry = entries[0];
        let width;
        let height;
        if ("borderBoxSize" in entry) {
          const borderSizeEntry = entry["borderBoxSize"];
          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
          width = borderSize["inlineSize"];
          height = borderSize["blockSize"];
        } else {
          width = element.offsetWidth;
          height = element.offsetHeight;
        }
        setSize({
          width,
          height
        });
      });
      resizeObserver.observe(element, {
        box: "border-box"
      });
      return () => resizeObserver.unobserve(element);
    } else
      setSize(void 0);
  }, [
    element
  ]);
  return size5;
}

// node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-popper/dist/index.mjs
var $cf1ac5d9fe0e8206$var$POPPER_NAME2 = "Popper";
var [$cf1ac5d9fe0e8206$var$createPopperContext2, $cf1ac5d9fe0e8206$export$722aac194ae9232] = $c512c27ab02ef895$export$50c7b4e9d9f19c17($cf1ac5d9fe0e8206$var$POPPER_NAME2);
var [$cf1ac5d9fe0e8206$var$PopperProvider2, $cf1ac5d9fe0e8206$var$usePopperContext2] = $cf1ac5d9fe0e8206$var$createPopperContext2($cf1ac5d9fe0e8206$var$POPPER_NAME2);
var $cf1ac5d9fe0e8206$export$badac9ada3a0bdf92 = (props) => {
  const { __scopePopper, children } = props;
  const [anchor, setAnchor] = (0, import_react69.useState)(null);
  return /* @__PURE__ */ (0, import_react69.createElement)($cf1ac5d9fe0e8206$var$PopperProvider2, {
    scope: __scopePopper,
    anchor,
    onAnchorChange: setAnchor
  }, children);
};
var $cf1ac5d9fe0e8206$var$ANCHOR_NAME2 = "PopperAnchor";
var $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d2 = /* @__PURE__ */ (0, import_react69.forwardRef)((props, forwardedRef) => {
  const { __scopePopper, virtualRef, ...anchorProps } = props;
  const context = $cf1ac5d9fe0e8206$var$usePopperContext2($cf1ac5d9fe0e8206$var$ANCHOR_NAME2, __scopePopper);
  const ref = (0, import_react69.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, ref);
  (0, import_react69.useEffect)(() => {
    context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
  });
  return virtualRef ? null : /* @__PURE__ */ (0, import_react69.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.div, _extends({}, anchorProps, {
    ref: composedRefs
  }));
});
var $cf1ac5d9fe0e8206$var$CONTENT_NAME2 = "PopperContent";
var [$cf1ac5d9fe0e8206$var$PopperContentProvider2, $cf1ac5d9fe0e8206$var$useContentContext2] = $cf1ac5d9fe0e8206$var$createPopperContext2($cf1ac5d9fe0e8206$var$CONTENT_NAME2);
var $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc2 = /* @__PURE__ */ (0, import_react69.forwardRef)((props, forwardedRef) => {
  var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$trans, _middlewareData$trans2, _middlewareData$hide;
  const { __scopePopper, side = "bottom", sideOffset = 0, align = "center", alignOffset = 0, arrowPadding = 0, avoidCollisions = true, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = "partial", hideWhenDetached = false, updatePositionStrategy = "optimized", onPlaced, ...contentProps } = props;
  const context = $cf1ac5d9fe0e8206$var$usePopperContext2($cf1ac5d9fe0e8206$var$CONTENT_NAME2, __scopePopper);
  const [content, setContent] = (0, import_react69.useState)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, (node) => setContent(node));
  const [arrow8, setArrow] = (0, import_react69.useState)(null);
  const arrowSize = $db6c3485150b8e66$export$1ab7ae714698c4b82(arrow8);
  const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;
  const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;
  const desiredPlacement = side + (align !== "center" ? "-" + align : "");
  const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...collisionPaddingProp
  };
  const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
    collisionBoundary
  ];
  const hasExplicitBoundaries = boundary.length > 0;
  const detectOverflowOptions = {
    padding: collisionPadding,
    boundary: boundary.filter($cf1ac5d9fe0e8206$var$isNotNull2),
    altBoundary: hasExplicitBoundaries
  };
  const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating2({
    strategy: "fixed",
    placement: desiredPlacement,
    whileElementsMounted: (...args) => {
      const cleanup = autoUpdate(...args, {
        animationFrame: updatePositionStrategy === "always"
      });
      return cleanup;
    },
    elements: {
      reference: context.anchor
    },
    middleware: [
      offset({
        mainAxis: sideOffset + arrowHeight,
        alignmentAxis: alignOffset
      }),
      avoidCollisions && shift2({
        mainAxis: true,
        crossAxis: false,
        limiter: sticky === "partial" ? limitShift2() : void 0,
        ...detectOverflowOptions
      }),
      avoidCollisions && flip2({
        ...detectOverflowOptions
      }),
      size2({
        ...detectOverflowOptions,
        apply: ({ elements, rects, availableWidth, availableHeight }) => {
          const { width: anchorWidth, height: anchorHeight } = rects.reference;
          const contentStyle = elements.floating.style;
          contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`);
          contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`);
          contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`);
          contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
        }
      }),
      arrow8 && arrow4({
        element: arrow8,
        padding: arrowPadding
      }),
      $cf1ac5d9fe0e8206$var$transformOrigin2({
        arrowWidth,
        arrowHeight
      }),
      hideWhenDetached && hide2({
        strategy: "referenceHidden",
        ...detectOverflowOptions
      })
    ]
  });
  const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement2(placement);
  const handlePlaced = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a4(onPlaced);
  $9f79659886946c16$export$e5c5a5f917a5871c6(() => {
    if (isPositioned)
      handlePlaced === null || handlePlaced === void 0 || handlePlaced();
  }, [
    isPositioned,
    handlePlaced
  ]);
  const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;
  const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;
  const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;
  const [contentZIndex, setContentZIndex] = (0, import_react69.useState)();
  $9f79659886946c16$export$e5c5a5f917a5871c6(() => {
    if (content)
      setContentZIndex(window.getComputedStyle(content).zIndex);
  }, [
    content
  ]);
  return /* @__PURE__ */ (0, import_react69.createElement)("div", {
    ref: refs.setFloating,
    "data-radix-popper-content-wrapper": "",
    style: {
      ...floatingStyles,
      transform: isPositioned ? floatingStyles.transform : "translate(0, -200%)",
      minWidth: "max-content",
      zIndex: contentZIndex,
      ["--radix-popper-transform-origin"]: [
        (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
        (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
      ].join(" ")
    },
    dir: props.dir
  }, /* @__PURE__ */ (0, import_react69.createElement)($cf1ac5d9fe0e8206$var$PopperContentProvider2, {
    scope: __scopePopper,
    placedSide,
    onArrowChange: setArrow,
    arrowX,
    arrowY,
    shouldHideArrow: cannotCenterArrow
  }, /* @__PURE__ */ (0, import_react69.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.div, _extends({
    "data-side": placedSide,
    "data-align": placedAlign
  }, contentProps, {
    ref: composedRefs,
    style: {
      ...contentProps.style,
      animation: !isPositioned ? "none" : void 0,
      opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : void 0
    }
  }))));
});
var $cf1ac5d9fe0e8206$var$ARROW_NAME2 = "PopperArrow";
var $cf1ac5d9fe0e8206$var$OPPOSITE_SIDE2 = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
var $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd03 = /* @__PURE__ */ (0, import_react69.forwardRef)(function $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd04(props, forwardedRef) {
  const { __scopePopper, ...arrowProps } = props;
  const contentContext = $cf1ac5d9fe0e8206$var$useContentContext2($cf1ac5d9fe0e8206$var$ARROW_NAME2, __scopePopper);
  const baseSide = $cf1ac5d9fe0e8206$var$OPPOSITE_SIDE2[contentContext.placedSide];
  return /* @__PURE__ */ (0, import_react69.createElement)("span", {
    ref: contentContext.onArrowChange,
    style: {
      position: "absolute",
      left: contentContext.arrowX,
      top: contentContext.arrowY,
      [baseSide]: 0,
      transformOrigin: {
        top: "",
        right: "0 0",
        bottom: "center 0",
        left: "100% 0"
      }[contentContext.placedSide],
      transform: {
        top: "translateY(100%)",
        right: "translateY(50%) rotate(90deg) translateX(-50%)",
        bottom: `rotate(180deg)`,
        left: "translateY(50%) rotate(-90deg) translateX(50%)"
      }[contentContext.placedSide],
      visibility: contentContext.shouldHideArrow ? "hidden" : void 0
    }
  }, /* @__PURE__ */ (0, import_react69.createElement)($7e8f5cd07187803e$export$be92b6f5f03c0fe92, _extends({}, arrowProps, {
    ref: forwardedRef,
    style: {
      ...arrowProps.style,
      display: "block"
    }
  })));
});
function $cf1ac5d9fe0e8206$var$isNotNull2(value) {
  return value !== null;
}
var $cf1ac5d9fe0e8206$var$transformOrigin2 = (options) => ({
  name: "transformOrigin",
  options,
  fn(data) {
    var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
    const { placement, rects, middlewareData } = data;
    const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;
    const isArrowHidden = cannotCenterArrow;
    const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
    const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
    const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement2(placement);
    const noArrowAlign = {
      start: "0%",
      center: "50%",
      end: "100%"
    }[placedAlign];
    const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;
    const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;
    let x10 = "";
    let y10 = "";
    if (placedSide === "bottom") {
      x10 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y10 = `${-arrowHeight}px`;
    } else if (placedSide === "top") {
      x10 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y10 = `${rects.floating.height + arrowHeight}px`;
    } else if (placedSide === "right") {
      x10 = `${-arrowHeight}px`;
      y10 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    } else if (placedSide === "left") {
      x10 = `${rects.floating.width + arrowHeight}px`;
      y10 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    }
    return {
      data: {
        x: x10,
        y: y10
      }
    };
  }
});
function $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement2(placement) {
  const [side, align = "center"] = placement.split("-");
  return [
    side,
    align
  ];
}
var $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe92 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf92;
var $cf1ac5d9fe0e8206$export$b688253958b8dfe72 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d2;
var $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d22 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc2;
var $cf1ac5d9fe0e8206$export$21b07c8f274aebd52 = $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd03;

// node_modules/@radix-ui/react-portal/dist/index.mjs
var import_react70 = __toESM(require_react(), 1);
var import_react_dom12 = __toESM(require_react_dom(), 1);
var $f1701beae083dbae$export$602eac185826482c2 = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
  var _globalThis$document;
  const { container = globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.body, ...portalProps } = props;
  return container ? /* @__PURE__ */ import_react_dom12.default.createPortal(/* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.div, _extends({}, portalProps, {
    ref: forwardedRef
  })), container) : null;
});

// node_modules/@radix-ui/react-presence/dist/index.mjs
var import_react71 = __toESM(require_react(), 1);
var import_react_dom13 = __toESM(require_react_dom(), 1);
function $fe963b355347cc68$export$3e6543de14f8614f2(initialState, machine) {
  return (0, import_react71.useReducer)((state, event) => {
    const nextState = machine[state][event];
    return nextState !== null && nextState !== void 0 ? nextState : state;
  }, initialState);
}
var $921a889cee6df7e8$export$99c2b779aa4e8b8b2 = (props) => {
  const { present, children } = props;
  const presence = $921a889cee6df7e8$var$usePresence2(present);
  const child = typeof children === "function" ? children({
    present: presence.isPresent
  }) : import_react71.Children.only(children);
  const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(presence.ref, child.ref);
  const forceMount = typeof children === "function";
  return forceMount || presence.isPresent ? /* @__PURE__ */ (0, import_react71.cloneElement)(child, {
    ref
  }) : null;
};
$921a889cee6df7e8$export$99c2b779aa4e8b8b2.displayName = "Presence";
function $921a889cee6df7e8$var$usePresence2(present) {
  const [node1, setNode] = (0, import_react71.useState)();
  const stylesRef = (0, import_react71.useRef)({});
  const prevPresentRef = (0, import_react71.useRef)(present);
  const prevAnimationNameRef = (0, import_react71.useRef)("none");
  const initialState = present ? "mounted" : "unmounted";
  const [state, send] = $fe963b355347cc68$export$3e6543de14f8614f2(initialState, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  (0, import_react71.useEffect)(() => {
    const currentAnimationName = $921a889cee6df7e8$var$getAnimationName2(stylesRef.current);
    prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
  }, [
    state
  ]);
  $9f79659886946c16$export$e5c5a5f917a5871c6(() => {
    const styles = stylesRef.current;
    const wasPresent = prevPresentRef.current;
    const hasPresentChanged = wasPresent !== present;
    if (hasPresentChanged) {
      const prevAnimationName = prevAnimationNameRef.current;
      const currentAnimationName = $921a889cee6df7e8$var$getAnimationName2(styles);
      if (present)
        send("MOUNT");
      else if (currentAnimationName === "none" || (styles === null || styles === void 0 ? void 0 : styles.display) === "none")
        send("UNMOUNT");
      else {
        const isAnimating = prevAnimationName !== currentAnimationName;
        if (wasPresent && isAnimating)
          send("ANIMATION_OUT");
        else
          send("UNMOUNT");
      }
      prevPresentRef.current = present;
    }
  }, [
    present,
    send
  ]);
  $9f79659886946c16$export$e5c5a5f917a5871c6(() => {
    if (node1) {
      const handleAnimationEnd = (event) => {
        const currentAnimationName = $921a889cee6df7e8$var$getAnimationName2(stylesRef.current);
        const isCurrentAnimation = currentAnimationName.includes(event.animationName);
        if (event.target === node1 && isCurrentAnimation)
          (0, import_react_dom13.flushSync)(() => send("ANIMATION_END"));
      };
      const handleAnimationStart = (event) => {
        if (event.target === node1)
          prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName2(stylesRef.current);
      };
      node1.addEventListener("animationstart", handleAnimationStart);
      node1.addEventListener("animationcancel", handleAnimationEnd);
      node1.addEventListener("animationend", handleAnimationEnd);
      return () => {
        node1.removeEventListener("animationstart", handleAnimationStart);
        node1.removeEventListener("animationcancel", handleAnimationEnd);
        node1.removeEventListener("animationend", handleAnimationEnd);
      };
    } else
      send("ANIMATION_END");
  }, [
    node1,
    send
  ]);
  return {
    isPresent: [
      "mounted",
      "unmountSuspended"
    ].includes(state),
    ref: (0, import_react71.useCallback)((node) => {
      if (node)
        stylesRef.current = getComputedStyle(node);
      setNode(node);
    }, [])
  };
}
function $921a889cee6df7e8$var$getAnimationName2(styles) {
  return (styles === null || styles === void 0 ? void 0 : styles.animationName) || "none";
}

// node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
var import_react72 = __toESM(require_react(), 1);
function $71cd76cc60e0454e$export$6f32135080cb4c32({ prop, defaultProp, onChange = () => {
} }) {
  const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState2({
    defaultProp,
    onChange
  });
  const isControlled = prop !== void 0;
  const value1 = isControlled ? prop : uncontrolledProp;
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a4(onChange);
  const setValue = (0, import_react72.useCallback)((nextValue) => {
    if (isControlled) {
      const setter = nextValue;
      const value = typeof nextValue === "function" ? setter(prop) : nextValue;
      if (value !== prop)
        handleChange(value);
    } else
      setUncontrolledProp(nextValue);
  }, [
    isControlled,
    prop,
    setUncontrolledProp,
    handleChange
  ]);
  return [
    value1,
    setValue
  ];
}
function $71cd76cc60e0454e$var$useUncontrolledState2({ defaultProp, onChange }) {
  const uncontrolledState = (0, import_react72.useState)(defaultProp);
  const [value] = uncontrolledState;
  const prevValueRef = (0, import_react72.useRef)(value);
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a4(onChange);
  (0, import_react72.useEffect)(() => {
    if (prevValueRef.current !== value) {
      handleChange(value);
      prevValueRef.current = value;
    }
  }, [
    value,
    prevValueRef,
    handleChange
  ]);
  return uncontrolledState;
}

// node_modules/@radix-ui/react-visually-hidden/dist/index.mjs
var import_react73 = __toESM(require_react(), 1);
var $ea1ef594cf570d83$export$439d29a4e110a164 = /* @__PURE__ */ (0, import_react73.forwardRef)((props, forwardedRef) => {
  return /* @__PURE__ */ (0, import_react73.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.span, _extends({}, props, {
    ref: forwardedRef,
    style: {
      position: "absolute",
      border: 0,
      width: 1,
      height: 1,
      padding: 0,
      margin: -1,
      overflow: "hidden",
      clip: "rect(0, 0, 0, 0)",
      whiteSpace: "nowrap",
      wordWrap: "normal",
      ...props.style
    }
  }));
});
var $ea1ef594cf570d83$export$be92b6f5f03c0fe9 = $ea1ef594cf570d83$export$439d29a4e110a164;

// node_modules/@radix-ui/react-tooltip/dist/index.mjs
var [$a093c7e1ec25a057$var$createTooltipContext, $a093c7e1ec25a057$export$1c540a2224f0d865] = $c512c27ab02ef895$export$50c7b4e9d9f19c17("Tooltip", [
  $cf1ac5d9fe0e8206$export$722aac194ae9232
]);
var $a093c7e1ec25a057$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae9232();
var $a093c7e1ec25a057$var$PROVIDER_NAME = "TooltipProvider";
var $a093c7e1ec25a057$var$DEFAULT_DELAY_DURATION = 700;
var $a093c7e1ec25a057$var$TOOLTIP_OPEN = "tooltip.open";
var [$a093c7e1ec25a057$var$TooltipProviderContextProvider, $a093c7e1ec25a057$var$useTooltipProviderContext] = $a093c7e1ec25a057$var$createTooltipContext($a093c7e1ec25a057$var$PROVIDER_NAME);
var $a093c7e1ec25a057$export$f78649fb9ca566b8 = (props) => {
  const { __scopeTooltip, delayDuration = $a093c7e1ec25a057$var$DEFAULT_DELAY_DURATION, skipDelayDuration = 300, disableHoverableContent = false, children } = props;
  const [isOpenDelayed, setIsOpenDelayed] = (0, import_react74.useState)(true);
  const isPointerInTransitRef = (0, import_react74.useRef)(false);
  const skipDelayTimerRef = (0, import_react74.useRef)(0);
  (0, import_react74.useEffect)(() => {
    const skipDelayTimer = skipDelayTimerRef.current;
    return () => window.clearTimeout(skipDelayTimer);
  }, []);
  return /* @__PURE__ */ (0, import_react74.createElement)($a093c7e1ec25a057$var$TooltipProviderContextProvider, {
    scope: __scopeTooltip,
    isOpenDelayed,
    delayDuration,
    onOpen: (0, import_react74.useCallback)(() => {
      window.clearTimeout(skipDelayTimerRef.current);
      setIsOpenDelayed(false);
    }, []),
    onClose: (0, import_react74.useCallback)(() => {
      window.clearTimeout(skipDelayTimerRef.current);
      skipDelayTimerRef.current = window.setTimeout(() => setIsOpenDelayed(true), skipDelayDuration);
    }, [
      skipDelayDuration
    ]),
    isPointerInTransitRef,
    onPointerInTransitChange: (0, import_react74.useCallback)((inTransit) => {
      isPointerInTransitRef.current = inTransit;
    }, []),
    disableHoverableContent
  }, children);
};
var $a093c7e1ec25a057$var$TOOLTIP_NAME = "Tooltip";
var [$a093c7e1ec25a057$var$TooltipContextProvider, $a093c7e1ec25a057$var$useTooltipContext] = $a093c7e1ec25a057$var$createTooltipContext($a093c7e1ec25a057$var$TOOLTIP_NAME);
var $a093c7e1ec25a057$export$28c660c63b792dea = (props) => {
  const { __scopeTooltip, children, open: openProp, defaultOpen = false, onOpenChange, disableHoverableContent: disableHoverableContentProp, delayDuration: delayDurationProp } = props;
  const providerContext = $a093c7e1ec25a057$var$useTooltipProviderContext($a093c7e1ec25a057$var$TOOLTIP_NAME, props.__scopeTooltip);
  const popperScope = $a093c7e1ec25a057$var$usePopperScope(__scopeTooltip);
  const [trigger2, setTrigger] = (0, import_react74.useState)(null);
  const contentId = $1746a345f3d73bb7$export$f680877a34711e374();
  const openTimerRef = (0, import_react74.useRef)(0);
  const disableHoverableContent = disableHoverableContentProp !== null && disableHoverableContentProp !== void 0 ? disableHoverableContentProp : providerContext.disableHoverableContent;
  const delayDuration = delayDurationProp !== null && delayDurationProp !== void 0 ? delayDurationProp : providerContext.delayDuration;
  const wasOpenDelayedRef = (0, import_react74.useRef)(false);
  const [open1 = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c32({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: (open) => {
      if (open) {
        providerContext.onOpen();
        document.dispatchEvent(new CustomEvent($a093c7e1ec25a057$var$TOOLTIP_OPEN));
      } else
        providerContext.onClose();
      onOpenChange === null || onOpenChange === void 0 || onOpenChange(open);
    }
  });
  const stateAttribute = (0, import_react74.useMemo)(() => {
    return open1 ? wasOpenDelayedRef.current ? "delayed-open" : "instant-open" : "closed";
  }, [
    open1
  ]);
  const handleOpen = (0, import_react74.useCallback)(() => {
    window.clearTimeout(openTimerRef.current);
    wasOpenDelayedRef.current = false;
    setOpen(true);
  }, [
    setOpen
  ]);
  const handleClose = (0, import_react74.useCallback)(() => {
    window.clearTimeout(openTimerRef.current);
    setOpen(false);
  }, [
    setOpen
  ]);
  const handleDelayedOpen = (0, import_react74.useCallback)(() => {
    window.clearTimeout(openTimerRef.current);
    openTimerRef.current = window.setTimeout(() => {
      wasOpenDelayedRef.current = true;
      setOpen(true);
    }, delayDuration);
  }, [
    delayDuration,
    setOpen
  ]);
  (0, import_react74.useEffect)(() => {
    return () => window.clearTimeout(openTimerRef.current);
  }, []);
  return /* @__PURE__ */ (0, import_react74.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe92, popperScope, /* @__PURE__ */ (0, import_react74.createElement)($a093c7e1ec25a057$var$TooltipContextProvider, {
    scope: __scopeTooltip,
    contentId,
    open: open1,
    stateAttribute,
    trigger: trigger2,
    onTriggerChange: setTrigger,
    onTriggerEnter: (0, import_react74.useCallback)(() => {
      if (providerContext.isOpenDelayed)
        handleDelayedOpen();
      else
        handleOpen();
    }, [
      providerContext.isOpenDelayed,
      handleDelayedOpen,
      handleOpen
    ]),
    onTriggerLeave: (0, import_react74.useCallback)(() => {
      if (disableHoverableContent)
        handleClose();
      else
        window.clearTimeout(openTimerRef.current);
    }, [
      handleClose,
      disableHoverableContent
    ]),
    onOpen: handleOpen,
    onClose: handleClose,
    disableHoverableContent
  }, children));
};
var $a093c7e1ec25a057$var$TRIGGER_NAME = "TooltipTrigger";
var $a093c7e1ec25a057$export$8c610744efcf8a1d = /* @__PURE__ */ (0, import_react74.forwardRef)((props, forwardedRef) => {
  const { __scopeTooltip, ...triggerProps } = props;
  const context = $a093c7e1ec25a057$var$useTooltipContext($a093c7e1ec25a057$var$TRIGGER_NAME, __scopeTooltip);
  const providerContext = $a093c7e1ec25a057$var$useTooltipProviderContext($a093c7e1ec25a057$var$TRIGGER_NAME, __scopeTooltip);
  const popperScope = $a093c7e1ec25a057$var$usePopperScope(__scopeTooltip);
  const ref = (0, import_react74.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, ref, context.onTriggerChange);
  const isPointerDownRef = (0, import_react74.useRef)(false);
  const hasPointerMoveOpenedRef = (0, import_react74.useRef)(false);
  const handlePointerUp = (0, import_react74.useCallback)(() => isPointerDownRef.current = false, []);
  (0, import_react74.useEffect)(() => {
    return () => document.removeEventListener("pointerup", handlePointerUp);
  }, [
    handlePointerUp
  ]);
  return /* @__PURE__ */ (0, import_react74.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe72, _extends({
    asChild: true
  }, popperScope), /* @__PURE__ */ (0, import_react74.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.button, _extends({
    "aria-describedby": context.open ? context.contentId : void 0,
    "data-state": context.stateAttribute
  }, triggerProps, {
    ref: composedRefs,
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onPointerMove, (event) => {
      if (event.pointerType === "touch")
        return;
      if (!hasPointerMoveOpenedRef.current && !providerContext.isPointerInTransitRef.current) {
        context.onTriggerEnter();
        hasPointerMoveOpenedRef.current = true;
      }
    }),
    onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onPointerLeave, () => {
      context.onTriggerLeave();
      hasPointerMoveOpenedRef.current = false;
    }),
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onPointerDown, () => {
      isPointerDownRef.current = true;
      document.addEventListener("pointerup", handlePointerUp, {
        once: true
      });
    }),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onFocus, () => {
      if (!isPointerDownRef.current)
        context.onOpen();
    }),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onBlur, context.onClose),
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onClick, context.onClose)
  })));
});
var $a093c7e1ec25a057$var$PORTAL_NAME = "TooltipPortal";
var [$a093c7e1ec25a057$var$PortalProvider, $a093c7e1ec25a057$var$usePortalContext] = $a093c7e1ec25a057$var$createTooltipContext($a093c7e1ec25a057$var$PORTAL_NAME, {
  forceMount: void 0
});
var $a093c7e1ec25a057$var$CONTENT_NAME = "TooltipContent";
var $a093c7e1ec25a057$export$e9003e2be37ec060 = /* @__PURE__ */ (0, import_react74.forwardRef)((props, forwardedRef) => {
  const portalContext = $a093c7e1ec25a057$var$usePortalContext($a093c7e1ec25a057$var$CONTENT_NAME, props.__scopeTooltip);
  const { forceMount = portalContext.forceMount, side = "top", ...contentProps } = props;
  const context = $a093c7e1ec25a057$var$useTooltipContext($a093c7e1ec25a057$var$CONTENT_NAME, props.__scopeTooltip);
  return /* @__PURE__ */ (0, import_react74.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b2, {
    present: forceMount || context.open
  }, context.disableHoverableContent ? /* @__PURE__ */ (0, import_react74.createElement)($a093c7e1ec25a057$var$TooltipContentImpl, _extends({
    side
  }, contentProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ (0, import_react74.createElement)($a093c7e1ec25a057$var$TooltipContentHoverable, _extends({
    side
  }, contentProps, {
    ref: forwardedRef
  })));
});
var $a093c7e1ec25a057$var$TooltipContentHoverable = /* @__PURE__ */ (0, import_react74.forwardRef)((props, forwardedRef) => {
  const context = $a093c7e1ec25a057$var$useTooltipContext($a093c7e1ec25a057$var$CONTENT_NAME, props.__scopeTooltip);
  const providerContext = $a093c7e1ec25a057$var$useTooltipProviderContext($a093c7e1ec25a057$var$CONTENT_NAME, props.__scopeTooltip);
  const ref = (0, import_react74.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, ref);
  const [pointerGraceArea, setPointerGraceArea] = (0, import_react74.useState)(null);
  const { trigger: trigger2, onClose } = context;
  const content = ref.current;
  const { onPointerInTransitChange } = providerContext;
  const handleRemoveGraceArea = (0, import_react74.useCallback)(() => {
    setPointerGraceArea(null);
    onPointerInTransitChange(false);
  }, [
    onPointerInTransitChange
  ]);
  const handleCreateGraceArea = (0, import_react74.useCallback)((event, hoverTarget) => {
    const currentTarget = event.currentTarget;
    const exitPoint = {
      x: event.clientX,
      y: event.clientY
    };
    const exitSide = $a093c7e1ec25a057$var$getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());
    const paddedExitPoints = $a093c7e1ec25a057$var$getPaddedExitPoints(exitPoint, exitSide);
    const hoverTargetPoints = $a093c7e1ec25a057$var$getPointsFromRect(hoverTarget.getBoundingClientRect());
    const graceArea = $a093c7e1ec25a057$var$getHull([
      ...paddedExitPoints,
      ...hoverTargetPoints
    ]);
    setPointerGraceArea(graceArea);
    onPointerInTransitChange(true);
  }, [
    onPointerInTransitChange
  ]);
  (0, import_react74.useEffect)(() => {
    return () => handleRemoveGraceArea();
  }, [
    handleRemoveGraceArea
  ]);
  (0, import_react74.useEffect)(() => {
    if (trigger2 && content) {
      const handleTriggerLeave = (event) => handleCreateGraceArea(event, content);
      const handleContentLeave = (event) => handleCreateGraceArea(event, trigger2);
      trigger2.addEventListener("pointerleave", handleTriggerLeave);
      content.addEventListener("pointerleave", handleContentLeave);
      return () => {
        trigger2.removeEventListener("pointerleave", handleTriggerLeave);
        content.removeEventListener("pointerleave", handleContentLeave);
      };
    }
  }, [
    trigger2,
    content,
    handleCreateGraceArea,
    handleRemoveGraceArea
  ]);
  (0, import_react74.useEffect)(() => {
    if (pointerGraceArea) {
      const handleTrackPointerGrace = (event) => {
        const target = event.target;
        const pointerPosition = {
          x: event.clientX,
          y: event.clientY
        };
        const hasEnteredTarget = (trigger2 === null || trigger2 === void 0 ? void 0 : trigger2.contains(target)) || (content === null || content === void 0 ? void 0 : content.contains(target));
        const isPointerOutsideGraceArea = !$a093c7e1ec25a057$var$isPointInPolygon(pointerPosition, pointerGraceArea);
        if (hasEnteredTarget)
          handleRemoveGraceArea();
        else if (isPointerOutsideGraceArea) {
          handleRemoveGraceArea();
          onClose();
        }
      };
      document.addEventListener("pointermove", handleTrackPointerGrace);
      return () => document.removeEventListener("pointermove", handleTrackPointerGrace);
    }
  }, [
    trigger2,
    content,
    pointerGraceArea,
    onClose,
    handleRemoveGraceArea
  ]);
  return /* @__PURE__ */ (0, import_react74.createElement)($a093c7e1ec25a057$var$TooltipContentImpl, _extends({}, props, {
    ref: composedRefs
  }));
});
var [$a093c7e1ec25a057$var$VisuallyHiddenContentContextProvider, $a093c7e1ec25a057$var$useVisuallyHiddenContentContext] = $a093c7e1ec25a057$var$createTooltipContext($a093c7e1ec25a057$var$TOOLTIP_NAME, {
  isInside: false
});
var $a093c7e1ec25a057$var$TooltipContentImpl = /* @__PURE__ */ (0, import_react74.forwardRef)((props, forwardedRef) => {
  const { __scopeTooltip, children, "aria-label": ariaLabel, onEscapeKeyDown, onPointerDownOutside, ...contentProps } = props;
  const context = $a093c7e1ec25a057$var$useTooltipContext($a093c7e1ec25a057$var$CONTENT_NAME, __scopeTooltip);
  const popperScope = $a093c7e1ec25a057$var$usePopperScope(__scopeTooltip);
  const { onClose } = context;
  (0, import_react74.useEffect)(() => {
    document.addEventListener($a093c7e1ec25a057$var$TOOLTIP_OPEN, onClose);
    return () => document.removeEventListener($a093c7e1ec25a057$var$TOOLTIP_OPEN, onClose);
  }, [
    onClose
  ]);
  (0, import_react74.useEffect)(() => {
    if (context.trigger) {
      const handleScroll3 = (event) => {
        const target = event.target;
        if (target !== null && target !== void 0 && target.contains(context.trigger))
          onClose();
      };
      window.addEventListener("scroll", handleScroll3, {
        capture: true
      });
      return () => window.removeEventListener("scroll", handleScroll3, {
        capture: true
      });
    }
  }, [
    context.trigger,
    onClose
  ]);
  return /* @__PURE__ */ (0, import_react74.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f222, {
    asChild: true,
    disableOutsidePointerEvents: false,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside: (event) => event.preventDefault(),
    onDismiss: onClose
  }, /* @__PURE__ */ (0, import_react74.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d22, _extends({
    "data-state": context.stateAttribute
  }, popperScope, contentProps, {
    ref: forwardedRef,
    style: {
      ...contentProps.style,
      "--radix-tooltip-content-transform-origin": "var(--radix-popper-transform-origin)",
      "--radix-tooltip-content-available-width": "var(--radix-popper-available-width)",
      "--radix-tooltip-content-available-height": "var(--radix-popper-available-height)",
      "--radix-tooltip-trigger-width": "var(--radix-popper-anchor-width)",
      "--radix-tooltip-trigger-height": "var(--radix-popper-anchor-height)"
    }
  }), /* @__PURE__ */ (0, import_react74.createElement)($5e63c961fc1ce211$export$d9f1ccf0bdb05d458, null, children), /* @__PURE__ */ (0, import_react74.createElement)($a093c7e1ec25a057$var$VisuallyHiddenContentContextProvider, {
    scope: __scopeTooltip,
    isInside: true
  }, /* @__PURE__ */ (0, import_react74.createElement)($ea1ef594cf570d83$export$be92b6f5f03c0fe9, {
    id: context.contentId,
    role: "tooltip"
  }, ariaLabel || children))));
});
var $a093c7e1ec25a057$var$ARROW_NAME = "TooltipArrow";
var $a093c7e1ec25a057$export$c27ee0ad710f7559 = /* @__PURE__ */ (0, import_react74.forwardRef)((props, forwardedRef) => {
  const { __scopeTooltip, ...arrowProps } = props;
  const popperScope = $a093c7e1ec25a057$var$usePopperScope(__scopeTooltip);
  const visuallyHiddenContentContext = $a093c7e1ec25a057$var$useVisuallyHiddenContentContext($a093c7e1ec25a057$var$ARROW_NAME, __scopeTooltip);
  return visuallyHiddenContentContext.isInside ? null : /* @__PURE__ */ (0, import_react74.createElement)($cf1ac5d9fe0e8206$export$21b07c8f274aebd52, _extends({}, popperScope, arrowProps, {
    ref: forwardedRef
  }));
});
function $a093c7e1ec25a057$var$getExitSideFromRect(point, rect) {
  const top2 = Math.abs(rect.top - point.y);
  const bottom = Math.abs(rect.bottom - point.y);
  const right = Math.abs(rect.right - point.x);
  const left = Math.abs(rect.left - point.x);
  switch (Math.min(top2, bottom, right, left)) {
    case left:
      return "left";
    case right:
      return "right";
    case top2:
      return "top";
    case bottom:
      return "bottom";
    default:
      throw new Error("unreachable");
  }
}
function $a093c7e1ec25a057$var$getPaddedExitPoints(exitPoint, exitSide, padding = 5) {
  const paddedExitPoints = [];
  switch (exitSide) {
    case "top":
      paddedExitPoints.push({
        x: exitPoint.x - padding,
        y: exitPoint.y + padding
      }, {
        x: exitPoint.x + padding,
        y: exitPoint.y + padding
      });
      break;
    case "bottom":
      paddedExitPoints.push({
        x: exitPoint.x - padding,
        y: exitPoint.y - padding
      }, {
        x: exitPoint.x + padding,
        y: exitPoint.y - padding
      });
      break;
    case "left":
      paddedExitPoints.push({
        x: exitPoint.x + padding,
        y: exitPoint.y - padding
      }, {
        x: exitPoint.x + padding,
        y: exitPoint.y + padding
      });
      break;
    case "right":
      paddedExitPoints.push({
        x: exitPoint.x - padding,
        y: exitPoint.y - padding
      }, {
        x: exitPoint.x - padding,
        y: exitPoint.y + padding
      });
      break;
  }
  return paddedExitPoints;
}
function $a093c7e1ec25a057$var$getPointsFromRect(rect) {
  const { top: top2, right, bottom, left } = rect;
  return [
    {
      x: left,
      y: top2
    },
    {
      x: right,
      y: top2
    },
    {
      x: right,
      y: bottom
    },
    {
      x: left,
      y: bottom
    }
  ];
}
function $a093c7e1ec25a057$var$isPointInPolygon(point, polygon) {
  const { x: x10, y: y10 } = point;
  let inside = false;
  for (let i10 = 0, j10 = polygon.length - 1; i10 < polygon.length; j10 = i10++) {
    const xi2 = polygon[i10].x;
    const yi2 = polygon[i10].y;
    const xj2 = polygon[j10].x;
    const yj2 = polygon[j10].y;
    const intersect = yi2 > y10 !== yj2 > y10 && x10 < (xj2 - xi2) * (y10 - yi2) / (yj2 - yi2) + xi2;
    if (intersect)
      inside = !inside;
  }
  return inside;
}
function $a093c7e1ec25a057$var$getHull(points) {
  const newPoints = points.slice();
  newPoints.sort((a10, b10) => {
    if (a10.x < b10.x)
      return -1;
    else if (a10.x > b10.x)
      return 1;
    else if (a10.y < b10.y)
      return -1;
    else if (a10.y > b10.y)
      return 1;
    else
      return 0;
  });
  return $a093c7e1ec25a057$var$getHullPresorted(newPoints);
}
function $a093c7e1ec25a057$var$getHullPresorted(points) {
  if (points.length <= 1)
    return points.slice();
  const upperHull = [];
  for (let i10 = 0; i10 < points.length; i10++) {
    const p10 = points[i10];
    while (upperHull.length >= 2) {
      const q10 = upperHull[upperHull.length - 1];
      const r10 = upperHull[upperHull.length - 2];
      if ((q10.x - r10.x) * (p10.y - r10.y) >= (q10.y - r10.y) * (p10.x - r10.x))
        upperHull.pop();
      else
        break;
    }
    upperHull.push(p10);
  }
  upperHull.pop();
  const lowerHull = [];
  for (let i12 = points.length - 1; i12 >= 0; i12--) {
    const p10 = points[i12];
    while (lowerHull.length >= 2) {
      const q10 = lowerHull[lowerHull.length - 1];
      const r10 = lowerHull[lowerHull.length - 2];
      if ((q10.x - r10.x) * (p10.y - r10.y) >= (q10.y - r10.y) * (p10.x - r10.x))
        lowerHull.pop();
      else
        break;
    }
    lowerHull.push(p10);
  }
  lowerHull.pop();
  if (upperHull.length === 1 && lowerHull.length === 1 && upperHull[0].x === lowerHull[0].x && upperHull[0].y === lowerHull[0].y)
    return upperHull;
  else
    return upperHull.concat(lowerHull);
}
var $a093c7e1ec25a057$export$2881499e37b75b9a = $a093c7e1ec25a057$export$f78649fb9ca566b8;
var $a093c7e1ec25a057$export$be92b6f5f03c0fe9 = $a093c7e1ec25a057$export$28c660c63b792dea;
var $a093c7e1ec25a057$export$41fb9f06171c75f4 = $a093c7e1ec25a057$export$8c610744efcf8a1d;
var $a093c7e1ec25a057$export$7c6e2c02157bb7d2 = $a093c7e1ec25a057$export$e9003e2be37ec060;
var $a093c7e1ec25a057$export$21b07c8f274aebd5 = $a093c7e1ec25a057$export$c27ee0ad710f7559;

// node_modules/@tldraw/tldraw/dist/index.mjs
var Tn2 = __toESM(require_react(), 1);
var uo = __toESM(require_react(), 1);
var ho = __toESM(require_react(), 1);
var vr = __toESM(require_react(), 1);

// node_modules/hotkeys-js/dist/hotkeys.esm.js
var isff = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase().indexOf("firefox") > 0 : false;
function addEvent(object, event, method, useCapture) {
  if (object.addEventListener) {
    object.addEventListener(event, method, useCapture);
  } else if (object.attachEvent) {
    object.attachEvent("on".concat(event), function() {
      method(window.event);
    });
  }
}
function getMods(modifier, key) {
  var mods = key.slice(0, key.length - 1);
  for (var i10 = 0; i10 < mods.length; i10++) {
    mods[i10] = modifier[mods[i10].toLowerCase()];
  }
  return mods;
}
function getKeys(key) {
  if (typeof key !== "string")
    key = "";
  key = key.replace(/\s/g, "");
  var keys = key.split(",");
  var index4 = keys.lastIndexOf("");
  for (; index4 >= 0; ) {
    keys[index4 - 1] += ",";
    keys.splice(index4, 1);
    index4 = keys.lastIndexOf("");
  }
  return keys;
}
function compareArray(a12, a23) {
  var arr1 = a12.length >= a23.length ? a12 : a23;
  var arr2 = a12.length >= a23.length ? a23 : a12;
  var isIndex = true;
  for (var i10 = 0; i10 < arr1.length; i10++) {
    if (arr2.indexOf(arr1[i10]) === -1)
      isIndex = false;
  }
  return isIndex;
}
var _keyMap = {
  backspace: 8,
  tab: 9,
  clear: 12,
  enter: 13,
  return: 13,
  esc: 27,
  escape: 27,
  space: 32,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  del: 46,
  delete: 46,
  ins: 45,
  insert: 45,
  home: 36,
  end: 35,
  pageup: 33,
  pagedown: 34,
  capslock: 20,
  num_0: 96,
  num_1: 97,
  num_2: 98,
  num_3: 99,
  num_4: 100,
  num_5: 101,
  num_6: 102,
  num_7: 103,
  num_8: 104,
  num_9: 105,
  num_multiply: 106,
  num_add: 107,
  num_enter: 108,
  num_subtract: 109,
  num_decimal: 110,
  num_divide: 111,
  "\u21EA": 20,
  ",": 188,
  ".": 190,
  "/": 191,
  "`": 192,
  "-": isff ? 173 : 189,
  "=": isff ? 61 : 187,
  ";": isff ? 59 : 186,
  "'": 222,
  "[": 219,
  "]": 221,
  "\\": 220
};
var _modifier = {
  "\u21E7": 16,
  shift: 16,
  "\u2325": 18,
  alt: 18,
  option: 18,
  "\u2303": 17,
  ctrl: 17,
  control: 17,
  "\u2318": 91,
  cmd: 91,
  command: 91
};
var modifierMap = {
  16: "shiftKey",
  18: "altKey",
  17: "ctrlKey",
  91: "metaKey",
  shiftKey: 16,
  ctrlKey: 17,
  altKey: 18,
  metaKey: 91
};
var _mods = {
  16: false,
  18: false,
  17: false,
  91: false
};
var _handlers = {};
for (k10 = 1; k10 < 20; k10++) {
  _keyMap["f".concat(k10)] = 111 + k10;
}
var k10;
var _downKeys = [];
var winListendFocus = false;
var _scope = "all";
var elementHasBindEvent = [];
var code = function code2(x10) {
  return _keyMap[x10.toLowerCase()] || _modifier[x10.toLowerCase()] || x10.toUpperCase().charCodeAt(0);
};
function setScope(scope) {
  _scope = scope || "all";
}
function getScope() {
  return _scope || "all";
}
function getPressedKeyCodes() {
  return _downKeys.slice(0);
}
function filter(event) {
  var target = event.target || event.srcElement;
  var tagName = target.tagName;
  var flag = true;
  if (target.isContentEditable || (tagName === "INPUT" || tagName === "TEXTAREA" || tagName === "SELECT") && !target.readOnly) {
    flag = false;
  }
  return flag;
}
function isPressed(keyCode) {
  if (typeof keyCode === "string") {
    keyCode = code(keyCode);
  }
  return _downKeys.indexOf(keyCode) !== -1;
}
function deleteScope(scope, newScope) {
  var handlers;
  var i10;
  if (!scope)
    scope = getScope();
  for (var key in _handlers) {
    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
      handlers = _handlers[key];
      for (i10 = 0; i10 < handlers.length; ) {
        if (handlers[i10].scope === scope)
          handlers.splice(i10, 1);
        else
          i10++;
      }
    }
  }
  if (getScope() === scope)
    setScope(newScope || "all");
}
function clearModifier(event) {
  var key = event.keyCode || event.which || event.charCode;
  var i10 = _downKeys.indexOf(key);
  if (i10 >= 0) {
    _downKeys.splice(i10, 1);
  }
  if (event.key && event.key.toLowerCase() === "meta") {
    _downKeys.splice(0, _downKeys.length);
  }
  if (key === 93 || key === 224)
    key = 91;
  if (key in _mods) {
    _mods[key] = false;
    for (var k10 in _modifier) {
      if (_modifier[k10] === key)
        hotkeys[k10] = false;
    }
  }
}
function unbind(keysInfo) {
  if (typeof keysInfo === "undefined") {
    Object.keys(_handlers).forEach(function(key) {
      return delete _handlers[key];
    });
  } else if (Array.isArray(keysInfo)) {
    keysInfo.forEach(function(info) {
      if (info.key)
        eachUnbind(info);
    });
  } else if (typeof keysInfo === "object") {
    if (keysInfo.key)
      eachUnbind(keysInfo);
  } else if (typeof keysInfo === "string") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var scope = args[0], method = args[1];
    if (typeof scope === "function") {
      method = scope;
      scope = "";
    }
    eachUnbind({
      key: keysInfo,
      scope,
      method,
      splitKey: "+"
    });
  }
}
var eachUnbind = function eachUnbind2(_ref) {
  var key = _ref.key, scope = _ref.scope, method = _ref.method, _ref$splitKey = _ref.splitKey, splitKey = _ref$splitKey === void 0 ? "+" : _ref$splitKey;
  var multipleKeys = getKeys(key);
  multipleKeys.forEach(function(originKey) {
    var unbindKeys = originKey.split(splitKey);
    var len = unbindKeys.length;
    var lastKey = unbindKeys[len - 1];
    var keyCode = lastKey === "*" ? "*" : code(lastKey);
    if (!_handlers[keyCode])
      return;
    if (!scope)
      scope = getScope();
    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
    _handlers[keyCode] = _handlers[keyCode].filter(function(record) {
      var isMatchingMethod = method ? record.method === method : true;
      return !(isMatchingMethod && record.scope === scope && compareArray(record.mods, mods));
    });
  });
};
function eventHandler(event, handler, scope, element) {
  if (handler.element !== element) {
    return;
  }
  var modifiersMatch;
  if (handler.scope === scope || handler.scope === "all") {
    modifiersMatch = handler.mods.length > 0;
    for (var y10 in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, y10)) {
        if (!_mods[y10] && handler.mods.indexOf(+y10) > -1 || _mods[y10] && handler.mods.indexOf(+y10) === -1) {
          modifiersMatch = false;
        }
      }
    }
    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === "*") {
      if (handler.method(event, handler) === false) {
        if (event.preventDefault)
          event.preventDefault();
        else
          event.returnValue = false;
        if (event.stopPropagation)
          event.stopPropagation();
        if (event.cancelBubble)
          event.cancelBubble = true;
      }
    }
  }
}
function dispatch(event, element) {
  var asterisk = _handlers["*"];
  var key = event.keyCode || event.which || event.charCode;
  if (!hotkeys.filter.call(this, event))
    return;
  if (key === 93 || key === 224)
    key = 91;
  if (_downKeys.indexOf(key) === -1 && key !== 229)
    _downKeys.push(key);
  ["ctrlKey", "altKey", "shiftKey", "metaKey"].forEach(function(keyName) {
    var keyNum = modifierMap[keyName];
    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
      _downKeys.push(keyNum);
    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
      _downKeys.splice(_downKeys.indexOf(keyNum), 1);
    } else if (keyName === "metaKey" && event[keyName] && _downKeys.length === 3) {
      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
      }
    }
  });
  if (key in _mods) {
    _mods[key] = true;
    for (var k10 in _modifier) {
      if (_modifier[k10] === key)
        hotkeys[k10] = true;
    }
    if (!asterisk)
      return;
  }
  for (var e10 in _mods) {
    if (Object.prototype.hasOwnProperty.call(_mods, e10)) {
      _mods[e10] = event[modifierMap[e10]];
    }
  }
  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState("AltGraph")) {
    if (_downKeys.indexOf(17) === -1) {
      _downKeys.push(17);
    }
    if (_downKeys.indexOf(18) === -1) {
      _downKeys.push(18);
    }
    _mods[17] = true;
    _mods[18] = true;
  }
  var scope = getScope();
  if (asterisk) {
    for (var i10 = 0; i10 < asterisk.length; i10++) {
      if (asterisk[i10].scope === scope && (event.type === "keydown" && asterisk[i10].keydown || event.type === "keyup" && asterisk[i10].keyup)) {
        eventHandler(event, asterisk[i10], scope, element);
      }
    }
  }
  if (!(key in _handlers))
    return;
  for (var _i2 = 0; _i2 < _handlers[key].length; _i2++) {
    if (event.type === "keydown" && _handlers[key][_i2].keydown || event.type === "keyup" && _handlers[key][_i2].keyup) {
      if (_handlers[key][_i2].key) {
        var record = _handlers[key][_i2];
        var splitKey = record.splitKey;
        var keyShortcut = record.key.split(splitKey);
        var _downKeysCurrent = [];
        for (var a10 = 0; a10 < keyShortcut.length; a10++) {
          _downKeysCurrent.push(code(keyShortcut[a10]));
        }
        if (_downKeysCurrent.sort().join("") === _downKeys.sort().join("")) {
          eventHandler(event, record, scope, element);
        }
      }
    }
  }
}
function isElementBind(element) {
  return elementHasBindEvent.indexOf(element) > -1;
}
function hotkeys(key, option, method) {
  _downKeys = [];
  var keys = getKeys(key);
  var mods = [];
  var scope = "all";
  var element = document;
  var i10 = 0;
  var keyup = false;
  var keydown = true;
  var splitKey = "+";
  var capture = false;
  if (method === void 0 && typeof option === "function") {
    method = option;
  }
  if (Object.prototype.toString.call(option) === "[object Object]") {
    if (option.scope)
      scope = option.scope;
    if (option.element)
      element = option.element;
    if (option.keyup)
      keyup = option.keyup;
    if (option.keydown !== void 0)
      keydown = option.keydown;
    if (option.capture !== void 0)
      capture = option.capture;
    if (typeof option.splitKey === "string")
      splitKey = option.splitKey;
  }
  if (typeof option === "string")
    scope = option;
  for (; i10 < keys.length; i10++) {
    key = keys[i10].split(splitKey);
    mods = [];
    if (key.length > 1)
      mods = getMods(_modifier, key);
    key = key[key.length - 1];
    key = key === "*" ? "*" : code(key);
    if (!(key in _handlers))
      _handlers[key] = [];
    _handlers[key].push({
      keyup,
      keydown,
      scope,
      mods,
      shortcut: keys[i10],
      method,
      key: keys[i10],
      splitKey,
      element
    });
  }
  if (typeof element !== "undefined" && !isElementBind(element) && window) {
    elementHasBindEvent.push(element);
    addEvent(element, "keydown", function(e10) {
      dispatch(e10, element);
    }, capture);
    if (!winListendFocus) {
      winListendFocus = true;
      addEvent(window, "focus", function() {
        _downKeys = [];
      }, capture);
    }
    addEvent(element, "keyup", function(e10) {
      dispatch(e10, element);
      clearModifier(e10);
    }, capture);
  }
}
function trigger(shortcut) {
  var scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "all";
  Object.keys(_handlers).forEach(function(key) {
    var data = _handlers[key].find(function(item) {
      return item.scope === scope && item.shortcut === shortcut;
    });
    if (data && data.method) {
      data.method();
    }
  });
}
var _api = {
  setScope,
  getScope,
  deleteScope,
  getPressedKeyCodes,
  isPressed,
  filter,
  trigger,
  unbind,
  keyMap: _keyMap,
  modifier: _modifier,
  modifierMap
};
for (a10 in _api) {
  if (Object.prototype.hasOwnProperty.call(_api, a10)) {
    hotkeys[a10] = _api[a10];
  }
}
var a10;
if (typeof window !== "undefined") {
  _hotkeys = window.hotkeys;
  hotkeys.noConflict = function(deep) {
    if (deep && window.hotkeys === hotkeys) {
      window.hotkeys = _hotkeys;
    }
    return hotkeys;
  };
  window.hotkeys = hotkeys;
}
var _hotkeys;

// node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js
var import_react75 = __toESM(require_react());
hotkeys.filter = function() {
  return true;
};
var tagFilter = function tagFilter2(_ref, enableOnTags) {
  var target = _ref.target;
  var targetTagName = target && target.tagName;
  return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName));
};
var isKeyboardEventTriggeredByInput = function isKeyboardEventTriggeredByInput2(ev2) {
  return tagFilter(ev2, ["INPUT", "TEXTAREA", "SELECT"]);
};
function useHotkeys(keys, callback, options, deps) {
  if (options instanceof Array) {
    deps = options;
    options = void 0;
  }
  var _ref2 = options || {}, enableOnTags = _ref2.enableOnTags, filter2 = _ref2.filter, keyup = _ref2.keyup, keydown = _ref2.keydown, _ref2$filterPreventDe = _ref2.filterPreventDefault, filterPreventDefault = _ref2$filterPreventDe === void 0 ? true : _ref2$filterPreventDe, _ref2$enabled = _ref2.enabled, enabled = _ref2$enabled === void 0 ? true : _ref2$enabled, _ref2$enableOnContent = _ref2.enableOnContentEditable, enableOnContentEditable = _ref2$enableOnContent === void 0 ? false : _ref2$enableOnContent;
  var ref = (0, import_react75.useRef)(null);
  var memoisedCallback = (0, import_react75.useCallback)(function(keyboardEvent, hotkeysEvent) {
    var _keyboardEvent$target, _ref$current;
    if (filter2 && !filter2(keyboardEvent)) {
      return !filterPreventDefault;
    }
    if (isKeyboardEventTriggeredByInput(keyboardEvent) && !tagFilter(keyboardEvent, enableOnTags) || (_keyboardEvent$target = keyboardEvent.target) != null && _keyboardEvent$target.isContentEditable && !enableOnContentEditable) {
      return true;
    }
    if (ref.current === null || document.activeElement === ref.current || (_ref$current = ref.current) != null && _ref$current.contains(document.activeElement)) {
      callback(keyboardEvent, hotkeysEvent);
      return true;
    }
    return false;
  }, deps ? [ref, enableOnTags, filter2].concat(deps) : [ref, enableOnTags, filter2]);
  (0, import_react75.useEffect)(function() {
    if (!enabled) {
      hotkeys.unbind(keys, memoisedCallback);
      return;
    }
    if (keyup && keydown !== true) {
      options.keydown = false;
    }
    hotkeys(keys, options || {}, memoisedCallback);
    return function() {
      return hotkeys.unbind(keys, memoisedCallback);
    };
  }, [memoisedCallback, keys, enabled]);
  return ref;
}
var isHotkeyPressed = hotkeys.isPressed;

// node_modules/@tldraw/tldraw/dist/index.mjs
var sn2 = __toESM(require_react(), 1);
var Ma = __toESM(require_react(), 1);
var Cr = __toESM(require_react(), 1);
var Ht2 = __toESM(require_react(), 1);
var Pr = __toESM(require_react(), 1);
var bs = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-alert-dialog/dist/index.mjs
var import_react82 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-dialog/dist/index.mjs
var import_react81 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-dialog/node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
var import_react77 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-dialog/node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
var import_react76 = __toESM(require_react(), 1);
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a5(callback) {
  const callbackRef = (0, import_react76.useRef)(callback);
  (0, import_react76.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react76.useMemo)(() => (...args) => {
    var _callbackRef$current;
    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
  }, []);
}

// node_modules/@radix-ui/react-dialog/node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
function $71cd76cc60e0454e$export$6f32135080cb4c33({ prop, defaultProp, onChange = () => {
} }) {
  const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState3({
    defaultProp,
    onChange
  });
  const isControlled = prop !== void 0;
  const value1 = isControlled ? prop : uncontrolledProp;
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a5(onChange);
  const setValue = (0, import_react77.useCallback)((nextValue) => {
    if (isControlled) {
      const setter = nextValue;
      const value = typeof nextValue === "function" ? setter(prop) : nextValue;
      if (value !== prop)
        handleChange(value);
    } else
      setUncontrolledProp(nextValue);
  }, [
    isControlled,
    prop,
    setUncontrolledProp,
    handleChange
  ]);
  return [
    value1,
    setValue
  ];
}
function $71cd76cc60e0454e$var$useUncontrolledState3({ defaultProp, onChange }) {
  const uncontrolledState = (0, import_react77.useState)(defaultProp);
  const [value] = uncontrolledState;
  const prevValueRef = (0, import_react77.useRef)(value);
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a5(onChange);
  (0, import_react77.useEffect)(() => {
    if (prevValueRef.current !== value) {
      handleChange(value);
      prevValueRef.current = value;
    }
  }, [
    value,
    prevValueRef,
    handleChange
  ]);
  return uncontrolledState;
}

// node_modules/@radix-ui/react-focus-scope/dist/index.mjs
var import_react79 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-focus-scope/node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
var import_react78 = __toESM(require_react(), 1);
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a6(callback) {
  const callbackRef = (0, import_react78.useRef)(callback);
  (0, import_react78.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react78.useMemo)(() => (...args) => {
    var _callbackRef$current;
    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
  }, []);
}

// node_modules/@radix-ui/react-focus-scope/dist/index.mjs
var $d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT2 = "focusScope.autoFocusOnMount";
var $d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT2 = "focusScope.autoFocusOnUnmount";
var $d3863c46a17e8a28$var$EVENT_OPTIONS2 = {
  bubbles: false,
  cancelable: true
};
var $d3863c46a17e8a28$export$20e40289641fbbb62 = /* @__PURE__ */ (0, import_react79.forwardRef)((props, forwardedRef) => {
  const { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp, ...scopeProps } = props;
  const [container1, setContainer] = (0, import_react79.useState)(null);
  const onMountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a6(onMountAutoFocusProp);
  const onUnmountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a6(onUnmountAutoFocusProp);
  const lastFocusedElementRef = (0, import_react79.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, (node) => setContainer(node));
  const focusScope = (0, import_react79.useRef)({
    paused: false,
    pause() {
      this.paused = true;
    },
    resume() {
      this.paused = false;
    }
  }).current;
  (0, import_react79.useEffect)(() => {
    if (trapped) {
      let handleFocusIn = function(event) {
        if (focusScope.paused || !container1)
          return;
        const target = event.target;
        if (container1.contains(target))
          lastFocusedElementRef.current = target;
        else
          $d3863c46a17e8a28$var$focus2(lastFocusedElementRef.current, {
            select: true
          });
      }, handleFocusOut = function(event) {
        if (focusScope.paused || !container1)
          return;
        const relatedTarget = event.relatedTarget;
        if (relatedTarget === null)
          return;
        if (!container1.contains(relatedTarget))
          $d3863c46a17e8a28$var$focus2(lastFocusedElementRef.current, {
            select: true
          });
      }, handleMutations = function(mutations) {
        const focusedElement = document.activeElement;
        if (focusedElement !== document.body)
          return;
        for (const mutation of mutations)
          if (mutation.removedNodes.length > 0)
            $d3863c46a17e8a28$var$focus2(container1);
      };
      document.addEventListener("focusin", handleFocusIn);
      document.addEventListener("focusout", handleFocusOut);
      const mutationObserver = new MutationObserver(handleMutations);
      if (container1)
        mutationObserver.observe(container1, {
          childList: true,
          subtree: true
        });
      return () => {
        document.removeEventListener("focusin", handleFocusIn);
        document.removeEventListener("focusout", handleFocusOut);
        mutationObserver.disconnect();
      };
    }
  }, [
    trapped,
    container1,
    focusScope.paused
  ]);
  (0, import_react79.useEffect)(() => {
    if (container1) {
      $d3863c46a17e8a28$var$focusScopesStack2.add(focusScope);
      const previouslyFocusedElement = document.activeElement;
      const hasFocusedCandidate = container1.contains(previouslyFocusedElement);
      if (!hasFocusedCandidate) {
        const mountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT2, $d3863c46a17e8a28$var$EVENT_OPTIONS2);
        container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT2, onMountAutoFocus);
        container1.dispatchEvent(mountEvent);
        if (!mountEvent.defaultPrevented) {
          $d3863c46a17e8a28$var$focusFirst2($d3863c46a17e8a28$var$removeLinks2($d3863c46a17e8a28$var$getTabbableCandidates2(container1)), {
            select: true
          });
          if (document.activeElement === previouslyFocusedElement)
            $d3863c46a17e8a28$var$focus2(container1);
        }
      }
      return () => {
        container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT2, onMountAutoFocus);
        setTimeout(() => {
          const unmountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT2, $d3863c46a17e8a28$var$EVENT_OPTIONS2);
          container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT2, onUnmountAutoFocus);
          container1.dispatchEvent(unmountEvent);
          if (!unmountEvent.defaultPrevented)
            $d3863c46a17e8a28$var$focus2(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {
              select: true
            });
          container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT2, onUnmountAutoFocus);
          $d3863c46a17e8a28$var$focusScopesStack2.remove(focusScope);
        }, 0);
      };
    }
  }, [
    container1,
    onMountAutoFocus,
    onUnmountAutoFocus,
    focusScope
  ]);
  const handleKeyDown = (0, import_react79.useCallback)((event) => {
    if (!loop && !trapped)
      return;
    if (focusScope.paused)
      return;
    const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
    const focusedElement = document.activeElement;
    if (isTabKey && focusedElement) {
      const container = event.currentTarget;
      const [first, last] = $d3863c46a17e8a28$var$getTabbableEdges2(container);
      const hasTabbableElementsInside = first && last;
      if (!hasTabbableElementsInside) {
        if (focusedElement === container)
          event.preventDefault();
      } else {
        if (!event.shiftKey && focusedElement === last) {
          event.preventDefault();
          if (loop)
            $d3863c46a17e8a28$var$focus2(first, {
              select: true
            });
        } else if (event.shiftKey && focusedElement === first) {
          event.preventDefault();
          if (loop)
            $d3863c46a17e8a28$var$focus2(last, {
              select: true
            });
        }
      }
    }
  }, [
    loop,
    trapped,
    focusScope.paused
  ]);
  return /* @__PURE__ */ (0, import_react79.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.div, _extends({
    tabIndex: -1
  }, scopeProps, {
    ref: composedRefs,
    onKeyDown: handleKeyDown
  }));
});
function $d3863c46a17e8a28$var$focusFirst2(candidates, { select = false } = {}) {
  const previouslyFocusedElement = document.activeElement;
  for (const candidate of candidates) {
    $d3863c46a17e8a28$var$focus2(candidate, {
      select
    });
    if (document.activeElement !== previouslyFocusedElement)
      return;
  }
}
function $d3863c46a17e8a28$var$getTabbableEdges2(container) {
  const candidates = $d3863c46a17e8a28$var$getTabbableCandidates2(container);
  const first = $d3863c46a17e8a28$var$findVisible2(candidates, container);
  const last = $d3863c46a17e8a28$var$findVisible2(candidates.reverse(), container);
  return [
    first,
    last
  ];
}
function $d3863c46a17e8a28$var$getTabbableCandidates2(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
}
function $d3863c46a17e8a28$var$findVisible2(elements, container) {
  for (const element of elements) {
    if (!$d3863c46a17e8a28$var$isHidden2(element, {
      upTo: container
    }))
      return element;
  }
}
function $d3863c46a17e8a28$var$isHidden2(node, { upTo }) {
  if (getComputedStyle(node).visibility === "hidden")
    return true;
  while (node) {
    if (upTo !== void 0 && node === upTo)
      return false;
    if (getComputedStyle(node).display === "none")
      return true;
    node = node.parentElement;
  }
  return false;
}
function $d3863c46a17e8a28$var$isSelectableInput2(element) {
  return element instanceof HTMLInputElement && "select" in element;
}
function $d3863c46a17e8a28$var$focus2(element, { select = false } = {}) {
  if (element && element.focus) {
    const previouslyFocusedElement = document.activeElement;
    element.focus({
      preventScroll: true
    });
    if (element !== previouslyFocusedElement && $d3863c46a17e8a28$var$isSelectableInput2(element) && select)
      element.select();
  }
}
var $d3863c46a17e8a28$var$focusScopesStack2 = $d3863c46a17e8a28$var$createFocusScopesStack2();
function $d3863c46a17e8a28$var$createFocusScopesStack2() {
  let stack = [];
  return {
    add(focusScope) {
      const activeFocusScope = stack[0];
      if (focusScope !== activeFocusScope)
        activeFocusScope === null || activeFocusScope === void 0 || activeFocusScope.pause();
      stack = $d3863c46a17e8a28$var$arrayRemove2(stack, focusScope);
      stack.unshift(focusScope);
    },
    remove(focusScope) {
      var _stack$;
      stack = $d3863c46a17e8a28$var$arrayRemove2(stack, focusScope);
      (_stack$ = stack[0]) === null || _stack$ === void 0 || _stack$.resume();
    }
  };
}
function $d3863c46a17e8a28$var$arrayRemove2(array, item) {
  const updatedArray = [
    ...array
  ];
  const index4 = updatedArray.indexOf(item);
  if (index4 !== -1)
    updatedArray.splice(index4, 1);
  return updatedArray;
}
function $d3863c46a17e8a28$var$removeLinks2(items) {
  return items.filter((item) => item.tagName !== "A");
}

// node_modules/@radix-ui/react-focus-guards/dist/index.mjs
var import_react80 = __toESM(require_react(), 1);
var $3db38b7d1fb3fe6a$var$count2 = 0;
function $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c2() {
  (0, import_react80.useEffect)(() => {
    var _edgeGuards$, _edgeGuards$2;
    const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
    document.body.insertAdjacentElement("afterbegin", (_edgeGuards$ = edgeGuards[0]) !== null && _edgeGuards$ !== void 0 ? _edgeGuards$ : $3db38b7d1fb3fe6a$var$createFocusGuard2());
    document.body.insertAdjacentElement("beforeend", (_edgeGuards$2 = edgeGuards[1]) !== null && _edgeGuards$2 !== void 0 ? _edgeGuards$2 : $3db38b7d1fb3fe6a$var$createFocusGuard2());
    $3db38b7d1fb3fe6a$var$count2++;
    return () => {
      if ($3db38b7d1fb3fe6a$var$count2 === 1)
        document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
      $3db38b7d1fb3fe6a$var$count2--;
    };
  }, []);
}
function $3db38b7d1fb3fe6a$var$createFocusGuard2() {
  const element = document.createElement("span");
  element.setAttribute("data-radix-focus-guard", "");
  element.tabIndex = 0;
  element.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none";
  return element;
}

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var React20 = __toESM(require_react());

// node_modules/react-remove-scroll/dist/es2015/UI.js
var React18 = __toESM(require_react());

// node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar2 = createSidecarMedium();

// node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing2 = function() {
  return;
};
var RemoveScroll2 = React18.forwardRef(function(props, parentRef) {
  var ref = React18.useRef(null);
  var _a3 = React18.useState({
    onScrollCapture: nothing2,
    onWheelCapture: nothing2,
    onTouchMoveCapture: nothing2
  }), callbacks = _a3[0], setCallbacks = _a3[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b2 = props.as, Container = _b2 === void 0 ? "div" : _b2, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([ref, parentRef]);
  var containerProps = __assign(__assign({}, rest), callbacks);
  return React18.createElement(React18.Fragment, null, enabled && React18.createElement(SideCar2, { sideCar: effectCar2, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }), forwardProps ? React18.cloneElement(React18.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React18.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children));
});
RemoveScroll2.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll2.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React19 = __toESM(require_react());

// node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported2 = false;
if (typeof window !== "undefined") {
  try {
    options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported2 = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported2 = false;
  }
}
var options;
var nonPassive2 = passiveSupported2 ? { passive: false } : false;

// node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var alwaysContainsScroll = function(node) {
  return node.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node, overflow) {
  var styles = window.getComputedStyle(node);
  return styles[overflow] !== "hidden" && !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible");
};
var elementCouldBeVScrolled2 = function(node) {
  return elementCanBeScrolled(node, "overflowY");
};
var elementCouldBeHScrolled2 = function(node) {
  return elementCanBeScrolled(node, "overflowX");
};
var locationCouldBeScrolled2 = function(axis, node) {
  var current = node;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable = elementCouldBeScrolled2(axis, current);
    if (isScrollable) {
      var _a3 = getScrollVariables2(axis, current), s10 = _a3[1], d10 = _a3[2];
      if (s10 > d10) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== document.body);
  return false;
};
var getVScrollVariables2 = function(_a3) {
  var scrollTop = _a3.scrollTop, scrollHeight = _a3.scrollHeight, clientHeight = _a3.clientHeight;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables2 = function(_a3) {
  var scrollLeft = _a3.scrollLeft, scrollWidth = _a3.scrollWidth, clientWidth = _a3.clientWidth;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled2 = function(axis, node) {
  return axis === "v" ? elementCouldBeVScrolled2(node) : elementCouldBeHScrolled2(node);
};
var getScrollVariables2 = function(axis, node) {
  return axis === "v" ? getVScrollVariables2(node) : getHScrollVariables2(node);
};
var getDirectionFactor2 = function(axis, direction) {
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll2 = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor2(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a3 = getScrollVariables2(axis, target), position = _a3[0], scroll_1 = _a3[1], capacity = _a3[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position;
    if (position || elementScroll) {
      if (elementCouldBeScrolled2(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position;
      }
    }
    target = target.parentNode;
  } while (!targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target));
  if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY2 = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY2 = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef2 = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare2 = function(x10, y10) {
  return x10[0] === y10[0] && x10[1] === y10[1];
};
var generateStyle2 = function(id) {
  return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
};
var idCounter2 = 0;
var lockStack2 = [];
function RemoveScrollSideCar2(props) {
  var shouldPreventQueue = React19.useRef([]);
  var touchStartRef = React19.useRef([0, 0]);
  var activeAxis = React19.useRef();
  var id = React19.useState(idCounter2++)[0];
  var Style2 = React19.useState(function() {
    return styleSingleton();
  })[0];
  var lastProps = React19.useRef(props);
  React19.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React19.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-".concat(id));
      var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef2), true).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-".concat(id));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id));
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-".concat(id));
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React19.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY2(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled2(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled2(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll2(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React19.useCallback(function(_event) {
    var event = _event;
    if (!lockStack2.length || lockStack2[lockStack2.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY2(event) : getTouchXY2(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e10) {
      return e10.name === event.type && e10.target === event.target && deltaCompare2(e10.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      if (event.cancelable) {
        event.preventDefault();
      }
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef2).filter(Boolean).filter(function(node) {
        return node.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event.cancelable) {
          event.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = React19.useCallback(function(name, delta, target, should) {
    var event = { name, delta, target, should };
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e10) {
        return e10 !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React19.useCallback(function(event) {
    touchStartRef.current = getTouchXY2(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = React19.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY2(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = React19.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY2(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  React19.useEffect(function() {
    lockStack2.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive2);
    document.addEventListener("touchmove", shouldPrevent, nonPassive2);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive2);
    return function() {
      lockStack2 = lockStack2.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive2);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive2);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive2);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return React19.createElement(React19.Fragment, null, inert ? React19.createElement(Style2, { styles: generateStyle2(id) }) : null, removeScrollBar ? React19.createElement(RemoveScrollBar, { gapMode: "margin" }) : null);
}

// node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default2 = exportSidecar(effectCar2, RemoveScrollSideCar2);

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll2 = React20.forwardRef(function(props, ref) {
  return React20.createElement(RemoveScroll2, __assign({}, props, { ref, sideCar: sidecar_default2 }));
});
ReactRemoveScroll2.classNames = RemoveScroll2.classNames;
var Combination_default2 = ReactRemoveScroll2;

// node_modules/@radix-ui/react-dialog/dist/index.mjs
var $5d3850c4d0b4e6c7$var$DIALOG_NAME = "Dialog";
var [$5d3850c4d0b4e6c7$var$createDialogContext, $5d3850c4d0b4e6c7$export$cc702773b8ea3e41] = $c512c27ab02ef895$export$50c7b4e9d9f19c17($5d3850c4d0b4e6c7$var$DIALOG_NAME);
var [$5d3850c4d0b4e6c7$var$DialogProvider, $5d3850c4d0b4e6c7$var$useDialogContext] = $5d3850c4d0b4e6c7$var$createDialogContext($5d3850c4d0b4e6c7$var$DIALOG_NAME);
var $5d3850c4d0b4e6c7$export$3ddf2d174ce01153 = (props) => {
  const { __scopeDialog, children, open: openProp, defaultOpen, onOpenChange, modal = true } = props;
  const triggerRef = (0, import_react81.useRef)(null);
  const contentRef = (0, import_react81.useRef)(null);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c33({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react81.createElement)($5d3850c4d0b4e6c7$var$DialogProvider, {
    scope: __scopeDialog,
    triggerRef,
    contentRef,
    contentId: $1746a345f3d73bb7$export$f680877a34711e374(),
    titleId: $1746a345f3d73bb7$export$f680877a34711e374(),
    descriptionId: $1746a345f3d73bb7$export$f680877a34711e374(),
    open,
    onOpenChange: setOpen,
    onOpenToggle: (0, import_react81.useCallback)(() => setOpen((prevOpen) => !prevOpen), [
      setOpen
    ]),
    modal
  }, children);
};
var $5d3850c4d0b4e6c7$var$TRIGGER_NAME = "DialogTrigger";
var $5d3850c4d0b4e6c7$export$2e1e1122cf0cba88 = /* @__PURE__ */ (0, import_react81.forwardRef)((props, forwardedRef) => {
  const { __scopeDialog, ...triggerProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$TRIGGER_NAME, __scopeDialog);
  const composedTriggerRef = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, context.triggerRef);
  return /* @__PURE__ */ (0, import_react81.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.button, _extends({
    type: "button",
    "aria-haspopup": "dialog",
    "aria-expanded": context.open,
    "aria-controls": context.contentId,
    "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
  }, triggerProps, {
    ref: composedTriggerRef,
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onClick, context.onOpenToggle)
  }));
});
var $5d3850c4d0b4e6c7$var$PORTAL_NAME = "DialogPortal";
var [$5d3850c4d0b4e6c7$var$PortalProvider, $5d3850c4d0b4e6c7$var$usePortalContext] = $5d3850c4d0b4e6c7$var$createDialogContext($5d3850c4d0b4e6c7$var$PORTAL_NAME, {
  forceMount: void 0
});
var $5d3850c4d0b4e6c7$export$dad7c95542bacce0 = (props) => {
  const { __scopeDialog, forceMount, children, container } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$PORTAL_NAME, __scopeDialog);
  return /* @__PURE__ */ (0, import_react81.createElement)($5d3850c4d0b4e6c7$var$PortalProvider, {
    scope: __scopeDialog,
    forceMount
  }, import_react81.Children.map(children, (child) => /* @__PURE__ */ (0, import_react81.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b2, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react81.createElement)($f1701beae083dbae$export$602eac185826482c2, {
    asChild: true,
    container
  }, child))));
};
var $5d3850c4d0b4e6c7$var$OVERLAY_NAME = "DialogOverlay";
var $5d3850c4d0b4e6c7$export$bd1d06c79be19e17 = /* @__PURE__ */ (0, import_react81.forwardRef)((props, forwardedRef) => {
  const portalContext = $5d3850c4d0b4e6c7$var$usePortalContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, props.__scopeDialog);
  const { forceMount = portalContext.forceMount, ...overlayProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, props.__scopeDialog);
  return context.modal ? /* @__PURE__ */ (0, import_react81.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b2, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react81.createElement)($5d3850c4d0b4e6c7$var$DialogOverlayImpl, _extends({}, overlayProps, {
    ref: forwardedRef
  }))) : null;
});
var $5d3850c4d0b4e6c7$var$DialogOverlayImpl = /* @__PURE__ */ (0, import_react81.forwardRef)((props, forwardedRef) => {
  const { __scopeDialog, ...overlayProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, __scopeDialog);
  return /* @__PURE__ */ (0, import_react81.createElement)(Combination_default2, {
    as: $5e63c961fc1ce211$export$8c6ed5c666ac13608,
    allowPinchZoom: true,
    shards: [
      context.contentRef
    ]
  }, /* @__PURE__ */ (0, import_react81.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.div, _extends({
    "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
  }, overlayProps, {
    ref: forwardedRef,
    style: {
      pointerEvents: "auto",
      ...overlayProps.style
    }
  })));
});
var $5d3850c4d0b4e6c7$var$CONTENT_NAME = "DialogContent";
var $5d3850c4d0b4e6c7$export$b6d9565de1e068cf = /* @__PURE__ */ (0, import_react81.forwardRef)((props, forwardedRef) => {
  const portalContext = $5d3850c4d0b4e6c7$var$usePortalContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  const { forceMount = portalContext.forceMount, ...contentProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  return /* @__PURE__ */ (0, import_react81.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b2, {
    present: forceMount || context.open
  }, context.modal ? /* @__PURE__ */ (0, import_react81.createElement)($5d3850c4d0b4e6c7$var$DialogContentModal, _extends({}, contentProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ (0, import_react81.createElement)($5d3850c4d0b4e6c7$var$DialogContentNonModal, _extends({}, contentProps, {
    ref: forwardedRef
  })));
});
var $5d3850c4d0b4e6c7$var$DialogContentModal = /* @__PURE__ */ (0, import_react81.forwardRef)((props, forwardedRef) => {
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  const contentRef = (0, import_react81.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, context.contentRef, contentRef);
  (0, import_react81.useEffect)(() => {
    const content = contentRef.current;
    if (content)
      return hideOthers(content);
  }, []);
  return /* @__PURE__ */ (0, import_react81.createElement)($5d3850c4d0b4e6c7$var$DialogContentImpl, _extends({}, props, {
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: true,
    onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onCloseAutoFocus, (event) => {
      var _context$triggerRef$c;
      event.preventDefault();
      (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
    }),
    onPointerDownOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onPointerDownOutside, (event) => {
      const originalEvent = event.detail.originalEvent;
      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
      if (isRightClick)
        event.preventDefault();
    }),
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onFocusOutside, (event) => event.preventDefault())
  }));
});
var $5d3850c4d0b4e6c7$var$DialogContentNonModal = /* @__PURE__ */ (0, import_react81.forwardRef)((props, forwardedRef) => {
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  const hasInteractedOutsideRef = (0, import_react81.useRef)(false);
  const hasPointerDownOutsideRef = (0, import_react81.useRef)(false);
  return /* @__PURE__ */ (0, import_react81.createElement)($5d3850c4d0b4e6c7$var$DialogContentImpl, _extends({}, props, {
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    onCloseAutoFocus: (event) => {
      var _props$onCloseAutoFoc;
      (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
      if (!event.defaultPrevented) {
        var _context$triggerRef$c2;
        if (!hasInteractedOutsideRef.current)
          (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();
        event.preventDefault();
      }
      hasInteractedOutsideRef.current = false;
      hasPointerDownOutsideRef.current = false;
    },
    onInteractOutside: (event) => {
      var _props$onInteractOuts, _context$triggerRef$c3;
      (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
      if (!event.defaultPrevented) {
        hasInteractedOutsideRef.current = true;
        if (event.detail.originalEvent.type === "pointerdown")
          hasPointerDownOutsideRef.current = true;
      }
      const target = event.target;
      const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
      if (targetIsTrigger)
        event.preventDefault();
      if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current)
        event.preventDefault();
    }
  }));
});
var $5d3850c4d0b4e6c7$var$DialogContentImpl = /* @__PURE__ */ (0, import_react81.forwardRef)((props, forwardedRef) => {
  const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, __scopeDialog);
  const contentRef = (0, import_react81.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, contentRef);
  $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c2();
  return /* @__PURE__ */ (0, import_react81.createElement)(import_react81.Fragment, null, /* @__PURE__ */ (0, import_react81.createElement)($d3863c46a17e8a28$export$20e40289641fbbb62, {
    asChild: true,
    loop: true,
    trapped: trapFocus,
    onMountAutoFocus: onOpenAutoFocus,
    onUnmountAutoFocus: onCloseAutoFocus
  }, /* @__PURE__ */ (0, import_react81.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f222, _extends({
    role: "dialog",
    id: context.contentId,
    "aria-describedby": context.descriptionId,
    "aria-labelledby": context.titleId,
    "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
  }, contentProps, {
    ref: composedRefs,
    onDismiss: () => context.onOpenChange(false)
  }))), false);
});
var $5d3850c4d0b4e6c7$var$TITLE_NAME = "DialogTitle";
var $5d3850c4d0b4e6c7$export$16f7638e4a34b909 = /* @__PURE__ */ (0, import_react81.forwardRef)((props, forwardedRef) => {
  const { __scopeDialog, ...titleProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$TITLE_NAME, __scopeDialog);
  return /* @__PURE__ */ (0, import_react81.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.h2, _extends({
    id: context.titleId
  }, titleProps, {
    ref: forwardedRef
  }));
});
var $5d3850c4d0b4e6c7$var$DESCRIPTION_NAME = "DialogDescription";
var $5d3850c4d0b4e6c7$export$94e94c2ec2c954d5 = /* @__PURE__ */ (0, import_react81.forwardRef)((props, forwardedRef) => {
  const { __scopeDialog, ...descriptionProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$DESCRIPTION_NAME, __scopeDialog);
  return /* @__PURE__ */ (0, import_react81.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.p, _extends({
    id: context.descriptionId
  }, descriptionProps, {
    ref: forwardedRef
  }));
});
var $5d3850c4d0b4e6c7$var$CLOSE_NAME = "DialogClose";
var $5d3850c4d0b4e6c7$export$fba2fb7cd781b7ac = /* @__PURE__ */ (0, import_react81.forwardRef)((props, forwardedRef) => {
  const { __scopeDialog, ...closeProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CLOSE_NAME, __scopeDialog);
  return /* @__PURE__ */ (0, import_react81.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.button, _extends({
    type: "button"
  }, closeProps, {
    ref: forwardedRef,
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onClick, () => context.onOpenChange(false))
  }));
});
function $5d3850c4d0b4e6c7$var$getState(open) {
  return open ? "open" : "closed";
}
var $5d3850c4d0b4e6c7$var$TITLE_WARNING_NAME = "DialogTitleWarning";
var [$5d3850c4d0b4e6c7$export$69b62a49393917d6, $5d3850c4d0b4e6c7$var$useWarningContext] = $c512c27ab02ef895$export$fd42f52fd3ae1109($5d3850c4d0b4e6c7$var$TITLE_WARNING_NAME, {
  contentName: $5d3850c4d0b4e6c7$var$CONTENT_NAME,
  titleName: $5d3850c4d0b4e6c7$var$TITLE_NAME,
  docsSlug: "dialog"
});
var $5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9 = $5d3850c4d0b4e6c7$export$3ddf2d174ce01153;
var $5d3850c4d0b4e6c7$export$41fb9f06171c75f4 = $5d3850c4d0b4e6c7$export$2e1e1122cf0cba88;
var $5d3850c4d0b4e6c7$export$602eac185826482c = $5d3850c4d0b4e6c7$export$dad7c95542bacce0;
var $5d3850c4d0b4e6c7$export$c6fdb837b070b4ff = $5d3850c4d0b4e6c7$export$bd1d06c79be19e17;
var $5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2 = $5d3850c4d0b4e6c7$export$b6d9565de1e068cf;
var $5d3850c4d0b4e6c7$export$f99233281efd08a0 = $5d3850c4d0b4e6c7$export$16f7638e4a34b909;
var $5d3850c4d0b4e6c7$export$393edc798c47379d = $5d3850c4d0b4e6c7$export$94e94c2ec2c954d5;
var $5d3850c4d0b4e6c7$export$f39c2d165cd861fe = $5d3850c4d0b4e6c7$export$fba2fb7cd781b7ac;

// node_modules/@radix-ui/react-alert-dialog/dist/index.mjs
var $905f4ae918aab1aa$var$ROOT_NAME = "AlertDialog";
var [$905f4ae918aab1aa$var$createAlertDialogContext, $905f4ae918aab1aa$export$b8891880751c2c5b] = $c512c27ab02ef895$export$50c7b4e9d9f19c17($905f4ae918aab1aa$var$ROOT_NAME, [
  $5d3850c4d0b4e6c7$export$cc702773b8ea3e41
]);
var $905f4ae918aab1aa$var$useDialogScope = $5d3850c4d0b4e6c7$export$cc702773b8ea3e41();
var $905f4ae918aab1aa$export$de466dd8317b0b75 = (props) => {
  const { __scopeAlertDialog, ...alertDialogProps } = props;
  const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_react82.createElement)($5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9, _extends({}, dialogScope, alertDialogProps, {
    modal: true
  }));
};
var $905f4ae918aab1aa$export$6edd7a623ef0f40b = /* @__PURE__ */ (0, import_react82.forwardRef)((props, forwardedRef) => {
  const { __scopeAlertDialog, ...triggerProps } = props;
  const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_react82.createElement)($5d3850c4d0b4e6c7$export$41fb9f06171c75f4, _extends({}, dialogScope, triggerProps, {
    ref: forwardedRef
  }));
});
var $905f4ae918aab1aa$export$660f2bfdb986706c = (props) => {
  const { __scopeAlertDialog, ...portalProps } = props;
  const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_react82.createElement)($5d3850c4d0b4e6c7$export$602eac185826482c, _extends({}, dialogScope, portalProps));
};
var $905f4ae918aab1aa$export$a707a4895ce23256 = /* @__PURE__ */ (0, import_react82.forwardRef)((props, forwardedRef) => {
  const { __scopeAlertDialog, ...overlayProps } = props;
  const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_react82.createElement)($5d3850c4d0b4e6c7$export$c6fdb837b070b4ff, _extends({}, dialogScope, overlayProps, {
    ref: forwardedRef
  }));
});
var $905f4ae918aab1aa$var$CONTENT_NAME = "AlertDialogContent";
var [$905f4ae918aab1aa$var$AlertDialogContentProvider, $905f4ae918aab1aa$var$useAlertDialogContentContext] = $905f4ae918aab1aa$var$createAlertDialogContext($905f4ae918aab1aa$var$CONTENT_NAME);
var $905f4ae918aab1aa$export$94e6af45f0af4efd = /* @__PURE__ */ (0, import_react82.forwardRef)((props, forwardedRef) => {
  const { __scopeAlertDialog, children, ...contentProps } = props;
  const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
  const contentRef = (0, import_react82.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, contentRef);
  const cancelRef = (0, import_react82.useRef)(null);
  return /* @__PURE__ */ (0, import_react82.createElement)($5d3850c4d0b4e6c7$export$69b62a49393917d6, {
    contentName: $905f4ae918aab1aa$var$CONTENT_NAME,
    titleName: $905f4ae918aab1aa$var$TITLE_NAME,
    docsSlug: "alert-dialog"
  }, /* @__PURE__ */ (0, import_react82.createElement)($905f4ae918aab1aa$var$AlertDialogContentProvider, {
    scope: __scopeAlertDialog,
    cancelRef
  }, /* @__PURE__ */ (0, import_react82.createElement)($5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2, _extends({
    role: "alertdialog"
  }, dialogScope, contentProps, {
    ref: composedRefs,
    onOpenAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff105(contentProps.onOpenAutoFocus, (event) => {
      var _cancelRef$current;
      event.preventDefault();
      (_cancelRef$current = cancelRef.current) === null || _cancelRef$current === void 0 || _cancelRef$current.focus({
        preventScroll: true
      });
    }),
    onPointerDownOutside: (event) => event.preventDefault(),
    onInteractOutside: (event) => event.preventDefault()
  }), /* @__PURE__ */ (0, import_react82.createElement)($5e63c961fc1ce211$export$d9f1ccf0bdb05d458, null, children), false)));
});
var $905f4ae918aab1aa$var$TITLE_NAME = "AlertDialogTitle";
var $905f4ae918aab1aa$export$a23b55cde55ad9a5 = /* @__PURE__ */ (0, import_react82.forwardRef)((props, forwardedRef) => {
  const { __scopeAlertDialog, ...descriptionProps } = props;
  const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_react82.createElement)($5d3850c4d0b4e6c7$export$393edc798c47379d, _extends({}, dialogScope, descriptionProps, {
    ref: forwardedRef
  }));
});
var $905f4ae918aab1aa$export$b454f818c58ee85d = /* @__PURE__ */ (0, import_react82.forwardRef)((props, forwardedRef) => {
  const { __scopeAlertDialog, ...actionProps } = props;
  const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_react82.createElement)($5d3850c4d0b4e6c7$export$f39c2d165cd861fe, _extends({}, dialogScope, actionProps, {
    ref: forwardedRef
  }));
});
var $905f4ae918aab1aa$var$CANCEL_NAME = "AlertDialogCancel";
var $905f4ae918aab1aa$export$2f67a923571aaea0 = /* @__PURE__ */ (0, import_react82.forwardRef)((props, forwardedRef) => {
  const { __scopeAlertDialog, ...cancelProps } = props;
  const { cancelRef } = $905f4ae918aab1aa$var$useAlertDialogContentContext($905f4ae918aab1aa$var$CANCEL_NAME, __scopeAlertDialog);
  const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
  const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, cancelRef);
  return /* @__PURE__ */ (0, import_react82.createElement)($5d3850c4d0b4e6c7$export$f39c2d165cd861fe, _extends({}, dialogScope, cancelProps, {
    ref
  }));
});
var $905f4ae918aab1aa$export$be92b6f5f03c0fe9 = $905f4ae918aab1aa$export$de466dd8317b0b75;
var $905f4ae918aab1aa$export$41fb9f06171c75f4 = $905f4ae918aab1aa$export$6edd7a623ef0f40b;
var $905f4ae918aab1aa$export$602eac185826482c = $905f4ae918aab1aa$export$660f2bfdb986706c;
var $905f4ae918aab1aa$export$c6fdb837b070b4ff = $905f4ae918aab1aa$export$a707a4895ce23256;
var $905f4ae918aab1aa$export$7c6e2c02157bb7d2 = $905f4ae918aab1aa$export$94e6af45f0af4efd;
var $905f4ae918aab1aa$export$e19cd5f9376f8cee = $905f4ae918aab1aa$export$b454f818c58ee85d;
var $905f4ae918aab1aa$export$848c9b7ead0df967 = $905f4ae918aab1aa$export$2f67a923571aaea0;
var $905f4ae918aab1aa$export$393edc798c47379d = $905f4ae918aab1aa$export$a23b55cde55ad9a5;

// node_modules/@tldraw/tldraw/dist/index.mjs
var ht2 = __toESM(require_react(), 1);
var dt2 = __toESM(require_react(), 1);
var So = __toESM(require_react(), 1);
var Tt2 = __toESM(require_react(), 1);
var X3 = __toESM(require_react(), 1);
var ws = __toESM(require_react(), 1);
var xs = __toESM(require_react(), 1);
var Er = __toESM(require_react(), 1);
var to = __toESM(require_react(), 1);
var ks2 = __toESM(require_react(), 1);
var bo = __toESM(require_react(), 1);
var To = __toESM(require_react(), 1);
var Aae = __toESM(require_react(), 1);
var vs = __toESM(require_react(), 1);
var Cs2 = __toESM(require_react(), 1);
var Ds = __toESM(require_react(), 1);
var Ps = __toESM(require_react(), 1);
var Ms = __toESM(require_react(), 1);
var Go = __toESM(require_react(), 1);
var Es = __toESM(require_react(), 1);
var Rs = __toESM(require_react(), 1);
var As = __toESM(require_react(), 1);
var Ls = __toESM(require_react(), 1);
var Vo = __toESM(require_react(), 1);
var Hs = __toESM(require_react(), 1);
var zs = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-popover/dist/index.mjs
var import_react88 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-popper/dist/index.mjs
var import_react86 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-popover/node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement2(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition3 = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform3
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform3.isRTL == null ? void 0 : platform3.isRTL(floating));
  let rects = await platform3.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x10,
    y: y10
  } = computeCoordsFromPlacement2(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i10 = 0; i10 < validMiddleware.length; i10++) {
    const {
      name,
      fn: fn3
    } = validMiddleware[i10];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn3({
      x: x10,
      y: y10,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform3,
      elements: {
        reference,
        floating
      }
    });
    x10 = nextX != null ? nextX : x10;
    y10 = nextY != null ? nextY : y10;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform3.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x10,
          y: y10
        } = computeCoordsFromPlacement2(rects, statefulPlacement, rtl));
      }
      i10 = -1;
      continue;
    }
  }
  return {
    x: x10,
    y: y10,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow2(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x10,
    y: y10,
    platform: platform3,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform3.getClippingRect({
    element: ((_await$platform$isEle = await (platform3.isElement == null ? void 0 : platform3.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform3.getDocumentElement == null ? void 0 : platform3.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    ...rects.floating,
    x: x10,
    y: y10
  } : rects.reference;
  const offsetParent = await (platform3.getOffsetParent == null ? void 0 : platform3.getOffsetParent(elements.floating));
  const offsetScale = await (platform3.isElement == null ? void 0 : platform3.isElement(offsetParent)) ? await (platform3.getScale == null ? void 0 : platform3.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform3.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform3.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow5 = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x10,
      y: y10,
      placement,
      rects,
      platform: platform3,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x10,
      y: y10
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform3.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform3.getOffsetParent == null ? void 0 : platform3.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform3.isElement == null ? void 0 : platform3.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset3 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset3 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset3,
        centerOffset: center - offset3 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip3 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform3,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform3.isRTL == null ? void 0 : platform3.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow2(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d10) => d10.overflows[0] <= 0).sort((a10, b10) => a10.overflows[1] - b10.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d10) => [d10.placement, d10.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a10, b10) => a10[1] - b10[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getSideOffsets2(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped2(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
var hide3 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "hide",
    options,
    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = "referenceHidden",
        ...detectOverflowOptions
      } = evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow2(state, {
            ...detectOverflowOptions,
            elementContext: "reference"
          });
          const offsets = getSideOffsets2(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped2(offsets)
            }
          };
        }
        case "escaped": {
          const overflow = await detectOverflow2(state, {
            ...detectOverflowOptions,
            altBoundary: true
          });
          const offsets = getSideOffsets2(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped2(offsets)
            }
          };
        }
        default: {
          return {};
        }
      }
    }
  };
};
async function convertValueToCoords2(state, options) {
  const {
    placement,
    platform: platform3,
    elements
  } = state;
  const rtl = await (platform3.isRTL == null ? void 0 : platform3.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset2 = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x: x10,
        y: y10,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords2(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x10 + diffCoords.x,
        y: y10 + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift3 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x10,
        y: y10,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x11,
              y: y11
            } = _ref;
            return {
              x: x11,
              y: y11
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x10,
        y: y10
      };
      const overflow = await detectOverflow2(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x10,
          y: limitedCoords.y - y10
        }
      };
    }
  };
};
var limitShift3 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const {
        x: x10,
        y: y10,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset: offset3 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = evaluate(options, state);
      const coords = {
        x: x10,
        y: y10
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset3, state);
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};
var size3 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      const {
        placement,
        rects,
        platform: platform3,
        elements
      } = state;
      const {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow2(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform3.isRTL == null ? void 0 : platform3.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const overflowAvailableHeight = height - overflow[heightSide];
      const overflowAvailableWidth = width - overflow[widthSide];
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if (isYAxis) {
        const maximumClippingWidth = width - overflow.left - overflow.right;
        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
      } else {
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform3.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

// node_modules/@radix-ui/react-popover/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions2(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement2(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale2(element) {
  const domElement = unwrapElement2(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $: $10
  } = getCssDimensions2(domElement);
  let x10 = ($10 ? round(rect.width) : rect.width) / width;
  let y10 = ($10 ? round(rect.height) : rect.height) / height;
  if (!x10 || !Number.isFinite(x10)) {
    x10 = 1;
  }
  if (!y10 || !Number.isFinite(y10)) {
    y10 = 1;
  }
  return {
    x: x10,
    y: y10
  };
}
var noOffsets2 = /* @__PURE__ */ createCoords(0);
function getVisualOffsets2(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets2;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets2(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect2(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement2(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale2(offsetParent);
      }
    } else {
      scale = getScale2(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets2(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets2(domElement) : createCoords(0);
  let x10 = (clientRect.left + visualOffsets.x) / scale.x;
  let y10 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale2(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top2 = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x10 *= iframeScale.x;
      y10 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x10 += left;
      y10 += top2;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x10,
    y: y10
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect2(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect2(offsetParent);
      scale = getScale2(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects2(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX2(element) {
  return getBoundingClientRect2(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect2(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x10 = -scroll.scrollLeft + getWindowScrollBarX2(element);
  const y10 = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x10 += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x10,
    y: y10
  };
}
function getViewportRect2(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x10 = 0;
  let y10 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x10 = visualViewport.offsetLeft;
      y10 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x10,
    y: y10
  };
}
function getInnerBoundingClientRect2(element, strategy) {
  const clientRect = getBoundingClientRect2(element, true, strategy === "fixed");
  const top2 = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale2(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x10 = left * scale.x;
  const y10 = top2 * scale.y;
  return {
    width,
    height,
    x: x10,
    y: y10
  };
}
function getClientRectFromClippingAncestor2(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect2(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect2(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect2(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets2(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor2(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor2(parentNode, stopNode);
}
function getClippingElementAncestors2(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor2(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect2(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors2(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor2(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor2(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions2(element) {
  const {
    width,
    height
  } = getCssDimensions2(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent2(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect2(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect2(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX2(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getTrueOffsetParent2(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent2(element, polyfill) {
  const window2 = getWindow(element);
  if (!isHTMLElement(element)) {
    return window2;
  }
  let offsetParent = getTrueOffsetParent2(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent2(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
var getElementRects2 = async function(_ref) {
  let {
    reference,
    floating,
    strategy
  } = _ref;
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent2;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent2(reference, await getOffsetParentFn(floating), strategy),
    floating: {
      x: 0,
      y: 0,
      ...await getDimensionsFn(floating)
    }
  };
};
function isRTL2(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform2 = {
  convertOffsetParentRelativeRectToViewportRelativeRect: convertOffsetParentRelativeRectToViewportRelativeRect2,
  getDocumentElement,
  getClippingRect: getClippingRect2,
  getOffsetParent: getOffsetParent2,
  getElementRects: getElementRects2,
  getClientRects: getClientRects2,
  getDimensions: getDimensions2,
  getScale: getScale2,
  isElement,
  isRTL: isRTL2
};
function observeMove2(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    clearTimeout(timeoutId);
    io && io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top: top2,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top2);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top2 + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        root: root.ownerDocument
      });
    } catch (e10) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate2(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement2(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove2(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          resizeObserver && resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect2(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect2(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo && cleanupIo();
    resizeObserver && resizeObserver.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var shift4 = shift3;
var flip4 = flip3;
var size4 = size3;
var hide4 = hide3;
var arrow6 = arrow5;
var limitShift4 = limitShift3;
var computePosition4 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform: platform2,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition3(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@radix-ui/react-popover/node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React21 = __toESM(require_react(), 1);
var import_react83 = __toESM(require_react(), 1);
var ReactDOM3 = __toESM(require_react_dom(), 1);
var arrow7 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow6({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      } else if (element) {
        return arrow6({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var index3 = typeof document !== "undefined" ? import_react83.useLayoutEffect : import_react83.useEffect;
function deepEqual3(a10, b10) {
  if (a10 === b10) {
    return true;
  }
  if (typeof a10 !== typeof b10) {
    return false;
  }
  if (typeof a10 === "function" && a10.toString() === b10.toString()) {
    return true;
  }
  let length, i10, keys;
  if (a10 && b10 && typeof a10 == "object") {
    if (Array.isArray(a10)) {
      length = a10.length;
      if (length != b10.length)
        return false;
      for (i10 = length; i10-- !== 0; ) {
        if (!deepEqual3(a10[i10], b10[i10])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a10);
    length = keys.length;
    if (length !== Object.keys(b10).length) {
      return false;
    }
    for (i10 = length; i10-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b10, keys[i10])) {
        return false;
      }
    }
    for (i10 = length; i10-- !== 0; ) {
      const key = keys[i10];
      if (key === "_owner" && a10.$$typeof) {
        continue;
      }
      if (!deepEqual3(a10[key], b10[key])) {
        return false;
      }
    }
    return true;
  }
  return a10 !== a10 && b10 !== b10;
}
function getDPR2(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR2(element, value) {
  const dpr = getDPR2(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef3(value) {
  const ref = React21.useRef(value);
  index3(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating3(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform3,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React21.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React21.useState(middleware);
  if (!deepEqual3(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React21.useState(null);
  const [_floating, _setFloating] = React21.useState(null);
  const setReference = React21.useCallback((node) => {
    if (node != referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, [_setReference]);
  const setFloating = React21.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, [_setFloating]);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React21.useRef(null);
  const floatingRef = React21.useRef(null);
  const dataRef = React21.useRef(data);
  const whileElementsMountedRef = useLatestRef3(whileElementsMounted);
  const platformRef = useLatestRef3(platform3);
  const update = React21.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition4(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual3(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM3.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index3(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React21.useRef(false);
  index3(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index3(() => {
    if (referenceEl)
      referenceRef.current = referenceEl;
    if (floatingEl)
      floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      } else {
        update();
      }
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef]);
  const refs = React21.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React21.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React21.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x10 = roundByDPR2(elements.floating, data.x);
    const y10 = roundByDPR2(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x10 + "px, " + y10 + "px)",
        ...getDPR2(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x10,
      top: y10
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React21.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}

// node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
var import_react84 = __toESM(require_react(), 1);
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a7(callback) {
  const callbackRef = (0, import_react84.useRef)(callback);
  (0, import_react84.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react84.useMemo)(() => (...args) => {
    var _callbackRef$current;
    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
  }, []);
}

// node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-use-size/dist/index.mjs
var import_react85 = __toESM(require_react(), 1);
function $db6c3485150b8e66$export$1ab7ae714698c4b83(element) {
  const [size5, setSize] = (0, import_react85.useState)(void 0);
  $9f79659886946c16$export$e5c5a5f917a5871c6(() => {
    if (element) {
      setSize({
        width: element.offsetWidth,
        height: element.offsetHeight
      });
      const resizeObserver = new ResizeObserver((entries) => {
        if (!Array.isArray(entries))
          return;
        if (!entries.length)
          return;
        const entry = entries[0];
        let width;
        let height;
        if ("borderBoxSize" in entry) {
          const borderSizeEntry = entry["borderBoxSize"];
          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
          width = borderSize["inlineSize"];
          height = borderSize["blockSize"];
        } else {
          width = element.offsetWidth;
          height = element.offsetHeight;
        }
        setSize({
          width,
          height
        });
      });
      resizeObserver.observe(element, {
        box: "border-box"
      });
      return () => resizeObserver.unobserve(element);
    } else
      setSize(void 0);
  }, [
    element
  ]);
  return size5;
}

// node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-popper/dist/index.mjs
var $cf1ac5d9fe0e8206$var$POPPER_NAME3 = "Popper";
var [$cf1ac5d9fe0e8206$var$createPopperContext3, $cf1ac5d9fe0e8206$export$722aac194ae9233] = $c512c27ab02ef895$export$50c7b4e9d9f19c17($cf1ac5d9fe0e8206$var$POPPER_NAME3);
var [$cf1ac5d9fe0e8206$var$PopperProvider3, $cf1ac5d9fe0e8206$var$usePopperContext3] = $cf1ac5d9fe0e8206$var$createPopperContext3($cf1ac5d9fe0e8206$var$POPPER_NAME3);
var $cf1ac5d9fe0e8206$export$badac9ada3a0bdf93 = (props) => {
  const { __scopePopper, children } = props;
  const [anchor, setAnchor] = (0, import_react86.useState)(null);
  return /* @__PURE__ */ (0, import_react86.createElement)($cf1ac5d9fe0e8206$var$PopperProvider3, {
    scope: __scopePopper,
    anchor,
    onAnchorChange: setAnchor
  }, children);
};
var $cf1ac5d9fe0e8206$var$ANCHOR_NAME3 = "PopperAnchor";
var $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d3 = /* @__PURE__ */ (0, import_react86.forwardRef)((props, forwardedRef) => {
  const { __scopePopper, virtualRef, ...anchorProps } = props;
  const context = $cf1ac5d9fe0e8206$var$usePopperContext3($cf1ac5d9fe0e8206$var$ANCHOR_NAME3, __scopePopper);
  const ref = (0, import_react86.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, ref);
  (0, import_react86.useEffect)(() => {
    context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
  });
  return virtualRef ? null : /* @__PURE__ */ (0, import_react86.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.div, _extends({}, anchorProps, {
    ref: composedRefs
  }));
});
var $cf1ac5d9fe0e8206$var$CONTENT_NAME3 = "PopperContent";
var [$cf1ac5d9fe0e8206$var$PopperContentProvider3, $cf1ac5d9fe0e8206$var$useContentContext3] = $cf1ac5d9fe0e8206$var$createPopperContext3($cf1ac5d9fe0e8206$var$CONTENT_NAME3);
var $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc3 = /* @__PURE__ */ (0, import_react86.forwardRef)((props, forwardedRef) => {
  var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$trans, _middlewareData$trans2, _middlewareData$hide;
  const { __scopePopper, side = "bottom", sideOffset = 0, align = "center", alignOffset = 0, arrowPadding = 0, avoidCollisions = true, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = "partial", hideWhenDetached = false, updatePositionStrategy = "optimized", onPlaced, ...contentProps } = props;
  const context = $cf1ac5d9fe0e8206$var$usePopperContext3($cf1ac5d9fe0e8206$var$CONTENT_NAME3, __scopePopper);
  const [content, setContent] = (0, import_react86.useState)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, (node) => setContent(node));
  const [arrow8, setArrow] = (0, import_react86.useState)(null);
  const arrowSize = $db6c3485150b8e66$export$1ab7ae714698c4b83(arrow8);
  const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;
  const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;
  const desiredPlacement = side + (align !== "center" ? "-" + align : "");
  const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...collisionPaddingProp
  };
  const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
    collisionBoundary
  ];
  const hasExplicitBoundaries = boundary.length > 0;
  const detectOverflowOptions = {
    padding: collisionPadding,
    boundary: boundary.filter($cf1ac5d9fe0e8206$var$isNotNull3),
    altBoundary: hasExplicitBoundaries
  };
  const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating3({
    strategy: "fixed",
    placement: desiredPlacement,
    whileElementsMounted: (...args) => {
      const cleanup = autoUpdate2(...args, {
        animationFrame: updatePositionStrategy === "always"
      });
      return cleanup;
    },
    elements: {
      reference: context.anchor
    },
    middleware: [
      offset2({
        mainAxis: sideOffset + arrowHeight,
        alignmentAxis: alignOffset
      }),
      avoidCollisions && shift4({
        mainAxis: true,
        crossAxis: false,
        limiter: sticky === "partial" ? limitShift4() : void 0,
        ...detectOverflowOptions
      }),
      avoidCollisions && flip4({
        ...detectOverflowOptions
      }),
      size4({
        ...detectOverflowOptions,
        apply: ({ elements, rects, availableWidth, availableHeight }) => {
          const { width: anchorWidth, height: anchorHeight } = rects.reference;
          const contentStyle = elements.floating.style;
          contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`);
          contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`);
          contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`);
          contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
        }
      }),
      arrow8 && arrow7({
        element: arrow8,
        padding: arrowPadding
      }),
      $cf1ac5d9fe0e8206$var$transformOrigin3({
        arrowWidth,
        arrowHeight
      }),
      hideWhenDetached && hide4({
        strategy: "referenceHidden",
        ...detectOverflowOptions
      })
    ]
  });
  const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement3(placement);
  const handlePlaced = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a7(onPlaced);
  $9f79659886946c16$export$e5c5a5f917a5871c6(() => {
    if (isPositioned)
      handlePlaced === null || handlePlaced === void 0 || handlePlaced();
  }, [
    isPositioned,
    handlePlaced
  ]);
  const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;
  const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;
  const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;
  const [contentZIndex, setContentZIndex] = (0, import_react86.useState)();
  $9f79659886946c16$export$e5c5a5f917a5871c6(() => {
    if (content)
      setContentZIndex(window.getComputedStyle(content).zIndex);
  }, [
    content
  ]);
  return /* @__PURE__ */ (0, import_react86.createElement)("div", {
    ref: refs.setFloating,
    "data-radix-popper-content-wrapper": "",
    style: {
      ...floatingStyles,
      transform: isPositioned ? floatingStyles.transform : "translate(0, -200%)",
      minWidth: "max-content",
      zIndex: contentZIndex,
      ["--radix-popper-transform-origin"]: [
        (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
        (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
      ].join(" ")
    },
    dir: props.dir
  }, /* @__PURE__ */ (0, import_react86.createElement)($cf1ac5d9fe0e8206$var$PopperContentProvider3, {
    scope: __scopePopper,
    placedSide,
    onArrowChange: setArrow,
    arrowX,
    arrowY,
    shouldHideArrow: cannotCenterArrow
  }, /* @__PURE__ */ (0, import_react86.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.div, _extends({
    "data-side": placedSide,
    "data-align": placedAlign
  }, contentProps, {
    ref: composedRefs,
    style: {
      ...contentProps.style,
      animation: !isPositioned ? "none" : void 0,
      opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : void 0
    }
  }))));
});
function $cf1ac5d9fe0e8206$var$isNotNull3(value) {
  return value !== null;
}
var $cf1ac5d9fe0e8206$var$transformOrigin3 = (options) => ({
  name: "transformOrigin",
  options,
  fn(data) {
    var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
    const { placement, rects, middlewareData } = data;
    const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;
    const isArrowHidden = cannotCenterArrow;
    const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
    const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
    const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement3(placement);
    const noArrowAlign = {
      start: "0%",
      center: "50%",
      end: "100%"
    }[placedAlign];
    const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;
    const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;
    let x10 = "";
    let y10 = "";
    if (placedSide === "bottom") {
      x10 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y10 = `${-arrowHeight}px`;
    } else if (placedSide === "top") {
      x10 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y10 = `${rects.floating.height + arrowHeight}px`;
    } else if (placedSide === "right") {
      x10 = `${-arrowHeight}px`;
      y10 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    } else if (placedSide === "left") {
      x10 = `${rects.floating.width + arrowHeight}px`;
      y10 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    }
    return {
      data: {
        x: x10,
        y: y10
      }
    };
  }
});
function $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement3(placement) {
  const [side, align = "center"] = placement.split("-");
  return [
    side,
    align
  ];
}
var $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe93 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf93;
var $cf1ac5d9fe0e8206$export$b688253958b8dfe73 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d3;
var $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d23 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc3;

// node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
var import_react87 = __toESM(require_react(), 1);
function $71cd76cc60e0454e$export$6f32135080cb4c34({ prop, defaultProp, onChange = () => {
} }) {
  const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState4({
    defaultProp,
    onChange
  });
  const isControlled = prop !== void 0;
  const value1 = isControlled ? prop : uncontrolledProp;
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a7(onChange);
  const setValue = (0, import_react87.useCallback)((nextValue) => {
    if (isControlled) {
      const setter = nextValue;
      const value = typeof nextValue === "function" ? setter(prop) : nextValue;
      if (value !== prop)
        handleChange(value);
    } else
      setUncontrolledProp(nextValue);
  }, [
    isControlled,
    prop,
    setUncontrolledProp,
    handleChange
  ]);
  return [
    value1,
    setValue
  ];
}
function $71cd76cc60e0454e$var$useUncontrolledState4({ defaultProp, onChange }) {
  const uncontrolledState = (0, import_react87.useState)(defaultProp);
  const [value] = uncontrolledState;
  const prevValueRef = (0, import_react87.useRef)(value);
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a7(onChange);
  (0, import_react87.useEffect)(() => {
    if (prevValueRef.current !== value) {
      handleChange(value);
      prevValueRef.current = value;
    }
  }, [
    value,
    prevValueRef,
    handleChange
  ]);
  return uncontrolledState;
}

// node_modules/@radix-ui/react-popover/dist/index.mjs
var $cb5cc270b50c6fcd$var$POPOVER_NAME = "Popover";
var [$cb5cc270b50c6fcd$var$createPopoverContext, $cb5cc270b50c6fcd$export$c8393c9e73286932] = $c512c27ab02ef895$export$50c7b4e9d9f19c17($cb5cc270b50c6fcd$var$POPOVER_NAME, [
  $cf1ac5d9fe0e8206$export$722aac194ae9233
]);
var $cb5cc270b50c6fcd$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae9233();
var [$cb5cc270b50c6fcd$var$PopoverProvider, $cb5cc270b50c6fcd$var$usePopoverContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$POPOVER_NAME);
var $cb5cc270b50c6fcd$export$5b6b19405a83ff9d = (props) => {
  const { __scopePopover, children, open: openProp, defaultOpen, onOpenChange, modal = false } = props;
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  const triggerRef = (0, import_react88.useRef)(null);
  const [hasCustomAnchor, setHasCustomAnchor] = (0, import_react88.useState)(false);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c34({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react88.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe93, popperScope, /* @__PURE__ */ (0, import_react88.createElement)($cb5cc270b50c6fcd$var$PopoverProvider, {
    scope: __scopePopover,
    contentId: $1746a345f3d73bb7$export$f680877a34711e374(),
    triggerRef,
    open,
    onOpenChange: setOpen,
    onOpenToggle: (0, import_react88.useCallback)(() => setOpen((prevOpen) => !prevOpen), [
      setOpen
    ]),
    hasCustomAnchor,
    onCustomAnchorAdd: (0, import_react88.useCallback)(() => setHasCustomAnchor(true), []),
    onCustomAnchorRemove: (0, import_react88.useCallback)(() => setHasCustomAnchor(false), []),
    modal
  }, children));
};
var $cb5cc270b50c6fcd$var$ANCHOR_NAME = "PopoverAnchor";
var $cb5cc270b50c6fcd$export$96e5381f42521a79 = /* @__PURE__ */ (0, import_react88.forwardRef)((props, forwardedRef) => {
  const { __scopePopover, ...anchorProps } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$ANCHOR_NAME, __scopePopover);
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
  (0, import_react88.useEffect)(() => {
    onCustomAnchorAdd();
    return () => onCustomAnchorRemove();
  }, [
    onCustomAnchorAdd,
    onCustomAnchorRemove
  ]);
  return /* @__PURE__ */ (0, import_react88.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe73, _extends({}, popperScope, anchorProps, {
    ref: forwardedRef
  }));
});
var $cb5cc270b50c6fcd$var$TRIGGER_NAME = "PopoverTrigger";
var $cb5cc270b50c6fcd$export$7dacb05d26466c3 = /* @__PURE__ */ (0, import_react88.forwardRef)((props, forwardedRef) => {
  const { __scopePopover, ...triggerProps } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$TRIGGER_NAME, __scopePopover);
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  const composedTriggerRef = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, context.triggerRef);
  const trigger2 = /* @__PURE__ */ (0, import_react88.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d0347.button, _extends({
    type: "button",
    "aria-haspopup": "dialog",
    "aria-expanded": context.open,
    "aria-controls": context.contentId,
    "data-state": $cb5cc270b50c6fcd$var$getState(context.open)
  }, triggerProps, {
    ref: composedTriggerRef,
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onClick, context.onOpenToggle)
  }));
  return context.hasCustomAnchor ? trigger2 : /* @__PURE__ */ (0, import_react88.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe73, _extends({
    asChild: true
  }, popperScope), trigger2);
});
var $cb5cc270b50c6fcd$var$PORTAL_NAME = "PopoverPortal";
var [$cb5cc270b50c6fcd$var$PortalProvider, $cb5cc270b50c6fcd$var$usePortalContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$PORTAL_NAME, {
  forceMount: void 0
});
var $cb5cc270b50c6fcd$var$CONTENT_NAME = "PopoverContent";
var $cb5cc270b50c6fcd$export$d7e1f420b25549ff = /* @__PURE__ */ (0, import_react88.forwardRef)((props, forwardedRef) => {
  const portalContext = $cb5cc270b50c6fcd$var$usePortalContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  const { forceMount = portalContext.forceMount, ...contentProps } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  return /* @__PURE__ */ (0, import_react88.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b2, {
    present: forceMount || context.open
  }, context.modal ? /* @__PURE__ */ (0, import_react88.createElement)($cb5cc270b50c6fcd$var$PopoverContentModal, _extends({}, contentProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ (0, import_react88.createElement)($cb5cc270b50c6fcd$var$PopoverContentNonModal, _extends({}, contentProps, {
    ref: forwardedRef
  })));
});
var $cb5cc270b50c6fcd$var$PopoverContentModal = /* @__PURE__ */ (0, import_react88.forwardRef)((props, forwardedRef) => {
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  const contentRef = (0, import_react88.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d055(forwardedRef, contentRef);
  const isRightClickOutsideRef = (0, import_react88.useRef)(false);
  (0, import_react88.useEffect)(() => {
    const content = contentRef.current;
    if (content)
      return hideOthers(content);
  }, []);
  return /* @__PURE__ */ (0, import_react88.createElement)(Combination_default2, {
    as: $5e63c961fc1ce211$export$8c6ed5c666ac13608,
    allowPinchZoom: true
  }, /* @__PURE__ */ (0, import_react88.createElement)($cb5cc270b50c6fcd$var$PopoverContentImpl, _extends({}, props, {
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: true,
    onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onCloseAutoFocus, (event) => {
      var _context$triggerRef$c;
      event.preventDefault();
      if (!isRightClickOutsideRef.current)
        (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
    }),
    onPointerDownOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onPointerDownOutside, (event) => {
      const originalEvent = event.detail.originalEvent;
      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
      isRightClickOutsideRef.current = isRightClick;
    }, {
      checkForDefaultPrevented: false
    }),
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff105(props.onFocusOutside, (event) => event.preventDefault(), {
      checkForDefaultPrevented: false
    })
  })));
});
var $cb5cc270b50c6fcd$var$PopoverContentNonModal = /* @__PURE__ */ (0, import_react88.forwardRef)((props, forwardedRef) => {
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  const hasInteractedOutsideRef = (0, import_react88.useRef)(false);
  const hasPointerDownOutsideRef = (0, import_react88.useRef)(false);
  return /* @__PURE__ */ (0, import_react88.createElement)($cb5cc270b50c6fcd$var$PopoverContentImpl, _extends({}, props, {
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    onCloseAutoFocus: (event) => {
      var _props$onCloseAutoFoc;
      (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
      if (!event.defaultPrevented) {
        var _context$triggerRef$c2;
        if (!hasInteractedOutsideRef.current)
          (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();
        event.preventDefault();
      }
      hasInteractedOutsideRef.current = false;
      hasPointerDownOutsideRef.current = false;
    },
    onInteractOutside: (event) => {
      var _props$onInteractOuts, _context$triggerRef$c3;
      (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
      if (!event.defaultPrevented) {
        hasInteractedOutsideRef.current = true;
        if (event.detail.originalEvent.type === "pointerdown")
          hasPointerDownOutsideRef.current = true;
      }
      const target = event.target;
      const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
      if (targetIsTrigger)
        event.preventDefault();
      if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current)
        event.preventDefault();
    }
  }));
});
var $cb5cc270b50c6fcd$var$PopoverContentImpl = /* @__PURE__ */ (0, import_react88.forwardRef)((props, forwardedRef) => {
  const { __scopePopover, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, ...contentProps } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, __scopePopover);
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c2();
  return /* @__PURE__ */ (0, import_react88.createElement)($d3863c46a17e8a28$export$20e40289641fbbb62, {
    asChild: true,
    loop: true,
    trapped: trapFocus,
    onMountAutoFocus: onOpenAutoFocus,
    onUnmountAutoFocus: onCloseAutoFocus
  }, /* @__PURE__ */ (0, import_react88.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f222, {
    asChild: true,
    disableOutsidePointerEvents,
    onInteractOutside,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onDismiss: () => context.onOpenChange(false)
  }, /* @__PURE__ */ (0, import_react88.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d23, _extends({
    "data-state": $cb5cc270b50c6fcd$var$getState(context.open),
    role: "dialog",
    id: context.contentId
  }, popperScope, contentProps, {
    ref: forwardedRef,
    style: {
      ...contentProps.style,
      "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
      "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
      "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
      "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
      "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
    }
  }))));
});
function $cb5cc270b50c6fcd$var$getState(open) {
  return open ? "open" : "closed";
}
var $cb5cc270b50c6fcd$export$be92b6f5f03c0fe9 = $cb5cc270b50c6fcd$export$5b6b19405a83ff9d;
var $cb5cc270b50c6fcd$export$b688253958b8dfe7 = $cb5cc270b50c6fcd$export$96e5381f42521a79;
var $cb5cc270b50c6fcd$export$41fb9f06171c75f4 = $cb5cc270b50c6fcd$export$7dacb05d26466c3;
var $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2 = $cb5cc270b50c6fcd$export$d7e1f420b25549ff;

// node_modules/@tldraw/tldraw/dist/index.mjs
var ze2 = __toESM(require_react(), 1);
var Jt2 = __toESM(require_react(), 1);
var rt2 = __toESM(require_react(), 1);
var Oe2 = __toESM(require_react(), 1);
var Ue2 = __toESM(require_react(), 1);
var Gs = __toESM(require_react(), 1);
var at2 = __toESM(require_react(), 1);

// node_modules/browser-fs-access/dist/index.modern.js
var index_modern_exports = {};
__export(index_modern_exports, {
  directoryOpen: () => i4,
  directoryOpenLegacy: () => v5,
  directoryOpenModern: () => d5,
  fileOpen: () => n4,
  fileOpenLegacy: () => w6,
  fileOpenModern: () => c4,
  fileSave: () => o4,
  fileSaveLegacy: () => b5,
  fileSaveModern: () => f4,
  supported: () => e4
});
var e4 = (() => {
  if (typeof self == "undefined")
    return false;
  if ("top" in self && self !== top)
    try {
      top;
    } catch (e10) {
      return false;
    }
  else if ("showOpenFilePicker" in self)
    return "showOpenFilePicker";
  return false;
})();
var t4 = e4 ? Promise.resolve().then(function() {
  return l6;
}) : Promise.resolve().then(function() {
  return h5;
});
async function n4(...e10) {
  return (await t4).default(...e10);
}
var r4 = e4 ? Promise.resolve().then(function() {
  return y5;
}) : Promise.resolve().then(function() {
  return P3;
});
async function i4(...e10) {
  return (await r4).default(...e10);
}
var a6 = e4 ? Promise.resolve().then(function() {
  return m5;
}) : Promise.resolve().then(function() {
  return k5;
});
async function o4(...e10) {
  return (await a6).default(...e10);
}
var s4 = async (e10) => {
  const t10 = await e10.getFile();
  return t10.handle = e10, t10;
};
var c4 = async (e10 = [{}]) => {
  Array.isArray(e10) || (e10 = [e10]);
  const t10 = [];
  e10.forEach((e11, n11) => {
    t10[n11] = { description: e11.description || "Files", accept: {} }, e11.mimeTypes ? e11.mimeTypes.map((r11) => {
      t10[n11].accept[r11] = e11.extensions || [];
    }) : t10[n11].accept["*/*"] = e11.extensions || [];
  });
  const n10 = await window.showOpenFilePicker({ id: e10[0].id, startIn: e10[0].startIn, types: t10, multiple: e10[0].multiple || false, excludeAcceptAllOption: e10[0].excludeAcceptAllOption || false }), r10 = await Promise.all(n10.map(s4));
  return e10[0].multiple ? r10 : r10[0];
};
var l6 = { __proto__: null, default: c4 };
function u4(e10) {
  function t10(e11) {
    if (Object(e11) !== e11)
      return Promise.reject(new TypeError(e11 + " is not an object."));
    var t11 = e11.done;
    return Promise.resolve(e11.value).then(function(e12) {
      return { value: e12, done: t11 };
    });
  }
  return u4 = function(e11) {
    this.s = e11, this.n = e11.next;
  }, u4.prototype = { s: null, n: null, next: function() {
    return t10(this.n.apply(this.s, arguments));
  }, return: function(e11) {
    var n10 = this.s.return;
    return n10 === void 0 ? Promise.resolve({ value: e11, done: true }) : t10(n10.apply(this.s, arguments));
  }, throw: function(e11) {
    var n10 = this.s.return;
    return n10 === void 0 ? Promise.reject(e11) : t10(n10.apply(this.s, arguments));
  } }, new u4(e10);
}
var p5 = async (e10, t10, n10 = e10.name, r10) => {
  const i10 = [], a10 = [];
  var o10, s10 = false, c10 = false;
  try {
    for (var l10, d10 = function(e11) {
      var t11, n11, r11, i11 = 2;
      for (typeof Symbol != "undefined" && (n11 = Symbol.asyncIterator, r11 = Symbol.iterator); i11--; ) {
        if (n11 && (t11 = e11[n11]) != null)
          return t11.call(e11);
        if (r11 && (t11 = e11[r11]) != null)
          return new u4(t11.call(e11));
        n11 = "@@asyncIterator", r11 = "@@iterator";
      }
      throw new TypeError("Object is not async iterable");
    }(e10.values()); s10 = !(l10 = await d10.next()).done; s10 = false) {
      const o11 = l10.value, s11 = `${n10}/${o11.name}`;
      o11.kind === "file" ? a10.push(o11.getFile().then((t11) => (t11.directoryHandle = e10, t11.handle = o11, Object.defineProperty(t11, "webkitRelativePath", { configurable: true, enumerable: true, get: () => s11 })))) : o11.kind !== "directory" || !t10 || r10 && r10(o11) || i10.push(p5(o11, t10, s11, r10));
    }
  } catch (e11) {
    c10 = true, o10 = e11;
  } finally {
    try {
      s10 && d10.return != null && await d10.return();
    } finally {
      if (c10)
        throw o10;
    }
  }
  return [...(await Promise.all(i10)).flat(), ...await Promise.all(a10)];
};
var d5 = async (e10 = {}) => {
  e10.recursive = e10.recursive || false, e10.mode = e10.mode || "read";
  const t10 = await window.showDirectoryPicker({ id: e10.id, startIn: e10.startIn, mode: e10.mode });
  return p5(t10, e10.recursive, void 0, e10.skipDirectory);
};
var y5 = { __proto__: null, default: d5 };
var f4 = async (e10, t10 = [{}], n10 = null, r10 = false, i10 = null) => {
  Array.isArray(t10) || (t10 = [t10]), t10[0].fileName = t10[0].fileName || "Untitled";
  const a10 = [];
  let o10 = null;
  if (e10 instanceof Blob && e10.type ? o10 = e10.type : e10.headers && e10.headers.get("content-type") && (o10 = e10.headers.get("content-type")), t10.forEach((e11, t11) => {
    a10[t11] = { description: e11.description || "Files", accept: {} }, e11.mimeTypes ? (t11 === 0 && o10 && e11.mimeTypes.push(o10), e11.mimeTypes.map((n11) => {
      a10[t11].accept[n11] = e11.extensions || [];
    })) : o10 ? a10[t11].accept[o10] = e11.extensions || [] : a10[t11].accept["*/*"] = e11.extensions || [];
  }), n10)
    try {
      await n10.getFile();
    } catch (e11) {
      if (n10 = null, r10)
        throw e11;
    }
  const s10 = n10 || await window.showSaveFilePicker({ suggestedName: t10[0].fileName, id: t10[0].id, startIn: t10[0].startIn, types: a10, excludeAcceptAllOption: t10[0].excludeAcceptAllOption || false });
  !n10 && i10 && i10(s10);
  const c10 = await s10.createWritable();
  if ("stream" in e10) {
    const t11 = e10.stream();
    return await t11.pipeTo(c10), s10;
  }
  return "body" in e10 ? (await e10.body.pipeTo(c10), s10) : (await c10.write(await e10), await c10.close(), s10);
};
var m5 = { __proto__: null, default: f4 };
var w6 = async (e10 = [{}]) => (Array.isArray(e10) || (e10 = [e10]), new Promise((t10, n10) => {
  const r10 = document.createElement("input");
  r10.type = "file";
  const i10 = [...e10.map((e11) => e11.mimeTypes || []), ...e10.map((e11) => e11.extensions || [])].join();
  r10.multiple = e10[0].multiple || false, r10.accept = i10 || "", r10.style.display = "none", document.body.append(r10);
  const a10 = (e11) => {
    typeof o10 == "function" && o10(), t10(e11);
  }, o10 = e10[0].legacySetup && e10[0].legacySetup(a10, () => o10(n10), r10), s10 = () => {
    window.removeEventListener("focus", s10), r10.remove();
  };
  r10.addEventListener("click", () => {
    window.addEventListener("focus", s10);
  }), r10.addEventListener("change", () => {
    window.removeEventListener("focus", s10), r10.remove(), a10(r10.multiple ? Array.from(r10.files) : r10.files[0]);
  }), "showPicker" in HTMLInputElement.prototype ? r10.showPicker() : r10.click();
}));
var h5 = { __proto__: null, default: w6 };
var v5 = async (e10 = [{}]) => (Array.isArray(e10) || (e10 = [e10]), e10[0].recursive = e10[0].recursive || false, new Promise((t10, n10) => {
  const r10 = document.createElement("input");
  r10.type = "file", r10.webkitdirectory = true;
  const i10 = (e11) => {
    typeof a10 == "function" && a10(), t10(e11);
  }, a10 = e10[0].legacySetup && e10[0].legacySetup(i10, () => a10(n10), r10);
  r10.addEventListener("change", () => {
    let t11 = Array.from(r10.files);
    e10[0].recursive ? e10[0].recursive && e10[0].skipDirectory && (t11 = t11.filter((t12) => t12.webkitRelativePath.split("/").every((t13) => !e10[0].skipDirectory({ name: t13, kind: "directory" })))) : t11 = t11.filter((e11) => e11.webkitRelativePath.split("/").length === 2), i10(t11);
  }), "showPicker" in HTMLInputElement.prototype ? r10.showPicker() : r10.click();
}));
var P3 = { __proto__: null, default: v5 };
var b5 = async (e10, t10 = {}) => {
  Array.isArray(t10) && (t10 = t10[0]);
  const n10 = document.createElement("a");
  let r10 = e10;
  "body" in e10 && (r10 = await async function(e11, t11) {
    const n11 = e11.getReader(), r11 = new ReadableStream({ start: (e12) => async function t12() {
      return n11.read().then(({ done: n12, value: r12 }) => {
        if (!n12)
          return e12.enqueue(r12), t12();
        e12.close();
      });
    }() }), i11 = new Response(r11), a11 = await i11.blob();
    return n11.releaseLock(), new Blob([a11], { type: t11 });
  }(e10.body, e10.headers.get("content-type"))), n10.download = t10.fileName || "Untitled", n10.href = URL.createObjectURL(await r10);
  const i10 = () => {
    typeof a10 == "function" && a10();
  }, a10 = t10.legacySetup && t10.legacySetup(i10, () => a10(), n10);
  return n10.addEventListener("click", () => {
    setTimeout(() => URL.revokeObjectURL(n10.href), 3e4), i10();
  }), n10.click(), null;
};
var k5 = { __proto__: null, default: b5 };

// node_modules/@tldraw/tldraw/dist/index.mjs
var ee4 = __toESM(require_react(), 1);
var Me2 = __toESM(require_react(), 1);
var Re2 = __toESM(require_react(), 1);
var Vs = __toESM(require_react(), 1);
var _e3 = __toESM(require_react(), 1);
var Il = __toESM(require_react(), 1);
var $o = __toESM(require_react(), 1);
var et2 = __toESM(require_react(), 1);
var cn2 = __toESM(require_react(), 1);
var Nr = __toESM(require_react(), 1);
var pn = __toESM(require_react(), 1);
var pt2 = __toESM(require_react(), 1);
var un2 = __toESM(require_react(), 1);
var Kn2 = __toESM(require_react(), 1);
var In2 = __toESM(require_react(), 1);
var Dn2 = __toESM(require_react(), 1);
var en = __toESM(require_react(), 1);
var mn2 = __toESM(require_react(), 1);
var Zl = __toESM(require_react(), 1);
var hn2 = __toESM(require_react(), 1);
var Pn2 = __toESM(require_react(), 1);
var Xe2 = __toESM(require_react(), 1);
var qe2 = __toESM(require_react(), 1);
var nn2 = __toESM(require_react(), 1);
var fn2 = __toESM(require_react(), 1);
var Mn2 = __toESM(require_react(), 1);
var dd = __toESM(require_react(), 1);
var gt2 = __toESM(require_react(), 1);
var we2 = __toESM(require_react(), 1);
var ve2 = __toESM(require_react(), 1);
var ce4 = __toESM(require_react(), 1);
var Ct2 = __toESM(require_react(), 1);
var import_react93 = __toESM(require_react(), 1);

// node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  const request = indexedDB.open(dbName);
  request.onupgradeneeded = () => request.result.createObjectStore(storeName);
  const dbp = promisifyRequest(request);
  return (txMode, callback) => dbp.then((db2) => callback(db2.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}

// node_modules/zustand/esm/vanilla.mjs
var import_meta = {};
var createStoreImpl = (createState) => {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (!Object.is(nextState, state)) {
      const previousState = state;
      state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribe = (listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => {
    if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production") {
      console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.");
    }
    listeners.clear();
  };
  const api = { setState, getState, subscribe, destroy };
  state = createState(setState, getState, api);
  return api;
};
var createStore2 = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;
var vanilla = (createState) => {
  if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production") {
    console.warn("[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.");
  }
  return createStore2(createState);
};

// node_modules/zustand/esm/index.mjs
var import_react89 = __toESM(require_react(), 1);
var import_with_selector = __toESM(require_with_selector(), 1);
var import_meta2 = {};
var { useDebugValue } = import_react89.default;
var { useSyncExternalStoreWithSelector } = import_with_selector.default;
var didWarnAboutEqualityFn = false;
function useStore(api, selector = api.getState, equalityFn) {
  if ((import_meta2.env ? import_meta2.env.MODE : void 0) !== "production" && equalityFn && !didWarnAboutEqualityFn) {
    console.warn("[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937");
    didWarnAboutEqualityFn = true;
  }
  const slice = useSyncExternalStoreWithSelector(api.subscribe, api.getState, api.getServerState || api.getState, selector, equalityFn);
  useDebugValue(slice);
  return slice;
}
var createImpl = (createState) => {
  if ((import_meta2.env ? import_meta2.env.MODE : void 0) !== "production" && typeof createState !== "function") {
    console.warn("[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.");
  }
  const api = typeof createState === "function" ? createStore2(createState) : createState;
  const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);
  Object.assign(useBoundStore, api);
  return useBoundStore;
};
var create2 = (createState) => createState ? createImpl(createState) : createImpl;
var react = (createState) => {
  if ((import_meta2.env ? import_meta2.env.MODE : void 0) !== "production") {
    console.warn("[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.");
  }
  return create2(createState);
};

// node_modules/@tldraw/tldraw/dist/index.mjs
var rs = Object.defineProperty;
var fc = Object.defineProperties;
var Sc = Object.getOwnPropertyDescriptor;
var bc = Object.getOwnPropertyDescriptors;
var Tc = Object.getOwnPropertyNames;
var gr = Object.getOwnPropertySymbols;
var ss = Object.prototype.hasOwnProperty;
var Xi = Object.prototype.propertyIsEnumerable;
var os = (r10, e10, t10) => e10 in r10 ? rs(r10, e10, { enumerable: true, configurable: true, writable: true, value: t10 }) : r10[e10] = t10;
var S4 = (r10, e10) => {
  for (var t10 in e10 || (e10 = {}))
    ss.call(e10, t10) && os(r10, t10, e10[t10]);
  if (gr)
    for (var t10 of gr(e10))
      Xi.call(e10, t10) && os(r10, t10, e10[t10]);
  return r10;
};
var x5 = (r10, e10) => fc(r10, bc(e10));
var Je2 = (r10, e10) => {
  var t10 = {};
  for (var n10 in r10)
    ss.call(r10, n10) && e10.indexOf(n10) < 0 && (t10[n10] = r10[n10]);
  if (r10 != null && gr)
    for (var n10 of gr(r10))
      e10.indexOf(n10) < 0 && Xi.call(r10, n10) && (t10[n10] = r10[n10]);
  return t10;
};
var yc = (r10, e10) => {
  for (var t10 in e10)
    rs(r10, t10, { get: e10[t10], enumerable: true });
};
var fr = (r10, e10, t10, n10) => {
  if (e10 && typeof e10 == "object" || typeof e10 == "function")
    for (let o10 of Tc(e10))
      !ss.call(r10, o10) && (t10 || o10 !== "default") && rs(r10, o10, { get: () => e10[o10], enumerable: !(n10 = Sc(e10, o10)) || n10.enumerable });
  return r10;
};
var l7 = (r10, e10, t10) => (os(r10, typeof e10 != "symbol" ? e10 + "" : e10, t10), t10);
var pe4 = (r10, e10, t10) => new Promise((n10, o10) => {
  var s10 = (i10) => {
    try {
      d10(t10.next(i10));
    } catch (c10) {
      o10(c10);
    }
  }, a10 = (i10) => {
    try {
      d10(t10.throw(i10));
    } catch (c10) {
      o10(c10);
    }
  }, d10 = (i10) => i10.done ? n10(i10.value) : Promise.resolve(i10.value).then(s10, a10);
  d10((t10 = t10.apply(r10, e10)).next());
});
var { styled: H5, createTheme: kc } = q3({ themeMap: S4({}, n3), theme: { colors: { bounds: "rgba(65, 132, 244, 1.000)", boundsBg: "rgba(65, 132, 244, 0.05)", hover: "#ececec", overlay: "rgba(0, 0, 0, 0.15)", overlayContrast: "rgba(255, 255, 255, 0.15)", panel: "#fefefe", panelContrast: "#ffffff", selected: "rgba(66, 133, 244, 1.000)", selectedContrast: "#fefefe", text: "#333333", tooltip: "#1d1d1d", tooltipContrast: "#ffffff", warn: "rgba(255, 100, 100, 1)", canvas: "rgb(248, 249, 250)" }, shadows: { 2: "0px 1px 1px rgba(0, 0, 0, 0.14)", 3: "0px 2px 3px rgba(0, 0, 0, 0.14)", 4: "0px 4px 5px -1px rgba(0, 0, 0, 0.14)", 8: "0px 12px 17px rgba(0, 0, 0, 0.14)", 12: "0px 12px 17px rgba(0, 0, 0, 0.14)", 24: "0px 24px 38px rgba(0, 0, 0, 0.14)", key: "1px 1px rgba(0,0,0,1)", panel: `0px 0px 16px -1px rgba(0, 0, 0, 0.05), 
        0px 0px 16px -8px rgba(0, 0, 0, 0.05), 
        0px 0px 16px -12px rgba(0, 0, 0, 0.12),
        0px 0px 2px 0px rgba(0, 0, 0, 0.08)` }, space: { 0: "2px", 1: "3px", 2: "4px", 3: "8px", 4: "12px", 5: "16px", 6: "32px", 7: "48px" }, fontSizes: { 0: "10px", 1: "12px", 2: "13px", 3: "16px", 4: "18px" }, fonts: { ui: '"Recursive", system-ui, sans-serif', body: '"Recursive", system-ui, sans-serif', mono: '"Recursive Mono", monospace' }, fontWeights: {}, lineHeights: {}, letterSpacings: {}, sizes: {}, borderWidths: { 0: "$1" }, borderStyles: {}, radii: { 0: "2px", 1: "4px", 2: "8px", 3: "12px", 4: "16px" }, zIndices: {}, transitions: {} }, media: { micro: "(max-width: 370px)", sm: "(min-width: 640px)", md: "(min-width: 768px)", lg: "(min-width: 1024px)" }, utils: { zStrokeWidth: () => (r10) => Array.isArray(r10) ? { strokeWidth: `calc(${r10[0]}px / var(--camera-zoom))` } : { strokeWidth: `calc(${r10}px / var(--camera-zoom))` } } });
var is = kc({ colors: { bounds: "rgba(38, 150, 255, 1.000)", boundsBg: "rgba(38, 150, 255, 0.05)", hover: "#444A50", overlay: "rgba(0, 0, 0, 0.15)", overlayContrast: "rgba(255, 255, 255, 0.15)", panel: "#363D44", panelContrast: "#49555f", selected: "rgba(38, 150, 255, 1.000)", selectedContrast: "#fefefe", text: "#f8f9fa", tooltip: "#1d1d1d", tooltipContrast: "#ffffff", canvas: "#212529" }, shadows: { 2: "0px 1px 1px rgba(0, 0, 0, 0.24)", 3: "0px 2px 3px rgba(0, 0, 0, 0.24)", 4: "0px 4px 5px -1px rgba(0, 0, 0, 0.24)", 8: "0px 12px 17px rgba(0, 0, 0, 0.24)", 12: "0px 12px 17px rgba(0, 0, 0, 0.24)", 24: "0px 24px 38px rgba(0, 0, 0, 0.24)", panel: `0px 0px 16px -1px rgba(0, 0, 0, 0.05), 
      0px 0px 16px -8px rgba(0, 0, 0, 0.09), 
      0px 0px 16px -12px rgba(0, 0, 0, 0.2)` } });
var Pe2 = H5("hr", { height: 0, paddingTop: 1, width: "calc(100%+8px)", backgroundColor: "$hover", border: "none", margin: "$2 -4px" });
var Rt2 = H5("div", { position: "relative", overflow: "hidden", userSelect: "none", WebkitUserSelect: "none", display: "flex", flexDirection: "column", zIndex: 99997, minWidth: 180, pointerEvents: "all", backgroundColor: "$panel", border: "1px solid $panelContrast", boxShadow: "$panel", padding: "$2 $2", borderRadius: "$3", font: "$ui", maxHeight: "100vh", overflowY: "auto", overflowX: "hidden", "&::webkit-scrollbar": { display: "none" }, "-ms-overflow-style": "none", scrollbarWidth: "none", variants: { size: { small: { minWidth: 72 } }, overflow: { true: { maxHeight: "60vh" } } } });
var Ic = () => C3.isDarwin() ? "\u2318" : "Ctrl";
function po({ variant: r10, children: e10 }) {
  return as.createElement(Cc, { variant: r10 }, e10.split("").map((t10, n10) => as.createElement("span", { key: n10 }, t10.replace("#", Ic()))));
}
var Cc = H5("kbd", { marginLeft: "$3", textShadow: "$2", textAlign: "center", fontSize: "$0", fontFamily: "$ui", color: "$text", background: "none", fontWeight: 400, gap: "$1", display: "flex", alignItems: "center", "& > span": { padding: "$0", borderRadius: "$0", display: "flex", alignItems: "center", justifyContent: "center" }, variants: { variant: { tooltip: { "& > span": { color: "$tooltipContrast", background: "$overlayContrast", boxShadow: "$key", width: "20px", height: "20px" } }, menu: {} } } });
var ut2 = H5("div", { height: "100%", borderRadius: "4px", marginRight: "1px", width: "fit-content", display: "grid", alignItems: "center", justifyContent: "center", outline: "none", border: "none", pointerEvents: "all", cursor: "pointer", color: "currentColor", "& svg": { height: 16, width: 16, strokeWidth: 1 }, "& > *": { gridRow: 1, gridColumn: 1 } });
var Qe2 = { "@initial": "mobile", "@micro": "micro", "@sm": "small", "@md": "medium", "@lg": "large" };
var je2 = _t.forwardRef((p10, u10) => {
  var m10 = p10, { onClick: r10, isActive: e10 = false, isWarning: t10 = false, hasIndicator: n10 = false, hasArrow: o10 = false, disabled: s10 = false, variant: a10, kbd: d10, children: i10 } = m10, c10 = Je2(m10, ["onClick", "isActive", "isWarning", "hasIndicator", "hasArrow", "disabled", "variant", "kbd", "children"]);
  return _t.createElement(Ec, S4({ ref: u10, bp: Qe2, isWarning: t10, isActive: e10, disabled: s10, onClick: r10, variant: a10 }, c10), _t.createElement(qi, null, i10, d10 ? _t.createElement(po, { variant: "menu" }, d10) : void 0, n10 && _t.createElement($d08ef79370b62062$export$c3468e2714d175fa, { dir: "ltr" }, _t.createElement(ut2, null, _t.createElement(CheckIcon, null))), o10 && _t.createElement(ut2, null, _t.createElement(ChevronRightIcon, null))));
});
var qi = H5("div", { height: "100%", width: "100%", backgroundColor: "$panel", borderRadius: "$2", display: "flex", gap: "$1", flexDirection: "row", alignItems: "center", padding: "0 $3", justifyContent: "space-between", border: "1px solid transparent", "& svg": { position: "relative", stroke: "$overlay", strokeWidth: 1, zIndex: 1 }, [`& > ${ut2}`]: { paddingLeft: "$3" } });
var Ec = H5("button", { position: "relative", width: "100%", background: "none", border: "none", cursor: "pointer", height: 32, minHeight: 32, outline: "none", color: "$text", fontFamily: "$ui", fontWeight: 400, fontSize: "$1", borderRadius: 4, userSelect: "none", WebkitUserSelect: "none", margin: 0, padding: "0 0", "&[data-disabled]": { opacity: 0.3 }, "&:disabled": { opacity: 0.3 }, [`&:focus:not(:disabled) ${qi}`]: { backgroundColor: "$hover" }, "& a": { textDecoration: "none", color: "$text" }, variants: { bp: { mobile: {}, small: {} }, variant: { styleMenu: { margin: "$1 0 $1 0" }, wide: { gridColumn: "1 / span 4" } }, size: { icon: { padding: "4px ", width: "auto" } }, isWarning: { true: { color: "$warn" } }, isActive: { true: { backgroundColor: "$hover" }, false: {} } } });
function Le2({ children: r10, label: e10, kbd: t10, id: n10, side: o10 = "top" }) {
  return Tn2.createElement("span", { id: n10 }, Tn2.createElement($a093c7e1ec25a057$export$2881499e37b75b9a, null, Tn2.createElement($a093c7e1ec25a057$export$be92b6f5f03c0fe9, null, Tn2.createElement($a093c7e1ec25a057$export$41fb9f06171c75f4, { dir: "ltr", asChild: true }, Tn2.createElement("span", null, r10)), Tn2.createElement(Bc, { dir: "ltr", side: o10, sideOffset: 8 }, e10, t10 ? Tn2.createElement(po, { variant: "tooltip" }, t10) : null, Tn2.createElement(Rc, null)))));
}
var Bc = H5($a093c7e1ec25a057$export$7c6e2c02157bb7d2, { borderRadius: 3, padding: "$3 $3 $3 $3", fontSize: "$1", backgroundColor: "$tooltip", color: "$tooltipContrast", boxShadow: "$3", display: "flex", alignItems: "center", fontFamily: "$ui", userSelect: "none", WebkitUserSelect: "none" });
var Rc = H5($a093c7e1ec25a057$export$21b07c8f274aebd5, { fill: "$tooltip", margin: "0 8px" });
function Sr() {
  let r10 = me3(), { openDialog: e10 } = br(), t10 = ho.useCallback((d10) => pe4(this, null, function* () {
    var i10, c10;
    d10 && r10.callbacks.onOpenProject && d10.preventDefault(), (c10 = (i10 = r10.callbacks).onNewProject) == null || c10.call(i10, r10, e10);
  }), [r10, e10]), n10 = ho.useCallback((d10) => {
    var i10, c10;
    d10 && r10.callbacks.onOpenProject && d10.preventDefault(), (c10 = (i10 = r10.callbacks).onSaveProject) == null || c10.call(i10, r10);
  }, [r10]), o10 = ho.useCallback((d10) => {
    var i10, c10;
    d10 && r10.callbacks.onOpenProject && d10.preventDefault(), (c10 = (i10 = r10.callbacks).onSaveProjectAs) == null || c10.call(i10, r10);
  }, [r10]), s10 = ho.useCallback((d10) => pe4(this, null, function* () {
    var i10, c10;
    d10 && r10.callbacks.onOpenProject && d10.preventDefault(), (c10 = (i10 = r10.callbacks).onOpenProject) == null || c10.call(i10, r10, e10);
  }), [r10, e10]), a10 = ho.useCallback((d10) => pe4(this, null, function* () {
    var i10, c10;
    d10 && r10.callbacks.onOpenMedia && d10.preventDefault(), (c10 = (i10 = r10.callbacks).onOpenMedia) == null || c10.call(i10, r10);
  }), [r10]);
  return { onNewProject: t10, onSaveProject: n10, onSaveProjectAs: o10, onOpenProject: s10, onOpenMedia: a10 };
}
var ls = class {
  constructor() {
    l7(this, "onPinchStart");
    l7(this, "onPinchEnd");
    l7(this, "onPinch");
    l7(this, "onKeyDown");
    l7(this, "onKeyUp");
    l7(this, "onPointerMove");
    l7(this, "onPointerUp");
    l7(this, "onPan");
    l7(this, "onZoom");
    l7(this, "onPointerDown");
    l7(this, "onPointCanvas");
    l7(this, "onDoubleClickCanvas");
    l7(this, "onRightPointCanvas");
    l7(this, "onDragCanvas");
    l7(this, "onReleaseCanvas");
    l7(this, "onPointShape");
    l7(this, "onDoubleClickShape");
    l7(this, "onRightPointShape");
    l7(this, "onDragShape");
    l7(this, "onHoverShape");
    l7(this, "onUnhoverShape");
    l7(this, "onReleaseShape");
    l7(this, "onPointBounds");
    l7(this, "onDoubleClickBounds");
    l7(this, "onRightPointBounds");
    l7(this, "onDragBounds");
    l7(this, "onHoverBounds");
    l7(this, "onUnhoverBounds");
    l7(this, "onReleaseBounds");
    l7(this, "onPointBoundsHandle");
    l7(this, "onDoubleClickBoundsHandle");
    l7(this, "onRightPointBoundsHandle");
    l7(this, "onDragBoundsHandle");
    l7(this, "onHoverBoundsHandle");
    l7(this, "onUnhoverBoundsHandle");
    l7(this, "onReleaseBoundsHandle");
    l7(this, "onPointHandle");
    l7(this, "onDoubleClickHandle");
    l7(this, "onRightPointHandle");
    l7(this, "onDragHandle");
    l7(this, "onHoverHandle");
    l7(this, "onUnhoverHandle");
    l7(this, "onReleaseHandle");
    l7(this, "onShapeBlur");
    l7(this, "onShapeClone");
  }
};
var Lc = ((o10) => (o10.Idle = "idle", o10.Connecting = "connecting", o10.Connected = "connected", o10.Disconnected = "disconnected", o10))(Lc || {});
var We2 = ((p10) => (p10.Transform = "transform", p10.Translate = "translate", p10.TransformSingle = "transformSingle", p10.Brush = "brush", p10.Arrow = "arrow", p10.Draw = "draw", p10.Erase = "erase", p10.Rotate = "rotate", p10.Handle = "handle", p10.Grid = "grid", p10.Edit = "edit", p10))(We2 || {});
var At2 = ((h10) => (h10.Idle = "idle", h10.PointingHandle = "pointingHandle", h10.PointingBounds = "pointingBounds", h10.PointingBoundsHandle = "pointingBoundsHandle", h10.TranslatingLabel = "translatingLabel", h10.TranslatingHandle = "translatingHandle", h10.Translating = "translating", h10.Transforming = "transforming", h10.Rotating = "rotating", h10.Pinching = "pinching", h10.Brushing = "brushing", h10.Creating = "creating", h10.EditingText = "editing-text", h10))(At2 || {});
var ds = ((o10) => (o10.Backward = "backward", o10.Forward = "forward", o10.ToFront = "toFront", o10.ToBack = "toBack", o10))(ds || {});
var Tr = ((a10) => (a10.Top = "top", a10.CenterVertical = "centerVertical", a10.Bottom = "bottom", a10.Left = "left", a10.CenterHorizontal = "centerHorizontal", a10.Right = "right", a10))(Tr || {});
var yr = ((t10) => (t10.Horizontal = "horizontal", t10.Vertical = "vertical", t10))(yr || {});
var wr = ((t10) => (t10.Horizontal = "horizontal", t10.Vertical = "vertical", t10))(wr || {});
var cs = ((t10) => (t10.Horizontal = "horizontal", t10.Vertical = "vertical", t10))(cs || {});
var Ie2 = ((p10) => (p10.Sticky = "sticky", p10.Ellipse = "ellipse", p10.Rectangle = "rectangle", p10.Triangle = "triangle", p10.Draw = "draw", p10.Arrow = "arrow", p10.Line = "line", p10.Text = "text", p10.Group = "group", p10.Image = "image", p10.Video = "video", p10))(Ie2 || {});
var xr = ((e10) => (e10.Arrow = "arrow", e10))(xr || {});
var ps = ((m10) => (m10.White = "white", m10.LightGray = "lightGray", m10.Gray = "gray", m10.Black = "black", m10.Green = "green", m10.Cyan = "cyan", m10.Blue = "blue", m10.Indigo = "indigo", m10.Violet = "violet", m10.Red = "red", m10.Orange = "orange", m10.Yellow = "yellow", m10))(ps || {});
var kr = ((n10) => (n10.Small = "small", n10.Medium = "medium", n10.Large = "large", n10))(kr || {});
var yn2 = ((o10) => (o10.Draw = "draw", o10.Solid = "solid", o10.Dashed = "dashed", o10.Dotted = "dotted", o10))(yn2 || {});
var Hc = ((o10) => (o10.Small = "small", o10.Medium = "medium", o10.Large = "large", o10.ExtraLarge = "extraLarge", o10))(Hc || {});
var Gt = ((o10) => (o10.Start = "start", o10.Middle = "middle", o10.End = "end", o10.Justify = "justify", o10))(Gt || {});
var Oo = ((o10) => (o10.Script = "script", o10.Sans = "sans", o10.Serif = "serif", o10.Mono = "mono", o10))(Oo || {});
var us = ((t10) => (t10.Image = "image", t10.Video = "video", t10))(us || {});
var mo = ((s10) => (s10.PNG = "png", s10.JPG = "jpeg", s10.WEBP = "webp", s10.SVG = "svg", s10.JSON = "json", s10))(mo || {});
var Fo = ((o10) => (o10.Transparent = "transparent", o10.Auto = "auto", o10.Light = "light", o10.Dark = "dark", o10))(Fo || {});
function Ji(r10) {
  let e10 = me3(), t10 = vr.useCallback((i10 = false) => {
    let c10 = r10.current;
    return i10 && (e10.isMenuOpen || e10.settings.keepStyleMenuOpen) ? true : c10 && (document.activeElement === c10 || c10.contains(document.activeElement));
  }, [r10]);
  vr.useEffect(() => {
    if (!e10)
      return;
    let i10 = (p10) => {
      if (!!t10(true)) {
        if (e10.readOnly) {
          e10.copy(void 0, p10);
          return;
        }
        e10.cut(void 0, p10);
      }
    }, c10 = (p10) => {
      !t10(true) || e10.copy(void 0, p10);
    }, u10 = (p10) => {
      !t10(true) || e10.readOnly || e10.paste(void 0, p10);
    };
    return document.addEventListener("cut", i10), document.addEventListener("copy", c10), document.addEventListener("paste", u10), () => {
      document.removeEventListener("cut", i10), document.removeEventListener("copy", c10), document.removeEventListener("paste", u10);
    };
  }, [e10]), useHotkeys("v,1", () => {
    !t10(true) || e10.selectTool("select");
  }, [e10, r10.current]), useHotkeys("d,p,2", () => {
    !t10(true) || e10.selectTool("draw");
  }, void 0, [e10]), useHotkeys("e,3", () => {
    !t10(true) || e10.selectTool("erase");
  }, void 0, [e10]), useHotkeys("r,4", () => {
    !t10(true) || e10.selectTool("rectangle");
  }, void 0, [e10]), useHotkeys("o,5", () => {
    !t10(true) || e10.selectTool("ellipse");
  }, void 0, [e10]), useHotkeys("g,6", () => {
    !t10() || e10.selectTool("triangle");
  }, void 0, [e10]), useHotkeys("l,7", () => {
    !t10(true) || e10.selectTool("line");
  }, void 0, [e10]), useHotkeys("a,8", () => {
    !t10(true) || e10.selectTool("arrow");
  }, void 0, [e10]), useHotkeys("t,9", () => {
    !t10(true) || e10.selectTool("text");
  }, void 0, [e10]), useHotkeys("s,0", () => {
    !t10(true) || e10.selectTool("sticky");
  }, void 0, [e10]), useHotkeys("ctrl+shift+d,\u2318+shift+d", (i10) => {
    !t10(true) || (e10.toggleDarkMode(), i10.preventDefault());
  }, void 0, [e10]), useHotkeys("ctrl+.,\u2318+.", () => {
    !t10(true) || e10.toggleFocusMode();
  }, void 0, [e10]), useHotkeys("ctrl+shift+g,\u2318+shift+g", () => {
    !t10(true) || e10.toggleGrid();
  }, void 0, [e10]);
  let { onNewProject: n10, onOpenProject: o10, onSaveProject: s10, onSaveProjectAs: a10, onOpenMedia: d10 } = Sr();
  useHotkeys("ctrl+n,\u2318+n", (i10) => {
    i10.preventDefault(), !!t10() && n10(i10);
  }, void 0, [e10]), useHotkeys("ctrl+s,\u2318+s", (i10) => {
    !t10() || s10(i10);
  }, void 0, [e10]), useHotkeys("ctrl+shift+s,\u2318+shift+s", (i10) => {
    !t10() || a10(i10);
  }, void 0, [e10]), useHotkeys("ctrl+alt+1,\u2318+alt+1", (i10) => {
    !t10() || e10.exportImage("svg", { scale: 2, quality: 1 });
  }, void 0, [e10]), useHotkeys("ctrl+alt+2,\u2318+alt+2", (i10) => {
    !t10() || e10.exportImage("png", { scale: 2, quality: 1 });
  }, void 0, [e10]), useHotkeys("ctrl+alt+3,\u2318+alt+3", (i10) => {
    !t10() || e10.exportImage("jpeg", { scale: 2, quality: 1 });
  }, void 0, [e10]), useHotkeys("ctrl+alt+4,\u2318+alt+4", (i10) => {
    !t10() || e10.exportImage("webp", { scale: 2, quality: 1 });
  }, void 0, [e10]), useHotkeys("ctrl+alt+5,\u2318+alt+5", (i10) => {
    !t10() || e10.exportJson();
  }, void 0, [e10]), useHotkeys("ctrl+o,\u2318+o", (i10) => {
    !t10() || o10(i10);
  }, void 0, [e10]), useHotkeys("ctrl+u,\u2318+u", (i10) => {
    !t10() || d10(i10);
  }, void 0, [e10]), useHotkeys("\u2318+z,ctrl+z", (i10) => {
    i10.preventDefault(), !!t10(true) && (e10.session ? e10.cancelSession() : e10.undo());
  }, void 0, [e10]), useHotkeys("ctrl+shift+z,\u2318+shift+z", () => {
    !t10(true) || (e10.session ? e10.cancelSession() : e10.redo());
  }, void 0, [e10]), useHotkeys("\u2318+u,ctrl+u", () => {
    !t10() || e10.undoSelect();
  }, void 0, [e10]), useHotkeys("ctrl+shift-u,\u2318+shift+u", () => {
    !t10() || e10.redoSelect();
  }, void 0, [e10]), useHotkeys("ctrl+=,\u2318+=,ctrl+num_add,\u2318+num_add", (i10) => {
    !t10(true) || (e10.zoomIn(), i10.preventDefault());
  }, void 0, [e10]), useHotkeys("ctrl+-,\u2318+-,ctrl+num_subtract,\u2318+num_subtract", (i10) => {
    !t10(true) || (e10.zoomOut(), i10.preventDefault());
  }, void 0, [e10]), useHotkeys("shift+0,ctrl+numpad_0,\u2318+numpad_0", () => {
    !t10(true) || e10.resetZoom();
  }, void 0, [e10]), useHotkeys("shift+1", () => {
    !t10(true) || e10.zoomToFit();
  }, void 0, [e10]), useHotkeys("shift+2", () => {
    !t10(true) || e10.zoomToSelection();
  }, void 0, [e10]), useHotkeys("ctrl+d,\u2318+d", (i10) => {
    !t10() || (e10.duplicate(), i10.preventDefault());
  }, void 0, [e10]), useHotkeys("shift+h", () => {
    !t10(true) || e10.flipHorizontal();
  }, void 0, [e10]), useHotkeys("shift+v", () => {
    !t10(true) || e10.flipVertical();
  }, void 0, [e10]), useHotkeys("escape", () => {
    !t10(true) || e10.cancel();
  }, void 0, [e10]), useHotkeys("backspace,del", () => {
    !t10() || e10.delete();
  }, void 0, [e10]), useHotkeys("\u2318+a,ctrl+a", () => {
    !t10(true) || e10.selectAll();
  }, void 0, [e10]), useHotkeys("up", () => {
    !t10() || e10.nudge([0, -1], false);
  }, void 0, [e10]), useHotkeys("right", () => {
    !t10() || e10.nudge([1, 0], false);
  }, void 0, [e10]), useHotkeys("down", () => {
    !t10() || e10.nudge([0, 1], false);
  }, void 0, [e10]), useHotkeys("left", () => {
    !t10() || e10.nudge([-1, 0], false);
  }, void 0, [e10]), useHotkeys("shift+up", () => {
    !t10() || e10.nudge([0, -1], true);
  }, void 0, [e10]), useHotkeys("shift+right", () => {
    !t10() || e10.nudge([1, 0], true);
  }, void 0, [e10]), useHotkeys("shift+down", () => {
    !t10() || e10.nudge([0, 1], true);
  }, void 0, [e10]), useHotkeys("shift+left", () => {
    !t10() || e10.nudge([-1, 0], true);
  }, void 0, [e10]), useHotkeys("\u2318+shift+l,ctrl+shift+l", () => {
    !t10() || e10.toggleLocked();
  }, void 0, [e10]), useHotkeys("\u2318+shift+c,ctrl+shift+c", (i10) => {
    !t10() || (e10.copySvg(), i10.preventDefault());
  }, void 0, [e10]), useHotkeys("\u2318+g,ctrl+g", (i10) => {
    !t10() || (e10.group(), i10.preventDefault());
  }, void 0, [e10]), useHotkeys("\u2318+shift+g,ctrl+shift+g", (i10) => {
    !t10() || (e10.ungroup(), i10.preventDefault());
  }, void 0, [e10]), useHotkeys("[", () => {
    !t10(true) || e10.moveBackward();
  }, void 0, [e10]), useHotkeys("]", () => {
    !t10(true) || e10.moveForward();
  }, void 0, [e10]), useHotkeys("shift+[", () => {
    !t10(true) || e10.moveToBack();
  }, void 0, [e10]), useHotkeys("shift+]", () => {
    !t10(true) || e10.moveToFront();
  }, void 0, [e10]), useHotkeys("ctrl+shift+backspace,\u2318+shift+backspace", (i10) => {
    !t10() || (e10.settings.isDebugMode && e10.resetDocument(), i10.preventDefault());
  }, void 0, [e10]), useHotkeys("alt+command+l,alt+ctrl+l", (i10) => {
    !t10(true) || (e10.style({ textAlign: "start" }), i10.preventDefault());
  }, void 0, [e10]), useHotkeys("alt+command+t,alt+ctrl+t", (i10) => {
    !t10(true) || (e10.style({ textAlign: "middle" }), i10.preventDefault());
  }, void 0, [e10]), useHotkeys("alt+command+r,alt+ctrl+r", (i10) => {
    !t10(true) || (e10.style({ textAlign: "end" }), i10.preventDefault());
  }, void 0, [e10]);
}
var hs = sn2.createContext({});
var zc = () => {
  let [r10, e10] = sn2.useState(0);
  sn2.useEffect(() => e10(1));
};
function me3() {
  return sn2.useContext(hs);
}
var ms = sn2.createContext({});
function Lt2() {
  let r10 = sn2.useContext(ms);
  return zc(), r10;
}
var Oc = "\u0627\u0644\u0644\u0648\u0646";
var Fc = "\u064A\u0645\u0644\u0623";
var jc = "\u0645\u062A\u0642\u0637\u0639";
var Gc = "\u062D\u062C\u0645";
var Vc = "\u062A\u0628\u0642\u0649 \u0645\u0641\u062A\u0648\u062D\u0629";
var $c = "\u0627\u0644\u062E\u0637";
var Nc = "\u0645\u062D\u0627\u0630\u0627\u0629";
var Wc = "\u0627\u0644\u0623\u0646\u0645\u0627\u0637";
var Uc = "\u062A\u0643\u0628\u064A\u0631";
var Kc = "\u062A\u0635\u063A\u064A\u0631";
var _c = "\u0625\u0644\u0649";
var Yc = "\u0623\u062F\u0648\u0627\u062A";
var Zc = "\u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A";
var Xc = "\u0645\u0644\u0641";
var qc = "\u062A\u062D\u0631\u064A\u0631";
var Jc = "\u0645\u0639\u0627\u064A\u0646\u0629";
var Qc = "\u0627\u0644\u062A\u0641\u0636\u064A\u0644\u0627\u062A";
var ep = "\u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644";
var tp = "\u062E\u0631\u0648\u062C";
var np = "\u0643\u0646 \u0631\u0627\u0639\u064A\u0627\u064B";
var op = "\u0627\u0644\u0639\u0648\u062F\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u062D\u062A\u0648\u0649";
var rp = "\u062A\u0643\u0628\u064A\u0631 \u0644\u0644\u062A\u062D\u062F\u064A\u062F";
var sp = "\u062A\u0643\u0628\u064A\u0631 \u0644\u062A\u0646\u0627\u0633\u0628";
var ip = "\u062A\u0643\u0628\u064A\u0631 \u0625\u0644\u0649";
var ap = "\u0627\u0644\u0648\u0636\u0639 \u0627\u0644\u062F\u0627\u0643\u0646";
var lp = "\u0648\u0636\u0639 \u0627\u0644\u062A\u0631\u0643\u064A\u0632";
var dp = "\u0648\u0636\u0639 \u0627\u0644\u062A\u0635\u062D\u064A\u062D";
var cp = "\u0627\u0638\u0647\u0631 \u0627\u0644\u0634\u0628\u0643\u0629";
var pp = "\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u062A\u062D\u062F\u064A\u062F CAD";
var up = "\u0627\u0644\u0627\u062D\u062A\u0641\u0627\u0638 \u0628\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0646\u0645\u0637 \u0645\u0641\u062A\u0648\u062D\u0629";
var hp = "\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u0644\u0642\u0637\u0627\u062A \u062F\u0627\u0626\u0645\u064B\u0627";
var mp = "\u062A\u062F\u0648\u064A\u0631 \u0627\u0644\u0645\u0642\u0627\u0628\u0636";
var gp = "\u0645\u0642\u0627\u0628\u0636 \u0645\u0644\u0632\u0645\u0629";
var fp = "\u0645\u0642\u0627\u0628\u0636 \u0627\u0633\u062A\u0646\u0633\u0627\u062E";
var Sp = "\u0627\u0644\u063A\u0627\u0621";
var bp = "\u0625\u0639\u0627\u062F\u0629";
var Tp = "\u0642\u0637\u0639";
var yp = "\u0646\u0633\u062D";
var wp = "\u0644\u0635\u0642";
var xp = "\u0646\u0633\u062E \u0627\u0644\u0649";
var kp = "\u0635\u062F\u0631 \u0627\u0644\u0649";
var vp = "\u0627\u062E\u062A\u0631 \u0627\u0644\u0643\u0644";
var Ip = "\u0644\u0627 \u062A\u062E\u062A\u0631 \u0634\u064A\u0621";
var Cp = "\u062D\u0630\u0641";
var Dp = "\u0645\u0634\u0631\u0648\u0639 \u062C\u062F\u064A\u062F";
var Pp = "\u0641\u062A\u062D";
var Mp = "\u062D\u0641\u0638";
var Ep = "\u062D\u0641\u0638 \u0628\u0627\u0633\u0645";
var Bp = "\u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0648\u0633\u0627\u0626\u0637";
var Rp = "\u0625\u0646\u0634\u0627\u0621 \u0635\u0641\u062D\u0629";
var Ap = "\u0635\u0641\u062D\u0629 \u062C\u062F\u064A\u062F\u0629";
var Lp = "\u0627\u0633\u0645 \u0627\u0644\u0635\u0641\u062D\u0629";
var Hp = "\u0646\u0633\u062E";
var zp = "\u0627\u0644\u063A\u0627\u0621";
var Op = "\u0646\u0633\u062E \u0631\u0627\u0628\u0637 \u0627\u0644\u062F\u0639\u0648\u0629";
var Fp = "\u0646\u0633\u062E \u0631\u0627\u0628\u0637 \u062F\u0639\u0648\u0629 \u0627\u0644\u0642\u0631\u0627\u0621\u0629 \u0641\u0642\u0637";
var jp = "\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0645\u0634\u0631\u0648\u0639 \u0645\u062A\u0639\u062F\u062F \u0627\u0644\u0644\u0627\u0639\u0628\u064A\u0646";
var Gp = "\u0646\u0633\u062E \u0625\u0644\u0649 \u0645\u0634\u0631\u0648\u0639 \u0645\u062A\u0639\u062F\u062F \u0627\u0644\u0644\u0627\u0639\u0628\u064A\u0646";
var Vp = "\u0627\u062E\u062A\u0631";
var $p = "\u0645\u0645\u062D\u0627\u0629";
var Np = "\u0631\u0633\u0645";
var Wp = "\u0633\u0647\u0645";
var Up = "\u0646\u0635";
var Kp = "\u0644\u0627\u0635\u0642";
var _p = "\u0645\u0631\u0628\u0639";
var Yp = "\u0628\u064A\u0636\u0627\u0648\u064A";
var Zp = "\u0645\u062B\u0644\u062B";
var Xp = "\u062E\u0637";
var qp = "\u062F\u0648\u0651\u0631";
var Jp = "\u0642\u0641\u0644 \u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u0628\u0639\u0627\u062F";
var Qp = "\u0641\u062A\u062D \u0642\u0641\u0644 \u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u0628\u0639\u0627\u062F";
var eu = "\u062C\u0645\u0651\u0639";
var tu = "\u0641\u0643 \u0627\u0644\u062A\u062C\u0645\u0639";
var nu = "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u062E\u0644\u0641";
var ou = "\u062A\u062D\u0631\u064A\u0643 \u0644\u0644\u062E\u0644\u0641";
var ru = "\u062A\u062D\u0631\u064A\u0643 \u0644\u0644\u0623\u0645\u0627\u0645";
var su = "\u062A\u062D\u0631\u0643 \u0644\u0644\u0623\u0645\u0627\u0645";
var iu = "\u0625\u0639\u0627\u062F\u0629 \u0636\u0628\u0637 \u0627\u0644\u0632\u0627\u0648\u064A\u0629";
var au = "\u0642\u0641\u0644";
var lu = "\u0627\u0644\u063A\u0627\u0621 \u0627\u0644\u0642\u0641\u0644";
var du = "\u0627\u0646\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0635\u0641\u062D\u0629";
var cu = "\u0627\u0646\u0639\u0643\u0627\u0633 \u0623\u0641\u0642\u064A";
var pu = "\u0627\u0646\u0639\u0643\u0627\u0633 \u0639\u0645\u0648\u062F\u064A";
var uu = "\u062D\u0631\u0651\u0643";
var hu = "\u0644\u0644\u0627\u0645\u0627\u0645";
var mu = "\u0644\u0644\u062E\u0644\u0641";
var gu = "\u0644\u0644\u0648\u0631\u0627\u0621";
var fu = "\u062E\u0644\u0641";
var Su = "\u0644\u063A\u0629";
var bu = "\u0644\u0644\u0645\u0632\u064A\u062F";
var Tu = "\u0645\u0648\u0642\u0639 \u0627\u0644\u0627\u062F\u0648\u0627\u062A";
var yu = "\u0627\u0633\u0641\u0644";
var wu = "\u064A\u0633\u0627\u0631";
var xu = "\u064A\u0645\u064A\u0646";
var ku = "\u0623\u0639\u0644\u0649";
var vu = "\u0635\u0641\u062D\u0629";
var Iu = "\u0627\u062E\u062A\u0635\u0627\u0631\u0627\u062A \u0644\u0648\u062D\u0629 \u0627\u0644\u0645\u0641\u0627\u062A\u064A\u062D";
var Cu = "\u0628\u062D\u062B";
var Du = "{dots}\u062A\u062D\u0645\u064A\u0644 ";
var Pu = "\u062A\u0635\u062F\u064A\u0631 \u0627\u0644\u062E\u0644\u0641\u064A\u0629";
var Mu = "\u0634\u0640\u0641\u0627\u0641";
var Eu = "\u0630\u0627\u062A\u064A";
var Bu = "\u062E\u0641\u064A\u0641";
var Ru = "\u063A\u0627\u0645\u0642";
var Au = "\u0647\u0644 \u062A\u0631\u064A\u062F \u062D\u0641\u0638 \u0627\u0644\u062A\u063A\u064A\u064A\u0631\u0627\u062A \u0639\u0644\u0649 \u0647\u0630\u0627 \u0627\u0644\u0645\u0634\u0631\u0648\u0639\u061F";
var Lu = "\u0647\u0644 \u062A\u0631\u064A\u062F \u062D\u0641\u0638 \u0627\u0644\u062A\u063A\u064A\u064A\u0631\u0627\u062A \u0639\u0644\u0649 \u0647\u0630\u0627 \u0627\u0644\u0645\u0634\u0631\u0648\u0639\u061F";
var Hu = "\u0625\u0644\u063A\u0627\u0621";
var zu = "\u0644\u0627";
var Ou = "\u0646\u0639\u0645";
var Fu = "\u0623\u062F\u062E\u0644 \u0627\u0633\u0645 \u0627\u0644\u0645\u0644\u0641";
var ju = "\u0635\u0648\u0631\u0629";
var Gu = "\u0635\u0641\u0651 \u0644\u0644\u064A\u0633\u0627\u0631";
var Vu = "\u0635\u0641\u0651 \u0627\u0644\u0645\u062D\u0648\u0631 \u0627\u0644\u0623\u0641\u0642\u064A \u0644\u0644\u0648\u0633\u0637";
var $u = "\u0635\u0641\u0651 \u0644\u0644\u064A\u0645\u064A\u0646";
var Nu = "\u0635\u0641\u0651 \u0644\u0644\u0623\u0639\u0644\u0649";
var Wu = "\u0635\u0641\u0651 \u0627\u0644\u0645\u062D\u0648\u0631 \u0627\u0644\u0639\u0645\u0648\u062F\u064A \u0644\u0644\u0648\u0633\u0637";
var Uu = "\u0635\u0641\u0651 \u0644\u0644\u0623\u0633\u0641\u0644";
var Ku = "\u062A\u0648\u0632\u064A\u0639 \u0623\u0641\u0642\u064A";
var _u = "\u062A\u0648\u0632\u064A\u0639 \u0639\u0645\u0648\u062F\u064A";
var Yu = "\u062A\u0645\u062F\u064A\u062F \u0623\u0641\u0642\u064A";
var Zu = "\u062A\u0645\u062F\u064A\u062F \u0639\u0645\u0648\u062F\u064A";
var Qi = { "style.menu.color": Oc, "style.menu.fill": Fc, "style.menu.dash": jc, "style.menu.size": Gc, "style.menu.keep.open": Vc, "style.menu.font": $c, "style.menu.align": Nc, styles: Wc, "zoom.in": Uc, "zoom.out": Kc, to: _c, "menu.tools": Yc, "menu.transform": Zc, "menu.file": Xc, "menu.edit": qc, "menu.view": Jc, "menu.preferences": Qc, "menu.sign.in": ep, "menu.sign.out": tp, "become.a.sponsor": np, "zoom.to.content": op, "zoom.to.selection": rp, "zoom.to.fit": sp, "zoom.to": ip, "preferences.dark.mode": ap, "preferences.focus.mode": lp, "preferences.debug.mode": dp, "preferences.show.grid": cp, "preferences.use.cad.selection": pp, "preferences.keep.stylemenu.open": up, "preferences.always.show.snaps": hp, "preferences.rotate.handles": mp, "preferences.binding.handles": gp, "preferences.clone.handles": fp, undo: Sp, redo: bp, cut: Tp, copy: yp, paste: wp, "copy.as": xp, "export.as": kp, "select.all": vp, "select.none": Ip, delete: Cp, "new.project": Dp, open: Pp, save: Mp, "save.as": Ep, "upload.media": Bp, "create.page": Rp, "new.page": Ap, "page.name": Lp, duplicate: Hp, cancel: zp, "copy.invite.link": Op, "copy.readonly.link": Fp, "create.multiplayer.project": jp, "copy.multiplayer.project": Gp, select: Vp, eraser: $p, draw: Np, arrow: Wp, text: Up, sticky: Kp, rectangle: _p, ellipse: Yp, triangle: Zp, line: Xp, rotate: qp, "lock.aspect.ratio": Jp, "unlock.aspect.ratio": Qp, group: eu, ungroup: tu, "move.to.back": nu, "move.backward": ou, "move.forward": ru, "move.to.front": su, "reset.angle": iu, lock: au, unlock: lu, "move.to.page": du, "flip.horizontal": cu, "flip.vertical": pu, move: uu, "to.front": hu, forward: mu, backward: gu, back: fu, language: Su, "translation.link": bu, "dock.position": Tu, bottom: yu, left: wu, right: xu, top: ku, page: vu, "keyboard.shortcuts": Iu, search: Cu, loading: Du, "export.background": Pu, transparent: Mu, auto: Eu, light: Bu, dark: Ru, "dialog.save.firsttime": Au, "dialog.save.again": Lu, "dialog.cancel": Hu, "dialog.no": zu, "dialog.yes": Ou, "enter.file.name": Fu, image: ju, "align.left": Gu, "align.center.x": Vu, "align.right": $u, "align.top": Nu, "align.center.y": Wu, "align.bottom": Uu, "distribute.x": Ku, "distribute.y": _u, "stretch.x": Yu, "stretch.y": Zu };
var Xu = "Farve";
var qu = "Fyld";
var Ju = "Streg";
var Qu = "St\xF8rrelse";
var eh = "Hold \xE5ben";
var th = "Skrifttype";
var nh = "Juster";
var oh = "Format";
var rh = "Zoom ind";
var sh = "Zoom ud";
var ih = "til";
var ah = "V\xE6rkt\xF8jer";
var lh = "Transformer";
var dh = "Fil";
var ch = "Rediger";
var ph = "Vis";
var uh = "Indstillinger";
var hh = "Log ind";
var mh = "Log ud";
var gh = "Bliv sponsor";
var fh = "Zoom til valgte";
var Sh = "Zoom til l\xE6rred";
var bh = "Zoom til";
var Th = "Zoom til indhold";
var yh = "M\xF8rkt udseende";
var wh = "Fokus tilstand";
var xh = "Debug tilstand";
var kh = "Vis net";
var vh = "Brug CAD udv\xE6lgelse";
var Ih = "Hold formatmenuen \xE5ben";
var Ch = "Vis altid snaps";
var Dh = "Roteringsh\xE5ndtag";
var Ph = "Bindingsh\xE5ndtag";
var Mh = "Kloningsh\xE5ndtag";
var Eh = "Fortryd";
var Bh = "Gentag";
var Rh = "Klip";
var Ah = "Kopier";
var Lh = "Inds\xE6t";
var Hh = "Kopier som";
var zh = "Eksporter som";
var Oh = "V\xE6lg alt";
var Fh = "Frav\xE6lg alt";
var jh = "Slet";
var Gh = "Nyt projekt";
var Vh = "\xC5ben";
var $h = "Gem";
var Nh = "Gem som";
var Wh = "Upload medie";
var Uh = "Opret side";
var Kh = "Ny side";
var _h = "Sidenavn";
var Yh = "Dupliker";
var Zh = "Fortryd";
var Xh = "Kopier invitationslink";
var qh = "Opret multiplayer projekt";
var Jh = "Kopier til multiplayer projekt";
var Qh = "V\xE6lg";
var em = "Viskel\xE6der";
var tm = "Tegn";
var nm = "Pil";
var om = "Tekst";
var rm = "Note";
var sm = "Rektangel";
var im = "Ellipse";
var am = "Trekant";
var lm = "Linje";
var dm = "Roter";
var cm = "L\xE5s billedformat";
var pm = "Frig\xF8r billedformat";
var um = "Grupper";
var hm = "Opdel gruppe";
var mm = "Placer bagerst";
var gm = "Flyt tilbage";
var fm = "Flyt frem";
var Sm = "L\xE6g forrest";
var bm = "Nulstil vinkel";
var Tm = "L\xE5s";
var ym = "L\xE5s op";
var wm = "Flyt til side";
var xm = "Vend vandret";
var km = "Vend lodret";
var vm = "Flyt";
var Im = "Forrest";
var Cm = "Frem";
var Dm = "Tilbage";
var Pm = "Bagerst";
var Mm = "Sprog";
var Em = "Justering nederst";
var Bm = "Vandret justering centreret";
var Rm = "Lodret justering centreret";
var Am = "Juster / distribuer";
var Lm = "Justering til venstre";
var Hm = "Justering til h\xF8jre";
var zm = "Justering \xF8verst";
var Om = "Kopier skrivebeskyttet link";
var Fm = "Vil du gemme \xE6ndringerne til dit projekt?";
var jm = "Vil du gemme dit projekt?";
var Gm = "Ja";
var Vm = "Nej";
var $m = "Fortryd";
var Nm = "Skriv filnavn";
var Wm = "Vandret distribuering";
var Um = "Lodret distribuering";
var Km = "Placering af v\xE6rkt\xF8jslinje";
var _m = "Nederst";
var Ym = "Venstre";
var Zm = "H\xF8jre";
var Xm = "\xD8verst";
var qm = "Baggrund ved eksport";
var Jm = "Automatisk";
var Qm = "Lys";
var eg = "M\xF8rk";
var tg = "Billede";
var ng = "Tastaturgenveje";
var og = "Indl\xE6ser";
var rg = "Side";
var sg = "S\xF8g";
var ig = "Str\xE6k vandret";
var ag = "Str\xE6k lodret";
var lg = "L\xE6r mere";
var dg = "Gennemsigtig";
var ea = { "style.menu.color": Xu, "style.menu.fill": qu, "style.menu.dash": Ju, "style.menu.size": Qu, "style.menu.keep.open": eh, "style.menu.font": th, "style.menu.align": nh, styles: oh, "zoom.in": rh, "zoom.out": sh, to: ih, "menu.tools": ah, "menu.transform": lh, "menu.file": dh, "menu.edit": ch, "menu.view": ph, "menu.preferences": uh, "menu.sign.in": hh, "menu.sign.out": mh, "become.a.sponsor": gh, "zoom.to.selection": fh, "zoom.to.fit": Sh, "zoom.to": bh, "zoom.to.content": Th, "preferences.dark.mode": yh, "preferences.focus.mode": wh, "preferences.debug.mode": xh, "preferences.show.grid": kh, "preferences.use.cad.selection": vh, "preferences.keep.stylemenu.open": Ih, "preferences.always.show.snaps": Ch, "preferences.rotate.handles": Dh, "preferences.binding.handles": Ph, "preferences.clone.handles": Mh, undo: Eh, redo: Bh, cut: Rh, copy: Ah, paste: Lh, "copy.as": Hh, "export.as": zh, "select.all": Oh, "select.none": Fh, delete: jh, "new.project": Gh, open: Vh, save: $h, "save.as": Nh, "upload.media": Wh, "create.page": Uh, "new.page": Kh, "page.name": _h, duplicate: Yh, cancel: Zh, "copy.invite.link": Xh, "create.multiplayer.project": qh, "copy.multiplayer.project": Jh, select: Qh, eraser: em, draw: tm, arrow: nm, text: om, sticky: rm, rectangle: sm, ellipse: im, triangle: am, line: lm, rotate: dm, "lock.aspect.ratio": cm, "unlock.aspect.ratio": pm, group: um, ungroup: hm, "move.to.back": mm, "move.backward": gm, "move.forward": fm, "move.to.front": Sm, "reset.angle": bm, lock: Tm, unlock: ym, "move.to.page": wm, "flip.horizontal": xm, "flip.vertical": km, move: vm, "to.front": Im, forward: Cm, backward: Dm, back: Pm, language: Mm, "align.bottom": Em, "align.center.x": Bm, "align.center.y": Rm, "align.distribute": Am, "align.left": Lm, "align.right": Hm, "align.top": zm, "copy.readonly.link": Om, "dialog.save.again": Fm, "dialog.save.firsttime": jm, "dialog.yes": Gm, "dialog.no": Vm, "dialog.cancel": $m, "enter.file.name": Nm, "distribute.x": Wm, "distribute.y": Um, "dock.position": Km, bottom: _m, left: Ym, right: Zm, top: Xm, "export.background": qm, auto: Jm, light: Qm, dark: eg, image: tg, "keyboard.shortcuts": ng, loading: og, page: rg, search: sg, "stretch.x": ig, "stretch.y": ag, "translation.link": lg, transparent: dg };
var cg = "Farbe";
var pg = "F\xFCllen";
var ug = "Strich";
var hg = "Gr\xF6\xDFe";
var mg = "Offen halten";
var gg = "Schriftart";
var fg = "Ausrichten";
var Sg = "Stile";
var bg = "Heranzoomen";
var Tg = "Herauszoomen";
var yg = "zu";
var wg = "Werkzeuge";
var xg = "Transformieren";
var kg = "Datei";
var vg = "Bearbeiten";
var Ig = "Ansicht";
var Cg = "Pr\xE4ferenzen";
var Dg = "Einloggen";
var Pg = "Ausloggen";
var Mg = "Sponsor werden";
var Eg = "Zur\xFCck zum Inhalt";
var Bg = "Zur Auswahl zoomen";
var Rg = "Zoom anpassen";
var Ag = "Zoomen nach";
var Lg = "Dunkler Modus";
var Hg = "Fokus Modus";
var zg = "Debug Modus";
var Og = "Gitter anzeigen";
var Fg = "CAD Auswahl verwenden";
var jg = "Stilmen\xFC offen halten";
var Gg = "Hilfslinien immer anzeigen";
var Vg = "Rotiergriffe";
var $g = "Bindegriffe";
var Ng = "Klongriffe";
var Wg = "R\xFCckg\xE4ngig machen";
var Ug = "Wiederherstellen";
var Kg = "Ausschneiden";
var _g = "Kopieren";
var Yg = "Einf\xFCgen";
var Zg = "Kopieren als";
var Xg = "Exportieren als";
var qg = "Alles ausw\xE4hlen";
var Jg = "Nichts ausw\xE4hlen";
var Qg = "L\xF6schen";
var ef = "Neues Projekt";
var tf = "\xD6ffnen";
var nf = "Speichern";
var of = "Speichern als";
var rf = "Medien hochladen";
var sf = "Seite erstellen";
var af = "Neue Seite";
var lf = "Seitenname";
var df = "Duplizieren";
var cf = "Form Optionen";
var pf = "Fromen";
var uf = "Abbrechen";
var hf = "Einladungslink kopieren";
var mf = "Schreibgesch\xFCtzten Link kopieren";
var gf = "Geteiltes Projekt erstellen";
var ff = "In ein Geteiltes Projekt kopieren";
var Sf = "Ausw\xE4hlen";
var bf = "Radierer";
var Tf = "Malen";
var yf = "Pfeil";
var wf = "Text";
var xf = "Notiz";
var kf = "Rechteck";
var vf = "Ellipse";
var If = "Dreieck";
var Cf = "Linie";
var Df = "Drehen";
var Pf = "Seitenverh\xE4ltnis sperren";
var Mf = "Seitenverh\xE4ltnis entsperren";
var Ef = "Gruppieren";
var Bf = "Gruppierung aufheben";
var Rf = "Nach Hinten verschieben";
var Af = "R\xFCckw\xE4rts schieben";
var Lf = "Vorw\xE4rts schieben";
var Hf = "Nach Vorne verschieben";
var zf = "Winkel zur\xFCcksetzen";
var Of = "Sperren";
var Ff = "Entsperren";
var jf = "Ausrichten / Verteilen";
var Gf = "Zu Seite verschieben";
var Vf = "Horizontal spiegeln";
var $f = "Vertikal spiegeln";
var Nf = "Verschieben";
var Wf = "Nach Vorne";
var Uf = "Vorw\xE4rts";
var Kf = "R\xFCckw\xE4rts";
var _f = "Hinten";
var Yf = "Sprache";
var Zf = "Mehr erfahren";
var Xf = "Dock Position";
var qf = "Unten";
var Jf = "Links";
var Qf = "Rechts";
var eS = "Oben";
var tS = "Seite";
var nS = "Tastaturkurzbefehle";
var oS = "Suche";
var rS = "Laden{dots}";
var sS = "Hintergrund Exportieren";
var iS = "Transparent";
var aS = "Auto";
var lS = "Hell";
var dS = "Dunkel";
var cS = "Github";
var pS = "Twitter";
var uS = "Discord";
var hS = "Bild";
var mS = "Links ausrichten";
var gS = "Horizontal mittig ausrichten";
var fS = "Rechts ausrichten";
var SS = "Oben ausrichten";
var bS = "Vertikal mittig ausrichten";
var TS = "Unten ausrichten";
var yS = "Horizontal verteilen";
var wS = "Vertikal verteilen";
var xS = "Horizontal strecken";
var kS = "Vertikal strecken";
var vS = "M\xF6chten Sie Ihr aktuelles Projekt speichern?";
var IS = "M\xF6chten Sie die \xC4nderungen an Ihrem aktuellen Projekt speichern?";
var CS = "Abbrechen";
var DS = "Nein";
var PS = "Ja";
var MS = "Dateiname eingeben";
var ES = "Probieren Sie das neue tldraw";
var BS = "Wei\xDF";
var RS = "hellgrau";
var AS = "Frau";
var LS = "Schwarz";
var HS = "Gr\xFCn";
var zS = "Cyan";
var OS = "Blau";
var FS = "Indigo";
var jS = "Violett";
var GS = "Rot";
var VS = "Orange";
var $S = "Gelb";
var NS = "Durchgehend";
var WS = "Gestrichelt";
var US = "Gepunktet";
var KS = "Klein";
var _S = "Mittel";
var YS = "Gro\xDF";
var ta = { "style.menu.color": cg, "style.menu.fill": pg, "style.menu.dash": ug, "style.menu.size": hg, "style.menu.keep.open": mg, "style.menu.font": gg, "style.menu.align": fg, styles: Sg, "zoom.in": bg, "zoom.out": Tg, to: yg, "menu.tools": wg, "menu.transform": xg, "menu.file": kg, "menu.edit": vg, "menu.view": Ig, "menu.preferences": Cg, "menu.sign.in": Dg, "menu.sign.out": Pg, "become.a.sponsor": Mg, "zoom.to.content": Eg, "zoom.to.selection": Bg, "zoom.to.fit": Rg, "zoom.to": Ag, "preferences.dark.mode": Lg, "preferences.focus.mode": Hg, "preferences.debug.mode": zg, "preferences.show.grid": Og, "preferences.use.cad.selection": Fg, "preferences.keep.stylemenu.open": jg, "preferences.always.show.snaps": Gg, "preferences.rotate.handles": Vg, "preferences.binding.handles": $g, "preferences.clone.handles": Ng, undo: Wg, redo: Ug, cut: Kg, copy: _g, paste: Yg, "copy.as": Zg, "export.as": Xg, "select.all": qg, "select.none": Jg, delete: Qg, "new.project": ef, open: tf, save: nf, "save.as": of, "upload.media": rf, "create.page": sf, "new.page": af, "page.name": lf, duplicate: df, "shape.options": cf, shapes: pf, cancel: uf, "copy.invite.link": hf, "copy.readonly.link": mf, "create.multiplayer.project": gf, "copy.multiplayer.project": ff, select: Sf, eraser: bf, draw: Tf, arrow: yf, text: wf, sticky: xf, rectangle: kf, ellipse: vf, triangle: If, line: Cf, rotate: Df, "lock.aspect.ratio": Pf, "unlock.aspect.ratio": Mf, group: Ef, ungroup: Bf, "move.to.back": Rf, "move.backward": Af, "move.forward": Lf, "move.to.front": Hf, "reset.angle": zf, lock: Of, unlock: Ff, "align.distribute": jf, "move.to.page": Gf, "flip.horizontal": Vf, "flip.vertical": $f, move: Nf, "to.front": Wf, forward: Uf, backward: Kf, back: _f, language: Yf, "translation.link": Zf, "dock.position": Xf, bottom: qf, left: Jf, right: Qf, top: eS, page: tS, "keyboard.shortcuts": nS, search: oS, loading: rS, "export.background": sS, transparent: iS, auto: aS, light: lS, dark: dS, github: cS, twitter: pS, discord: uS, image: hS, "align.left": mS, "align.center.x": gS, "align.right": fS, "align.top": SS, "align.center.y": bS, "align.bottom": TS, "distribute.x": yS, "distribute.y": wS, "stretch.x": xS, "stretch.y": kS, "dialog.save.firsttime": vS, "dialog.save.again": IS, "dialog.cancel": CS, "dialog.no": DS, "dialog.yes": PS, "enter.file.name": MS, "tldraw-beta": ES, white: BS, lightGray: RS, gray: AS, black: LS, green: HS, cyan: zS, blue: OS, indigo: FS, violet: jS, red: GS, orange: VS, yellow: $S, solid: NS, dashed: WS, dotted: US, small: KS, medium: _S, large: YS };
var na = {};
var XS = "Color";
var qS = "Relleno";
var JS = "L\xEDnea";
var QS = "Tama\xF1o";
var eb = "Mantener abierto";
var tb = "Fuente";
var nb = "Alineaci\xF3n";
var ob = "Estilos";
var rb = "Acercar";
var sb = "Alejar";
var ib = "A";
var ab = "Herramientas";
var lb = "Transformar";
var db = "Archivo";
var cb = "Editar";
var pb = "Ver";
var ub = "Preferencias";
var hb = "Iniciar sesi\xF3n";
var mb = "Cerrar sesi\xF3n";
var gb = "Convi\xE9rtete en patrocinador";
var fb = "Acercar al contenido";
var Sb = "Acercar a la selecci\xF3n";
var bb = "Ajustar a la ventana";
var Tb = "Acercar a";
var yb = "Modo oscuro";
var wb = "Modo concentraci\xF3n";
var xb = "Modo depuraci\xF3n";
var kb = "Mostrar cuadr\xEDcula";
var vb = "Usar selecci\xF3n CAD";
var Ib = "Mantener men\xFA de estilos abierto";
var Cb = "Mostrar puntos de ajuste";
var Db = "Control de rotaci\xF3n";
var Pb = "Control de vinculaci\xF3n";
var Mb = "Control de clonaci\xF3n";
var Eb = "Deshacer";
var Bb = "Rehacer";
var Rb = "Cortar";
var Ab = "Copiar";
var Lb = "Pegar";
var Hb = "Copiar como";
var zb = "Exportar como";
var Ob = "Selecionar todo";
var Fb = "Selecionar nada";
var jb = "Borrar";
var Gb = "Nuevo Proyecto";
var Vb = "Abrir";
var $b = "Guardar";
var Nb = "Guardar como";
var Wb = "Subir medios";
var Ub = "Crear p\xE1gina";
var Kb = "Nueva p\xE1gina";
var _b = "Nombre de p\xE1gina";
var Yb = "Duplicar";
var Zb = "Opciones de formas";
var Xb = "Formas";
var qb = "Cancelar";
var Jb = "Copiar invitaci\xF3n";
var Qb = "Copiar invitaci\xF3n (solo lectura)";
var eT = "Crear proyecto multijugador";
var tT = "Copiar proyecto multijugador";
var nT = "Seleccionar";
var oT = "Borrador";
var rT = "Dibujar";
var sT = "Flecha";
var iT = "Texto";
var aT = "Pegatina";
var lT = "Rect\xE1ngulo";
var dT = "Elipse";
var cT = "Tri\xE1ngulo";
var pT = "L\xEDnea";
var uT = "Rotar";
var hT = "Bloquear relaci\xF3n de aspecto";
var mT = "Desbloquear relaci\xF3n de aspecto";
var gT = "Agrupar";
var fT = "Desagrupar";
var ST = "Mover al fondo";
var bT = "Mover atr\xE1s";
var TT = "Mover adelante";
var yT = "Mover al frente";
var wT = "Restablecer \xE1ngulo";
var xT = "Bloquear";
var kT = "Desbloquear";
var vT = "Alinear / Distribuir";
var IT = "Mover a p\xE1gina";
var CT = "Voltear horizontalmente";
var DT = "Voltear verticalmente";
var PT = "Mover";
var MT = "Al frente";
var ET = "Adelante";
var BT = "Atr\xE1s";
var RT = "Fondo";
var AT = "Idioma";
var LT = "Saber m\xE1s";
var HT = "Posici\xF3n del dock";
var zT = "Abajo";
var OT = "Izquierda";
var FT = "Derecha";
var jT = "Arriba";
var GT = "P\xE1gina";
var VT = "Atajos de teclado";
var $T = "Buscar";
var NT = "Cargando{dots}";
var WT = "Exportar fondo";
var UT = "Transparente";
var KT = "Auto";
var _T = "Claro";
var YT = "Oscuro";
var ZT = "Github";
var XT = "Twitter";
var qT = "Discord";
var JT = "Imagen";
var QT = "Alinear a la izquierda";
var ey = "Alinear al centro horizontalmente";
var ty = "Alinear a la derecha";
var ny = "Alinear arriba";
var oy = "Alinear al centro verticalmente";
var ry = "Alinear abajo";
var sy = "Distribuir horizontalmente";
var iy = "Distribuir verticalmente";
var ay = "Estirar horizontalmente";
var ly = "Estirar verticalmente";
var dy = "\xBFQuieres guardar el proyecto actual?";
var cy = "\xBFQuieres guardar los cambios en el proyecto actual?";
var py = "Cancelar";
var uy = "No";
var hy = "S\xED";
var my = "Introduce el nombre del arquivo";
var gy = "Prueba el nuevo tldraw";
var fy = "Blanco";
var Sy = "Gris claro";
var by = "Gris";
var Ty = "Negro";
var yy = "Verde";
var wy = "Cian";
var xy = "Azul";
var ky = "Indigo";
var vy = "Violeta";
var Iy = "Rojo";
var Cy = "Naranja";
var Dy = "Amarillo";
var Py = "Cont\xEDnuo";
var My = "Discont\xEDnuo";
var Ey = "Punteado";
var By = "Peque\xF1o";
var Ry = "Mediano";
var Ay = "Grande";
var oa = { "style.menu.color": XS, "style.menu.fill": qS, "style.menu.dash": JS, "style.menu.size": QS, "style.menu.keep.open": eb, "style.menu.font": tb, "style.menu.align": nb, styles: ob, "zoom.in": rb, "zoom.out": sb, to: ib, "menu.tools": ab, "menu.transform": lb, "menu.file": db, "menu.edit": cb, "menu.view": pb, "menu.preferences": ub, "menu.sign.in": hb, "menu.sign.out": mb, "become.a.sponsor": gb, "zoom.to.content": fb, "zoom.to.selection": Sb, "zoom.to.fit": bb, "zoom.to": Tb, "preferences.dark.mode": yb, "preferences.focus.mode": wb, "preferences.debug.mode": xb, "preferences.show.grid": kb, "preferences.use.cad.selection": vb, "preferences.keep.stylemenu.open": Ib, "preferences.always.show.snaps": Cb, "preferences.rotate.handles": Db, "preferences.binding.handles": Pb, "preferences.clone.handles": Mb, undo: Eb, redo: Bb, cut: Rb, copy: Ab, paste: Lb, "copy.as": Hb, "export.as": zb, "select.all": Ob, "select.none": Fb, delete: jb, "new.project": Gb, open: Vb, save: $b, "save.as": Nb, "upload.media": Wb, "create.page": Ub, "new.page": Kb, "page.name": _b, duplicate: Yb, "shape.options": Zb, shapes: Xb, cancel: qb, "copy.invite.link": Jb, "copy.readonly.link": Qb, "create.multiplayer.project": eT, "copy.multiplayer.project": tT, select: nT, eraser: oT, draw: rT, arrow: sT, text: iT, sticky: aT, rectangle: lT, ellipse: dT, triangle: cT, line: pT, rotate: uT, "lock.aspect.ratio": hT, "unlock.aspect.ratio": mT, group: gT, ungroup: fT, "move.to.back": ST, "move.backward": bT, "move.forward": TT, "move.to.front": yT, "reset.angle": wT, lock: xT, unlock: kT, "align.distribute": vT, "move.to.page": IT, "flip.horizontal": CT, "flip.vertical": DT, move: PT, "to.front": MT, forward: ET, backward: BT, back: RT, language: AT, "translation.link": LT, "dock.position": HT, bottom: zT, left: OT, right: FT, top: jT, page: GT, "keyboard.shortcuts": VT, search: $T, loading: NT, "export.background": WT, transparent: UT, auto: KT, light: _T, dark: YT, github: ZT, twitter: XT, discord: qT, image: JT, "align.left": QT, "align.center.x": ey, "align.right": ty, "align.top": ny, "align.center.y": oy, "align.bottom": ry, "distribute.x": sy, "distribute.y": iy, "stretch.x": ay, "stretch.y": ly, "dialog.save.firsttime": dy, "dialog.save.again": cy, "dialog.cancel": py, "dialog.no": uy, "dialog.yes": hy, "enter.file.name": my, "tldraw-beta": gy, white: fy, lightGray: Sy, gray: by, black: Ty, green: yy, cyan: wy, blue: xy, indigo: ky, violet: vy, red: Iy, orange: Cy, yellow: Dy, solid: Py, dashed: My, dotted: Ey, small: By, medium: Ry, large: Ay };
var Ly = "\u0631\u0646\u06AF";
var Hy = "\u062A\u0648\u067E\u064F\u0631";
var zy = "\u062E\u0637\u200C\u0686\u06CC\u0646";
var Oy = "\u0627\u0646\u062F\u0627\u0632\u0647";
var Fy = "\u0628\u0627\u0632 \u0646\u06AF\u0647\u200C\u062F\u0627\u0634\u062A\u0646";
var jy = "\u0642\u0644\u0645";
var Gy = "\u062A\u0631\u0627\u0632";
var Vy = "\u0633\u0628\u06A9\u200C\u0647\u0627";
var $y = "\u0628\u0632\u0631\u06AF\u200C\u0646\u0645\u0627\u06CC\u06CC";
var Ny = "\u06A9\u0648\u0686\u06A9\u200C\u0646\u0645\u0627\u06CC\u06CC";
var Wy = "\u0628\u0647";
var Uy = "\u0627\u0628\u0632\u0627\u0631\u0647\u0627";
var Ky = "\u062A\u063A\u06CC\u06CC\u0631 \u0634\u06A9\u0644";
var _y = "\u067E\u0631\u0648\u0646\u062F\u0647";
var Yy = "\u0648\u06CC\u0631\u0627\u06CC\u0634";
var Zy = "\u0646\u0645\u0627\u06CC\u0634";
var Xy = "\u062A\u0631\u062C\u06CC\u062D\u0627\u062A";
var qy = "\u0648\u0631\u0648\u062F";
var Jy = "\u062E\u0631\u0648\u062C";
var Qy = "\u062D\u0645\u0627\u06CC\u062A\u200C\u06A9\u0646\u0646\u062F\u0647 \u0634\u0648\u06CC\u062F";
var ew = "\u0628\u0627\u0632\u06AF\u0634\u062A \u0628\u0647 \u0645\u062D\u062A\u0648\u0627";
var tw = "\u0628\u0632\u0631\u06AF\u200C\u0646\u0645\u0627\u06CC\u06CC \u0628\u0647 \u0646\u0627\u062D\u06CC\u0647 \u0627\u0646\u062A\u062E\u0627\u0628\u200C\u0634\u062F\u0647";
var nw = "\u0628\u0632\u0631\u06AF\u200C\u0646\u0645\u0627\u06CC\u06CC \u0645\u062A\u0646\u0627\u0633\u0628 \u0628\u0627 \u0635\u0641\u062D\u0647";
var ow = "\u0628\u0632\u0631\u06AF\u200C\u0646\u0645\u0627\u06CC\u06CC \u0628\u0647";
var rw = "\u062D\u0627\u0644\u062A \u062A\u0627\u0631\u06CC\u06A9";
var sw = "\u062D\u0627\u0644\u062A \u062A\u0645\u0631\u06A9\u0632";
var iw = "\u062D\u0627\u0644\u062A \u0639\u06CC\u0628\u200C\u06CC\u0627\u0628\u06CC";
var aw = "\u0646\u0645\u0627\u06CC\u0634 \u062E\u0637\u0648\u0637 \u0631\u0627\u0647\u0646\u0645\u0627";
var lw = "\u0627\u0633\u062A\u0641\u0627\u062F\u0647 \u0627\u0632 \u062D\u0627\u0644\u062A \u0627\u0646\u062A\u062E\u0627\u0628 CAD";
var dw = "\u0628\u0627\u0632 \u0646\u06AF\u0647\u200C\u062F\u0627\u0634\u062A\u0646 \u0645\u0646\u0648\u06CC \u0633\u0628\u06A9\u200C\u0647\u0627";
var cw = "\u0647\u0645\u06CC\u0634\u0647 \u0646\u0642\u0627\u0637 \u0686\u0633\u0628\u0627\u0646 \u0631\u0627 \u0646\u0634\u0627\u0646 \u0628\u062F\u0647";
var pw = "\u062F\u0633\u062A\u06AF\u06CC\u0631\u0647\u200C\u0647\u0627\u06CC \u0686\u0631\u062E\u0634";
var uw = "\u062F\u0633\u062A\u06AF\u06CC\u0631\u0647\u200C\u0647\u0627\u06CC \u0627\u062A\u0635\u0627\u0644\u200C\u062F\u0647\u0646\u062F\u0647";
var hw = "\u062F\u0633\u062A\u06AF\u06CC\u0631\u0647\u200C\u0647\u0627\u06CC \u062A\u06A9\u062B\u06CC\u0631";
var mw = "\u0648\u0627\u06AF\u0631\u062F\u0627\u0646\u06CC";
var gw = "\u0627\u0646\u062C\u0627\u0645 \u062F\u0648\u0628\u0627\u0631\u0647";
var fw = "\u0628\u0631\u06CC\u062F\u0646";
var Sw = "\u06A9\u067E\u06CC";
var bw = "\u062C\u0627\u06CC\u200C\u06AF\u0630\u0627\u0631\u06CC";
var Tw = "\u06A9\u067E\u06CC \u0628\u0647\u200C\u0639\u0646\u0648\u0627\u0646";
var yw = "\u062E\u0631\u0648\u062C\u06CC\u200C\u06AF\u0631\u0641\u062A\u0646 \u0628\u0647\u200C\u0639\u0646\u0648\u0627\u0646";
var ww = "\u0627\u0646\u062A\u062E\u0627\u0628 \u0647\u0645\u0647";
var xw = "\u0627\u0646\u062A\u062E\u0627\u0628 \u0647\u06CC\u0686\u200C\u06CC\u06A9";
var kw = "\u062D\u0630\u0641";
var vw = "\u067E\u0631\u0648\u0698\u0647 \u062C\u062F\u06CC\u062F";
var Iw = "\u0628\u0627\u0632\u06A9\u0631\u062F\u0646";
var Cw = "\u0630\u062E\u06CC\u0631\u0647";
var Dw = "\u0630\u062E\u06CC\u0631\u0647 \u0628\u0647\u200C\u0639\u0646\u0648\u0627\u0646";
var Pw = "\u0628\u0627\u0631\u06AF\u0630\u0627\u0631\u06CC \u0631\u0633\u0627\u0646\u0647";
var Mw = "\u0627\u06CC\u062C\u0627\u062F \u0628\u0631\u06AF\u0647";
var Ew = "\u0628\u0631\u06AF\u0647 \u062C\u062F\u06CC\u062F";
var Bw = "\u0646\u0627\u0645 \u0628\u0631\u06AF\u0647";
var Rw = "\u062A\u06A9\u062B\u06CC\u0631\u06A9\u0631\u062F\u0646";
var Aw = "\u06AF\u0632\u06CC\u0646\u0647\u200C\u0647\u0627\u06CC \u0634\u06A9\u0644";
var Lw = "\u0634\u06A9\u0644\u200C\u0647\u0627";
var Hw = "\u0644\u063A\u0648";
var zw = "\u06A9\u067E\u06CC\u200C\u06A9\u0631\u062F\u0646 \u067E\u06CC\u0648\u0646\u062F \u062F\u0639\u0648\u062A";
var Ow = "\u06A9\u067E\u06CC\u200C\u06A9\u0631\u062F\u0646 \u067E\u06CC\u0648\u0646\u062F \u063A\u06CC\u0631\u0642\u0627\u0628\u0644 \u0648\u06CC\u0631\u0627\u06CC\u0634";
var Fw = "\u0627\u06CC\u062C\u0627\u062F \u06CC\u06A9 \u067E\u0631\u0648\u0698\u0647 \u0686\u0646\u062F\u0646\u0641\u0631\u0647";
var jw = "\u06A9\u067E\u06CC \u0628\u0647 \u067E\u0631\u0648\u0698\u0647 \u0686\u0646\u062F\u0646\u0641\u0631\u0647";
var Gw = "\u0627\u0646\u062A\u062E\u0627\u0628";
var Vw = "\u067E\u0627\u06A9\u200C\u06A9\u0646";
var $w = "\u0631\u0633\u0645";
var Nw = "\u0641\u0650\u0644\u0650\u0634";
var Ww = "\u0645\u062A\u0646";
var Uw = "\u0628\u0631\u06AF\u0647 \u0686\u0633\u0628\u0627\u0646";
var Kw = "\u0686\u0647\u0627\u0631\u06AF\u0648\u0634";
var _w = "\u06AF\u0631\u062F\u06CC";
var Yw = "\u0633\u0647\u200C\u06AF\u0648\u0634";
var Zw = "\u062E\u0637";
var Xw = "\u0686\u0631\u062E\u0627\u0646\u062F\u0646";
var qw = "\u0642\u0641\u0644\u200C\u06A9\u0631\u062F\u0646 \u0646\u0633\u0628\u062A \u0627\u0628\u0639\u0627\u062F";
var Jw = "\u0627\u062C\u0627\u0632\u0647 \u062A\u063A\u06CC\u06CC\u0631 \u0646\u0633\u0628\u062A \u0627\u0628\u0639\u0627\u062F";
var Qw = "\u06AF\u0631\u0648\u0647\u200C\u0628\u0646\u062F\u06CC";
var ex = "\u0644\u063A\u0648 \u06AF\u0631\u0648\u0647\u200C\u0628\u0646\u062F\u06CC";
var tx = "\u0627\u0646\u062A\u0642\u0627\u0644 \u0628\u0647 \u0639\u0642\u0628";
var nx = "\u0627\u0646\u062A\u0642\u0627\u0644 \u0628\u0647 \u0633\u0645\u062A \u0639\u0642\u0628";
var ox = "\u0627\u0646\u062A\u0642\u0627\u0644 \u0628\u0647 \u0633\u0645\u062A \u062C\u0644\u0648";
var rx = "\u0627\u0646\u062A\u0642\u0627\u0644 \u0628\u0647 \u062C\u0644\u0648";
var sx = "\u0628\u0627\u0632\u0646\u0634\u0627\u0646\u06CC \u0632\u0627\u0648\u06CC\u0647";
var ix = "\u0642\u0641\u0644";
var ax = "\u0628\u0627\u0632\u06A9\u0631\u062F\u0646 \u0642\u0641\u0644";
var lx = "\u062A\u0631\u0627\u0632 / \u067E\u062E\u0634\u200C\u06A9\u0631\u062F\u0646";
var dx = "\u0627\u0646\u062A\u0642\u0627\u0644 \u0628\u0647 \u0628\u0631\u06AF\u0647";
var cx = "\u0648\u0627\u0631\u0648\u0646\u0647\u200C\u0633\u0627\u0632\u06CC \u0627\u0641\u0642\u06CC";
var px = "\u0648\u0627\u0631\u0648\u0646\u0647\u200C\u0633\u0627\u0632\u06CC \u0639\u0645\u0648\u062F\u06CC";
var ux = "\u062D\u0631\u06A9\u062A\u200C\u062F\u0627\u062F\u0646";
var hx = "\u0628\u0647 \u062C\u0644\u0648";
var mx = "\u0628\u0647 \u0633\u0645\u062A \u062C\u0644\u0648";
var gx = "\u0628\u0647 \u0633\u0645\u062A \u0639\u0642\u0628";
var fx = "\u0628\u0647 \u0639\u0642\u0628";
var Sx = "\u0632\u0628\u0627\u0646";
var bx = "\u06CC\u0627\u062F\u06AF\u06CC\u0631\u06CC \u0628\u06CC\u0634\u062A\u0631";
var Tx = "\u0645\u0648\u0642\u0639\u06CC\u062A \u0646\u0648\u0627\u0631 \u0627\u0628\u0632\u0627\u0631";
var yx = "\u067E\u0627\u06CC\u06CC\u0646";
var wx = "\u0686\u067E";
var xx = "\u0631\u0627\u0633\u062A";
var kx = "\u0628\u0627\u0644\u0627";
var vx = "\u0628\u0631\u06AF\u0647";
var Ix = "\u0645\u06CC\u0627\u0646\u200C\u0628\u0631\u0647\u0627\u06CC \u0635\u0641\u062D\u0647\u200C\u06A9\u0644\u06CC\u062F";
var Cx = "\u062C\u0633\u062A\u062C\u0648";
var Dx = "\u0628\u0627\u0631\u06AF\u06CC\u0631\u06CC{dots}";
var Px = "\u062E\u0631\u0648\u062C\u06CC\u200C\u06AF\u0631\u0641\u062A\u0646 \u067E\u0633\u200C\u0632\u0645\u06CC\u0646\u0647";
var Mx = "\u0634\u0641\u0627\u0641";
var Ex = "\u062E\u0648\u062F\u06A9\u0627\u0631";
var Bx = "\u0631\u0648\u0634\u0646";
var Rx = "\u062A\u0627\u0631\u06CC\u06A9";
var Ax = "\u06AF\u06CC\u062A\u200C\u0647\u0627\u0628";
var Lx = "\u062A\u0648\u06CC\u06CC\u062A\u0631";
var Hx = "\u062F\u06CC\u0633\u06A9\u0648\u0631\u062F";
var zx = "\u062A\u0635\u0648\u06CC\u0631";
var Ox = "\u062A\u0631\u0627\u0632 \u0628\u0647 \u0686\u067E";
var Fx = "\u062A\u0631\u0627\u0632 \u0628\u0647 \u0645\u0631\u06A9\u0632 \u0627\u0641\u0642\u06CC";
var jx = "\u062A\u0631\u0627\u0632 \u0628\u0647 \u0631\u0627\u0633\u062A";
var Gx = "\u062A\u0631\u0627\u0632 \u0628\u0647 \u0628\u0627\u0644\u0627";
var Vx = "\u062A\u0631\u0627\u0632 \u0628\u0647 \u0645\u0631\u06A9\u0632 \u0639\u0645\u0648\u062F\u06CC";
var $x = "\u062A\u0631\u0627\u0632 \u0628\u0647 \u067E\u0627\u06CC\u06CC\u0646";
var Nx = "\u067E\u062E\u0634\u200C\u06A9\u0631\u062F\u0646 \u0627\u0641\u0642\u06CC";
var Wx = "\u067E\u062E\u0634\u200C\u06A9\u0631\u062F\u0646 \u0639\u0645\u0648\u062F\u06CC";
var Ux = "\u06A9\u0634\u200C\u0622\u0648\u0631\u062F\u0646 \u0627\u0641\u0642\u06CC";
var Kx = "\u06A9\u0634\u200C\u0622\u0648\u0631\u062F\u0646 \u0639\u0645\u0648\u062F\u06CC";
var _x = "\u0622\u06CC\u0627 \u0645\u06CC\u200C\u062E\u0648\u0627\u0647\u06CC\u062F \u067E\u0631\u0648\u0698\u0647 \u0641\u0639\u0644\u06CC \u062E\u0648\u062F \u0631\u0627 \u0630\u062E\u06CC\u0631\u0647 \u06A9\u0646\u06CC\u062F\u061F";
var Yx = "\u0622\u06CC\u0627 \u0645\u06CC\u200C\u062E\u0648\u0627\u0647\u06CC\u062F \u06A9\u0647 \u062A\u063A\u06CC\u06CC\u0631\u0627\u062A \u0631\u0627 \u062F\u0631 \u067E\u0631\u0648\u0698\u0647 \u0641\u0639\u0644\u06CC \u062E\u0648\u062F \u0630\u062E\u06CC\u0631\u0647 \u06A9\u0646\u06CC\u062F\u061F";
var Zx = "\u0644\u063A\u0648";
var Xx = "\u062E\u06CC\u0631";
var qx = "\u0628\u0644\u0647";
var Jx = "\u0646\u0627\u0645 \u067E\u0631\u0648\u0646\u062F\u0647 \u0631\u0627 \u0648\u0627\u0631\u062F \u06A9\u0646\u06CC\u062F";
var Qx = "\u0627\u0645\u062A\u062D\u0627\u0646\u200C\u06A9\u0631\u062F\u0646 tldraw \u062C\u062F\u06CC\u062F";
var e0 = "\u0633\u0641\u06CC\u062F";
var t0 = "\u062E\u0627\u06A9\u0633\u062A\u0631\u06CC \u0631\u0648\u0634\u0646";
var n0 = "\u062E\u0627\u06A9\u0633\u062A\u0631\u06CC";
var o0 = "\u0645\u0634\u06A9\u06CC";
var r0 = "\u0633\u0628\u0632";
var s0 = "\u0641\u06CC\u0631\u0648\u0632\u0647\u200C\u0627\u06CC";
var i0 = "\u0622\u0628\u06CC";
var a0 = "\u0646\u06CC\u0644\u06CC";
var l0 = "\u0628\u0646\u0641\u0634";
var d0 = "\u0642\u0631\u0645\u0632";
var c0 = "\u0646\u0627\u0631\u0646\u062C\u06CC";
var p0 = "\u0632\u0631\u062F";
var u0 = "\u062A\u0648\u067E\u064F\u0631";
var h0 = "\u062E\u0637\u200C\u0686\u06CC\u0646";
var m0 = "\u0646\u0642\u0637\u0647\u200C\u0686\u06CC\u0646";
var g0 = "\u06A9\u0648\u0686\u06A9";
var f0 = "\u0645\u062A\u0648\u0633\u0637";
var S0 = "\u0628\u0632\u0631\u06AF";
var ra = { "style.menu.color": Ly, "style.menu.fill": Hy, "style.menu.dash": zy, "style.menu.size": Oy, "style.menu.keep.open": Fy, "style.menu.font": jy, "style.menu.align": Gy, styles: Vy, "zoom.in": $y, "zoom.out": Ny, to: Wy, "menu.tools": Uy, "menu.transform": Ky, "menu.file": _y, "menu.edit": Yy, "menu.view": Zy, "menu.preferences": Xy, "menu.sign.in": qy, "menu.sign.out": Jy, "become.a.sponsor": Qy, "zoom.to.content": ew, "zoom.to.selection": tw, "zoom.to.fit": nw, "zoom.to": ow, "preferences.dark.mode": rw, "preferences.focus.mode": sw, "preferences.debug.mode": iw, "preferences.show.grid": aw, "preferences.use.cad.selection": lw, "preferences.keep.stylemenu.open": dw, "preferences.always.show.snaps": cw, "preferences.rotate.handles": pw, "preferences.binding.handles": uw, "preferences.clone.handles": hw, undo: mw, redo: gw, cut: fw, copy: Sw, paste: bw, "copy.as": Tw, "export.as": yw, "select.all": ww, "select.none": xw, delete: kw, "new.project": vw, open: Iw, save: Cw, "save.as": Dw, "upload.media": Pw, "create.page": Mw, "new.page": Ew, "page.name": Bw, duplicate: Rw, "shape.options": Aw, shapes: Lw, cancel: Hw, "copy.invite.link": zw, "copy.readonly.link": Ow, "create.multiplayer.project": Fw, "copy.multiplayer.project": jw, select: Gw, eraser: Vw, draw: $w, arrow: Nw, text: Ww, sticky: Uw, rectangle: Kw, ellipse: _w, triangle: Yw, line: Zw, rotate: Xw, "lock.aspect.ratio": qw, "unlock.aspect.ratio": Jw, group: Qw, ungroup: ex, "move.to.back": tx, "move.backward": nx, "move.forward": ox, "move.to.front": rx, "reset.angle": sx, lock: ix, unlock: ax, "align.distribute": lx, "move.to.page": dx, "flip.horizontal": cx, "flip.vertical": px, move: ux, "to.front": hx, forward: mx, backward: gx, back: fx, language: Sx, "translation.link": bx, "dock.position": Tx, bottom: yx, left: wx, right: xx, top: kx, page: vx, "keyboard.shortcuts": Ix, search: Cx, loading: Dx, "export.background": Px, transparent: Mx, auto: Ex, light: Bx, dark: Rx, github: Ax, twitter: Lx, discord: Hx, image: zx, "align.left": Ox, "align.center.x": Fx, "align.right": jx, "align.top": Gx, "align.center.y": Vx, "align.bottom": $x, "distribute.x": Nx, "distribute.y": Wx, "stretch.x": Ux, "stretch.y": Kx, "dialog.save.firsttime": _x, "dialog.save.again": Yx, "dialog.cancel": Zx, "dialog.no": Xx, "dialog.yes": qx, "enter.file.name": Jx, "tldraw-beta": Qx, white: e0, lightGray: t0, gray: n0, black: o0, green: r0, cyan: s0, blue: i0, indigo: a0, violet: l0, red: d0, orange: c0, yellow: p0, solid: u0, dashed: h0, dotted: m0, small: g0, medium: f0, large: S0 };
var b0 = "Couleur";
var T0 = "Remplir";
var y0 = "Bordure";
var w0 = "Taille";
var x0 = "Toujours afficher le menu";
var k0 = "Police";
var v0 = "Alignement";
var I0 = "Styles";
var C0 = "Zoom avant";
var D0 = "Zoom arri\xE8re";
var P0 = "\xC0";
var M0 = "Outils";
var E0 = "Transformation";
var B0 = "Fichier";
var R0 = "\xC9dition";
var A0 = "Afficher";
var L0 = "Pr\xE9f\xE9rences";
var H0 = "S'authentifier";
var z0 = "Se d\xE9connecter";
var O0 = "Devenir un sponsor";
var F0 = "Retour au contenu";
var j0 = "Ajuster le zoom \xE0 la s\xE9lection";
var G0 = "Adapter le zoom au contenu";
var V0 = "R\xE9tablir le zoom \xE0";
var $0 = "Mode sombre";
var N0 = "Mode focus";
var W0 = "Afficher la barre d\xE9veloppeur";
var U0 = "Afficher la grille";
var K0 = "Utiliser la s\xE9lection CAD";
var _0 = "Toujours afficher le menu styles";
var Y0 = "Afficher les rep\xE8res dynamiques";
var Z0 = "Manier la rotation";
var X0 = "Manier les liaisons";
var q0 = "Manier le clonage";
var J0 = "Annuler";
var Q0 = "R\xE9tablir";
var ek = "Couper";
var tk = "Copier";
var nk = "Coller";
var ok = "Copier au format";
var rk = "Exporter au format";
var sk = "Tout s\xE9lectionner";
var ik = "Tout d\xE9s\xE9lectionner";
var ak = "Supprimer";
var lk = "Nouveau project";
var dk = "Ouvrir";
var ck = "Enregistrer";
var pk = "Enregistrer sous";
var uk = "Importer un m\xE9dia";
var hk = "Cr\xE9er une page";
var mk = "Nouvelle Page";
var gk = "Nom de la page";
var fk = "Dupliquer";
var Sk = "Annuler";
var bk = "Copier le lien d'invitation";
var Tk = "Copier le lien en lecture seule d'invitation";
var yk = "Cr\xE9er un project multi-joueurs";
var wk = "Copier dans un projet multi-joueurs";
var xk = "S\xE9lection";
var kk = "Gomme";
var vk = "Crayon";
var Ik = "Fl\xE8che";
var Ck = "Texte";
var Dk = "Note";
var Pk = "Rectangle";
var Mk = "Cercle";
var Ek = "Triangle";
var Bk = "Ligne";
var Rk = "Rotation";
var Ak = "Verrouiller les proportions";
var Lk = "D\xE9verrouiller les proportions";
var Hk = "Grouper";
var zk = "D\xE9grouper";
var Ok = "D\xE9placer \xE0 l'arri\xE8re-plan";
var Fk = "Reculer d'un plan";
var jk = "Avancer d'un plan";
var Gk = "Placer au premier plan";
var Vk = "R\xE9initialiser la rotation";
var $k = "Verrouiller";
var Nk = "D\xE9verrouiller";
var Wk = "Alignement / R\xE9partion";
var Uk = "D\xE9placer vers la page";
var Kk = "Retourner horizontalement";
var _k = "Retourner verticalement";
var Yk = "Disposition";
var Zk = "Placer au premier plan";
var Xk = "Avancer d'un plan";
var qk = "Reculer d'un plan";
var Jk = "D\xE9placer \xE0 l'arri\xE8re-plan";
var Qk = "Langage";
var e1 = "En savoir plus";
var t1 = "Position du dock";
var n1 = "En bas";
var o1 = "\xC0 gauche";
var r1 = "\xC0 droite";
var s1 = "En haut";
var i1 = "Page";
var a1 = "Raccourcis clavier";
var l1 = "Rechercher";
var d1 = "Chargement{dots}";
var c1 = "Couleur d'arri\xE8re-plan de l'export";
var p1 = "Transparent";
var u1 = "Automatique";
var h1 = "Clair";
var m1 = "Sombre";
var sa = { "style.menu.color": b0, "style.menu.fill": T0, "style.menu.dash": y0, "style.menu.size": w0, "style.menu.keep.open": x0, "style.menu.font": k0, "style.menu.align": v0, styles: I0, "zoom.in": C0, "zoom.out": D0, to: P0, "menu.tools": M0, "menu.transform": E0, "menu.file": B0, "menu.edit": R0, "menu.view": A0, "menu.preferences": L0, "menu.sign.in": H0, "menu.sign.out": z0, "become.a.sponsor": O0, "zoom.to.content": F0, "zoom.to.selection": j0, "zoom.to.fit": G0, "zoom.to": V0, "preferences.dark.mode": $0, "preferences.focus.mode": N0, "preferences.debug.mode": W0, "preferences.show.grid": U0, "preferences.use.cad.selection": K0, "preferences.keep.stylemenu.open": _0, "preferences.always.show.snaps": Y0, "preferences.rotate.handles": Z0, "preferences.binding.handles": X0, "preferences.clone.handles": q0, undo: J0, redo: Q0, cut: ek, copy: tk, paste: nk, "copy.as": ok, "export.as": rk, "select.all": sk, "select.none": ik, delete: ak, "new.project": lk, open: dk, save: ck, "save.as": pk, "upload.media": uk, "create.page": hk, "new.page": mk, "page.name": gk, duplicate: fk, cancel: Sk, "copy.invite.link": bk, "copy.readonly.link": Tk, "create.multiplayer.project": yk, "copy.multiplayer.project": wk, select: xk, eraser: kk, draw: vk, arrow: Ik, text: Ck, sticky: Dk, rectangle: Pk, ellipse: Mk, triangle: Ek, line: Bk, rotate: Rk, "lock.aspect.ratio": Ak, "unlock.aspect.ratio": Lk, group: Hk, ungroup: zk, "move.to.back": Ok, "move.backward": Fk, "move.forward": jk, "move.to.front": Gk, "reset.angle": Vk, lock: $k, unlock: Nk, "align.distribute": Wk, "move.to.page": Uk, "flip.horizontal": Kk, "flip.vertical": _k, move: Yk, "to.front": Zk, forward: Xk, backward: qk, back: Jk, language: Qk, "translation.link": e1, "dock.position": t1, bottom: n1, left: o1, right: r1, top: s1, page: i1, "keyboard.shortcuts": a1, search: l1, loading: d1, "export.background": c1, transparent: p1, auto: u1, light: h1, dark: m1 };
var g1 = "Cor";
var f1 = "Recheo";
var S1 = "Li\xF1a";
var b1 = "Tama\xF1o";
var T1 = "Manter aberto";
var y1 = "Fonte";
var w1 = "Ali\xF1amento";
var x1 = "Estilos";
var k1 = "Achegar";
var v1 = "Afastar";
var I1 = "A";
var C1 = "Ferramentas";
var D1 = "Transformar";
var P1 = "Arquivo";
var M1 = "Editar";
var E1 = "Ver";
var B1 = "Preferencias";
var R1 = "Iniciar sesi\xF3n";
var A1 = "Pechar sesi\xF3n";
var L1 = "Conv\xEDrtete en patrocinador";
var H1 = "Achegar ao contido";
var z1 = "Achegar \xE1 selecci\xF3n";
var O1 = "Axustar \xE1 vent\xE1";
var F1 = "Achegar a";
var j1 = "Modo escuro";
var G1 = "Modo concentraci\xF3n";
var V1 = "Modo depuraci\xF3n";
var $1 = "Amosar cuadr\xEDcula";
var N1 = "Usar selecci\xF3n CAD";
var W1 = "Manter men\xFA de estilos aberto";
var U1 = "Amosar puntos de axuste";
var K1 = "Control de rotaci\xF3n";
var _1 = "Control de vinculaci\xF3n";
var Y1 = "Control de clonaci\xF3n";
var Z1 = "Desfacer";
var X1 = "Refacer";
var q1 = "Cortar";
var J1 = "Copiar";
var Q1 = "Pegar";
var ev = "Copiar como";
var tv = "Exportar como";
var nv = "Selecionar todo";
var ov = "Selecionar nada";
var rv = "Borrar";
var sv = "Novo Proxecto";
var iv = "Abrir";
var av = "Gardar";
var lv = "Gardar como";
var dv = "Subir medios";
var cv = "Crear p\xE1xina";
var pv = "Nova p\xE1xina";
var uv = "Nome de p\xE1xina";
var hv = "Duplicar";
var mv = "Opci\xF3ns de formas";
var gv = "Formas";
var fv = "Cancelar";
var Sv = "Copiar invitaci\xF3n";
var bv = "Copiar invitaci\xF3n (s\xF3 lectura)";
var Tv = "Crear proxecto multixogador";
var yv = "Copiar proxecto multixogador";
var wv = "Seleccionar";
var xv = "Borrador";
var kv = "Debuxar";
var vv = "Frecha";
var Iv = "Texto";
var Cv = "Pegatina";
var Dv = "Rect\xE1ngulo";
var Pv = "Elipse";
var Mv = "Tri\xE1ngulo";
var Ev = "Li\xF1a";
var Bv = "Rotar";
var Rv = "Bloquear relaci\xF3n de aspecto";
var Av = "Desbloquear relaci\xF3n de aspecto";
var Lv = "Agrupar";
var Hv = "Desagrupar";
var zv = "Mover ao fondo";
var Ov = "Mover atr\xE1s";
var Fv = "Mover adiante";
var jv = "Mover ao fronte";
var Gv = "Restablecer \xE1ngulo";
var Vv = "Bloquear";
var $v = "Desbloquear";
var Nv = "Ali\xF1ar / Distribu\xEDr";
var Wv = "Mover \xE1 p\xE1xina";
var Uv = "Voltear horizontalmente";
var Kv = "Voltear verticalmente";
var _v = "Mover";
var Yv = "Ao fronte";
var Zv = "Adilante";
var Xv = "Atr\xE1s";
var qv = "Fondo";
var Jv = "Idioma";
var Qv = "Saber m\xE1is";
var eI = "Posici\xF3n do dock";
var tI = "Abaixo";
var nI = "Esquerda";
var oI = "Dereita";
var rI = "Arriba";
var sI = "P\xE1xina";
var iI = "Atallos de teclado";
var aI = "Buscar";
var lI = "Cargando{dots}";
var dI = "Exportar fondo";
var cI = "Transparente";
var pI = "Auto";
var uI = "Claro";
var hI = "Escuro";
var mI = "Github";
var gI = "Twitter";
var fI = "Discord";
var SI = "Imaxe";
var bI = "Ali\xF1ar \xE1 esquerda";
var TI = "Ali\xF1ar ao centro horizontalmente";
var yI = "Ali\xF1ar \xE1 dereita";
var wI = "Ali\xF1ar arriba";
var xI = "Ali\xF1ar ao centro verticalmente";
var kI = "Ali\xF1ar abaixo";
var vI = "Distribu\xEDr horizontalmente";
var II = "Distribu\xEDr verticalmente";
var CI = "Estirar horizontalmente";
var DI = "Estirar verticalmente";
var PI = "Queres gardar o proxecto actual?";
var MI = "Queres gardar os cambios ao proxecto actual?";
var EI = "Cancelar";
var BI = "No";
var RI = "S\xED";
var AI = "Introduce o nome do arquivo";
var LI = "Proba o novo tldraw";
var HI = "Branco";
var zI = "Gris claro";
var OI = "Gris";
var FI = "Negro";
var jI = "Verde";
var GI = "Cian";
var VI = "Azul";
var $I = "Indigo";
var NI = "Violeta";
var WI = "Vermello";
var UI = "Laranxa";
var KI = "Amarelo";
var _I = "Cont\xEDnuo";
var YI = "Discont\xEDnuo";
var ZI = "Punteado";
var XI = "Pequeno";
var qI = "Mediano";
var JI = "Grande";
var ia = { "style.menu.color": g1, "style.menu.fill": f1, "style.menu.dash": S1, "style.menu.size": b1, "style.menu.keep.open": T1, "style.menu.font": y1, "style.menu.align": w1, styles: x1, "zoom.in": k1, "zoom.out": v1, to: I1, "menu.tools": C1, "menu.transform": D1, "menu.file": P1, "menu.edit": M1, "menu.view": E1, "menu.preferences": B1, "menu.sign.in": R1, "menu.sign.out": A1, "become.a.sponsor": L1, "zoom.to.content": H1, "zoom.to.selection": z1, "zoom.to.fit": O1, "zoom.to": F1, "preferences.dark.mode": j1, "preferences.focus.mode": G1, "preferences.debug.mode": V1, "preferences.show.grid": $1, "preferences.use.cad.selection": N1, "preferences.keep.stylemenu.open": W1, "preferences.always.show.snaps": U1, "preferences.rotate.handles": K1, "preferences.binding.handles": _1, "preferences.clone.handles": Y1, undo: Z1, redo: X1, cut: q1, copy: J1, paste: Q1, "copy.as": ev, "export.as": tv, "select.all": nv, "select.none": ov, delete: rv, "new.project": sv, open: iv, save: av, "save.as": lv, "upload.media": dv, "create.page": cv, "new.page": pv, "page.name": uv, duplicate: hv, "shape.options": mv, shapes: gv, cancel: fv, "copy.invite.link": Sv, "copy.readonly.link": bv, "create.multiplayer.project": Tv, "copy.multiplayer.project": yv, select: wv, eraser: xv, draw: kv, arrow: vv, text: Iv, sticky: Cv, rectangle: Dv, ellipse: Pv, triangle: Mv, line: Ev, rotate: Bv, "lock.aspect.ratio": Rv, "unlock.aspect.ratio": Av, group: Lv, ungroup: Hv, "move.to.back": zv, "move.backward": Ov, "move.forward": Fv, "move.to.front": jv, "reset.angle": Gv, lock: Vv, unlock: $v, "align.distribute": Nv, "move.to.page": Wv, "flip.horizontal": Uv, "flip.vertical": Kv, move: _v, "to.front": Yv, forward: Zv, backward: Xv, back: qv, language: Jv, "translation.link": Qv, "dock.position": eI, bottom: tI, left: nI, right: oI, top: rI, page: sI, "keyboard.shortcuts": iI, search: aI, loading: lI, "export.background": dI, transparent: cI, auto: pI, light: uI, dark: hI, github: mI, twitter: gI, discord: fI, image: SI, "align.left": bI, "align.center.x": TI, "align.right": yI, "align.top": wI, "align.center.y": xI, "align.bottom": kI, "distribute.x": vI, "distribute.y": II, "stretch.x": CI, "stretch.y": DI, "dialog.save.firsttime": PI, "dialog.save.again": MI, "dialog.cancel": EI, "dialog.no": BI, "dialog.yes": RI, "enter.file.name": AI, "tldraw-beta": LI, white: HI, lightGray: zI, gray: OI, black: FI, green: jI, cyan: GI, blue: VI, indigo: $I, violet: NI, red: WI, orange: UI, yellow: KI, solid: _I, dashed: YI, dotted: ZI, small: XI, medium: qI, large: JI };
var QI = "\u05E6\u05D1\u05E2";
var eC = "\u05DE\u05DC\u05D0";
var tC = "\u05D2\u05D1\u05D5\u05DC";
var nC = "\u05D2\u05D5\u05D3\u05DC";
var oC = "\u05D4\u05E9\u05D0\u05E8 \u05E4\u05EA\u05D5\u05D7";
var rC = "\u05D2\u05D5\u05E4\u05DF";
var sC = "\u05D9\u05D9\u05E9\u05D5\u05E8";
var iC = "\u05E2\u05D9\u05E6\u05D5\u05D1";
var aC = "\u05D4\u05D2\u05D3\u05DC \u05EA\u05E6\u05D5\u05D2\u05D4";
var lC = "\u05D4\u05E7\u05D8\u05DF \u05EA\u05E6\u05D5\u05D2\u05D4";
var dC = "\u05DC";
var cC = "\u05E7\u05D5\u05D1\u05E5";
var pC = "\u05E2\u05E8\u05D9\u05DB\u05D4";
var uC = "\u05EA\u05E6\u05D5\u05D2\u05D4";
var hC = "\u05DE\u05D0\u05E4\u05D9\u05D9\u05E0\u05D9\u05DD";
var mC = "\u05D4\u05D9\u05E8\u05E9\u05DD";
var gC = "\u05D4\u05EA\u05E0\u05EA\u05E7";
var fC = "\u05DE\u05EA\u05DF \u05D7\u05E1\u05D5\u05EA";
var SC = "\u05D6\u05D5\u05DD \u05DC\u05D1\u05D7\u05D9\u05E8\u05D4";
var bC = "\u05D6\u05D5\u05DD \u05DC\u05D4\u05EA\u05D0\u05DE\u05D4";
var TC = "\u05D6\u05D5\u05DD \u05DC";
var yC = "\u05DE\u05E6\u05D1 \u05D7\u05E9\u05D5\u05DA";
var wC = "\u05DE\u05E6\u05D1 \u05E4\u05D5\u05E7\u05D5\u05E1";
var xC = "\u05DE\u05E6\u05D1 \u05D3\u05D9\u05D1\u05D0\u05D2";
var kC = "(\u05D2\u05E8\u05D9\u05D3)\u05D4\u05E8\u05D0\u05D4 \u05E8\u05E9\u05EA \u05E2\u05D9\u05DE\u05D5\u05D3";
var vC = "\u05E1\u05D9\u05DE\u05D5\u05DF CAD";
var IC = "\u05D4\u05E9\u05D0\u05E8 \u05EA\u05E4\u05E8\u05D9\u05D8 \u05E2\u05D9\u05E6\u05D5\u05D1 \u05E4\u05EA\u05D5\u05D7";
var CC = "\u05D4\u05E8\u05D0\u05D4 \u05E7\u05D5\u05D5\u05D9 \u05DE\u05EA\u05D0\u05E8";
var DC = "\u05D4\u05E8\u05D0\u05D4 \u05D9\u05D3\u05D9\u05D5\u05EA \u05E1\u05D9\u05D1\u05D5\u05D1";
var PC = "\u05D4\u05E8\u05D0\u05D4 \u05D9\u05D3\u05D9\u05D5\u05EA \u05E7\u05E9\u05D9\u05E8\u05D4";
var MC = "\u05D4\u05E8\u05D0\u05D4 \u05D9\u05D3\u05D9\u05D5\u05EA \u05E9\u05D9\u05DB\u05E4\u05D5\u05DC";
var EC = "\u05D1\u05D8\u05DC";
var BC = "\u05E2\u05E9\u05D4 \u05DE\u05D7\u05D3\u05E9";
var RC = "\u05D2\u05D6\u05D5\u05E8";
var AC = "\u05D4\u05E2\u05EA\u05E7";
var LC = "\u05D4\u05D3\u05D1\u05E7";
var HC = "\u05D4\u05E2\u05EA\u05E7 \u05DB";
var zC = "\u05D9\u05D9\u05E6\u05D0 \u05DB";
var OC = "\u05D1\u05D7\u05E8 \u05D4\u05DB\u05DC";
var FC = "\u05D1\u05D8\u05DC \u05D1\u05D7\u05D9\u05E8\u05D4";
var jC = "\u05DE\u05D7\u05E7";
var GC = "\u05E4\u05E8\u05D5\u05D9\u05E7\u05D8 \u05D7\u05D3\u05E9";
var VC = "\u05E4\u05EA\u05D7";
var $C = "\u05E9\u05DE\u05D5\u05E8";
var NC = "\u05E9\u05DE\u05D5\u05E8 \u05DB";
var WC = "\u05D4\u05E2\u05DC\u05D0\u05EA \u05DE\u05D3\u05D9\u05D4";
var UC = "\u05E6\u05D5\u05E8 \u05D3\u05E3";
var KC = "\u05D3\u05E3 \u05D7\u05D3\u05E9";
var _C = "\u05E9\u05DD \u05D4\u05D3\u05E3";
var YC = "\u05E9\u05DB\u05E4\u05DC";
var ZC = "\u05D1\u05D8\u05DC";
var XC = "\u05D4\u05E2\u05EA\u05E7 \u05E7\u05D9\u05E9\u05D5\u05E8 \u05D4\u05D6\u05DE\u05E0\u05D4";
var qC = "\u05E6\u05D5\u05E8 \u05E4\u05E8\u05D5\u05D9\u05E7\u05D8 \u05E8\u05D1 \u05DE\u05E9\u05EA\u05EA\u05E4\u05D9\u05DD";
var JC = "\u05D4\u05E2\u05EA\u05E7 \u05DC\u05E4\u05E8\u05D5\u05D9\u05E7\u05D8 \u05E8\u05D1 \u05DE\u05E9\u05EA\u05EA\u05E4\u05D9\u05DD";
var QC = "\u05E1\u05DE\u05DF";
var eD = "\u05DE\u05D7\u05E7";
var tD = "\u05E6\u05D9\u05D9\u05E8";
var nD = "\u05D7\u05E5";
var oD = "\u05D8\u05E7\u05E1\u05D8";
var rD = "\u05D3\u05D1\u05D9\u05E7\u05D9";
var sD = "\u05DE\u05E8\u05D5\u05D1\u05E2";
var iD = "\u05D0\u05DC\u05D9\u05E4\u05E1\u05D4";
var aD = "\u05DE\u05E9\u05D5\u05DC\u05E9";
var lD = "\u05E7\u05D5";
var dD = "\u05E1\u05D5\u05D1\u05D1";
var cD = "\u05E0\u05E2\u05DC \u05D9\u05D7\u05E1 \u05E8\u05D5\u05D7\u05D1-\u05D2\u05D5\u05D1\u05D4";
var pD = "\u05E9\u05D7\u05E8\u05E8 \u05E0\u05E2\u05D9\u05DC\u05EA \u05D9\u05D7\u05E1 \u05E8\u05D5\u05D7\u05D1-\u05D2\u05D5\u05D1\u05D4";
var uD = "\u05E7\u05D1\u05E5";
var hD = "\u05D1\u05D8\u05DC \u05E7\u05D9\u05D1\u05D5\u05E5";
var mD = "\u05D4\u05D1\u05D0 \u05DC\u05EA\u05D7\u05EA\u05D9\u05EA";
var gD = "\u05D4\u05D6\u05D6 \u05D0\u05D7\u05D5\u05E8\u05D4";
var fD = "\u05D4\u05D6\u05D6 \u05E7\u05D3\u05D9\u05DE\u05D4";
var SD = "\u05D4\u05D1\u05D0 \u05DC\u05D7\u05D6\u05D9\u05EA";
var bD = "\u05D0\u05E4\u05E1 \u05D6\u05D5\u05D5\u05D9\u05EA";
var TD = "\u05E0\u05E2\u05DC";
var yD = "\u05E9\u05D7\u05E8\u05E8 \u05E0\u05E2\u05D9\u05DC\u05D4";
var wD = "\u05D4\u05D6\u05D6 \u05DC\u05D3\u05E3";
var xD = "\u05D4\u05E4\u05D5\u05DA \u05D0\u05D5\u05E4\u05E7\u05D9\u05EA";
var kD = "\u05D4\u05E4\u05D5\u05DA \u05D0\u05E0\u05DB\u05D9\u05EA";
var vD = "\u05D4\u05D6\u05D6";
var ID = "\u05D4\u05D1\u05D0 \u05DC\u05E7\u05D3\u05D9\u05DE\u05D4";
var CD = "\u05E7\u05D3\u05D9\u05DE\u05D4";
var DD = "\u05D0\u05D7\u05D5\u05E8\u05D4";
var PD = "\u05D1\u05D7\u05D6\u05E8\u05D4";
var MD = "\u05E9\u05E4\u05D4";
var aa = { "style.menu.color": QI, "style.menu.fill": eC, "style.menu.dash": tC, "style.menu.size": nC, "style.menu.keep.open": oC, "style.menu.font": rC, "style.menu.align": sC, styles: iC, "zoom.in": aC, "zoom.out": lC, to: dC, "menu.file": cC, "menu.edit": pC, "menu.view": uC, "menu.preferences": hC, "menu.sign.in": mC, "menu.sign.out": gC, "become.a.sponsor": fC, "zoom.to.selection": SC, "zoom.to.fit": bC, "zoom.to": TC, "preferences.dark.mode": yC, "preferences.focus.mode": wC, "preferences.debug.mode": xC, "preferences.show.grid": kC, "preferences.use.cad.selection": vC, "preferences.keep.stylemenu.open": IC, "preferences.always.show.snaps": CC, "preferences.rotate.handles": DC, "preferences.binding.handles": PC, "preferences.clone.handles": MC, undo: EC, redo: BC, cut: RC, copy: AC, paste: LC, "copy.as": HC, "export.as": zC, "select.all": OC, "select.none": FC, delete: jC, "new.project": GC, open: VC, save: $C, "save.as": NC, "upload.media": WC, "create.page": UC, "new.page": KC, "page.name": _C, duplicate: YC, cancel: ZC, "copy.invite.link": XC, "create.multiplayer.project": qC, "copy.multiplayer.project": JC, select: QC, eraser: eD, draw: tD, arrow: nD, text: oD, sticky: rD, rectangle: sD, ellipse: iD, triangle: aD, line: lD, rotate: dD, "lock.aspect.ratio": cD, "unlock.aspect.ratio": pD, group: uD, ungroup: hD, "move.to.back": mD, "move.backward": gD, "move.forward": fD, "move.to.front": SD, "reset.angle": bD, lock: TD, unlock: yD, "move.to.page": wD, "flip.horizontal": xD, "flip.vertical": kD, move: vD, "to.front": ID, forward: CD, backward: DD, back: PD, language: MD };
var ED = "Colore";
var BD = "Riempi";
var RD = "Tratteggo";
var AD = "Dimensione";
var LD = "Mantieni aperto";
var HD = "Font";
var zD = "Allineamento";
var OD = "Stile";
var FD = "Ingrandisci";
var jD = "Rimpicciolisci";
var GD = "Imposta";
var VD = "File";
var $D = "Modifica";
var ND = "Visualizzazione";
var WD = "Preferenze";
var UD = "Accedi";
var KD = "Esci";
var _D = "Sponsorizza";
var YD = "Adatta alla selezione";
var ZD = "Adatta";
var XD = "Ingrandisci";
var qD = "Modalit\xE0 scura";
var JD = "Modalit\xE0 zen";
var QD = "Modalit\xE0 sviluppatore";
var eP = "Mostra griglia";
var tP = "Selezione CAD";
var nP = "Mantieni menu stile aperto";
var oP = "Mostra sempre le guide";
var rP = "Controlli d'inclinazione";
var sP = "Controlli d'associazione";
var iP = "Controlli di clonazione";
var aP = "Annulla";
var lP = "Ripristina";
var dP = "Taglia";
var cP = "Copia";
var pP = "Incolla";
var uP = "Copia come";
var hP = "Esporta come";
var mP = "Seleziona tutto";
var gP = "Deseleziona tutto";
var fP = "Elimina";
var SP = "Nuovo progetto";
var bP = "Apri";
var TP = "Salva";
var yP = "Salva come";
var wP = "Carica contenuti multimediali";
var xP = "Crea nuova pagina";
var kP = "Nuova pagina";
var vP = "Nome pagina";
var IP = "Pagina";
var CP = "Duplica";
var DP = "Chiudi";
var PP = "Copia link invito";
var MP = "Crea progetto multiplayer";
var EP = "Trasforma in progetto multiplayer";
var BP = "Seleziona";
var RP = "Gomma";
var AP = "Matita";
var LP = "Freccia";
var HP = "Casella di testo";
var zP = "Post-it";
var OP = "Rettangolo";
var FP = "Ellisse";
var jP = "Triangolo";
var GP = "Linea";
var VP = "Ruota";
var $P = "Blocca rapporto lati";
var NP = "Sblocca rapporto lati";
var WP = "Raggruppa";
var UP = "Separa";
var KP = "Muovi in fondo";
var _P = "Sposta indietro";
var YP = "Sposta avanti";
var ZP = "Muovi in fronte";
var XP = "Reimposta angolo";
var qP = "Blocca";
var JP = "Sblocca";
var QP = "Trasferisci a pagina";
var eM = "Ribalta orizzontalmente";
var tM = "Ribalta verticalmente";
var nM = "Sposta";
var oM = "In primo piano";
var rM = "Sposta avanti";
var sM = "Sposta indietro";
var iM = "In fondo";
var aM = "Lingua";
var lM = "Posizione dock";
var dM = "In basso";
var cM = "Sinistra";
var pM = "Destra";
var uM = "In Alto";
var la = { "style.menu.color": ED, "style.menu.fill": BD, "style.menu.dash": RD, "style.menu.size": AD, "style.menu.keep.open": LD, "style.menu.font": HD, "style.menu.align": zD, styles: OD, "zoom.in": FD, "zoom.out": jD, to: GD, "menu.file": VD, "menu.edit": $D, "menu.view": ND, "menu.preferences": WD, "menu.sign.in": UD, "menu.sign.out": KD, "become.a.sponsor": _D, "zoom.to.selection": YD, "zoom.to.fit": ZD, "zoom.to": XD, "preferences.dark.mode": qD, "preferences.focus.mode": JD, "preferences.debug.mode": QD, "preferences.show.grid": eP, "preferences.use.cad.selection": tP, "preferences.keep.stylemenu.open": nP, "preferences.always.show.snaps": oP, "preferences.rotate.handles": rP, "preferences.binding.handles": sP, "preferences.clone.handles": iP, undo: aP, redo: lP, cut: dP, copy: cP, paste: pP, "copy.as": uP, "export.as": hP, "select.all": mP, "select.none": gP, delete: fP, "new.project": SP, open: bP, save: TP, "save.as": yP, "upload.media": wP, "create.page": xP, "new.page": kP, "page.name": vP, page: IP, duplicate: CP, cancel: DP, "copy.invite.link": PP, "create.multiplayer.project": MP, "copy.multiplayer.project": EP, select: BP, eraser: RP, draw: AP, arrow: LP, text: HP, sticky: zP, rectangle: OP, ellipse: FP, triangle: jP, line: GP, rotate: VP, "lock.aspect.ratio": $P, "unlock.aspect.ratio": NP, group: WP, ungroup: UP, "move.to.back": KP, "move.backward": _P, "move.forward": YP, "move.to.front": ZP, "reset.angle": XP, lock: qP, unlock: JP, "move.to.page": QP, "flip.horizontal": eM, "flip.vertical": tM, move: nM, "to.front": oM, forward: rM, backward: sM, back: iM, language: aM, "dock.position": lM, bottom: dM, left: cM, right: pM, top: uM };
var hM = "\u8272";
var mM = "\u5857\u308A\u3064\u3076\u3057";
var gM = "\u7DDA";
var fM = "\u592A\u3055/\u30B5\u30A4\u30BA";
var SM = "\u5E38\u306B\u8868\u793A";
var bM = "\u30D5\u30A9\u30F3\u30C8";
var TM = "\u914D\u7F6E";
var yM = "\u30B9\u30BF\u30A4\u30EB";
var wM = "\u62E1\u5927";
var xM = "\u7E2E\u5C0F";
var kM = " ";
var vM = "\u30D5\u30A1\u30A4\u30EB";
var IM = "\u7DE8\u96C6";
var CM = "\u8868\u793A";
var DM = "\u8A2D\u5B9A";
var PM = "\u30B5\u30A4\u30F3\u30A4\u30F3";
var MM = "\u30B5\u30A4\u30F3\u30A2\u30A6\u30C8";
var EM = "\u652F\u63F4\u3059\u308B";
var BM = "\u9078\u629E\u3057\u305F\u30A2\u30A4\u30C6\u30E0\u306B\u5408\u308F\u305B\u3066\u62E1\u5927";
var RM = "\u62E1\u5927\u3057\u3066\u3059\u3079\u3066\u3092\u8868\u793A";
var AM = "\u62E1\u5927\u7387";
var LM = "\u30C0\u30FC\u30AF\u30E2\u30FC\u30C9";
var HM = "\u30D5\u30A9\u30FC\u30AB\u30B9\u30E2\u30FC\u30C9";
var zM = "\u30C7\u30D0\u30C3\u30B0\u30E2\u30FC\u30C9";
var OM = "\u30B0\u30EA\u30C3\u30C9\u3092\u8868\u793A";
var FM = "CAD\u306E\u9078\u629E\u6CD5\u3092\u4F7F\u7528";
var jM = "\u30B9\u30BF\u30A4\u30EB\u30E1\u30CB\u30E5\u30FC\u3092\u5E38\u306B\u8868\u793A";
var GM = "\u30B9\u30CA\u30C3\u30D7\u3092\u5E38\u306B\u8868\u793A";
var VM = "\u56DE\u8EE2\u30CF\u30F3\u30C9\u30EB\u3092\u8868\u793A";
var $M = "\u7D50\u5408\u30CF\u30F3\u30C9\u30EB\u3092\u8868\u793A";
var NM = "\u30AF\u30ED\u30FC\u30F3\u30CF\u30F3\u30C9\u30EB\u3092\u8868\u793A";
var WM = "\u5143\u306B\u623B\u3059";
var UM = "\u3084\u308A\u76F4\u3057";
var KM = "\u5207\u308A\u53D6\u308A";
var _M = "\u30B3\u30D4\u30FC";
var YM = "\u8CBC\u308A\u4ED8\u3051";
var ZM = "\u5F62\u5F0F\u3092\u9078\u629E\u3057\u3066\u30B3\u30D4\u30FC";
var XM = "\u5F62\u5F0F\u3092\u9078\u629E\u3057\u3066\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8";
var qM = "\u3059\u3079\u3066\u9078\u629E";
var JM = "\u9078\u629E\u3092\u89E3\u9664";
var QM = "\u524A\u9664";
var eE = "\u65B0\u3057\u3044\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8";
var tE = "\u958B\u304F";
var nE = "\u4FDD\u5B58";
var oE = "\u540D\u524D\u3092\u3064\u3051\u3066\u4FDD\u5B58";
var rE = "\u30E1\u30C7\u30A3\u30A2\u3092\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9";
var sE = "\u30DA\u30FC\u30B8\u3092\u4F5C\u6210";
var iE = "\u65B0\u898F\u30DA\u30FC\u30B8";
var aE = "\u30DA\u30FC\u30B8\u540D";
var lE = "\u8907\u88FD";
var dE = "\u30AD\u30E3\u30F3\u30BB\u30EB";
var cE = "\u5171\u6709\u30EA\u30F3\u30AF\u3092\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u306B\u30B3\u30D4\u30FC";
var pE = "\u30DE\u30EB\u30C1\u30D7\u30EC\u30A4\u30E4\u30FC\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u3092\u4F5C\u6210";
var uE = "\u30DE\u30EB\u30C1\u30D7\u30EC\u30A4\u30E4\u30FC\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u306B\u30B3\u30D4\u30FC";
var hE = "\u9078\u629E";
var mE = "\u6D88\u3057\u30B4\u30E0";
var gE = "\u63CF\u753B";
var fE = "\u77E2\u5370";
var SE = "\u30C6\u30AD\u30B9\u30C8";
var bE = "\u3075\u305B\u3093";
var TE = "\u9577\u65B9\u5F62";
var yE = "\u6955\u5186\u5F62";
var wE = "\u4E09\u89D2\u5F62";
var xE = "\u7DDA";
var kE = "\u56DE\u8EE2";
var vE = "\u7E26\u6A2A\u6BD4\u3092\u56FA\u5B9A";
var IE = "\u7E26\u6A2A\u6BD4\u306E\u56FA\u5B9A\u3092\u89E3\u9664";
var CE = "\u30B0\u30EB\u30FC\u30D4\u30F3\u30B0";
var DE = "\u30B0\u30EB\u30FC\u30D7\u89E3\u9664";
var PE = "\u6700\u80CC\u9762\u306B\u79FB\u52D5";
var ME = "\u3072\u3068\u3064\u5F8C\u308D\u306B\u79FB\u52D5";
var EE = "\u3072\u3068\u3064\u524D\u306B\u79FB\u52D5";
var BE = "\u6700\u524D\u9762\u306B\u79FB\u52D5";
var RE2 = "\u89D2\u5EA6\u3092\u521D\u671F\u5316";
var AE = "\u30ED\u30C3\u30AF";
var LE = "\u30A2\u30F3\u30ED\u30C3\u30AF";
var HE = "\u30DA\u30FC\u30B8\u3078\u79FB\u52D5";
var zE = "\u6C34\u5E73\u65B9\u5411\u306B\u53CD\u8EE2";
var OE = "\u5782\u76F4\u65B9\u5411\u306B\u53CD\u8EE2";
var FE = "\u79FB\u52D5";
var jE = "\u6700\u524D\u9762\u3078";
var GE = "\u3072\u3068\u3064\u524D\u3078";
var VE = "\u3072\u3068\u3064\u5F8C\u308D\u3078";
var $E = "\u6700\u80CC\u9762\u3078";
var NE = "\u8A00\u8A9E";
var da = { "style.menu.color": hM, "style.menu.fill": mM, "style.menu.dash": gM, "style.menu.size": fM, "style.menu.keep.open": SM, "style.menu.font": bM, "style.menu.align": TM, styles: yM, "zoom.in": wM, "zoom.out": xM, to: kM, "menu.file": vM, "menu.edit": IM, "menu.view": CM, "menu.preferences": DM, "menu.sign.in": PM, "menu.sign.out": MM, "become.a.sponsor": EM, "zoom.to.selection": BM, "zoom.to.fit": RM, "zoom.to": AM, "preferences.dark.mode": LM, "preferences.focus.mode": HM, "preferences.debug.mode": zM, "preferences.show.grid": OM, "preferences.use.cad.selection": FM, "preferences.keep.stylemenu.open": jM, "preferences.always.show.snaps": GM, "preferences.rotate.handles": VM, "preferences.binding.handles": $M, "preferences.clone.handles": NM, undo: WM, redo: UM, cut: KM, copy: _M, paste: YM, "copy.as": ZM, "export.as": XM, "select.all": qM, "select.none": JM, delete: QM, "new.project": eE, open: tE, save: nE, "save.as": oE, "upload.media": rE, "create.page": sE, "new.page": iE, "page.name": aE, duplicate: lE, cancel: dE, "copy.invite.link": cE, "create.multiplayer.project": pE, "copy.multiplayer.project": uE, select: hE, eraser: mE, draw: gE, arrow: fE, text: SE, sticky: bE, rectangle: TE, ellipse: yE, triangle: wE, line: xE, rotate: kE, "lock.aspect.ratio": vE, "unlock.aspect.ratio": IE, group: CE, ungroup: DE, "move.to.back": PE, "move.backward": ME, "move.forward": EE, "move.to.front": BE, "reset.angle": RE2, lock: AE, unlock: LE, "move.to.page": HE, "flip.horizontal": zE, "flip.vertical": OE, move: FE, "to.front": jE, forward: GE, backward: VE, back: $E, language: NE };
var WE = "\uC0C9\uAE54";
var UE = "\uCC44\uC6B0\uAE30";
var KE = "\uD14C\uB450\uB9AC";
var _E = "\uD06C\uAE30";
var YE = "\uD56D\uC0C1 \uC5F4\uAE30";
var ZE = "\uAE00\uAF34";
var XE = "\uC815\uB82C";
var qE = "\uC2A4\uD0C0\uC77C";
var JE = "\uD655\uB300";
var QE = "\uCD95\uC18C";
var eB = "To";
var tB = "\uB3C4\uAD6C";
var nB = "\uBCC0\uD658";
var oB = "\uD30C\uC77C";
var rB = "\uD3B8\uC9D1";
var sB = "\uBCF4\uAE30";
var iB = "\uC124\uC815";
var aB = "\uB85C\uADF8\uC778";
var lB = "\uB85C\uADF8\uC544\uC6C3";
var dB = "\uD6C4\uC6D0\uC790 \uB418\uAE30";
var cB = "\uCEE8\uD150\uCE20\uB85C \uB3CC\uC544\uAC00\uAE30";
var pB = "\uC120\uD0DD \uC694\uC18C\uC5D0 \uB9DE\uCD94\uAE30";
var uB = "\uC804\uCCB4\uC5D0 \uB9DE\uCD94\uAE30";
var hB = "\uB9DE\uCD94\uAE30";
var mB = "\uB2E4\uD06C \uBAA8\uB4DC";
var gB = "\uC9D1\uC911 \uBAA8\uB4DC";
var fB = "\uB514\uBC84\uADF8 \uBAA8\uB4DC";
var SB = "\uACA9\uC790 \uBCF4\uAE30";
var bB = "CAD \uC120\uD0DD \uC0AC\uC6A9";
var TB = "\uC2A4\uD0C0\uC77C \uBA54\uB274 \uD56D\uC0C1 \uC5F4\uAE30";
var yB = "Snap \uD56D\uC0C1 \uC5F4\uAE30";
var wB = "\uD68C\uC804 \uBCF4\uC774\uAE30";
var xB = "\uBC14\uC778\uB529 \uBCF4\uC774\uAE30";
var kB = "\uBCF5\uC81C \uBCF4\uC774\uAE30";
var vB = "\uC2E4\uD589\uCDE8\uC18C";
var IB = "\uC7AC\uC2E4\uD589";
var CB = "\uC790\uB974\uAE30";
var DB = "\uBCF5\uC0AC";
var PB = "\uBD99\uC5EC\uB123\uAE30";
var MB = "\uC774\uBBF8\uC9C0\uB85C \uBCF5\uC0AC";
var EB = "\uB0B4\uBCF4\uB0B4\uAE30";
var BB = "\uC804\uCCB4 \uC120\uD0DD";
var RB = "\uC120\uD0DD \uD574\uC81C";
var AB = "\uC0AD\uC81C";
var LB = "\uC0C8 \uD504\uB85C\uC81D\uD2B8";
var HB = "\uC5F4\uAE30";
var zB = "\uC800\uC7A5";
var OB = "\uB2E4\uB978 \uC774\uB984\uC73C\uB85C \uC800\uC7A5";
var FB = "\uBBF8\uB514\uC5B4 \uC5C5\uB85C\uB4DC";
var jB = "\uC0C8 \uD398\uC774\uC9C0 \uC0DD\uC131";
var GB = "\uC0C8 \uD398\uC774\uC9C0";
var VB = "\uD398\uC774\uC9C0 \uC774\uB984";
var $B = "\uBCF5\uC81C";
var NB = "\uCDE8\uC18C";
var WB = "\uCD08\uB300 \uB9C1\uD06C \uBCF5\uC0AC";
var UB = "\uC77D\uAE30 \uC804\uC6A9 \uB9C1\uD06C \uBCF5\uC0AC";
var KB = "\uC2E4\uC2DC\uAC04 \uD611\uC5C5 \uD504\uB85C\uC81D\uD2B8 \uC0DD\uC131";
var _B = "\uC2E4\uC2DC\uAC04 \uD611\uC5C5 \uD504\uB85C\uC81D\uD2B8\uB85C \uBCF5\uC81C";
var YB = "\uC120\uD0DD";
var ZB = "\uC9C0\uC6B0\uAC1C";
var XB = "\uD39C";
var qB = "\uD654\uC0B4\uD45C";
var JB = "\uD14D\uC2A4\uD2B8";
var QB = "\uC2A4\uD2F0\uD0A4\uB178\uD2B8";
var e22 = "\uC0AC\uAC01\uD615";
var t22 = "\uC6D0";
var n22 = "\uC0BC\uAC01\uD615";
var o22 = "\uC120";
var r22 = "\uD68C\uC804";
var s22 = "\uBE44\uC728 \uC7A0\uAE08";
var i22 = "\uBE44\uC728 \uC7A0\uAE08 \uD574\uC81C";
var a22 = "\uADF8\uB8F9\uD654";
var l22 = "\uADF8\uB8F9\uD654 \uD574\uC81C";
var d22 = "\uB9E8 \uB4A4\uB85C \uBCF4\uB0B4\uAE30";
var c22 = "\uB4A4\uB85C \uBCF4\uB0B4\uAE30";
var p22 = "\uC55E\uC73C\uB85C \uAC00\uC838\uC624\uAE30";
var u22 = "\uB9E8 \uC55E\uC73C\uB85C \uAC00\uC838\uC624\uAE30";
var h22 = "\uD68C\uC804 \uCD08\uAE30\uD654";
var m22 = "\uC7A0\uAE08";
var g22 = "\uC7A0\uAE08 \uD574\uC81C";
var f22 = "\uC815\uB82C / \uAC04\uACA9 \uB9DE\uCD94\uAE30";
var S22 = "\uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
var b22 = "\uC88C\uC6B0 \uB300\uCE6D";
var T22 = "\uC0C1\uD558 \uB300\uCE6D";
var y22 = "\uC21C\uC11C";
var w22 = "\uB9E8 \uC55E\uC73C\uB85C";
var x22 = "\uC55E\uC73C\uB85C";
var k22 = "\uB4A4\uB85C";
var v22 = "\uB9E8 \uB4A4\uB85C";
var I22 = "\uC5B8\uC5B4";
var C22 = "\uB354 \uC54C\uC544\uBCF4\uAE30";
var D22 = "\uB3C5 \uC704\uCE58";
var P22 = "\uD558\uB2E8";
var M22 = "\uC67C\uCABD";
var E22 = "\uC624\uB978\uCABD";
var B22 = "\uC0C1\uB2E8";
var R22 = "\uD398\uC774\uC9C0";
var A22 = "\uD0A4\uBCF4\uB4DC \uB2E8\uCD95\uD0A4";
var L22 = "\uAC80\uC0C9";
var H22 = "\uB85C\uB529{dots}";
var z22 = "\uBC30\uACBD \uB0B4\uBCF4\uB0B4\uAE30";
var O22 = "\uD22C\uBA85";
var F22 = "\uC790\uB3D9";
var j22 = "\uB77C\uC774\uD2B8";
var G22 = "\uB2E4\uD06C";
var V22 = "Github";
var $22 = "Twitter";
var N22 = "Discord";
var W22 = "\uC774\uBBF8\uC9C0";
var U22 = "\uC67C\uCABD \uC815\uB82C";
var K22 = "\uC218\uD3C9 \uC911\uC559 \uC815\uB82C";
var _22 = "\uC624\uB978\uCABD \uC815\uB82C";
var Y22 = "\uC0C1\uB2E8 \uC815\uB82C";
var Z22 = "\uC218\uC9C1 \uC911\uC559 \uC815\uB82C";
var X22 = "\uD558\uB2E8 \uC815\uB82C";
var q22 = "\uAC00\uB85C \uAC04\uACA9 \uB9DE\uCD94\uAE30";
var J22 = "\uC138\uB85C \uAC04\uACA9 \uB9DE\uCD94\uAE30";
var Q22 = "\uC218\uD3C9\uC73C\uB85C \uB298\uB9AC\uAE30";
var eR = "\uC218\uC9C1\uC73C\uB85C \uB298\uB9AC\uAE30";
var tR = "\uD604\uC7AC \uD504\uB85C\uC81D\uD2B8\uB97C \uC800\uC7A5\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?";
var nR = "\uBCC0\uACBD\uC0AC\uD56D\uC744 \uD604\uC7AC \uD504\uB85C\uC81D\uD2B8\uC5D0 \uC800\uC7A5\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?";
var oR = "\uCDE8\uC18C";
var rR = "\uC544\uB2C8\uC624";
var sR = "\uB124";
var iR = "\uD30C\uC77C \uC774\uB984\uC744 \uC785\uB825\uD574\uC8FC\uC138\uC694";
var aR = "\uC0C8\uB85C\uC6B4 tldraw\uB97C \uC0AC\uC6A9\uD574\uBCF4\uC138\uC694";
var ca = { "style.menu.color": WE, "style.menu.fill": UE, "style.menu.dash": KE, "style.menu.size": _E, "style.menu.keep.open": YE, "style.menu.font": ZE, "style.menu.align": XE, styles: qE, "zoom.in": JE, "zoom.out": QE, to: eB, "menu.tools": tB, "menu.transform": nB, "menu.file": oB, "menu.edit": rB, "menu.view": sB, "menu.preferences": iB, "menu.sign.in": aB, "menu.sign.out": lB, "become.a.sponsor": dB, "zoom.to.content": cB, "zoom.to.selection": pB, "zoom.to.fit": uB, "zoom.to": hB, "preferences.dark.mode": mB, "preferences.focus.mode": gB, "preferences.debug.mode": fB, "preferences.show.grid": SB, "preferences.use.cad.selection": bB, "preferences.keep.stylemenu.open": TB, "preferences.always.show.snaps": yB, "preferences.rotate.handles": wB, "preferences.binding.handles": xB, "preferences.clone.handles": kB, undo: vB, redo: IB, cut: CB, copy: DB, paste: PB, "copy.as": MB, "export.as": EB, "select.all": BB, "select.none": RB, delete: AB, "new.project": LB, open: HB, save: zB, "save.as": OB, "upload.media": FB, "create.page": jB, "new.page": GB, "page.name": VB, duplicate: $B, cancel: NB, "copy.invite.link": WB, "copy.readonly.link": UB, "create.multiplayer.project": KB, "copy.multiplayer.project": _B, select: YB, eraser: ZB, draw: XB, arrow: qB, text: JB, sticky: QB, rectangle: e22, ellipse: t22, triangle: n22, line: o22, rotate: r22, "lock.aspect.ratio": s22, "unlock.aspect.ratio": i22, group: a22, ungroup: l22, "move.to.back": d22, "move.backward": c22, "move.forward": p22, "move.to.front": u22, "reset.angle": h22, lock: m22, unlock: g22, "align.distribute": f22, "move.to.page": S22, "flip.horizontal": b22, "flip.vertical": T22, move: y22, "to.front": w22, forward: x22, backward: k22, back: v22, language: I22, "translation.link": C22, "dock.position": D22, bottom: P22, left: M22, right: E22, top: B22, page: R22, "keyboard.shortcuts": A22, search: L22, loading: H22, "export.background": z22, transparent: O22, auto: F22, light: j22, dark: G22, github: V22, twitter: $22, discord: N22, image: W22, "align.left": U22, "align.center.x": K22, "align.right": _22, "align.top": Y22, "align.center.y": Z22, "align.bottom": X22, "distribute.x": q22, "distribute.y": J22, "stretch.x": Q22, "stretch.y": eR, "dialog.save.firsttime": tR, "dialog.save.again": nR, "dialog.cancel": oR, "dialog.no": rR, "dialog.yes": sR, "enter.file.name": iR, "tldraw-beta": aR };
var lR = "\u0631\u06D5\u0646\u06AF";
var dR = "\u067E\u0695\u06A9\u0631\u062F\u0646\u06D5\u0648\u06D5";
var cR = "\u0644\u06D5\u062A \u0644\u06D5\u062A";
var pR = "\u0642\u06D5\u0628\u0627\u0631\u06D5";
var uR = "\u0628\u06D5 \u06A9\u0631\u0627\u0648\u06D5\u06CC\u06CC \u0628\u0645\u06CE\u0646\u06D5\u0631\u06D5\u0648\u06D5";
var hR = "\u0647\u06CE\u06B5";
var mR = "\u0695\u06CE\u06A9\u062E\u0633\u062A\u0646";
var gR = "\u0646\u06D5\u062E\u0634\u06D5\u06A9\u0627\u0646";
var fR = "\u0647\u06CE\u0646\u0627\u0646\u06D5 \u067E\u06CE\u0634\u06D5\u0648\u06D5";
var SR = "\u062F\u0648\u0648\u0631 \u062E\u0633\u062A\u0646\u06D5\u0648\u06D5";
var bR = "\u0628\u06C6";
var TR = "\u0626\u0627\u0645\u0631\u0627\u0632\u06D5\u06A9\u0627\u0646";
var yR = "\u06AF\u06C6\u0695\u06CC\u0646";
var wR = "\u0641\u0627\u06CC\u0644\u06CE\u06A9";
var xR = "\u062F\u06D5\u0633\u062A\u06A9\u0627\u0631\u06CC";
var kR = "\u062F\u06CC\u0645\u06D5\u0646";
var vR = "\u062E\u0648\u0627\u0633\u062A";
var IR = "\u0686\u0648\u0648\u0646\u06D5 \u0698\u0648\u0648\u0631\u06D5\u0648\u06D5";
var CR = "\u062F\u06D5\u0631\u0686\u0648\u0648\u0646";
var DR = "\u0633\u067E\u06C6\u0646\u0633\u06D5\u0631 \u0628\u06D5";
var PR = "\u0632\u0648\u0648\u0645 \u0628\u06A9\u06D5 \u0628\u06C6 \u0646\u0627\u0648\u06D5\u0695\u06C6\u06A9";
var MR = "\u0632\u0648\u0648\u0645 \u0628\u06A9\u06D5 \u0628\u06C6 \u0647\u06D5\u06B5\u0628\u0698\u0627\u0631\u062F\u0646";
var ER = "\u0632\u0648\u0648\u0645 \u0628\u06A9\u06D5 \u0628\u06C6 \u0626\u06D5\u0648\u06D5\u06CC \u0644\u06D5\u06AF\u06D5\u06B5\u06CC\u062F\u0627 \u0628\u06AF\u0648\u0646\u062C\u06CE\u062A";
var BR = "\u0632\u0648\u0648\u0645 \u0628\u06A9\u06D5 \u0628\u06C6";
var RR = "\u062F\u06C6\u062E\u06CC \u062A\u0627\u0631\u06CC\u06A9";
var AR = "\u062F\u06C6\u062E\u06CC \u0641\u06C6\u06A9\u06D5\u0633";
var LR = "\u0645\u06C6\u062F\u06CC \u0647\u06D5\u06B5\u06D5\u062F\u06C6\u0632\u06CC\u0646";
var HR = "\u062A\u06C6\u0695\u06CC \u067E\u06CC\u0634\u0627\u0646 \u0628\u062F\u06D5";
var zR = "\u0628\u06D5\u06A9\u0627\u0631\u0628\u0647\u06CE\u0646\u06D5 CAD \u0647\u06D5\u06B5\u0628\u0698\u0627\u0631\u062F\u0646\u06CC";
var OR = "\u0645\u06CE\u0646\u06C6\u06CC \u0633\u062A\u0627\u06CC\u0644 \u0628\u06D5 \u06A9\u0631\u0627\u0648\u06D5\u06CC\u06CC \u0628\u0647\u06CE\u06B5\u06D5\u0631\u06D5\u0648\u06D5";
var FR = "\u0647\u06D5\u0645\u06CC\u0634\u06D5 \u0648\u06CE\u0646\u06D5\u06CC \u062E\u06CE\u0631\u0627 \u067E\u06CC\u0634\u0627\u0646 \u0628\u062F\u06D5";
var jR = "\u0633\u0648\u0631\u0627\u0646\u06D5\u0648\u06D5\u06CC \u062F\u06D5\u0633\u062A\u06D5\u06A9\u0627\u0646";
var GR = "\u0628\u06D5\u0633\u062A\u0646\u06D5\u0648\u06D5\u06CC \u062F\u06D5\u0633\u062A\u06D5\u06A9\u0627\u0646";
var VR = "\u06A9\u0644\u06C6\u0646 \u06A9\u0631\u062F\u0646\u06CC \u062F\u06D5\u0633\u062A\u06D5\u06A9\u0627\u0646";
var $R = "\u067E\u0627\u0634\u06D5\u06A9\u0634\u06D5 \u0628\u06A9\u06D5";
var NR = "\u062F\u0648\u0648\u0628\u0627\u0631\u06D5 \u0628\u06CC\u06A9\u06D5\u0631\u06D5\u0648\u06D5";
var WR = "\u0628\u0695\u06CC\u0646";
var UR = "\u06A9\u06C6\u067E\u06CC \u0628\u06A9\u06D5";
var KR = "\u067E\u06D5\u06CC\u0633\u062A \u0628\u06A9\u06D5";
var _R = "\u06A9\u06C6\u067E\u06CC \u0648\u06D5\u06A9";
var YR = "\u0647\u06D5\u0646\u0627\u0631\u062F\u06D5\u06A9\u0631\u062F\u0646 \u0648\u06D5\u06A9";
var ZR = "\u0647\u06D5\u0645\u0648\u0648\u06CC\u0627\u0646 \u0647\u06D5\u06B5\u0628\u0698\u06CE\u0631\u0647";
var XR = "\u0647\u06CC\u0686 \u0647\u0647\u200C\u06B5\u0645\u0647\u200C\u0628\u0698\u06CE\u0631\u0647\u200C";
var qR = "\u0633\u0695\u06CC\u0646\u06D5\u0648\u06D5";
var JR = "\u067E\u0695\u06C6\u0698\u06D5\u06CC \u0646\u0648\u06CE";
var QR = "\u06A9\u0631\u062F\u0646\u06D5\u0648\u06D5";
var eA = "\u0647\u06D5\u06B5\u06AF\u0631\u062A\u0646";
var tA = "\u0647\u06D5\u06B5\u06AF\u0631\u062A\u0646 \u0648\u06D5\u06A9";
var nA = "\u062F\u0627\u06AF\u0631\u062A\u0646\u06CC \u0645\u06CC\u062F\u06CC\u0627";
var oA = "\u062F\u0631\u0648\u0633\u062A\u06A9\u0631\u062F\u0646\u06CC \u0644\u0627\u067E\u06D5\u0695\u06D5";
var rA = "\u0644\u0627\u067E\u06D5\u0695\u06D5\u06CC \u0646\u0648\u06CE";
var sA = "\u0646\u0627\u0648\u06CC \u0644\u0627\u067E\u06D5\u0695\u06D5";
var iA = "\u062F\u0648\u0648\u0628\u0627\u0631\u06D5\u06A9\u0631\u062F\u0646\u06D5\u0648\u06D5";
var aA = "\u0695\u06D5\u062A\u06A9\u0631\u062F\u0646\u06D5\u0648\u06D5";
var lA = "\u0644\u06CC\u0646\u06A9\u06CC \u0628\u0627\u0646\u06AF\u0647\u06CE\u0634\u062A\u06A9\u0631\u062F\u0646 \u06A9\u06C6\u067E\u06CC \u0628\u06A9\u06D5";
var dA = "\u0628\u06D5 \u0634\u06CE\u0648\u06D5\u06CC\u06D5\u06A9\u06CC \u0647\u06D5\u0695\u06D5\u0645\u06D5\u06A9\u06CC \u06A9\u06C6\u067E\u06CC \u0628\u06A9\u06D5";
var cA = "\u062F\u0631\u0648\u0633\u062A\u06A9\u0631\u062F\u0646\u06CC \u067E\u0631\u06C6\u0698\u06D5\u06CC \u0641\u0631\u06D5 \u0628\u06D5\u06A9\u0627\u0631\u0647\u06CE\u0646\u06D5\u0631";
var pA = "\u06A9\u06C6\u067E\u06CC \u0628\u06A9\u06D5 \u0628\u06C6 \u067E\u0695\u06C6\u0698\u06D5\u06CC\u06D5\u06A9\u06CC \u0641\u0631\u06D5 \u0628\u06D5\u06A9\u0627\u0631\u0647\u06CE\u0646\u06D5\u0631";
var uA = "\u062F\u06D5\u0633\u0646\u06CC\u0627\u0634\u0646\u06A9\u0631\u062F\u0646";
var hA = "\u0633\u0695\u06D5\u0631\u06D5\u0648\u06D5";
var mA = "\u0648\u06CE\u0646\u06D5\u06A9\u06CE\u0634\u0627\u0646";
var gA = "\u062A\u06CC\u0631";
var fA = "\u062F\u06D5\u0642";
var SA = "\u0686\u06D5\u0633\u067E\u0627\u0648";
var bA = "\u0644\u0627\u06A9\u06CE\u0634\u06D5";
var TA = "\u0628\u06CC\u0628\u0644\u06CC";
var yA = "\u0633\u06CE\u06AF\u06C6\u0634\u06D5";
var wA = "\u0647\u06CE\u06B5";
var xA = "\u0633\u0648\u0695\u0627\u0646\u06D5\u0648\u06D5";
var kA = "\u0642\u0641\u06B5\u06A9\u0631\u062F\u0646\u06CC \u0695\u06CE\u0698\u06D5\u06CC \u0695\u0648\u0648\u0628\u06D5\u0631\u06CC";
var vA = "\u06A9\u0631\u062F\u0646\u06D5\u0648\u06D5\u06CC \u0695\u06CE\u0698\u06D5\u06CC \u0695\u0648\u0648\u0628\u06D5\u0631\u06CC";
var IA = "\u06A9\u06C6\u0645\u06D5\u06B5\u06D5";
var CA = "\u0644\u0627\u0628\u0631\u062F\u0646\u06CC \u06A9\u06C6\u0645\u06D5\u06B5\u06D5";
var DA = "\u0628\u0686\u06C6 \u0628\u06C6 \u067E\u0634\u062A\u06D5\u0648\u06D5";
var PA = "\u0628\u06D5\u0631\u06D5\u0648 \u062F\u0648\u0627\u0648\u06D5";
var MA = "\u0628\u0695\u06C6 \u067E\u06CE\u0634\u06D5\u0648\u06D5";
var EA = "\u0628\u06AF\u0648\u0627\u0632\u0631\u06CE\u062A\u06D5\u0648\u06D5 \u0628\u06C6 \u067E\u06CE\u0634\u06D5\u0648\u06D5";
var BA = "\u06AF\u06C6\u0634\u06D5\u06CC \u067E\u0634\u0648\u0648\u062F\u0627\u0646";
var RA = "\u0642\u0648\u0641\u06B5";
var AA = "\u0644\u0627\u0628\u0631\u062F\u0646\u06CC \u0642\u0648\u0641\u06B5";
var LA = "\u0628\u0686\u06C6 \u0628\u06C6 \u0644\u0627\u067E\u06D5\u0695\u06D5";
var HA = "\u0626\u0627\u0633\u06C6\u06CC\u06CC \u0648\u06D5\u0631\u06AF\u06D5\u0695\u0627\u0646\u062F\u0646";
var zA = "\u0633\u062A\u0648\u0646\u06CC \u0648\u06D5\u0631\u06AF\u06D5\u0695\u0627\u0646\u062F\u0646";
var OA = "\u062C\u0648\u0648\u06B5\u06D5";
var FA = "\u0628\u06C6 \u067E\u06CE\u0634\u06D5\u0648\u06D5";
var jA = "\u0628\u06C6\u067E\u0634\u062A\u06D5\u0648\u06D5";
var GA = "\u0628\u06C6\u062F\u0648\u0627\u0648\u06D5";
var VA = "\u06AF\u06D5\u0695\u0627\u0646\u06D5\u0648\u06D5";
var $A = "\u0632\u0645\u0627\u0646";
var NA = "\u0628\u06D5\u0633\u062A\u06D5\u0631\u06CC \u0648\u06D5\u0631\u06AF\u06CE\u0695\u0627\u0646";
var WA = "\u0634\u0648\u06CE\u0646\u06CC \u062F\u06C6\u06A9";
var UA = "\u062E\u0648\u0627\u0631\u06D5\u0648\u06D5";
var KA = "\u0686\u06D5\u067E";
var _A = "\u0695\u0627\u0633\u062A";
var YA = "\u0633\u06D5\u0631\u0648\u0648";
var ZA = "\u0644\u0627\u067E\u06D5\u0695\u06D5";
var XA = "\u06A9\u0648\u0631\u062A\u06A9\u0631\u0627\u0648\u06D5\u06A9\u0627\u0646\u06CC \u062A\u06D5\u062E\u062A\u06D5\u06A9\u0644\u06CC\u0644";
var qA = "\u06AF\u06D5\u0695\u0627\u0646";
var JA = "\u0628\u0627\u0631\u06A9\u0631\u062F\u0646";
var QA = "\u067E\u0627\u0634\u062E\u0627\u0646\u06CC \u0647\u06D5\u0646\u0627\u0631\u062F\u06D5\u06A9\u0631\u062F\u0646";
var eL = "\u0695\u0648\u0648\u0646";
var tL = "\u0626\u06C6\u062A\u06C6\u0645\u0627\u062A\u06CC\u06A9\u06CC";
var nL = "\u0631\u0648\u0648\u0646\u0627\u06A9";
var oL = "\u062A\u0627\u0631\u06CC\u06A9";
var pa = { "style.menu.color": lR, "style.menu.fill": dR, "style.menu.dash": cR, "style.menu.size": pR, "style.menu.keep.open": uR, "style.menu.font": hR, "style.menu.align": mR, styles: gR, "zoom.in": fR, "zoom.out": SR, to: bR, "menu.tools": TR, "menu.transform": yR, "menu.file": wR, "menu.edit": xR, "menu.view": kR, "menu.preferences": vR, "menu.sign.in": IR, "menu.sign.out": CR, "become.a.sponsor": DR, "zoom.to.content": PR, "zoom.to.selection": MR, "zoom.to.fit": ER, "zoom.to": BR, "preferences.dark.mode": RR, "preferences.focus.mode": AR, "preferences.debug.mode": LR, "preferences.show.grid": HR, "preferences.use.cad.selection": zR, "preferences.keep.stylemenu.open": OR, "preferences.always.show.snaps": FR, "preferences.rotate.handles": jR, "preferences.binding.handles": GR, "preferences.clone.handles": VR, undo: $R, redo: NR, cut: WR, copy: UR, paste: KR, "copy.as": _R, "export.as": YR, "select.all": ZR, "select.none": XR, delete: qR, "new.project": JR, open: QR, save: eA, "save.as": tA, "upload.media": nA, "create.page": oA, "new.page": rA, "page.name": sA, duplicate: iA, cancel: aA, "copy.invite.link": lA, "copy.readonly.link": dA, "create.multiplayer.project": cA, "copy.multiplayer.project": pA, select: uA, eraser: hA, draw: mA, arrow: gA, text: fA, sticky: SA, rectangle: bA, ellipse: TA, triangle: yA, line: wA, rotate: xA, "lock.aspect.ratio": kA, "unlock.aspect.ratio": vA, group: IA, ungroup: CA, "move.to.back": DA, "move.backward": PA, "move.forward": MA, "move.to.front": EA, "reset.angle": BA, lock: RA, unlock: AA, "move.to.page": LA, "flip.horizontal": HA, "flip.vertical": zA, move: OA, "to.front": FA, forward: jA, backward: GA, back: VA, language: $A, "translation.link": NA, "dock.position": WA, bottom: UA, left: KA, right: _A, top: YA, page: ZA, "keyboard.shortcuts": XA, search: qA, loading: JA, "export.background": QA, transparent: eL, auto: tL, light: nL, dark: oL };
var rL = "Color";
var sL = "Fill";
var iL = "Dash";
var aL = "Size";
var lL = "Keep Open";
var dL = "Font";
var cL = "Align";
var pL = "Styles";
var uL = "Zoom In";
var hL = "Zoom Out";
var mL = "To";
var gL = "Tools";
var fL = "Transform";
var SL = "File";
var bL = "Edit";
var TL = "View";
var yL = "Preferences";
var wL = "Sign In";
var xL = "Sign Out";
var kL = "Become a Sponsor";
var vL = "Back to content";
var IL = "Zoom to Selection";
var CL = "Zoom to Fit";
var DL = "Zoom to";
var PL = "Dark Mode";
var ML = "Focus Mode";
var EL = "Debug Mode";
var BL = "Show Grid";
var RL = "Use CAD Selection";
var AL = "Keep Style Menu Open";
var LL = "Always Show Snaps";
var HL = "Rotate Handles";
var zL = "Binding Handles";
var OL = "Clone Handles";
var FL = "Undo";
var jL = "Redo";
var GL = "Cut";
var VL = "Copy";
var $L = "Paste";
var NL = "Copy As";
var WL = "Export As";
var UL = "Select All";
var KL = "Select None";
var _L = "Delete";
var YL = "New Project";
var ZL = "Open";
var XL = "Save";
var qL = "Save As";
var JL = "Upload Media";
var QL = "Create Page";
var e5 = "New Page";
var t5 = "Page Name";
var n5 = "Duplicate";
var o5 = "Shape Options";
var r5 = "Shapes";
var s5 = "Cancel";
var i5 = "Copy Invite Link";
var a52 = "Copy ReadOnly Link";
var l52 = "Create a Multiplayer Project";
var d52 = "Copy to Multiplayer Project";
var c5 = "Select";
var p52 = "Eraser";
var u5 = "Draw";
var h52 = "Arrow";
var m52 = "Text";
var g52 = "Sticky";
var f5 = "Rectangle";
var S5 = "Ellipse";
var b52 = "Triangle";
var T5 = "Line";
var y52 = "Rotate";
var w52 = "Lock Aspect Ratio";
var x52 = "Unlock Aspect Ratio";
var k52 = "Group";
var v52 = "Ungroup";
var I5 = "Move to Back";
var C52 = "Move Backward";
var D52 = "Move Forward";
var P5 = "Move to Front";
var M5 = "Reset Angle";
var E52 = "Lock";
var B5 = "Unlock";
var R52 = "Align / Distribute";
var A5 = "Move to Page";
var L5 = "Flip Horizontal";
var H52 = "Flip Vertical";
var z5 = "Move";
var O5 = "To Front";
var F5 = "Forward";
var j5 = "Backward";
var G5 = "To Back";
var V5 = "Language";
var $5 = "Learn More";
var N5 = "Dock Position";
var W5 = "Bottom";
var U5 = "Left";
var K5 = "Right";
var _5 = "Top";
var Y5 = "Page";
var Z5 = "Keyboard shortcuts";
var X5 = "Search";
var q5 = "Loading{dots}";
var J5 = "Export Background";
var Q5 = "Transparent";
var e32 = "Auto";
var t32 = "Light";
var n32 = "Dark";
var o32 = "Github";
var r32 = "Twitter";
var s32 = "Discord";
var i32 = "Image";
var a32 = "Align Left";
var l32 = "Align Horizontal Center";
var d32 = "Align Right";
var c32 = "Align Top";
var p32 = "Align Vertical Center";
var u32 = "Align Bottom";
var h32 = "Distribute Horizontal";
var m32 = "Distribute Vertical";
var g32 = "Stretch Horizontal";
var f32 = "Stretch Vertical";
var S32 = "Do you want to save your current project?";
var b32 = "Do you want to save changes to your current project?";
var T32 = "Cancel";
var y32 = "No";
var w32 = "Yes";
var x32 = "Enter file name";
var k32 = "Try the new tldraw";
var v32 = "White";
var I3 = "Light gray";
var C32 = "Gray";
var D32 = "Black";
var P32 = "Green";
var M3 = "Cyan";
var E32 = "Blue";
var B32 = "Indigo";
var R32 = "Violet";
var A32 = "Red";
var L32 = "Orange";
var H32 = "Yellow";
var z32 = "Solid";
var O32 = "Dashed";
var F32 = "Dotted";
var j32 = "Small";
var G32 = "Medium";
var V32 = "Large";
var ua = { "style.menu.color": rL, "style.menu.fill": sL, "style.menu.dash": iL, "style.menu.size": aL, "style.menu.keep.open": lL, "style.menu.font": dL, "style.menu.align": cL, styles: pL, "zoom.in": uL, "zoom.out": hL, to: mL, "menu.tools": gL, "menu.transform": fL, "menu.file": SL, "menu.edit": bL, "menu.view": TL, "menu.preferences": yL, "menu.sign.in": wL, "menu.sign.out": xL, "become.a.sponsor": kL, "zoom.to.content": vL, "zoom.to.selection": IL, "zoom.to.fit": CL, "zoom.to": DL, "preferences.dark.mode": PL, "preferences.focus.mode": ML, "preferences.debug.mode": EL, "preferences.show.grid": BL, "preferences.use.cad.selection": RL, "preferences.keep.stylemenu.open": AL, "preferences.always.show.snaps": LL, "preferences.rotate.handles": HL, "preferences.binding.handles": zL, "preferences.clone.handles": OL, undo: FL, redo: jL, cut: GL, copy: VL, paste: $L, "copy.as": NL, "export.as": WL, "select.all": UL, "select.none": KL, delete: _L, "new.project": YL, open: ZL, save: XL, "save.as": qL, "upload.media": JL, "create.page": QL, "new.page": e5, "page.name": t5, duplicate: n5, "shape.options": o5, shapes: r5, cancel: s5, "copy.invite.link": i5, "copy.readonly.link": a52, "create.multiplayer.project": l52, "copy.multiplayer.project": d52, select: c5, eraser: p52, draw: u5, arrow: h52, text: m52, sticky: g52, rectangle: f5, ellipse: S5, triangle: b52, line: T5, rotate: y52, "lock.aspect.ratio": w52, "unlock.aspect.ratio": x52, group: k52, ungroup: v52, "move.to.back": I5, "move.backward": C52, "move.forward": D52, "move.to.front": P5, "reset.angle": M5, lock: E52, unlock: B5, "align.distribute": R52, "move.to.page": A5, "flip.horizontal": L5, "flip.vertical": H52, move: z5, "to.front": O5, forward: F5, backward: j5, back: G5, language: V5, "translation.link": $5, "dock.position": N5, bottom: W5, left: U5, right: K5, top: _5, page: Y5, "keyboard.shortcuts": Z5, search: X5, loading: q5, "export.background": J5, transparent: Q5, auto: e32, light: t32, dark: n32, github: o32, twitter: r32, discord: s32, image: i32, "align.left": a32, "align.center.x": l32, "align.right": d32, "align.top": c32, "align.center.y": p32, "align.bottom": u32, "distribute.x": h32, "distribute.y": m32, "stretch.x": g32, "stretch.y": f32, "dialog.save.firsttime": S32, "dialog.save.again": b32, "dialog.cancel": T32, "dialog.no": y32, "dialog.yes": w32, "enter.file.name": x32, "tldraw-beta": k32, white: v32, lightGray: I3, gray: C32, black: D32, green: P32, cyan: M3, blue: E32, indigo: B32, violet: R32, red: A32, orange: L32, yellow: H32, solid: z32, dashed: O32, dotted: F32, small: j32, medium: G32, large: V32 };
var $32 = "\u1021\u101B\u1031\u102C\u1004\u103A";
var N32 = "\u1021\u101B\u1031\u102C\u1004\u103A \u1011\u100A\u103A\u1037\u1019\u100A\u103A";
var W32 = "\u1019\u103B\u1025\u103A\u1038\u1005\u1000\u103A";
var U32 = "\u1021\u101B\u103D\u101A\u103A\u1021\u1005\u102C\u1038";
var K32 = "\u1016\u103D\u1004\u103A\u1037\u1011\u102C\u1038\u1019\u100A\u103A";
var _3 = "\u1005\u102C\u101E\u102C\u1038\u1016\u1031\u102C\u1004\u103A\u1037";
var Y3 = "\u1021\u1011\u102C\u1038\u1021\u101E\u102D\u102F";
var Z3 = "\u1005\u1010\u102D\u102F\u1004\u103A";
var X32 = "\u1021\u1000\u103C\u102E\u1038\u1001\u103B\u1032\u1037\u1019\u100A\u103A";
var q32 = "\u1015\u103C\u1014\u103A\u1000\u103B\u1025\u103A\u1038\u1019\u100A\u103A";
var J3 = "\u101E\u102D\u102F\u1037";
var Q3 = "\u1000\u102D\u101B\u102D\u101A\u102C\u1019\u103B\u102C\u1038";
var e8 = "\u1015\u103C\u1031\u102C\u1004\u103A\u1038\u101C\u100A\u103A\u101B\u1014\u103A";
var t8 = "\u1016\u102D\u102F\u1004\u103A";
var n8 = "\u1015\u103C\u102F\u1015\u103C\u1004\u103A";
var o8 = "\u1021\u1019\u103C\u1004\u103A";
var r8 = "\u1006\u1000\u103A\u1010\u1004\u103A";
var s8 = "\u101D\u1004\u103A\u1019\u100A\u103A";
var i8 = "\u1011\u103D\u1000\u103A\u1019\u100A\u103A";
var a8 = "\u1004\u103D\u1031\u1000\u103C\u1031\u1038\u1011\u1031\u102C\u1000\u103A\u1015\u1036\u1019\u100A\u103A";
var l8 = "\u1015\u1004\u103A\u1019\u1014\u1031\u101B\u102C\u101E\u102D\u102F\u1037 \u1015\u103C\u1014\u103A\u101E\u103D\u102C\u1038\u1019\u100A\u103A";
var d8 = "\u101B\u103D\u1031\u1038\u1011\u102C\u1038\u101E\u1031\u102C \u1014\u1031\u101B\u102C\u101E\u102D\u102F\u1037 \u1021\u102C\u101B\u102F\u1036\u1015\u103C\u102F\u1019\u100A\u103A";
var c8 = "\u1021\u1036\u1000\u102D\u102F\u1000\u103A\u1016\u103C\u1005\u103A\u1021\u1031\u102C\u1004\u103A \u1001\u103B\u1032\u1037\u1019\u100A\u103A";
var p8 = "\u1015\u102F\u1036\u1019\u103E\u1014\u103A\u1006\u102D\u102F\u1012\u103A\u101E\u102D\u102F\u1037 \u1001\u103B\u1032\u1037\u1019\u100A\u103A";
var u8 = "\u1021\u1019\u103E\u1031\u102C\u1004\u103A \u1019\u102F\u1012\u103A";
var h8 = "\u101B\u103E\u1004\u103A\u1038\u101B\u103E\u1004\u103A\u1038\u101C\u1004\u103A\u1038\u101C\u1004\u103A\u1038 \u1019\u102F\u1012\u103A";
var m8 = "\u1005\u1019\u103A\u1038\u101E\u1015\u103A \u1019\u102F\u1012\u103A";
var g8 = "\u1014\u1031\u102C\u1000\u103A\u1001\u1036 \u1007\u101A\u102C\u1038\u1000\u103D\u1000\u103A\u1015\u103C\u101B\u1014\u103A";
var f8 = "CAD \u1000\u1032\u1037\u101E\u102D\u102F\u1037 \u101B\u103D\u1031\u1038\u1001\u103B\u101A\u103A\u1019\u103E\u102F \u1015\u103C\u102F\u101C\u102F\u1015\u103A\u1019\u100A\u103A";
var S8 = "\u1005\u1010\u102D\u102F\u1004\u103A\u101C\u103A \u1019\u102E\u1014\u1030\u1038\u1000\u102D\u102F \u1021\u1019\u103C\u1032\u1016\u103D\u1004\u103A\u1037\u1011\u102C\u1038\u1019\u100A\u103A";
var b8 = "Always Show Snaps";
var T8 = "Rotate Handles";
var y8 = "Binding Handles";
var w8 = "Clone Handles";
var x8 = "\u1014\u1002\u102D\u102F\u1019\u1030\u101C\u101E\u102D\u102F\u1037 \u1015\u103C\u1014\u103A\u101C\u102F\u1015\u103A\u101B\u1014\u103A";
var k8 = "\u1015\u103C\u1014\u103A\u101C\u102F\u1015\u103A\u101B\u1014\u103A";
var v8 = "\u1016\u103C\u1010\u103A\u101A\u1030";
var I8 = "\u1000\u1030\u1038\u101A\u1030";
var C8 = "\u1000\u1030\u1038\u101E\u103D\u1004\u103A\u1038";
var D8 = "\u1000\u1030\u1038\u101A\u1030\u1019\u100A\u103A\u1037 \u1015\u102F\u1036\u1005\u1036";
var P8 = "\u1011\u102F\u1010\u103A\u1001\u103B\u1004\u103A\u101E\u100A\u103A\u1037 \u1015\u102F\u1036\u1005\u1036";
var M8 = "\u1021\u102C\u1038\u101C\u102F\u1036\u1038\u1000\u102D\u102F \u101B\u103D\u1031\u1038\u1001\u103B\u101A\u103A\u101B\u1014\u103A";
var E8 = "\u1010\u1005\u103A\u1001\u102F\u1019\u103E \u1019\u101B\u103D\u1031\u1038\u1010\u1031\u102C\u1037\u1015\u102B";
var B8 = "\u1016\u103B\u1000\u103A\u1019\u100A\u103A";
var R8 = "\u1015\u101B\u1031\u102C\u1002\u103B\u1000\u103A \u1021\u101E\u1005\u103A";
var A8 = "\u1016\u103D\u1004\u103A\u1037\u1019\u100A\u103A";
var L8 = "\u101E\u102D\u1019\u103A\u1038\u1019\u100A\u103A";
var H8 = "\u1021\u1001\u103C\u102C\u1038\u101E\u1031\u102C \u1015\u102F\u1036\u1005\u1036\u1016\u103C\u1004\u103A\u1037 \u101E\u102D\u1019\u103A\u1038\u1019\u100A\u103A";
var z8 = "\u1019\u102E\u1012\u102E\u101A\u102C\u1016\u102D\u102F\u1004\u103A\u1019\u103B\u102C\u1038 \u1010\u1004\u103A\u1019\u100A\u103A";
var O8 = "\u1005\u102C\u1019\u103B\u1000\u103A\u1014\u103E\u102C \u1021\u101E\u1005\u103A\u1016\u103D\u1004\u103A\u1037\u1019\u100A\u103A";
var F8 = "\u1005\u102C\u1019\u103B\u1000\u103A\u1014\u103E\u102C \u1021\u101E\u1005\u103A";
var j8 = "\u1005\u102C\u1019\u103B\u1000\u103A\u1014\u103E\u102C \u1021\u1019\u100A\u103A";
var G8 = "\u1015\u103D\u102C\u1038\u1019\u100A\u103A";
var V8 = "\u1019\u101C\u102F\u1015\u103A\u1010\u1031\u102C\u1037\u1015\u102B";
var $8 = "\u1016\u102D\u1010\u103A\u1000\u103C\u102C\u1038\u101B\u1014\u103A \u101C\u1004\u103A\u1037\u1001\u103A\u1000\u1030\u1038\u101A\u1030\u1019\u100A\u103A";
var N8 = "\u1000\u103C\u100A\u103A\u1037\u101B\u1030\u101B\u1014\u103A\u1021\u1010\u103D\u1000\u103A\u101E\u102C \u101C\u1004\u103A\u1037\u1001\u103A\u1000\u1030\u1038\u101A\u1030\u1019\u100A\u103A";
var W8 = "\u1021\u1019\u103B\u102C\u1038\u101E\u102F\u1036\u1038 \u1015\u101B\u1031\u102C\u1002\u103B\u1000\u103A\u1021\u1016\u103C\u1005\u103A \u1021\u101E\u1005\u103A\u1016\u1014\u103A\u1010\u102E\u1038\u1019\u100A\u103A";
var U8 = "\u1021\u1019\u103B\u102C\u1038\u101E\u102F\u1036\u1038 \u1015\u101B\u1031\u102C\u1002\u103B\u1000\u103A\u1021\u1016\u103C\u1005\u103A\u101E\u102D\u102F\u1037 \u1000\u1030\u1038\u101A\u1030\u1019\u100A\u103A";
var K8 = "\u101B\u103D\u1031\u1038\u1001\u103B\u101A\u103A\u1019\u103E\u102F";
var _8 = "\u1001\u1032\u1016\u103B\u1000\u103A";
var Y8 = "\u1001\u1032\u1010\u1036";
var Z8 = "\u1019\u103C\u103E\u102C\u1038";
var X8 = "\u1005\u102C\u101E\u102C\u1038";
var q8 = "\u1000\u1015\u103A\u1001\u103D\u102C\u1019\u103E\u1010\u103A\u1005\u102F";
var J8 = "\u101C\u1031\u1011\u1031\u102C\u1004\u103A\u1037";
var Q8 = "\u1018\u1032\u1025";
var e6 = "\u1010\u103C\u102D\u1002\u1036";
var t6 = "\u1019\u103B\u1025\u103A\u1038";
var n6 = "\u101C\u103E\u100A\u103A\u1037\u1019\u100A\u103A";
var o6 = "\u1021\u1001\u103B\u102D\u102F\u1038\u1021\u1005\u102C\u1038 \u1011\u102D\u1014\u103A\u1038\u1011\u102C\u1038\u1019\u100A\u103A";
var r6 = "\u1021\u1001\u103B\u102D\u102F\u1038\u1021\u1005\u102C\u1038 \u1019\u1011\u102D\u1014\u103A\u1038\u1010\u1031\u102C\u1037\u1015\u102B";
var s6 = "\u1021\u102F\u1015\u103A\u1005\u102F\u1016\u103D\u1032\u1037";
var i6 = "\u1021\u102F\u1015\u103A\u1005\u102F\u1001\u103D\u1032";
var a62 = "\u1014\u1031\u102C\u1000\u103A\u1006\u102F\u1036\u1038\u101E\u102D\u102F\u1037 \u1015\u102D\u102F\u1037\u1019\u100A\u103A";
var l62 = "\u1014\u1031\u102C\u1000\u103A\u101E\u102D\u102F\u1037 \u1010\u1005\u103A\u1006\u1004\u103A\u1037\u1015\u102D\u102F\u1037\u1019\u100A\u103A";
var d6 = "\u101B\u103E\u1031\u1037\u101E\u102D\u102F\u1037 \u1010\u1005\u103A\u1006\u1004\u103A\u1037\u1015\u102D\u102F\u1037\u1019\u100A\u103A";
var c6 = "\u101B\u103E\u1031\u1037\u1006\u102F\u1036\u1038\u101E\u102D\u102F\u1037 \u1015\u102D\u102F\u1037\u1019\u100A\u103A";
var p6 = "\u1014\u1002\u102D\u102F\u1019\u1030\u101C \u1011\u1031\u102C\u1004\u103A\u1037\u1001\u103B\u102D\u102F\u1038\u1005\u102C\u1038\u101E\u102D\u102F\u1037\u1015\u103C\u1031\u102C\u1004\u103A\u1038\u1019\u100A\u103A";
var u6 = "\u1001\u1010\u103A\u1011\u102C\u1038\u1019\u100A\u103A";
var h6 = "\u1016\u103D\u1004\u103A\u1037\u1011\u102C\u1038\u1019\u100A\u103A";
var m6 = "\u1014\u1031\u101B\u102C \u1021\u1011\u102C\u1038\u1021\u101E\u102D\u102F/ \u1021\u1006\u1014\u103A\u1037\u1021\u1000\u103B\u102F\u1036\u1037";
var g6 = "\u1005\u102C\u1019\u103B\u1000\u103A\u1014\u103E\u102C\u1010\u1005\u103A\u1001\u102F\u101E\u102D\u102F\u1037 \u101B\u103D\u1031\u1038\u1019\u100A\u103A";
var f6 = "\u1021\u101C\u103B\u102C\u1038\u101C\u102D\u102F\u1000\u103A \u101C\u103E\u1014\u103A\u1019\u100A\u103A";
var S6 = "\u1012\u1031\u102B\u1004\u103A\u101C\u102D\u102F\u1000\u103A \u101C\u103E\u1014\u103A\u1019\u100A\u103A";
var b6 = "\u101B\u103D\u1031\u1037\u1019\u100A\u103A";
var T6 = "\u101B\u103E\u1031\u1037\u1006\u102F\u1036\u1038\u101E\u102D\u102F\u1037";
var y6 = "\u101B\u103E\u1031\u1037\u1010\u1005\u103A\u1006\u1004\u103A\u1037";
var w62 = "\u1014\u1031\u102C\u1000\u103A\u1010\u1005\u103A\u1006\u1004\u103A\u1037";
var x6 = "\u1014\u1031\u102C\u1000\u103A\u1006\u102F\u1036\u1038\u101E\u102D\u102F\u1037";
var k6 = "\u1018\u102C\u101E\u102C\u1005\u1000\u102C\u1038";
var v6 = "\u1015\u102D\u102F\u1019\u102D\u102F\u104D \u101C\u1031\u1037\u101C\u102C\u101B\u1014\u103A";
var I6 = "\u1000\u102D\u101B\u102D\u101A\u102C \u1021\u1014\u1031\u1021\u1011\u102C\u1038";
var C62 = "\u1021\u1031\u102C\u1000\u103A";
var D6 = "\u1018\u101A\u103A";
var P6 = "\u100A\u102C";
var M6 = "\u1011\u102D\u1015\u103A";
var E6 = "\u1005\u102C\u1019\u103B\u1000\u103A\u1014\u103E\u102C";
var B6 = "Keyboard shortcuts";
var R62 = "\u101B\u103E\u102C\u1016\u103D\u1031\u101B\u1014\u103A";
var A6 = "\u1001\u100F\u1005\u1031\u102C\u1004\u103A\u1037\u1015\u1031\u1038\u101B\u1014\u103A{dots}";
var L6 = "\u1014\u1031\u102C\u1000\u103A\u1001\u1036 \u1011\u102F\u1010\u103A\u101A\u1030\u1019\u100A\u103A";
var H6 = "\u1014\u1031\u102C\u1000\u103A\u1001\u1036 \u1021\u1000\u103C\u100A\u103A";
var z6 = "Auto";
var O6 = "\u1021\u101C\u1004\u103A\u1038";
var F6 = "\u1021\u1019\u103E\u1031\u102C\u1004\u103A";
var j6 = "Github";
var G6 = "Twitter";
var V6 = "Discord";
var $6 = "\u1013\u102C\u1010\u103A\u1015\u102F\u1036";
var N6 = "\u1018\u101A\u103A\u1016\u1000\u103A\u101E\u102D\u102F\u1037 \u100A\u103E\u102D\u101B\u1014\u103A";
var W6 = "\u1021\u101C\u103B\u102C\u1038\u101C\u102D\u102F\u1000\u103A \u1017\u101F\u102D\u102F\u1006\u102E\u101E\u102D\u102F\u1037 \u100A\u103E\u102D\u101B\u1014\u103A";
var U6 = "\u100A\u102C\u1016\u1000\u103A\u101E\u102D\u102F\u1037 \u100A\u103E\u102D\u101B\u1014\u103A";
var K6 = "\u1021\u1015\u1031\u102B\u103A\u101E\u102D\u102F\u1037 \u100A\u103E\u102D\u101B\u1014\u103A";
var _6 = "\u1012\u1031\u102B\u1004\u103A\u101C\u102D\u102F\u1000\u103A \u1017\u101F\u102D\u102F\u1006\u102E\u101E\u102D\u102F\u1037 \u100A\u103E\u102D\u101B\u1014\u103A";
var Y6 = "\u1021\u1031\u102C\u1000\u103A\u101E\u102D\u102F\u1037 \u100A\u103E\u102D\u101B\u1014\u103A";
var Z6 = "\u1021\u101C\u103B\u102C\u1038\u101C\u102D\u102F\u1000\u103A \u1016\u103C\u1014\u103A\u1037\u101B\u1014\u103A";
var X6 = "\u1012\u1031\u102B\u1004\u103A\u101C\u102D\u102F\u1000\u103A \u1016\u103C\u1014\u103A\u1037\u101B\u1014\u103A";
var q6 = "\u1021\u101C\u103B\u102C\u1038\u101C\u102D\u102F\u1000\u103A \u1006\u103D\u1032\u1006\u1014\u103A\u1037\u101B\u1014\u103A";
var J6 = "\u1012\u1031\u102B\u1004\u103A\u101C\u102D\u102F\u1000\u103A \u1006\u103D\u1032\u1006\u1014\u103A\u1037\u101B\u1014\u103A";
var Q6 = "\u101A\u1001\u102F \u1015\u101B\u1031\u102C\u1002\u103B\u1000\u103A\u1000\u102D\u102F \u101E\u102D\u1019\u103A\u1038\u1006\u100A\u103A\u101C\u102D\u102F\u1015\u102B\u101E\u101C\u102C\u1038 ?";
var eH = "\u101A\u1001\u102F \u1015\u101B\u1031\u102C\u1002\u103B\u1000\u103A\u1010\u103D\u1004\u103A \u1015\u103C\u1004\u103A\u1011\u102C\u1038\u101E\u1031\u102C \u1021\u1015\u103C\u1031\u102C\u1004\u103A\u1038\u1021\u101C\u100A\u103A\u1019\u103B\u102C\u1038\u1000\u102D\u102F \u1021\u1010\u100A\u103A\u1015\u103C\u102F \u101E\u102D\u1019\u103A\u1038\u1006\u100A\u103A\u101C\u102D\u102F\u1015\u102B\u101E\u101C\u102C\u1038?";
var tH = "\u1018\u102C\u1019\u103E \u1019\u101C\u102F\u1015\u103A\u1010\u1031\u102C\u1037\u1015\u102B";
var nH = "\u1019\u101C\u102D\u102F\u1010\u1031\u102C\u1037\u1015\u102B";
var oH = "\u101C\u102D\u102F\u1015\u102B\u101E\u100A\u103A";
var rH = "\u1016\u102D\u102F\u1004\u103A\u1014\u102C\u1019\u100A\u103A \u1011\u100A\u103A\u1037\u101E\u103D\u1004\u103A\u1038\u101B\u1014\u103A";
var sH = "tldraw \u1021\u101E\u1005\u103A\u1005\u1019\u103A\u1038\u101E\u102F\u1036\u1038\u1000\u103C\u100A\u103A\u1037\u101B\u1014\u103A";
var ha = { "style.menu.color": $32, "style.menu.fill": N32, "style.menu.dash": W32, "style.menu.size": U32, "style.menu.keep.open": K32, "style.menu.font": _3, "style.menu.align": Y3, styles: Z3, "zoom.in": X32, "zoom.out": q32, to: J3, "menu.tools": Q3, "menu.transform": e8, "menu.file": t8, "menu.edit": n8, "menu.view": o8, "menu.preferences": r8, "menu.sign.in": s8, "menu.sign.out": i8, "become.a.sponsor": a8, "zoom.to.content": l8, "zoom.to.selection": d8, "zoom.to.fit": c8, "zoom.to": p8, "preferences.dark.mode": u8, "preferences.focus.mode": h8, "preferences.debug.mode": m8, "preferences.show.grid": g8, "preferences.use.cad.selection": f8, "preferences.keep.stylemenu.open": S8, "preferences.always.show.snaps": b8, "preferences.rotate.handles": T8, "preferences.binding.handles": y8, "preferences.clone.handles": w8, undo: x8, redo: k8, cut: v8, copy: I8, paste: C8, "copy.as": D8, "export.as": P8, "select.all": M8, "select.none": E8, delete: B8, "new.project": R8, open: A8, save: L8, "save.as": H8, "upload.media": z8, "create.page": O8, "new.page": F8, "page.name": j8, duplicate: G8, cancel: V8, "copy.invite.link": $8, "copy.readonly.link": N8, "create.multiplayer.project": W8, "copy.multiplayer.project": U8, select: K8, eraser: _8, draw: Y8, arrow: Z8, text: X8, sticky: q8, rectangle: J8, ellipse: Q8, triangle: e6, line: t6, rotate: n6, "lock.aspect.ratio": o6, "unlock.aspect.ratio": r6, group: s6, ungroup: i6, "move.to.back": a62, "move.backward": l62, "move.forward": d6, "move.to.front": c6, "reset.angle": p6, lock: u6, unlock: h6, "align.distribute": m6, "move.to.page": g6, "flip.horizontal": f6, "flip.vertical": S6, move: b6, "to.front": T6, forward: y6, backward: w62, back: x6, language: k6, "translation.link": v6, "dock.position": I6, bottom: C62, left: D6, right: P6, top: M6, page: E6, "keyboard.shortcuts": B6, search: R62, loading: A6, "export.background": L6, transparent: H6, auto: z6, light: O6, dark: F6, github: j6, twitter: G6, discord: V6, image: $6, "align.left": N6, "align.center.x": W6, "align.right": U6, "align.top": K6, "align.center.y": _6, "align.bottom": Y6, "distribute.x": Z6, "distribute.y": X6, "stretch.x": q6, "stretch.y": J6, "dialog.save.firsttime": Q6, "dialog.save.again": eH, "dialog.cancel": tH, "dialog.no": nH, "dialog.yes": oH, "enter.file.name": rH, "tldraw-beta": sH };
var iH = "Farge";
var aH = "Fyll";
var lH = "Linje";
var dH = "St\xF8rrelse";
var cH = "Hold \xE5pen";
var pH = "Teksttype";
var uH = "Juster";
var hH = "Stiler";
var mH = "Zoom inn";
var gH = "Zoom ut";
var fH = "til";
var SH = "Fil";
var bH = "Rediger";
var TH = "Vis";
var yH = "Preferanser";
var wH = "Logg inn";
var xH = "Logg ut";
var kH = "Bli en sponsor";
var vH = "Zoom til valg";
var IH = "Zoom for \xE5 passe";
var CH = "Zoom til";
var DH = "M\xF8rk modus";
var PH = "Fokus modus";
var MH = "Debug modus";
var EH = "Vis rutenett";
var BH = "Bruk CAD seleksjon";
var RH = "Hold stilmeny \xE5pen";
var AH = "Vis alltid snaps";
var LH = "Vis roteringsh\xE5ndtak";
var HH = "Vis bindingsh\xE5ndtak";
var zH = "Vis kloningsh\xE5ndtak";
var OH = "Angre";
var FH = "Gj\xF8r om";
var jH = "Klipp ut";
var GH = "Kopier";
var VH = "Lim inn";
var $H = "Kopier som";
var NH = "Eksporter som";
var WH = "Velg alle";
var UH = "Velg ingen";
var KH = "Slett";
var _H = "Nytt prosjekt";
var YH = "\xC5pne";
var ZH = "Lagre";
var XH = "Lagre som";
var qH = "Last opp media";
var JH = "Opprett side";
var QH = "Ny side";
var e42 = "Sidenavn";
var t42 = "Dupliser";
var n42 = "Avbryt";
var o42 = "Kopier invitasjonslink";
var r42 = "Opprett et flerspiller prosjekt";
var s42 = "Kopier til flerspiller prosjekt";
var i42 = "Velg";
var a42 = "Viskel\xE6r";
var l42 = "Tegn";
var d42 = "Pil";
var c42 = "Tekst";
var p42 = "Lapp";
var u42 = "Rektangel";
var h42 = "Ellipse";
var m42 = "Trekant";
var g42 = "Linje";
var f42 = "Roter";
var S42 = "L\xE5s st\xF8rrelsesforhold";
var b42 = "L\xE5s opp st\xF8rrelsesforhold";
var T42 = "Grupper";
var y42 = "Avgrupper";
var w42 = "Flytt bakerst";
var x42 = "Flytt bakover";
var k42 = "Flytt forover";
var v42 = "Flytt til front";
var I4 = "Tilbakestill vinkel";
var C42 = "L\xE5s";
var D42 = "L\xE5s opp";
var P4 = "Flytt til side";
var M4 = "Snu horisontalt";
var E42 = "Snu vertikalt";
var B4 = "Flytt";
var R42 = "Foran";
var A42 = "Framover";
var L42 = "Bakover";
var H42 = "Bakerst";
var z42 = "Spr\xE5k";
var ma = { "style.menu.color": iH, "style.menu.fill": aH, "style.menu.dash": lH, "style.menu.size": dH, "style.menu.keep.open": cH, "style.menu.font": pH, "style.menu.align": uH, styles: hH, "zoom.in": mH, "zoom.out": gH, to: fH, "menu.file": SH, "menu.edit": bH, "menu.view": TH, "menu.preferences": yH, "menu.sign.in": wH, "menu.sign.out": xH, "become.a.sponsor": kH, "zoom.to.selection": vH, "zoom.to.fit": IH, "zoom.to": CH, "preferences.dark.mode": DH, "preferences.focus.mode": PH, "preferences.debug.mode": MH, "preferences.show.grid": EH, "preferences.use.cad.selection": BH, "preferences.keep.stylemenu.open": RH, "preferences.always.show.snaps": AH, "preferences.rotate.handles": LH, "preferences.binding.handles": HH, "preferences.clone.handles": zH, undo: OH, redo: FH, cut: jH, copy: GH, paste: VH, "copy.as": $H, "export.as": NH, "select.all": WH, "select.none": UH, delete: KH, "new.project": _H, open: YH, save: ZH, "save.as": XH, "upload.media": qH, "create.page": JH, "new.page": QH, "page.name": e42, duplicate: t42, cancel: n42, "copy.invite.link": o42, "create.multiplayer.project": r42, "copy.multiplayer.project": s42, select: i42, eraser: a42, draw: l42, arrow: d42, text: c42, sticky: p42, rectangle: u42, ellipse: h42, triangle: m42, line: g42, rotate: f42, "lock.aspect.ratio": S42, "unlock.aspect.ratio": b42, group: T42, ungroup: y42, "move.to.back": w42, "move.backward": x42, "move.forward": k42, "move.to.front": v42, "reset.angle": I4, lock: C42, unlock: D42, "move.to.page": P4, "flip.horizontal": M4, "flip.vertical": E42, move: B4, "to.front": R42, forward: A42, backward: L42, back: H42, language: z42 };
var O42 = "\u0930\u0902\u0917";
var F4 = "\u092D\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var j4 = "\u0927\u0930\u094D\u0915\u093E";
var G42 = "\u0906\u0915\u093E\u0930";
var V42 = "\u0916\u0941\u0932\u093E \u0930\u093E\u0916\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var $42 = "\u092B\u0928\u094D\u091F";
var N42 = "\u092A\u0919\u094D\u0915\u094D\u0924\u093F\u092C\u0926\u094D\u0927";
var W42 = "\u0936\u0948\u0932\u0940\u0939\u0930\u0942";
var U4 = "\u091C\u0941\u092E \u0907\u0928";
var K42 = "\u091C\u0941\u092E \u0906\u0909\u091F";
var _4 = "\u091F\u0941";
var Y4 = "\u092B\u093E\u0907\u0932";
var Z4 = "\u0938\u092E\u094D\u092A\u093E\u0926\u0928 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var X4 = "\u092D\u094D\u092F\u0942";
var q4 = "\u092A\u094D\u0930\u093E\u0925\u092E\u093F\u0915\u0924\u093E\u0939\u0930\u0942";
var J4 = "\u0938\u093E\u0907\u0928 \u0907\u0928 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Q4 = "\u0938\u093E\u0907\u0928 \u0906\u0909\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var ez = "\u092A\u094D\u0930\u093E\u092F\u094B\u091C\u0915 \u092C\u0928\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var tz = "\u091C\u0941\u092E \u091F\u0941 \u0938\u0947\u0932\u0947\u0915\u094D\u0938\u0928";
var nz = "\u091C\u0941\u092E \u091F\u0941 \u092B\u093F\u091F";
var oz = "\u091C\u0941\u092E \u091F\u0941";
var rz = "\u0905\u0901\u0927\u094D\u092F\u093E\u0930\u094B \u092E\u094B\u0921";
var sz = "\u092B\u094B\u0915\u0938 \u092E\u094B\u0921";
var iz = "\u0921\u093F\u092C\u0917 \u092E\u094B\u0921";
var az = "\u0917\u094D\u0930\u093F\u0921 \u0926\u0947\u0916\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var lz = "CAD \u0938\u0947\u0932\u0947\u0915\u094D\u0938\u0928 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var dz = "\u0938\u094D\u091F\u093E\u0907\u0932 \u092E\u0947\u0928\u0941 \u0916\u0941\u0932\u093E \u0930\u093E\u0916\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var cz = "\u0938\u0927\u0948\u0901 \u0938\u094D\u0928\u094D\u092F\u093E\u092A\u0939\u0930\u0942 \u0926\u0947\u0916\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var pz = "\u0939\u094D\u092F\u093E\u0928\u094D\u0921\u0932\u0939\u0930\u0942 \u0918\u0941\u092E\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var uz = "\u092C\u093E\u0907\u0928\u094D\u0921\u093F\u0919 \u0939\u094D\u092F\u093E\u0928\u094D\u0921\u0932\u0939\u0930\u0942";
var hz = "\u0915\u094D\u0932\u094B\u0928 \u0939\u094D\u092F\u093E\u0928\u094D\u0921\u0932\u0939\u0930\u0942";
var mz = "\u092A\u0942\u0930\u094D\u0935\u0935\u0924 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var gz = "\u092A\u0941\u0928\u0903 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var fz = "\u0915\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Sz = "\u0915\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var bz = "\u092A\u0947\u0938\u094D\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Tz = "\u0915\u092A\u093F \u090F\u091C";
var yz = "\u090F\u0915\u094D\u0938\u092A\u094B\u0930\u094D\u091F \u090F\u091C";
var wz = "\u0938\u092C\u0948 \u091B\u093E\u0928\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var xz = "\u0915\u0947\u0939\u093F \u092A\u0928\u093F \u0938\u0947\u0932\u0947\u0915\u094D\u091F \u0928\u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var kz = "\u092E\u0947\u091F\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var vz = "\u0928\u092F\u093E\u0901 \u092A\u0930\u093F\u092F\u094B\u091C\u0928\u093E";
var Iz = "\u0916\u094B\u0932\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Cz = "\u0938\u0941\u0930\u0915\u094D\u0937\u093F\u0924 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Dz = "\u0938\u0947\u092D \u090F\u091C";
var Pz = "\u092E\u093F\u0921\u093F\u092F\u093E \u0905\u092A\u0932\u094B\u0921 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Mz = "\u092A\u0943\u0937\u094D\u0920 \u0938\u093F\u0930\u094D\u091C\u0928\u093E \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Ez = "\u0928\u092F\u093E\u0901 \u092A\u0943\u0937\u094D\u0920 \u0938\u093F\u0930\u094D\u091C\u0928\u093E \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Bz = "\u092A\u0943\u0937\u094D\u0920\u0915\u094B \u0928\u093E\u092E";
var Rz = "\u0905\u0928\u0941\u0932\u093F\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Az = "\u0930\u0926\u094D\u0926 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Lz = "\u0928\u093F\u092E\u0928\u094D\u0924\u094D\u0930\u0923\u093E \u0932\u093F\u0919\u094D\u0915 \u0915\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Hz = "\u092E\u0932\u094D\u091F\u093F\u092A\u094D\u0932\u0947\u092F\u0930 \u092A\u0930\u093F\u092F\u094B\u091C\u0928\u093E \u0938\u093F\u0930\u094D\u091C\u0928\u093E \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var zz = "\u092E\u0932\u094D\u091F\u093F\u092A\u094D\u0932\u0947\u092F\u0930 \u092A\u094D\u0930\u094B\u091C\u0947\u0915\u094D\u091F\u092E\u093E \u0915\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Oz = "\u0938\u0947\u0932\u0947\u0915\u094D\u091F";
var Fz = "\u0907\u0930\u0947\u091C\u0930";
var jz = "\u091A\u093F\u0924\u094D\u0930 \u092C\u0928\u093E\u0909\u0928\u0941";
var Gz = "\u0924\u0940\u0930";
var Vz = "\u0936\u092C\u094D\u0926";
var $z = "\u091F\u093E\u0901\u0938\u093F\u0928\u0947";
var Nz = "\u0906\u092F\u0924";
var Wz = "\u0926\u0940\u0930\u094D\u0918\u0935\u0943\u0924\u094D\u0924";
var Uz = "\u0924\u094D\u0930\u093F\u092D\u0941\u091C";
var Kz = "\u0930\u0947\u0916\u093E";
var _z = "\u0918\u0941\u092E\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var Yz = "\u0906\u0915\u093E\u0930 \u0905\u0928\u0941\u092A\u093E\u0924 \u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Zz = "\u0906\u0915\u093E\u0930 \u0905\u0928\u0941\u092A\u093E\u0924 \u0905\u0928\u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Xz = "\u0938\u092E\u0942\u0939";
var qz = "\u0938\u092E\u0942\u0939 \u0930\u0926\u094D\u0926 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Jz = "\u092A\u091B\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Qz = "\u0925\u092A \u092A\u091B\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var e9 = "\u0905\u0917\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var t9 = "\u0925\u092A \u0905\u0917\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var n9 = "\u0915\u094B\u0923 \u0930\u093F\u0938\u0947\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var o9 = "\u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var r9 = "\u0905\u0928\u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var s9 = "\u092A\u0943\u0937\u094D\u0920\u092E\u093E \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var i9 = "\u0924\u0947\u0930\u094D\u0938\u094B \u092B\u094D\u0932\u093F\u092A \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var a9 = "\u0920\u093E\u0921\u094B \u092B\u094D\u0932\u093F\u092A \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var l9 = "\u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var d9 = "\u0925\u092A \u0905\u0917\u093E\u0921\u093F";
var c9 = "\u0905\u0917\u093E\u0921\u093F";
var p9 = "\u092A\u091B\u093E\u0921\u093F";
var u9 = "\u0925\u092A \u092A\u091B\u093E\u0921\u093F";
var h9 = "\u092D\u093E\u0937\u093E";
var ga = { "style.menu.color": O42, "style.menu.fill": F4, "style.menu.dash": j4, "style.menu.size": G42, "style.menu.keep.open": V42, "style.menu.font": $42, "style.menu.align": N42, styles: W42, "zoom.in": U4, "zoom.out": K42, to: _4, "menu.file": Y4, "menu.edit": Z4, "menu.view": X4, "menu.preferences": q4, "menu.sign.in": J4, "menu.sign.out": Q4, "become.a.sponsor": ez, "zoom.to.selection": tz, "zoom.to.fit": nz, "zoom.to": oz, "preferences.dark.mode": rz, "preferences.focus.mode": sz, "preferences.debug.mode": iz, "preferences.show.grid": az, "preferences.use.cad.selection": lz, "preferences.keep.stylemenu.open": dz, "preferences.always.show.snaps": cz, "preferences.rotate.handles": pz, "preferences.binding.handles": uz, "preferences.clone.handles": hz, undo: mz, redo: gz, cut: fz, copy: Sz, paste: bz, "copy.as": Tz, "export.as": yz, "select.all": wz, "select.none": xz, delete: kz, "new.project": vz, open: Iz, save: Cz, "save.as": Dz, "upload.media": Pz, "create.page": Mz, "new.page": Ez, "page.name": Bz, duplicate: Rz, cancel: Az, "copy.invite.link": Lz, "create.multiplayer.project": Hz, "copy.multiplayer.project": zz, select: Oz, eraser: Fz, draw: jz, arrow: Gz, text: Vz, sticky: $z, rectangle: Nz, ellipse: Wz, triangle: Uz, line: Kz, rotate: _z, "lock.aspect.ratio": Yz, "unlock.aspect.ratio": Zz, group: Xz, ungroup: qz, "move.to.back": Jz, "move.backward": Qz, "move.forward": e9, "move.to.front": t9, "reset.angle": n9, lock: o9, unlock: r9, "move.to.page": s9, "flip.horizontal": i9, "flip.vertical": a9, move: l9, "to.front": d9, forward: c9, backward: p9, back: u9, language: h9 };
var m9 = "Farge";
var g9 = "Fyll";
var f9 = "Line";
var S9 = "Storleik";
var b9 = "Hald open";
var T9 = "Teksttype";
var y9 = "Tilpass";
var w9 = "Stilar";
var x9 = "Zoom inn";
var k9 = "Zoom ut";
var v9 = "til";
var I9 = "Fil";
var C9 = "Rediger";
var D9 = "Vis";
var P9 = "Innstillingar";
var M9 = "Logg inn";
var E9 = "Logg ut";
var B9 = "Vert sponsor";
var R9 = "Zoom til innhald";
var A9 = "Zoom til valte element";
var L9 = "Zoom for \xE5 passe";
var H9 = "Zoom til";
var z9 = "M\xF8rkmodus";
var O9 = "Fokusmodus";
var F9 = "Debugmodus";
var j9 = "Vis rutenett";
var G9 = "Bruk CAD-val";
var V9 = "Hald stilmeny open";
var $9 = "Vis alltid snaps";
var N9 = "Vis roteringshandtak";
var W9 = "Vis bindingshandtak";
var U9 = "Vis kloningshandtak";
var K9 = "Angre";
var _9 = "Gjer om";
var Y9 = "Klipp ut";
var Z9 = "Kopier";
var X9 = "Lim inn";
var q9 = "Kopier som";
var J9 = "Eksporter som";
var Q9 = "Vel alle";
var eO = "Vel ingen";
var tO = "Slett";
var nO = "Nytt prosjekt";
var oO = "Opne";
var rO = "Lagre";
var sO = "Lagre som";
var iO = "Last opp media";
var aO = "Opprett side";
var lO = "Ny side";
var dO = "Sidenamn";
var cO = "Dupliser";
var pO = "Avbryt";
var uO = "Kopier invitasjonslenke";
var hO = "Kopier invitasjonslenke (skrivebeskytta)";
var mO = "Lag samarbeidsprosjekt";
var gO = "Kopier til samarbeidsprosjekt";
var fO = "Vel";
var SO = "Viskel\xEAr";
var bO = "Teikn";
var TO = "Pil";
var yO = "Tekst";
var wO = "Lapp";
var xO = "Rektangel";
var kO = "Runding";
var vO = "Trekant";
var IO = "Line";
var CO = "Roter";
var DO = "L\xE5s storleiksforhold";
var PO = "L\xE5s opp storleiksforhold";
var MO = "Grupper";
var EO = "Avgrupper";
var BO = "Flytt bakarst";
var RO = "Flytt bakover";
var AO = "Flytt framover";
var LO = "Flytt til front";
var HO = "Tilbakestill vinkel";
var zO = "L\xE5s";
var OO = "L\xE5s opp";
var FO = "Flytt til side";
var jO = "Snu horisontalt";
var GO = "Snu vertikalt";
var VO = "Flytt";
var $O = "Framme";
var NO = "Framover";
var WO = "Bakover";
var UO = "Bakarst";
var KO = "Spr\xE5k";
var _O = "Les meir";
var YO = "Dokkplassering";
var ZO = "Nede";
var XO = "Venstre";
var qO = "H\xF8gre";
var JO = "Oppe";
var QO = "Side";
var e7 = "Sn\xF8ggtastar";
var t7 = "S\xF8k";
var n7 = "Lastar{dots}";
var o7 = "Eksporter bakgrunn";
var r7 = "Gjennomsiktig";
var s7 = "Auto";
var i7 = "Lys";
var a7 = "M\xF8rk";
var l72 = "Github";
var d7 = "Twitter";
var c7 = "Discord";
var p7 = "Bilete";
var u7 = "Venstrestill";
var h7 = "Midtstill horisontalt";
var m7 = "H\xF8grestill";
var g7 = "Still til toppen";
var f7 = "Midtstill vertikalt";
var S7 = "Still til botnen";
var b7 = "Distribuer horisontalt";
var T7 = "Distribuer vertikalt";
var y7 = "Strekk horisontalt";
var w7 = "Strekk vertikalt";
var x7 = "Vil du lagre det noverande prosjektet ditt?";
var k7 = "Vil du lagre endringane i det noverande prosjektet ditt?";
var v7 = "Avbryt";
var I7 = "Nei";
var C7 = "Ja";
var D7 = "Fyll inn filnamn";
var P7 = "Pr\xF8v den nye tldraw";
var M7 = "Kvit";
var E7 = "Lys gr\xE5";
var B7 = "Gr\xE5";
var R7 = "Svart";
var A7 = "Gr\xF8n";
var L7 = "Cyan";
var H7 = "Bk\xE5";
var z7 = "Indigo";
var O7 = "Fiol";
var F7 = "Raud";
var j7 = "Oransj";
var G7 = "Gul";
var V7 = "Heil";
var $7 = "Stipla";
var N7 = "Prikka";
var W7 = "Liten";
var U7 = "Mellomstor";
var K7 = "Stor";
var fa = { "style.menu.color": m9, "style.menu.fill": g9, "style.menu.dash": f9, "style.menu.size": S9, "style.menu.keep.open": b9, "style.menu.font": T9, "style.menu.align": y9, styles: w9, "zoom.in": x9, "zoom.out": k9, to: v9, "menu.file": I9, "menu.edit": C9, "menu.view": D9, "menu.preferences": P9, "menu.sign.in": M9, "menu.sign.out": E9, "become.a.sponsor": B9, "zoom.to.content": R9, "zoom.to.selection": A9, "zoom.to.fit": L9, "zoom.to": H9, "preferences.dark.mode": z9, "preferences.focus.mode": O9, "preferences.debug.mode": F9, "preferences.show.grid": j9, "preferences.use.cad.selection": G9, "preferences.keep.stylemenu.open": V9, "preferences.always.show.snaps": $9, "preferences.rotate.handles": N9, "preferences.binding.handles": W9, "preferences.clone.handles": U9, undo: K9, redo: _9, cut: Y9, copy: Z9, paste: X9, "copy.as": q9, "export.as": J9, "select.all": Q9, "select.none": eO, delete: tO, "new.project": nO, open: oO, save: rO, "save.as": sO, "upload.media": iO, "create.page": aO, "new.page": lO, "page.name": dO, duplicate: cO, cancel: pO, "copy.invite.link": uO, "copy.readonly.link": hO, "create.multiplayer.project": mO, "copy.multiplayer.project": gO, select: fO, eraser: SO, draw: bO, arrow: TO, text: yO, sticky: wO, rectangle: xO, ellipse: kO, triangle: vO, line: IO, rotate: CO, "lock.aspect.ratio": DO, "unlock.aspect.ratio": PO, group: MO, ungroup: EO, "move.to.back": BO, "move.backward": RO, "move.forward": AO, "move.to.front": LO, "reset.angle": HO, lock: zO, unlock: OO, "move.to.page": FO, "flip.horizontal": jO, "flip.vertical": GO, move: VO, "to.front": $O, forward: NO, backward: WO, back: UO, language: KO, "translation.link": _O, "dock.position": YO, bottom: ZO, left: XO, right: qO, top: JO, page: QO, "keyboard.shortcuts": e7, search: t7, loading: n7, "export.background": o7, transparent: r7, auto: s7, light: i7, dark: a7, github: l72, twitter: d7, discord: c7, image: p7, "align.left": u7, "align.center.x": h7, "align.right": m7, "align.top": g7, "align.center.y": f7, "align.bottom": S7, "distribute.x": b7, "distribute.y": T7, "stretch.x": y7, "stretch.y": w7, "dialog.save.firsttime": x7, "dialog.save.again": k7, "dialog.cancel": v7, "dialog.no": I7, "dialog.yes": C7, "enter.file.name": D7, "tldraw-beta": P7, white: M7, lightGray: E7, gray: B7, black: R7, green: A7, cyan: L7, blue: H7, indigo: z7, violet: O7, red: F7, orange: j7, yellow: G7, solid: V7, dashed: $7, dotted: N7, small: W7, medium: U7, large: K7 };
var _7 = "Kolor";
var Y7 = "Wype\u0142nienie";
var Z7 = "Linia";
var X7 = "Rozmiar";
var q7 = "Zachowaj otwarte";
var J7 = "Czcionka";
var Q7 = "Wyr\xF3wnanie";
var eF = "Style";
var tF = "Przybli\u017C";
var nF = "Oddal";
var oF = "do";
var rF = "Plik";
var sF = "Edycja";
var iF = "Widok";
var aF = "Preferencje";
var lF = "Zaloguj";
var dF = "Wyloguj";
var cF = "Zosta\u0144 sponsorem";
var pF = "Przybli\u017C do zaznaczenia";
var uF = "Wype\u0142nij ekran";
var hF = "Przybli\u017C do";
var mF = "Tryb ciemny";
var gF = "Tryb skupienia";
var fF = "Tryb debugowania";
var SF = "Poka\u017C siatk\u0119";
var bF = "U\u017Cyj zaznaczania CAD";
var TF = "Zachowaj menu styli otwarte";
var yF = "Przyci\u0105gaj obiekty";
var wF = "Uchwyty obrotu";
var xF = "Uchwyty powi\u0105zania";
var kF = "Uchwyty klonuj\u0105ce";
var vF = "Cofnij";
var IF = "Powt\xF3rz";
var CF = "Wytnij";
var DF = "Kopiuj";
var PF = "Wklej";
var MF = "Kopiuj jako";
var EF = "Eksportuj jako";
var BF = "Zaznacz wszystko";
var RF = "Odznacz wszystko";
var AF = "Usu\u0144";
var LF = "Nowy projekt";
var HF = "Otw\xF3rz";
var zF = "Zapisz";
var OF = "Zapisz jako";
var FF = "Za\u0142aduj multimedia";
var jF = "Utw\xF3rz stron\u0119";
var GF = "Nowa strona";
var VF = "Nazwa strony";
var $F = "Powiel";
var NF = "Anuluj";
var WF = "Kopiuj link zaproszenia";
var UF = "Stw\xF3rz projekt wieloosobowy";
var KF = "Kopiuj do projektu wieloosobowego";
var _F = "Zaznacz";
var YF = "Gumka";
var ZF = "Rysuj";
var XF = "Strza\u0142ka";
var qF = "Tekst";
var JF = "Naklejka";
var QF = "Prostok\u0105t";
var ej = "Elipsa";
var tj = "Tr\xF3jk\u0105t";
var nj = "Linia";
var oj = "Obr\xF3\u0107";
var rj = "Zablokuj proporcje";
var sj = "Odblokuj proporcje";
var ij = "Grupuj";
var aj = "Rozgrupuj";
var lj = "Przenie\u015B na ty\u0142";
var dj = "Przesu\u0144 do ty\u0142u";
var cj = "Przesu\u0144 do przodu";
var pj = "Przenie\u015B na prz\xF3d";
var uj = "Resetuj k\u0105t";
var hj = "Zablokuj";
var mj = "Odblokuj";
var gj = "Przenie\u015B na stron\u0119";
var fj = "Odwr\xF3\u0107 w poziomie";
var Sj = "Odwr\xF3\u0107 w pionie";
var bj = "Przenie\u015B";
var Tj = "Na wierzch";
var yj = "Do przodu";
var wj = "Do ty\u0142u";
var xj = "Na sp\xF3d";
var kj = "J\u0119zyk";
var vj = "Czytaj wi\u0119cej";
var Ij = "Pozycja przybornika";
var Cj = "D\xF3\u0142";
var Dj = "Lewa";
var Pj = "Prawa";
var Mj = "G\xF3ra";
var Ej = "Strona";
var Bj = "Skr\xF3ty klawiszowe";
var Rj = "Szukaj";
var Aj = "\u0141adowanie{dots}";
var Lj = "Eksportuj t\u0142o";
var Hj = "Przezroczyste";
var zj = "Automatyczny";
var Oj = "Jasny";
var Fj = "Ciemny";
var jj = "Github";
var Gj = "Twitter";
var Vj = "Discord";
var $j = "Obraz";
var Nj = "Wyr\xF3wnaj do lewej";
var Wj = "Wycentruj poziomo";
var Uj = "Wyr\xF3wnaj do prawej";
var Kj = "Wyr\xF3wnaj do g\xF3ry";
var _j = "Wycentruj pionowo";
var Yj = "Wyr\xF3wnaj do do\u0142u";
var Zj = "Roz\u0142\xF3\u017C poziomo";
var Xj = "Roz\u0142\xF3\u017C pionowo";
var qj = "Rozci\u0105gnij poziomo";
var Jj = "Rozci\u0105gnij pionowo";
var Qj = "Czy chcesz zapisa\u0107 bie\u017C\u0105cy projekt?";
var eG = "Czy chcesz zapisa\u0107 zmiany w bie\u017C\u0105cym projekcie?";
var tG = "Anuluj";
var nG = "Nie";
var oG = "Tak";
var rG = "Podaj nazw\u0119 pliku";
var sG = "Wypr\xF3buj nowy tldraw";
var Sa = { "style.menu.color": _7, "style.menu.fill": Y7, "style.menu.dash": Z7, "style.menu.size": X7, "style.menu.keep.open": q7, "style.menu.font": J7, "style.menu.align": Q7, styles: eF, "zoom.in": tF, "zoom.out": nF, to: oF, "menu.file": rF, "menu.edit": sF, "menu.view": iF, "menu.preferences": aF, "menu.sign.in": lF, "menu.sign.out": dF, "become.a.sponsor": cF, "zoom.to.selection": pF, "zoom.to.fit": uF, "zoom.to": hF, "preferences.dark.mode": mF, "preferences.focus.mode": gF, "preferences.debug.mode": fF, "preferences.show.grid": SF, "preferences.use.cad.selection": bF, "preferences.keep.stylemenu.open": TF, "preferences.always.show.snaps": yF, "preferences.rotate.handles": wF, "preferences.binding.handles": xF, "preferences.clone.handles": kF, undo: vF, redo: IF, cut: CF, copy: DF, paste: PF, "copy.as": MF, "export.as": EF, "select.all": BF, "select.none": RF, delete: AF, "new.project": LF, open: HF, save: zF, "save.as": OF, "upload.media": FF, "create.page": jF, "new.page": GF, "page.name": VF, duplicate: $F, cancel: NF, "copy.invite.link": WF, "create.multiplayer.project": UF, "copy.multiplayer.project": KF, select: _F, eraser: YF, draw: ZF, arrow: XF, text: qF, sticky: JF, rectangle: QF, ellipse: ej, triangle: tj, line: nj, rotate: oj, "lock.aspect.ratio": rj, "unlock.aspect.ratio": sj, group: ij, ungroup: aj, "move.to.back": lj, "move.backward": dj, "move.forward": cj, "move.to.front": pj, "reset.angle": uj, lock: hj, unlock: mj, "move.to.page": gj, "flip.horizontal": fj, "flip.vertical": Sj, move: bj, "to.front": Tj, forward: yj, backward: wj, back: xj, language: kj, "translation.link": vj, "dock.position": Ij, bottom: Cj, left: Dj, right: Pj, top: Mj, page: Ej, "keyboard.shortcuts": Bj, search: Rj, loading: Aj, "export.background": Lj, transparent: Hj, auto: zj, light: Oj, dark: Fj, github: jj, twitter: Gj, discord: Vj, image: $j, "align.left": Nj, "align.center.x": Wj, "align.right": Uj, "align.top": Kj, "align.center.y": _j, "align.bottom": Yj, "distribute.x": Zj, "distribute.y": Xj, "stretch.x": qj, "stretch.y": Jj, "dialog.save.firsttime": Qj, "dialog.save.again": eG, "dialog.cancel": tG, "dialog.no": nG, "dialog.yes": oG, "enter.file.name": rG, "tldraw-beta": sG };
var iG = "Cor";
var aG = "Preencher";
var lG = "Tra\xE7o";
var dG = "Tamanho";
var cG = "Manter aberto";
var pG = "Fonte";
var uG = "Alinhamento";
var hG = "Estilos";
var mG = "Aumentar zoom";
var gG = "Diminuir zoom";
var fG = "para";
var SG = "Arquivo";
var bG = "Editar";
var TG = "Visualizar";
var yG = "Prefer\xEAncias";
var wG = "Entrar";
var xG = "Sair";
var kG = "Torne-se um patrocinador";
var vG = "Zoom para a sele\xE7\xE3o";
var IG = "Zoom para ajuste";
var CG = "Zoom para";
var DG = "Modo Escuro";
var PG = "Modo Foco";
var MG = "Modo Debug";
var EG = "Mostrar Grade";
var BG = "Usar sele\xE7\xE3o CAD";
var RG = "Manter Menu de Estilos Aberto";
var AG = "Mostrar Pontos de Ajuste";
var LG = "Controle de Rota\xE7\xE3o";
var HG = "Controle de V\xEDnculos";
var zG = "Controle de Clone";
var OG = "Desfazer";
var FG = "Refazer";
var jG = "Cortar";
var GG = "Copiar";
var VG = "Colar";
var $G = "Copiar como";
var NG = "Exportar como";
var WG = "Selecionar todos";
var UG = "Selecionar nenhum";
var KG = "Deletar";
var _G = "Novo Projeto";
var YG = "Abrir";
var ZG = "Salvar";
var XG = "Salvar Como";
var qG = "Carregar M\xEDdia";
var JG = "P\xE1gina";
var QG = "Procurar";
var eV = "Carregando{dots}";
var tV = "Exportar Fundo";
var nV = "Transparente";
var oV = "Autom\xE1tico";
var rV = "Claro";
var sV = "Escuro";
var iV = "Ferramentas";
var aV = "Transformar";
var lV = "Voltar ao Conte\xFAdo";
var dV = "Saiba Mais";
var cV = "Copiar Link ReadOnly";
var pV = "Alinhar / Distribuir";
var uV = "Criar P\xE1gina";
var hV = "Nova P\xE1gina";
var mV = "Nome da P\xE1gina";
var gV = "Duplicar";
var fV = "Cancelar";
var SV = "Copiar Link de Convite";
var bV = "Criar um Projeto Multijogador";
var TV = "Copiar para Projeto Multijogador";
var yV = "Selecionar";
var wV = "Borracha";
var xV = "Desenhar";
var kV = "Seta";
var vV = "Texto";
var IV = "Adesivo";
var CV = "Ret\xE2ngulo";
var DV = "Elipse";
var PV = "Tri\xE2ngulo";
var MV = "Linha";
var EV = "Rotacionar";
var BV = "Travar Propor\xE7\xE3o da Tela";
var RV = "Destravar Propor\xE7\xE3o da Tela";
var AV = "Agrupar";
var LV = "Desagrupar";
var HV = "Recuar";
var zV = "Enviar para Tr\xE1s";
var OV = "Avan\xE7ar";
var FV = "Trazer para Frente";
var jV = "Reiniciar \xC2ngulo";
var GV = "Travar";
var VV = "Destravar";
var $V = "Mover para P\xE1gina";
var NV = "Virar Horizontalmente";
var WV = "Virar Verticalmente";
var UV = "Mover";
var KV = "Para Frente";
var _V = "Avan\xE7ar";
var YV = "Recuar";
var ZV = "Voltar";
var XV = "Idioma";
var qV = "Imagem";
var JV = "Atalhos de Teclado";
var QV = "Posi\xE7\xE3o de Ferramentas";
var e$ = "Inferior";
var t$ = "Superior";
var n$ = "Direita";
var o$ = "Esquerda";
var r$ = "Alinhar \xE0 esquerda";
var s$ = "Alinhar ao centro na horizontal";
var i$ = "Alinhar \xE0 direita";
var a$ = "Alinhas em cima";
var l$ = "Alinhar ao centro na vertical";
var d$ = "Alinhar embaixo";
var c$ = "Distruibuir na horizontal";
var p$ = "Distruibuir na vertical";
var u$ = "Esticar na horizontal";
var h$ = "Esticar na vertical";
var m$ = "Voc\xEA deseja salvar seu projeto atual?";
var g$ = "Voc\xEA deseja salvar as mudan\xE7as ao projeto atual?";
var f$ = "Cancelar";
var S$ = "N\xE3o";
var b$ = "Sim";
var T$ = "Insira o nome do arquivo";
var ba = { "style.menu.color": iG, "style.menu.fill": aG, "style.menu.dash": lG, "style.menu.size": dG, "style.menu.keep.open": cG, "style.menu.font": pG, "style.menu.align": uG, styles: hG, "zoom.in": mG, "zoom.out": gG, to: fG, "menu.file": SG, "menu.edit": bG, "menu.view": TG, "menu.preferences": yG, "menu.sign.in": wG, "menu.sign.out": xG, "become.a.sponsor": kG, "zoom.to.selection": vG, "zoom.to.fit": IG, "zoom.to": CG, "preferences.dark.mode": DG, "preferences.focus.mode": PG, "preferences.debug.mode": MG, "preferences.show.grid": EG, "preferences.use.cad.selection": BG, "preferences.keep.stylemenu.open": RG, "preferences.always.show.snaps": AG, "preferences.rotate.handles": LG, "preferences.binding.handles": HG, "preferences.clone.handles": zG, undo: OG, redo: FG, cut: jG, copy: GG, paste: VG, "copy.as": $G, "export.as": NG, "select.all": WG, "select.none": UG, delete: KG, "new.project": _G, open: YG, save: ZG, "save.as": XG, "upload.media": qG, page: JG, search: QG, loading: eV, "export.background": tV, transparent: nV, auto: oV, light: rV, dark: sV, "menu.tools": iV, "menu.transform": aV, "zoom.to.content": lV, "translation.link": dV, "copy.readonly.link": cV, "align.distribute": pV, "create.page": uV, "new.page": hV, "page.name": mV, duplicate: gV, cancel: fV, "copy.invite.link": SV, "create.multiplayer.project": bV, "copy.multiplayer.project": TV, select: yV, eraser: wV, draw: xV, arrow: kV, text: vV, sticky: IV, rectangle: CV, ellipse: DV, triangle: PV, line: MV, rotate: EV, "lock.aspect.ratio": BV, "unlock.aspect.ratio": RV, group: AV, ungroup: LV, "move.to.back": HV, "move.backward": zV, "move.forward": OV, "move.to.front": FV, "reset.angle": jV, lock: GV, unlock: VV, "move.to.page": $V, "flip.horizontal": NV, "flip.vertical": WV, move: UV, "to.front": KV, forward: _V, backward: YV, back: ZV, language: XV, image: qV, "keyboard.shortcuts": JV, "dock.position": QV, bottom: e$, top: t$, right: n$, left: o$, "align.left": r$, "align.center.x": s$, "align.right": i$, "align.top": a$, "align.center.y": l$, "align.bottom": d$, "distribute.x": c$, "distribute.y": p$, "stretch.x": u$, "stretch.y": h$, "dialog.save.firsttime": m$, "dialog.save.again": g$, "dialog.cancel": f$, "dialog.no": S$, "dialog.yes": b$, "enter.file.name": T$ };
var y$ = "Cor";
var w$ = "Preencher";
var x$ = "Tra\xE7o";
var k$ = "Tamanho";
var v$ = "Manter aberto";
var I$ = "Fonte";
var C$ = "Alinhamento";
var D$ = "Estilos";
var P$ = "Aumentar zoom";
var M$ = "Diminuir zoom";
var E$ = "para";
var B$ = "Ficheiro";
var R$ = "Editar";
var A$ = "Visualizar";
var L$ = "Prefer\xEAncias";
var H$ = "Entrar";
var z$ = "Sair";
var O$ = "Torne-se um patrocinador";
var F$ = "Zoom na sele\xE7\xE3o";
var j$ = "Zoom para caber";
var G$ = "Zoom para";
var V$ = "Modo Escuro";
var $$ = "Modo Foco";
var N$ = "Modo Debug";
var W$ = "Mostrar Grelha";
var U$ = "Usar sele\xE7\xE3o CAD";
var K$ = "Manter Menu de Estilos Aberto";
var _$ = "Mostrar Pontos de Ajuste";
var Y$ = "Controlo de Rota\xE7\xE3o";
var Z$ = "Controlo de Binds";
var X$ = "Controlo de Clone";
var q$ = "Desfazer";
var J$ = "Refazer";
var Q$ = "Cortar";
var eN = "Copiar";
var tN = "Colar";
var nN = "Copiar como";
var oN = "Exportar como";
var rN = "Selecionar todos";
var sN = "Selecionar nenhum";
var iN = "Apagar";
var aN = "Novo Projeto";
var lN = "Abrir";
var dN = "Salvar";
var cN = "Salvar Como";
var pN = "Upload M\xE9dia";
var uN = "Criar P\xE1gina";
var hN = "Nova P\xE1gina";
var mN = "Nome da P\xE1gina";
var gN = "Duplicar";
var fN = "Cancelar";
var SN = "Copiar Link de Convite";
var bN = "Criar um Projeto Multi-Utilizador";
var TN = "Copiar num Projeto Multi-Utilizador";
var yN = "Selecionar";
var wN = "Borracha";
var xN = "Desenhar";
var kN = "Seta";
var vN = "Texto";
var IN = "Post-it";
var CN = "Ret\xE2ngulo";
var DN = "Elipse";
var PN = "Tri\xE2ngulo";
var MN = "Linha";
var EN = "Rodar";
var BN = "Trancar a Propor\xE7\xE3o";
var RN = "Destrancar a Propor\xE7\xE3o";
var AN = "Agrupar";
var LN = "Desagrupar";
var HN = "Colocar no Fundo";
var zN = "Mover abaixo";
var ON = "Mover acima";
var FN = "Colocar \xE0 Frente";
var jN = "Reiniciar \xC2ngulo";
var GN = "Trancar";
var VN = "Destrancar";
var $N = "Mover para P\xE1gina";
var NN = "Inverter Horizontalmente";
var WN = "Inverter Verticalmente";
var UN = "Mover";
var KN = "Para Frente";
var _N = "Avan\xE7ar";
var YN = "Recuar";
var ZN = "Voltar";
var XN = "L\xEDngua";
var Ta = { "style.menu.color": y$, "style.menu.fill": w$, "style.menu.dash": x$, "style.menu.size": k$, "style.menu.keep.open": v$, "style.menu.font": I$, "style.menu.align": C$, styles: D$, "zoom.in": P$, "zoom.out": M$, to: E$, "menu.file": B$, "menu.edit": R$, "menu.view": A$, "menu.preferences": L$, "menu.sign.in": H$, "menu.sign.out": z$, "become.a.sponsor": O$, "zoom.to.selection": F$, "zoom.to.fit": j$, "zoom.to": G$, "preferences.dark.mode": V$, "preferences.focus.mode": $$, "preferences.debug.mode": N$, "preferences.show.grid": W$, "preferences.use.cad.selection": U$, "preferences.keep.stylemenu.open": K$, "preferences.always.show.snaps": _$, "preferences.rotate.handles": Y$, "preferences.binding.handles": Z$, "preferences.clone.handles": X$, undo: q$, redo: J$, cut: Q$, copy: eN, paste: tN, "copy.as": nN, "export.as": oN, "select.all": rN, "select.none": sN, delete: iN, "new.project": aN, open: lN, save: dN, "save.as": cN, "upload.media": pN, "create.page": uN, "new.page": hN, "page.name": mN, duplicate: gN, cancel: fN, "copy.invite.link": SN, "create.multiplayer.project": bN, "copy.multiplayer.project": TN, select: yN, eraser: wN, draw: xN, arrow: kN, text: vN, sticky: IN, rectangle: CN, ellipse: DN, triangle: PN, line: MN, rotate: EN, "lock.aspect.ratio": BN, "unlock.aspect.ratio": RN, group: AN, ungroup: LN, "move.to.back": HN, "move.backward": zN, "move.forward": ON, "move.to.front": FN, "reset.angle": jN, lock: GN, unlock: VN, "move.to.page": $N, "flip.horizontal": NN, "flip.vertical": WN, move: UN, "to.front": KN, forward: _N, backward: YN, back: ZN, language: XN };
var qN = "\u0426\u0432\u0435\u0442";
var JN = "\u0417\u0430\u043F\u043E\u043B\u043D\u044F\u0442\u044C";
var QN = "\u0428\u0442\u0440\u0438\u0445";
var eW = "\u0420\u0430\u0437\u043C\u0435\u0440";
var tW = "\u0414\u0435\u0440\u0436\u0430\u0442\u044C \u043E\u0442\u043A\u0440\u044B\u0442\u044B\u043C";
var nW = "\u0428\u0440\u0438\u0444\u0442";
var oW = "\u0412\u044B\u0440\u0430\u0432\u043D\u0438\u0432\u0430\u043D\u0438\u0435";
var rW = "\u0421\u0442\u0438\u043B\u044C";
var sW = "\u0423\u0432\u0435\u043B\u0438\u0447\u0438\u0442\u044C";
var iW = "\u0423\u043C\u0435\u043D\u044C\u0448\u0438\u0442\u044C";
var aW = "\u043A";
var lW = "\u0418\u043D\u0441\u0442\u0440\u0443\u043C\u0435\u043D\u0442\u044B";
var dW = "\u0418\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0435";
var cW = "\u0424\u0430\u0439\u043B";
var pW = "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435";
var uW = "\u0412\u0438\u0434";
var hW = "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438";
var mW = "\u0412\u043E\u0439\u0442\u0438";
var gW = "\u0412\u044B\u0439\u0442\u0438";
var fW = "\u0421\u0442\u0430\u0442\u044C \u0441\u043F\u043E\u043D\u0441\u043E\u0440\u043E\u043C";
var SW = "\u0412\u0435\u0440\u043D\u0443\u0442\u044C\u0441\u044F \u043A \u0441\u043E\u0434\u0435\u0440\u0436\u0438\u043C\u043E\u043C\u0443";
var bW = "\u041C\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044E";
var TW = "\u041C\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E \u0440\u0430\u0437\u043C\u0435\u0440\u0443 \u044D\u043A\u0440\u0430\u043D\u0430";
var yW = "\u041C\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043A";
var wW = "\u0422\u0451\u043C\u043D\u0430\u044F \u0442\u0435\u043C\u0430";
var xW = "\u041C\u0438\u043D\u0438\u043C\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u043D\u044B\u0439 \u0440\u0435\u0436\u0438\u043C";
var kW = "\u0420\u0435\u0436\u0438\u043C \u043E\u0442\u043B\u0430\u0434\u043A\u0438";
var vW = "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0441\u0435\u0442\u043A\u0443";
var IW = "\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C CAD \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435";
var CW = "\u0414\u0435\u0440\u0436\u0430\u0442\u044C \u043C\u0435\u043D\u044E \u0441\u0442\u0438\u043B\u0435\u0439 \u043E\u0442\u043A\u0440\u044B\u0442\u044B\u043C";
var DW = "\u0412\u0441\u0435\u0433\u0434\u0430 \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u043F\u0440\u0438\u0432\u044F\u0437\u043A\u0438";
var PW = "\u0420\u0443\u0447\u043A\u0438 \u0432\u0440\u0430\u0449\u0435\u043D\u0438\u044F";
var MW = "\u0420\u0443\u0447\u043A\u0438 \u043F\u0440\u0438\u0432\u044F\u0437\u043A\u0438";
var EW = "\u0420\u0443\u0447\u043A\u0438 \u043A\u043B\u043E\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F";
var BW = "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C";
var RW = "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C";
var AW = "\u0412\u044B\u0440\u0435\u0437\u0430\u0442\u044C";
var LW = "\u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var HW = "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044C";
var zW = "\u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043A\u0430\u043A";
var OW = "\u042D\u043A\u0441\u043F\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043A\u0430\u043A";
var FW = "\u0412\u044B\u0434\u0435\u043B\u0438\u0442\u044C \u0432\u0441\u0451";
var jW = "\u0421\u043D\u044F\u0442\u044C \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435";
var GW = "\u0423\u0434\u0430\u043B\u0438\u0442\u044C";
var VW = "\u041D\u043E\u0432\u044B\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var $W = "\u041E\u0442\u043A\u0440\u044B\u0442\u044C";
var NW = "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C";
var WW = "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043A\u0430\u043A";
var UW = "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u043C\u0435\u0434\u0438\u0430\u0444\u0430\u0439\u043B";
var KW = "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
var _W = "\u041D\u043E\u0432\u0430\u044F \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
var YW = "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B";
var ZW = "\u0414\u0443\u0431\u043B\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var XW = "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C";
var qW = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443 \u043F\u0440\u0438\u0433\u043B\u0430\u0448\u0435\u043D\u0438\u044F";
var JW = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443 \u0442\u043E\u043B\u044C\u043A\u043E \u0434\u043B\u044F \u0447\u0442\u0435\u043D\u0438\u044F";
var QW = "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043C\u043D\u043E\u0433\u043E\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var eU = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0432 \u043C\u043D\u043E\u0433\u043E\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var tU = "\u0412\u044B\u0434\u0435\u043B\u0438\u0442\u044C";
var nU = "\u041B\u0430\u0441\u0442\u0438\u043A";
var oU = "\u0420\u0438\u0441\u043E\u0432\u0430\u0442\u044C";
var rU = "\u0421\u0442\u0440\u0435\u043B\u043A\u0430";
var sU = "\u0422\u0435\u043A\u0441\u0442";
var iU = "\u0417\u0430\u043C\u0435\u0442\u043A\u0430";
var aU = "\u041F\u0440\u044F\u043C\u043E\u0443\u0433\u043E\u043B\u044C\u043D\u0438\u043A";
var lU = "\u042D\u043B\u043B\u0438\u043F\u0441";
var dU = "\u0422\u0440\u0435\u0443\u0433\u043E\u043B\u044C\u043D\u0438\u043A";
var cU = "\u041B\u0438\u043D\u0438\u044F";
var pU = "\u041F\u043E\u0432\u0435\u0440\u043D\u0443\u0442\u044C";
var uU = "\u0417\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0435 \u0441\u0442\u043E\u0440\u043E\u043D";
var hU = "\u0420\u0430\u0437\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0435 \u0441\u0442\u043E\u0440\u043E\u043D";
var mU = "\u0421\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var gU = "\u0420\u0430\u0437\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var fU = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u043D\u0430\u0437\u0430\u0434";
var SU = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u043D\u0430 \u0437\u0430\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var bU = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u0432\u043F\u0435\u0440\u0451\u0434";
var TU = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u043D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var yU = "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u0443\u0433\u043E\u043B";
var wU = "\u0411\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var xU = "\u0420\u0430\u0437\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var kU = "\u0412\u044B\u0440\u043E\u0432\u043D\u044F\u0442\u044C / \u0440\u0430\u0441\u043F\u0440\u0435\u0434\u0435\u043B\u0438\u0442\u044C";
var vU = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u043D\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
var IU = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E";
var CU = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E";
var DU = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C";
var PU = "\u041D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var MU = "\u0412\u043F\u0435\u0440\u0435\u0434";
var EU = "\u041D\u0430 \u0437\u0430\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var BU = "\u041D\u0430\u0437\u0430\u0434";
var RU = "\u042F\u0437\u044B\u043A";
var AU = "\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u0435\u0435";
var LU = "\u0420\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u043F\u0430\u043D\u0435\u043B\u0438 \u0438\u043D\u0441\u0442\u0440\u0443\u043C\u0435\u043D\u0442\u043E\u0432";
var HU = "\u0421\u043D\u0438\u0437\u0443";
var zU = "\u0421\u043B\u0435\u0432\u0430";
var OU = "\u0421\u043F\u0440\u0430\u0432\u0430";
var FU = "\u0421\u0432\u0435\u0440\u0445\u0443";
var jU = "\u0421\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
var GU = "\u0421\u043E\u0447\u0435\u0442\u0430\u043D\u0438\u044F \u043A\u043B\u0430\u0432\u0438\u0448";
var VU = "\u041F\u043E\u0438\u0441\u043A";
var $U = "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430";
var NU = "\u042D\u043A\u0441\u043F\u043E\u0440\u0442 \u0444\u043E\u043D\u0430";
var WU = "\u041F\u0440\u043E\u0437\u0440\u0430\u0447\u043D\u044B\u0439";
var UU = "\u0410\u0432\u0442\u043E";
var KU = "\u0421\u0432\u0435\u0442\u043B\u044B\u0439";
var _U = "\u0422\u0451\u043C\u043D\u044B\u0439";
var YU = "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435";
var ZU = "\u0412\u044B\u0440\u043E\u0432\u043D\u044F\u0442\u044C \u043F\u043E \u043B\u0435\u0432\u043E\u043C\u0443 \u043A\u0440\u0430\u044E";
var XU = "\u0412\u044B\u0440\u043E\u0432\u043D\u044F\u0442\u044C \u043F\u043E \u0446\u0435\u043D\u0442\u0440\u0443 \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E";
var qU = "\u0412\u044B\u0440\u043E\u0432\u043D\u044F\u0442\u044C \u043F\u043E \u043F\u0440\u0430\u0432\u043E\u043C\u0443 \u043A\u0440\u0430\u044E";
var JU = "\u0412\u044B\u0440\u043E\u0432\u043D\u044F\u0442\u044C \u043F\u043E \u0432\u0435\u0440\u0445\u043D\u0435\u043C\u0443 \u043A\u0440\u0430\u044E";
var QU = "\u0412\u044B\u0440\u043E\u0432\u043D\u044F\u0442\u044C \u043F\u043E \u0446\u0435\u043D\u0442\u0440\u0443 \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E";
var eK = "\u0412\u044B\u0440\u043E\u0432\u043D\u044F\u0442\u044C \u043F\u043E \u043D\u0438\u0436\u043D\u0435\u043C\u0443 \u043A\u0440\u0430\u044E";
var tK = "\u0420\u0430\u0441\u043F\u0440\u0435\u0434\u0435\u043B\u0438\u0442\u044C \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E";
var nK = "\u0420\u0430\u0441\u043F\u0440\u0435\u0434\u0435\u043B\u0438\u0442\u044C \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E";
var oK = "\u0420\u0430\u0441\u0442\u044F\u043D\u0443\u0442\u044C \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E";
var rK = "\u0420\u0430\u0441\u0442\u044F\u043D\u0443\u0442\u044C \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E";
var sK = "\u041F\u043E\u0434\u0435\u043B\u0438\u0442\u044C\u0441\u044F";
var iK = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443 \u043D\u0430 \u0442\u0435\u043A\u0443\u0449\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
var aK = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443 \u043D\u0430 \u043F\u0440\u043E\u0435\u043A\u0442";
var lK = "\u0414\u0430\u043D\u043D\u044B\u0435 \u0441\u043B\u0438\u0448\u043A\u043E\u043C \u0432\u0435\u043B\u0438\u043A\u0438, \u0447\u0442\u043E\u0431\u044B \u0437\u0430\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0438\u0445 \u0432 \u0441\u0441\u044B\u043B\u043A\u0435. \u041D\u0435 \u0432\u043A\u043B\u044E\u0447\u0430\u0439\u0442\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0438\u043B\u0438 \u0432\u0438\u0434\u0435\u043E!";
var dK = "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0442\u0435\u043A\u0443\u0449\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442?";
var cK = "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u0432 \u0442\u0435\u043A\u0443\u0449\u0435\u043C \u043F\u0440\u043E\u0435\u043A\u0442\u0435?";
var pK = "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C";
var uK = "\u041D\u0435\u0442";
var hK = "\u0414\u0430";
var mK = "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043C\u044F \u0444\u0430\u0439\u043B\u0430";
var ya = { "style.menu.color": qN, "style.menu.fill": JN, "style.menu.dash": QN, "style.menu.size": eW, "style.menu.keep.open": tW, "style.menu.font": nW, "style.menu.align": oW, styles: rW, "zoom.in": sW, "zoom.out": iW, to: aW, "menu.tools": lW, "menu.transform": dW, "menu.file": cW, "menu.edit": pW, "menu.view": uW, "menu.preferences": hW, "menu.sign.in": mW, "menu.sign.out": gW, "become.a.sponsor": fW, "zoom.to.content": SW, "zoom.to.selection": bW, "zoom.to.fit": TW, "zoom.to": yW, "preferences.dark.mode": wW, "preferences.focus.mode": xW, "preferences.debug.mode": kW, "preferences.show.grid": vW, "preferences.use.cad.selection": IW, "preferences.keep.stylemenu.open": CW, "preferences.always.show.snaps": DW, "preferences.rotate.handles": PW, "preferences.binding.handles": MW, "preferences.clone.handles": EW, undo: BW, redo: RW, cut: AW, copy: LW, paste: HW, "copy.as": zW, "export.as": OW, "select.all": FW, "select.none": jW, delete: GW, "new.project": VW, open: $W, save: NW, "save.as": WW, "upload.media": UW, "create.page": KW, "new.page": _W, "page.name": YW, duplicate: ZW, cancel: XW, "copy.invite.link": qW, "copy.readonly.link": JW, "create.multiplayer.project": QW, "copy.multiplayer.project": eU, select: tU, eraser: nU, draw: oU, arrow: rU, text: sU, sticky: iU, rectangle: aU, ellipse: lU, triangle: dU, line: cU, rotate: pU, "lock.aspect.ratio": uU, "unlock.aspect.ratio": hU, group: mU, ungroup: gU, "move.to.back": fU, "move.backward": SU, "move.forward": bU, "move.to.front": TU, "reset.angle": yU, lock: wU, unlock: xU, "align.distribute": kU, "move.to.page": vU, "flip.horizontal": IU, "flip.vertical": CU, move: DU, "to.front": PU, forward: MU, backward: EU, back: BU, language: RU, "translation.link": AU, "dock.position": LU, bottom: HU, left: zU, right: OU, top: FU, page: jU, "keyboard.shortcuts": GU, search: VU, loading: $U, "export.background": NU, transparent: WU, auto: UU, light: KU, dark: _U, image: YU, "align.left": ZU, "align.center.x": XU, "align.right": qU, "align.top": JU, "align.center.y": QU, "align.bottom": eK, "distribute.x": tK, "distribute.y": nK, "stretch.x": oK, "stretch.y": rK, share: sK, "copy.current.page.link": iK, "copy.project.link": aK, "data.too.big.encoded": lK, "dialog.save.firsttime": dK, "dialog.save.again": cK, "dialog.cancel": pK, "dialog.no": uK, "dialog.yes": hK, "enter.file.name": mK };
var gK = "F\xE4rg";
var fK = "Ifylld";
var SK = "Streck";
var bK = "Storlek";
var TK = "H\xE5ll stilmenyn \xF6ppen";
var yK = "Typsnitt";
var wK = "Justera";
var xK = "Utseende";
var kK = "Zooma in";
var vK = "Zooma ut";
var IK = "Till";
var CK = "Verktyg";
var DK = "Transform";
var PK = "Arkiv";
var MK = "Redigera";
var EK = "Inneh\xE5ll";
var BK = "Inst\xE4llningar";
var RK = "Logga in";
var AK = "Logga ut";
var LK = "Bli en sponsor";
var HK = "Anpassa zoom till inneh\xE5ll";
var zK = "Anpassa zoom till urval";
var OK = "Anpassa zoom till sk\xE4rm";
var FK = "Zooma till";
var jK = "M\xF6rkt l\xE4ge";
var GK = "Fokusl\xE4ge";
var VK = "Debugl\xE4ge";
var $K = "Visa rutn\xE4t";
var NK = "V\xE4lj som i CAD-mjukvara";
var WK = "H\xE5ll stilmenyn \xF6ppen";
var UK = "Visa alltid f\xE4stpunkter";
var KK = "Rotationshandtag";
var _K = "Bindningshandtag";
var YK = "Kloningshandtag";
var ZK = "\xC5ngra";
var XK = "G\xF6r om";
var qK = "Klipp ut";
var JK = "Kopiera";
var QK = "Klistra in";
var e_ = "Kopiera som";
var t_ = "Exportera till";
var n_ = "V\xE4lj alla";
var o_ = "V\xE4lj ingen";
var r_ = "Radera";
var s_ = "Nytt projekt";
var i_ = "\xD6ppna";
var a_ = "Spara";
var l_ = "Spara som";
var d_ = "Ladda upp media";
var c_ = "Skapa sida";
var p_ = "Ny sida";
var u_ = "Sidnamn";
var h_ = "Duplicera";
var m_ = "Avbryt";
var g_ = "Kopiera l\xE4nk med redigeringsr\xE4ttigheter";
var f_ = "Kopiera l\xE4nk med l\xE4sr\xE4ttigheter";
var S_ = "Skapa ett Multiplayer-projekt";
var b_ = "Kopiera till Multiplayer-project";
var T_ = "V\xE4lj";
var y_ = "Radera";
var w_ = "Rita";
var x_ = "Pil";
var k_ = "Text";
var v_ = "Klisterlapp";
var I_ = "Rektangel";
var C_ = "Ellips";
var D_ = "Triangel";
var P_ = "Linje";
var M_ = "Rotera";
var E_ = "L\xE5s storleksf\xF6rh\xE5llande";
var B_ = "L\xE5s upp storleksf\xF6rh\xE5llande";
var R_ = "Gruppera";
var A_ = "Avgruppera";
var L_ = "Placera l\xE4ngst bak";
var H_ = "Flytta bak\xE5t";
var z_ = "Flytta fram\xE5t";
var O_ = "Placera l\xE4ngst fram";
var F_ = "\xC5terst\xE4ll vinkel";
var j_ = "L\xE5s";
var G_ = "L\xE5s upp";
var V_ = "Justera / Placera";
var $_ = "Flytta till sida";
var N_ = "V\xE4nd horisontellt";
var W_ = "V\xE4nd vertikalt";
var U_ = "Flytta";
var K_ = "Till l\xE4ngst fram";
var __ = "Fram\xE5t";
var Y_ = "Bak\xE5t";
var Z_ = "Till l\xE4ngst bak";
var X_ = "Spr\xE5k";
var q_ = "Mer information";
var J_ = "Dockningsposition";
var Q_ = "Botten";
var eY = "V\xE4nster";
var tY = "H\xF6ger";
var nY = "Topp";
var oY = "Sida";
var rY = "Tangentbordsgenv\xE4gar";
var sY = "S\xF6k";
var iY = "Laddar{dots}";
var aY = "Exportbakgrund";
var lY = "Transparent";
var dY = "Auto";
var cY = "Ljus";
var pY = "M\xF6rk";
var uY = "Github";
var hY = "Twitter";
var mY = "Discord";
var gY = "Bild";
var wa = { "style.menu.color": gK, "style.menu.fill": fK, "style.menu.dash": SK, "style.menu.size": bK, "style.menu.keep.open": TK, "style.menu.font": yK, "style.menu.align": wK, styles: xK, "zoom.in": kK, "zoom.out": vK, to: IK, "menu.tools": CK, "menu.transform": DK, "menu.file": PK, "menu.edit": MK, "menu.view": EK, "menu.preferences": BK, "menu.sign.in": RK, "menu.sign.out": AK, "become.a.sponsor": LK, "zoom.to.content": HK, "zoom.to.selection": zK, "zoom.to.fit": OK, "zoom.to": FK, "preferences.dark.mode": jK, "preferences.focus.mode": GK, "preferences.debug.mode": VK, "preferences.show.grid": $K, "preferences.use.cad.selection": NK, "preferences.keep.stylemenu.open": WK, "preferences.always.show.snaps": UK, "preferences.rotate.handles": KK, "preferences.binding.handles": _K, "preferences.clone.handles": YK, undo: ZK, redo: XK, cut: qK, copy: JK, paste: QK, "copy.as": e_, "export.as": t_, "select.all": n_, "select.none": o_, delete: r_, "new.project": s_, open: i_, save: a_, "save.as": l_, "upload.media": d_, "create.page": c_, "new.page": p_, "page.name": u_, duplicate: h_, cancel: m_, "copy.invite.link": g_, "copy.readonly.link": f_, "create.multiplayer.project": S_, "copy.multiplayer.project": b_, select: T_, eraser: y_, draw: w_, arrow: x_, text: k_, sticky: v_, rectangle: I_, ellipse: C_, triangle: D_, line: P_, rotate: M_, "lock.aspect.ratio": E_, "unlock.aspect.ratio": B_, group: R_, ungroup: A_, "move.to.back": L_, "move.backward": H_, "move.forward": z_, "move.to.front": O_, "reset.angle": F_, lock: j_, unlock: G_, "align.distribute": V_, "move.to.page": $_, "flip.horizontal": N_, "flip.vertical": W_, move: U_, "to.front": K_, forward: __, backward: Y_, back: Z_, language: X_, "translation.link": q_, "dock.position": J_, bottom: Q_, left: eY, right: tY, top: nY, page: oY, "keyboard.shortcuts": rY, search: sY, loading: iY, "export.background": aY, transparent: lY, auto: dY, light: cY, dark: pY, github: uY, twitter: hY, discord: mY, image: gY };
var fY = "\u0C30\u0C02\u0C17\u0C41";
var SY = "\u0C28\u0C3F\u0C02\u0C2A\u0C41";
var bY = "\u0C05\u0C21\u0C4D\u0C21 \u0C17\u0C40\u0C24";
var TY = "\u0C2A\u0C30\u0C3F\u0C2E\u0C3E\u0C23\u0C02";
var yY = "\u0C24\u0C46\u0C30\u0C3F\u0C1A\u0C3F \u0C09\u0C02\u0C1A\u0C41";
var wY = "\u0C05\u0C15\u0C4D\u0C37\u0C30\u0C3E\u0C15\u0C43\u0C24\u0C3F";
var xY = "\u0C38\u0C30\u0C3F\u0C2A\u0C30\u0C1A\u0C41";
var kY = "\u0C35\u0C3F\u0C27\u0C2E\u0C41\u0C32\u0C41";
var vY = "\u0C26\u0C17\u0C4D\u0C17\u0C30\u0C17\u0C3E \u0C1A\u0C42\u0C2A\u0C41";
var IY = "\u0C26\u0C42\u0C30\u0C02\u0C17\u0C3E \u0C1A\u0C42\u0C2A\u0C41";
var CY = "\u0C35\u0C26\u0C4D\u0C26\u0C15\u0C41";
var DY = "\u0C2A\u0C30\u0C3F\u0C15\u0C30\u0C3E\u0C32\u0C41";
var PY = "\u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C41";
var MY = "\u0C2B\u0C48\u0C32\u0C4D";
var EY = "\u0C2A\u0C30\u0C3F\u0C37\u0C4D\u0C15\u0C30\u0C3F\u0C02\u0C1A\u0C41";
var BY = "\u0C1A\u0C42\u0C2A\u0C41";
var RY = "\u0C0E\u0C02\u0C1A\u0C41\u0C15\u0C4A\u0C28\u0C4D\u0C28\u0C35\u0C3F";
var AY = "\u0C2A\u0C4D\u0C30\u0C35\u0C47\u0C36\u0C3F\u0C02\u0C1A\u0C41";
var LY = "\u0C28\u0C3F\u0C37\u0C4D\u0C15\u0C4D\u0C30\u0C2E\u0C23";
var HY = "\u0C35\u0C3F\u0C30\u0C3E\u0C33\u0C26\u0C3E\u0C30\u0C41\u0C32\u0C41 \u0C05\u0C35\u0C4D\u0C35\u0C02\u0C21\u0C3F";
var zY = "\u0C35\u0C3F\u0C37\u0C2F\u0C3E\u0C28\u0C4D\u0C28\u0C47 \u0C1A\u0C42\u0C2A\u0C41";
var OY = "\u0C0E\u0C02\u0C1A\u0C41\u0C15\u0C41\u0C28\u0C4D\u0C28 \u0C35\u0C3F\u0C37\u0C2F\u0C3E\u0C28\u0C4D\u0C28\u0C47 \u0C1A\u0C42\u0C2A\u0C41";
var FY = "\u0C38\u0C30\u0C3F\u0C2A\u0C46\u0C1F\u0C4D\u0C1F\u0C3F \u0C1A\u0C42\u0C2A\u0C41";
var jY = "\u0C1A\u0C42\u0C2A\u0C41";
var GY = "\u0C1A\u0C40\u0C15\u0C1F\u0C48\u0C28 \u0C15\u0C4D\u0C30\u0C2E\u0C02";
var VY = "\u0C24\u0C40\u0C15\u0C4D\u0C37\u0C23 \u0C15\u0C4D\u0C30\u0C2E\u0C02";
var $Y = "\u0C24\u0C2A\u0C4D\u0C2A\u0C41\u0C32\u0C47\u0C30\u0C41 \u0C15\u0C4D\u0C30\u0C2E\u0C02";
var NY = "\u0C1A\u0C1F\u0C4D\u0C30\u0C02 \u0C1A\u0C42\u0C2A\u0C41";
var WY = "CAD\u0C28\u0C3F \u0C35\u0C3E\u0C21\u0C41";
var UY = "\u0C35\u0C3F\u0C27\u0C2E\u0C41\u0C32 \u0C2A\u0C24\u0C4D\u0C24\u0C3F \u0C24\u0C46\u0C30\u0C3F\u0C1A\u0C3F\u0C35\u0C41\u0C02\u0C1A\u0C41";
var KY = "\u0C0E\u0C2A\u0C4D\u0C2A\u0C41\u0C21\u0C42 \u0C26\u0C43\u0C36\u0C4D\u0C2F\u0C2D\u0C3E\u0C17\u0C02 \u0C1A\u0C42\u0C2A\u0C41";
var _Y = "\u0C39\u0C4D\u0C2F\u0C3E\u0C02\u0C21\u0C3F\u0C32\u0C4D\u0C38\u0C4D \u0C24\u0C3F\u0C2A\u0C4D\u0C2A\u0C41";
var YY = "\u0C2F\u0C3E\u0C02\u0C21\u0C3F\u0C32\u0C4D\u0C38\u0C4D \u0C15\u0C1F\u0C4D\u0C1F\u0C41";
var ZY = "\u0C2F\u0C3E\u0C02\u0C21\u0C3F\u0C32\u0C4D\u0C38\u0C4D \u0C28\u0C15\u0C32\u0C41";
var XY = "\u0C2E\u0C3E\u0C30\u0C4D\u0C2A\u0C41\u0C28\u0C3F \u0C24\u0C3F\u0C30\u0C41\u0C17\u0C17\u0C4A\u0C1F\u0C4D\u0C1F\u0C41";
var qY = "\u0C2E\u0C33\u0C4D\u0C33\u0C40 \u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C41";
var JY = "\u0C15\u0C24\u0C4D\u0C24\u0C3F\u0C30\u0C3F\u0C02\u0C1A\u0C41";
var QY = "\u0C28\u0C15\u0C32\u0C41";
var eZ = "\u0C05\u0C24\u0C3F\u0C15\u0C3F\u0C02\u0C1A\u0C41";
var tZ = "\u0C28\u0C15\u0C32\u0C41\u0C2A\u0C4D\u0C30\u0C24\u0C3F\u0C17\u0C3E \u0C07\u0C15\u0C4D\u0C15\u0C21\u0C3F\u0C15\u0C3F";
var nZ = "\u0C0E\u0C17\u0C41\u0C2E\u0C24\u0C3F \u0C07\u0C15\u0C4D\u0C15\u0C21\u0C3F\u0C15\u0C3F";
var oZ = "\u0C05\u0C28\u0C4D\u0C28\u0C40 \u0C0E\u0C02\u0C2A\u0C3F\u0C15\u0C1A\u0C46\u0C2F\u0C4D\u0C2F\u0C3F";
var rZ = "\u0C0E\u0C26\u0C40 \u0C0E\u0C02\u0C2A\u0C3F\u0C15\u0C1A\u0C46\u0C2F\u0C4D\u0C2F\u0C35\u0C26\u0C4D\u0C26\u0C41";
var sZ = "\u0C24\u0C4A\u0C32\u0C17\u0C3F\u0C02\u0C1A\u0C41";
var iZ = "\u0C15\u0C4A\u0C24\u0C4D\u0C24 \u0C2A\u0C4D\u0C30\u0C3E\u0C1C\u0C46\u0C15\u0C4D\u0C1F\u0C41";
var aZ = "\u0C24\u0C46\u0C30\u0C41\u0C35\u0C41";
var lZ = "\u0C26\u0C3E\u0C2F\u0C3F";
var dZ = "\u0C07\u0C32\u0C3E \u0C26\u0C3E\u0C2F\u0C3F";
var cZ = "\u0C0E\u0C17\u0C41\u0C2E\u0C24\u0C3F \u0C2E\u0C3E\u0C27\u0C4D\u0C2F\u0C02";
var pZ = "\u0C2A\u0C41\u0C1F \u0C15\u0C32\u0C4D\u0C2A\u0C3F\u0C02\u0C1A\u0C41";
var uZ = "\u0C15\u0C4A\u0C24\u0C4D\u0C24 \u0C2A\u0C41\u0C1F";
var hZ = "\u0C2A\u0C41\u0C1F \u0C2A\u0C47\u0C30\u0C41";
var mZ = "\u0C2E\u0C3E\u0C30\u0C41\u0C2A\u0C4D\u0C30\u0C24\u0C3F";
var gZ = "\u0C30\u0C26\u0C4D\u0C26\u0C41\u0C1A\u0C47\u0C2F\u0C3F";
var fZ = "\u0C05\u0C39\u0C4D\u0C35\u0C3E\u0C28 \u0C32\u0C3F\u0C02\u0C15\u0C41 \u0C30\u0C3E\u0C2F\u0C3F";
var SZ = "\u0C2E\u0C3E\u0C30\u0C28\u0C3F\u0C2A\u0C4D\u0C30\u0C24\u0C3F \u0C32\u0C3F\u0C02\u0C15\u0C41 \u0C30\u0C3E\u0C2F\u0C3F";
var bZ = "\u0C2C\u0C39\u0C41\u0C15\u0C30\u0C4D\u0C24\u0C32 \u0C2A\u0C4D\u0C30\u0C3E\u0C1C\u0C46\u0C15\u0C4D\u0C1F\u0C41 \u0C15\u0C32\u0C4D\u0C2A\u0C3F\u0C02\u0C1A\u0C41";
var TZ = "\u0C2C\u0C39\u0C41\u0C15\u0C30\u0C4D\u0C24\u0C32 \u0C2A\u0C4D\u0C30\u0C3E\u0C1C\u0C46\u0C15\u0C4D\u0C1F\u0C41\u0C15\u0C41 \u0C30\u0C3E\u0C2F\u0C3F";
var yZ = "\u0C0E\u0C02\u0C2A\u0C3F\u0C15\u0C1A\u0C46\u0C2F\u0C4D\u0C2F\u0C3F";
var wZ = "Eraser";
var xZ = "\u0C17\u0C40\u0C2F\u0C4D\u0C2F\u0C3F";
var kZ = "\u0C2C\u0C3E\u0C23\u0C02";
var vZ = "\u0C05\u0C15\u0C4D\u0C37\u0C30\u0C2E\u0C41\u0C32\u0C41";
var IZ = "\u0C05\u0C24\u0C41\u0C15\u0C4D\u0C15\u0C41\u0C28\u0C47";
var CZ = "\u0C26\u0C40\u0C30\u0C4D\u0C18\u0C1A\u0C24\u0C41\u0C30\u0C38\u0C4D\u0C30\u0C02";
var DZ = "\u0C26\u0C40\u0C30\u0C4D\u0C18\u0C35\u0C43\u0C24\u0C4D\u0C24\u0C02";
var PZ = "\u0C24\u0C4D\u0C30\u0C3F\u0C2D\u0C41\u0C1C\u0C02";
var MZ = "\u0C17\u0C40\u0C24";
var EZ = "\u0C24\u0C3F\u0C2A\u0C4D\u0C2A\u0C41";
var BZ = "\u0C06\u0C38\u0C4D\u0C2A\u0C46\u0C15\u0C4D\u0C1F\u0C4D \u0C28\u0C3F\u0C37\u0C4D\u0C2A\u0C24\u0C4D\u0C24\u0C3F\u0C15\u0C3F \u0C24\u0C3E\u0C33\u0C02\u0C2A\u0C46\u0C1F\u0C4D\u0C1F\u0C41";
var RZ = "\u0C06\u0C38\u0C4D\u0C2A\u0C46\u0C15\u0C4D\u0C1F\u0C4D \u0C28\u0C3F\u0C37\u0C4D\u0C2A\u0C24\u0C4D\u0C24\u0C3F \u0C24\u0C3E\u0C33\u0C02\u0C24\u0C46\u0C30\u0C41\u0C35\u0C41";
var AZ = "\u0C17\u0C41\u0C02\u0C2A\u0C41\u0C17\u0C3E \u0C0F\u0C30\u0C4D\u0C2A\u0C30\u0C1A\u0C41";
var LZ = "\u0C17\u0C41\u0C02\u0C2A\u0C41\u0C28\u0C41 \u0C1A\u0C46\u0C26\u0C30\u0C17\u0C4A\u0C1F\u0C4D\u0C1F\u0C41";
var HZ = "\u0C06\u0C16\u0C30\u0C3F\u0C15\u0C3F \u0C1C\u0C30\u0C41\u0C2A\u0C41";
var zZ = "\u0C35\u0C46\u0C28\u0C41\u0C15\u0C15\u0C41 \u0C1C\u0C30\u0C41\u0C2A\u0C41";
var OZ = "\u0C2E\u0C41\u0C02\u0C26\u0C41\u0C15\u0C41 \u0C1C\u0C30\u0C41\u0C2A\u0C41";
var FZ = "\u0C2E\u0C4A\u0C26\u0C1F\u0C3F\u0C15\u0C3F \u0C1C\u0C30\u0C41\u0C2A\u0C41";
var jZ = "\u0C15\u0C4B\u0C23\u0C02 \u0C30\u0C40\u0C38\u0C46\u0C1F\u0C4D";
var GZ = "\u0C24\u0C3E\u0C33\u0C02 \u0C35\u0C46\u0C2F\u0C4D\u0C2F\u0C3F";
var VZ = "\u0C24\u0C3E\u0C33\u0C02 \u0C24\u0C3F\u0C2F\u0C4D\u0C2F\u0C3F";
var $Z = " \u0C38\u0C30\u0C3F\u0C2A\u0C30\u0C1A\u0C41/\u0C35\u0C46\u0C26\u0C1C\u0C32\u0C4D\u0C32\u0C41";
var NZ = "\u0C2A\u0C41\u0C1F\u0C32\u0C4B\u0C15\u0C3F \u0C1C\u0C30\u0C41\u0C2A\u0C41";
var WZ = "\u0C05\u0C21\u0C4D\u0C21\u0C02\u0C17\u0C3E \u0C2A\u0C32\u0C4D\u0C1F\u0C40";
var UZ = "\u0C28\u0C3F\u0C32\u0C41\u0C35\u0C41\u0C17\u0C3E \u0C2A\u0C32\u0C4D\u0C1F\u0C40";
var KZ = "\u0C1C\u0C30\u0C41\u0C2A\u0C41";
var _Z = "\u0C2E\u0C4A\u0C26\u0C1F\u0C3F\u0C15\u0C3F";
var YZ = "\u0C2E\u0C41\u0C02\u0C26\u0C41\u0C15\u0C41";
var ZZ = "\u0C35\u0C46\u0C28\u0C41\u0C15\u0C15\u0C41";
var XZ = "\u0C06\u0C16\u0C30\u0C3F\u0C15\u0C3F";
var qZ = "\u0C2D\u0C3E\u0C37";
var JZ = "\u0C2E\u0C30\u0C3F \u0C15\u0C4A\u0C28\u0C4D\u0C28\u0C3F \u0C35\u0C3F\u0C37\u0C2F\u0C3E\u0C32\u0C41";
var QZ = "\u0C2E\u0C02\u0C1A \u0C38\u0C4D\u0C25\u0C3E\u0C28\u0C02";
var eX = "\u0C05\u0C21\u0C41\u0C17\u0C41\u0C28";
var tX = "\u0C0E\u0C21\u0C2E\u0C35\u0C48\u0C2A\u0C41";
var nX = "\u0C15\u0C41\u0C21\u0C3F\u0C35\u0C48\u0C2A\u0C41";
var oX = "\u0C2A\u0C48\u0C28";
var rX = "\u0C2A\u0C41\u0C24";
var sX = "\u0C15\u0C40\u0C2C\u0C4B\u0C30\u0C4D\u0C21\u0C4D \u0C38\u0C24\u0C4D\u0C35\u0C30\u0C2E\u0C3E\u0C30\u0C4D\u0C17\u0C02";
var iX = "\u0C35\u0C46\u0C24\u0C41\u0C15\u0C41";
var aX = "Loading{dots}";
var lX = "\u0C28\u0C47\u0C2A\u0C25\u0C4D\u0C2F\u0C02 \u0C0E\u0C17\u0C41\u0C2E\u0C24\u0C3F";
var dX = "\u0C15\u0C3E\u0C02\u0C24\u0C3F \u0C2D\u0C47\u0C26\u0C4D\u0C2F\u0C2E\u0C41";
var cX = "\u0C38\u0C4D\u0C35\u0C2F\u0C02\u0C15\u0C43\u0C24\u0C02";
var pX = "\u0C35\u0C46\u0C32\u0C41\u0C24\u0C41\u0C30\u0C41";
var uX = "\u0C1A\u0C40\u0C15\u0C1F\u0C3F";
var hX = "Github";
var mX = "Twitter";
var gX = "Discord";
var fX = "\u0C1A\u0C3F\u0C24\u0C4D\u0C30\u0C02";
var SX = "\u0C0E\u0C21\u0C2E\u0C35\u0C48\u0C2A\u0C41\u0C15\u0C41 \u0C15\u0C41\u0C26\u0C41\u0C30\u0C4D\u0C1A\u0C41";
var bX = "\u0C05\u0C21\u0C4D\u0C21\u0C02\u0C17\u0C3E \u0C2E\u0C27\u0C4D\u0C2F\u0C32\u0C4B \u0C15\u0C41\u0C26\u0C41\u0C30\u0C4D\u0C1A\u0C41";
var TX = "\u0C15\u0C41\u0C21\u0C3F\u0C35\u0C48\u0C2A\u0C41\u0C15\u0C41 \u0C15\u0C41\u0C26\u0C41\u0C30\u0C4D\u0C1A\u0C41";
var yX = "\u0C2A\u0C48\u0C15\u0C3F \u0C15\u0C41\u0C26\u0C41\u0C30\u0C4D\u0C1A\u0C41";
var wX = "\u0C28\u0C3F\u0C32\u0C41\u0C35\u0C41\u0C17\u0C3E \u0C2E\u0C27\u0C4D\u0C2F\u0C32\u0C4B \u0C15\u0C41\u0C26\u0C41\u0C30\u0C4D\u0C1A\u0C41";
var xX = "\u0C05\u0C21\u0C41\u0C17\u0C41\u0C28 \u0C15\u0C41\u0C26\u0C41\u0C30\u0C4D\u0C1A\u0C41";
var kX = "\u0C05\u0C21\u0C4D\u0C21\u0C02\u0C17\u0C3E \u0C2A\u0C02\u0C1A\u0C41";
var vX = "\u0C28\u0C3F\u0C32\u0C41\u0C35\u0C41\u0C17\u0C3E \u0C2A\u0C02\u0C1A\u0C41";
var IX = "\u0C05\u0C21\u0C4D\u0C21\u0C02\u0C17\u0C3E \u0C32\u0C3E\u0C17\u0C41";
var CX = "\u0C28\u0C3F\u0C32\u0C41\u0C35\u0C41\u0C17\u0C3E \u0C32\u0C3E\u0C17\u0C41";
var DX = "\u0C2E\u0C40\u0C30\u0C41 \u0C08 \u0C2A\u0C4D\u0C30\u0C3E\u0C1C\u0C46\u0C15\u0C4D\u0C1F\u0C4D \u0C2D\u0C26\u0C4D\u0C30\u0C2A\u0C30\u0C1A\u0C41\u0C15\u0C4B\u0C35\u0C3E\u0C32\u0C28\u0C3F \u0C05\u0C28\u0C41\u0C15\u0C41\u0C02\u0C1F\u0C41\u0C28\u0C4D\u0C28\u0C3E\u0C30\u0C3E?";
var PX = "\u0C2E\u0C40\u0C30\u0C41 \u0C08 \u0C2A\u0C4D\u0C30\u0C3E\u0C1C\u0C46\u0C15\u0C4D\u0C1F\u0C4D \u0C2D\u0C26\u0C4D\u0C30\u0C2A\u0C30\u0C1A\u0C41\u0C15\u0C4B\u0C35\u0C3E\u0C32\u0C28\u0C3F \u0C05\u0C28\u0C41\u0C15\u0C41\u0C02\u0C1F\u0C41\u0C28\u0C4D\u0C28\u0C3E\u0C30\u0C3E?";
var MX = "\u0C30\u0C26\u0C4D\u0C26\u0C41\u0C1A\u0C46\u0C2F\u0C4D\u0C2F\u0C3F";
var EX = "\u0C35\u0C26\u0C4D\u0C26\u0C41";
var BX = "\u0C38\u0C30\u0C47";
var RX = "\u0C2B\u0C48\u0C32\u0C4D \u0C2A\u0C46\u0C30\u0C41 \u0C1A\u0C46\u0C2A\u0C4D\u0C2A\u0C02\u0C21\u0C3F";
var xa = { "style.menu.color": fY, "style.menu.fill": SY, "style.menu.dash": bY, "style.menu.size": TY, "style.menu.keep.open": yY, "style.menu.font": wY, "style.menu.align": xY, styles: kY, "zoom.in": vY, "zoom.out": IY, to: CY, "menu.tools": DY, "menu.transform": PY, "menu.file": MY, "menu.edit": EY, "menu.view": BY, "menu.preferences": RY, "menu.sign.in": AY, "menu.sign.out": LY, "become.a.sponsor": HY, "zoom.to.content": zY, "zoom.to.selection": OY, "zoom.to.fit": FY, "zoom.to": jY, "preferences.dark.mode": GY, "preferences.focus.mode": VY, "preferences.debug.mode": $Y, "preferences.show.grid": NY, "preferences.use.cad.selection": WY, "preferences.keep.stylemenu.open": UY, "preferences.always.show.snaps": KY, "preferences.rotate.handles": _Y, "preferences.binding.handles": YY, "preferences.clone.handles": ZY, undo: XY, redo: qY, cut: JY, copy: QY, paste: eZ, "copy.as": tZ, "export.as": nZ, "select.all": oZ, "select.none": rZ, delete: sZ, "new.project": iZ, open: aZ, save: lZ, "save.as": dZ, "upload.media": cZ, "create.page": pZ, "new.page": uZ, "page.name": hZ, duplicate: mZ, cancel: gZ, "copy.invite.link": fZ, "copy.readonly.link": SZ, "create.multiplayer.project": bZ, "copy.multiplayer.project": TZ, select: yZ, eraser: wZ, draw: xZ, arrow: kZ, text: vZ, sticky: IZ, rectangle: CZ, ellipse: DZ, triangle: PZ, line: MZ, rotate: EZ, "lock.aspect.ratio": BZ, "unlock.aspect.ratio": RZ, group: AZ, ungroup: LZ, "move.to.back": HZ, "move.backward": zZ, "move.forward": OZ, "move.to.front": FZ, "reset.angle": jZ, lock: GZ, unlock: VZ, "align.distribute": $Z, "move.to.page": NZ, "flip.horizontal": WZ, "flip.vertical": UZ, move: KZ, "to.front": _Z, forward: YZ, backward: ZZ, back: XZ, language: qZ, "translation.link": JZ, "dock.position": QZ, bottom: eX, left: tX, right: nX, top: oX, page: rX, "keyboard.shortcuts": sX, search: iX, loading: aX, "export.background": lX, transparent: dX, auto: cX, light: pX, dark: uX, github: hX, twitter: mX, discord: gX, image: fX, "align.left": SX, "align.center.x": bX, "align.right": TX, "align.top": yX, "align.center.y": wX, "align.bottom": xX, "distribute.x": kX, "distribute.y": vX, "stretch.x": IX, "stretch.y": CX, "dialog.save.firsttime": DX, "dialog.save.again": PX, "dialog.cancel": MX, "dialog.no": EX, "dialog.yes": BX, "enter.file.name": RX };
var AX = "\u0E2A\u0E35";
var LX = "\u0E40\u0E15\u0E34\u0E21";
var HX = "\u0E01\u0E23\u0E2D\u0E1A";
var zX = "\u0E02\u0E19\u0E32\u0E14";
var OX = "\u0E40\u0E1B\u0E34\u0E14\u0E17\u0E34\u0E49\u0E07\u0E44\u0E27\u0E49";
var FX = "\u0E41\u0E1A\u0E1A\u0E2D\u0E31\u0E01\u0E29\u0E23";
var jX = "\u0E08\u0E31\u0E14\u0E15\u0E33\u0E41\u0E2B\u0E19\u0E48\u0E07";
var GX = "\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A";
var VX = "\u0E0B\u0E39\u0E21\u0E40\u0E02\u0E49\u0E32";
var $X = "\u0E0B\u0E39\u0E21\u0E2D\u0E2D\u0E01";
var NX = "\u0E0B\u0E39\u0E21\u0E44\u0E1B\u0E17\u0E35\u0E48";
var WX = "\u0E40\u0E04\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E21\u0E37\u0E2D";
var UX = "\u0E41\u0E1B\u0E25\u0E07";
var KX = "\u0E44\u0E1F\u0E25\u0E4C";
var _X = "\u0E41\u0E01\u0E49\u0E44\u0E02";
var YX = "\u0E21\u0E38\u0E21\u0E21\u0E2D\u0E07";
var ZX = "\u0E01\u0E32\u0E23\u0E15\u0E31\u0E49\u0E07\u0E04\u0E48\u0E32";
var XX = "\u0E40\u0E02\u0E49\u0E32\u0E2A\u0E39\u0E48\u0E23\u0E30\u0E1A\u0E1A";
var qX = "\u0E2D\u0E2D\u0E01\u0E08\u0E32\u0E01\u0E23\u0E30\u0E1A\u0E1A";
var JX = "\u0E23\u0E48\u0E27\u0E21\u0E40\u0E1B\u0E47\u0E19\u0E2A\u0E1B\u0E2D\u0E19\u0E40\u0E0B\u0E2D\u0E23\u0E4C";
var QX = "\u0E01\u0E25\u0E31\u0E1A\u0E44\u0E1B\u0E22\u0E31\u0E07\u0E40\u0E19\u0E37\u0E49\u0E2D\u0E2B\u0E32";
var eq = "\u0E0B\u0E39\u0E21\u0E44\u0E1B\u0E22\u0E31\u0E07\u0E2A\u0E48\u0E27\u0E19\u0E17\u0E35\u0E48\u0E40\u0E25\u0E37\u0E2D\u0E01";
var tq = "\u0E0B\u0E39\u0E21\u0E43\u0E2B\u0E49\u0E40\u0E15\u0E47\u0E21\u0E1E\u0E2D\u0E14\u0E35";
var nq = "\u0E0B\u0E39\u0E21\u0E44\u0E1B\u0E17\u0E35\u0E48";
var oq = "\u0E42\u0E2B\u0E21\u0E14\u0E21\u0E37\u0E14";
var rq = "\u0E42\u0E2B\u0E21\u0E14\u0E42\u0E1F\u0E01\u0E31\u0E2A";
var sq = "\u0E42\u0E2B\u0E21\u0E14\u0E14\u0E35\u0E1A\u0E31\u0E01";
var iq = "\u0E41\u0E2A\u0E14\u0E07\u0E15\u0E32\u0E23\u0E32\u0E07";
var aq = "\u0E01\u0E32\u0E23\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E41\u0E1A\u0E1A CAD";
var lq = "\u0E40\u0E1B\u0E34\u0E14\u0E40\u0E21\u0E19\u0E39\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E17\u0E34\u0E49\u0E07\u0E44\u0E27\u0E49";
var dq = "\u0E41\u0E2A\u0E14\u0E07\u0E2A\u0E41\u0E19\u0E1B\u0E15\u0E25\u0E2D\u0E14";
var cq = "\u0E41\u0E2A\u0E14\u0E07\u0E08\u0E38\u0E14\u0E08\u0E31\u0E1A\u0E01\u0E32\u0E23\u0E2B\u0E21\u0E38\u0E19";
var pq = "\u0E41\u0E2A\u0E14\u0E07\u0E2B\u0E21\u0E32\u0E22\u0E40\u0E25\u0E02\u0E2D\u0E49\u0E32\u0E07\u0E2D\u0E34\u0E07";
var uq = "\u0E41\u0E2A\u0E14\u0E07\u0E15\u0E31\u0E27\u0E42\u0E04\u0E25\u0E19";
var hq = "\u0E40\u0E25\u0E34\u0E01\u0E17\u0E33";
var mq = "\u0E17\u0E33\u0E0B\u0E49\u0E33";
var gq = "\u0E15\u0E31\u0E14";
var fq = "\u0E04\u0E31\u0E14\u0E25\u0E2D\u0E01";
var Sq = "\u0E27\u0E32\u0E07";
var bq = "\u0E04\u0E31\u0E14\u0E25\u0E2D\u0E01\u0E40\u0E1B\u0E47\u0E19";
var Tq = "\u0E2A\u0E48\u0E07\u0E2D\u0E2D\u0E01\u0E40\u0E1B\u0E47\u0E19";
var yq = "\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E17\u0E31\u0E49\u0E07\u0E2B\u0E21\u0E14";
var wq = "\u0E22\u0E01\u0E40\u0E25\u0E34\u0E01\u0E2A\u0E34\u0E48\u0E07\u0E17\u0E35\u0E48\u0E40\u0E25\u0E37\u0E2D\u0E01";
var xq = "\u0E25\u0E1A";
var kq = "\u0E42\u0E1B\u0E23\u0E40\u0E08\u0E01\u0E15\u0E4C\u0E43\u0E2B\u0E21\u0E48";
var vq = "\u0E40\u0E1B\u0E34\u0E14";
var Iq = "\u0E1A\u0E31\u0E19\u0E17\u0E36\u0E01";
var Cq = "\u0E1A\u0E31\u0E19\u0E17\u0E36\u0E01\u0E40\u0E1B\u0E47\u0E19";
var Dq = "\u0E2D\u0E31\u0E1E\u0E42\u0E2B\u0E25\u0E14\u0E21\u0E35\u0E40\u0E14\u0E35\u0E22";
var Pq = "\u0E2A\u0E23\u0E49\u0E32\u0E07\u0E2B\u0E19\u0E49\u0E32";
var Mq = "\u0E2B\u0E19\u0E49\u0E32\u0E43\u0E2B\u0E21\u0E48";
var Eq = "\u0E0A\u0E37\u0E48\u0E2D\u0E2B\u0E19\u0E49\u0E32";
var Bq = "\u0E2A\u0E33\u0E40\u0E19\u0E32";
var Rq = "\u0E22\u0E01\u0E40\u0E25\u0E34\u0E01";
var Aq = "\u0E04\u0E31\u0E14\u0E25\u0E2D\u0E01\u0E25\u0E34\u0E07\u0E01\u0E4C\u0E40\u0E0A\u0E34\u0E0D";
var Lq = "\u0E04\u0E31\u0E14\u0E25\u0E2D\u0E01\u0E25\u0E34\u0E07\u0E01\u0E4C\u0E41\u0E1A\u0E1A\u0E43\u0E2B\u0E49\u0E2D\u0E48\u0E32\u0E19\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E40\u0E14\u0E35\u0E22\u0E27";
var Hq = "\u0E2A\u0E23\u0E49\u0E32\u0E07\u0E42\u0E1B\u0E23\u0E40\u0E08\u0E01\u0E15\u0E4C\u0E1C\u0E39\u0E49\u0E43\u0E0A\u0E49\u0E07\u0E32\u0E19\u0E2B\u0E25\u0E32\u0E22\u0E04\u0E19";
var zq = "\u0E04\u0E31\u0E14\u0E25\u0E2D\u0E01\u0E42\u0E1B\u0E23\u0E40\u0E08\u0E01\u0E15\u0E4C\u0E1C\u0E39\u0E49\u0E43\u0E0A\u0E49\u0E07\u0E32\u0E19\u0E2B\u0E25\u0E32\u0E22\u0E04\u0E19";
var Oq = "\u0E40\u0E25\u0E37\u0E2D\u0E01";
var Fq = "\u0E22\u0E32\u0E07\u0E25\u0E1A";
var jq = "\u0E27\u0E32\u0E14";
var Gq = "\u0E25\u0E39\u0E01\u0E28\u0E23";
var Vq = "\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21";
var $q = "\u0E01\u0E23\u0E30\u0E14\u0E32\u0E29\u0E42\u0E19\u0E4A\u0E15";
var Nq = "\u0E2A\u0E35\u0E48\u0E40\u0E2B\u0E25\u0E35\u0E48\u0E22\u0E21\u0E1C\u0E37\u0E19\u0E1C\u0E49\u0E32";
var Wq = "\u0E27\u0E07\u0E23\u0E35";
var Uq = "\u0E2A\u0E32\u0E21\u0E40\u0E2B\u0E25\u0E35\u0E48\u0E22\u0E21";
var Kq = "\u0E40\u0E2A\u0E49\u0E19";
var _q = "\u0E2B\u0E21\u0E38\u0E19";
var Yq = "\u0E25\u0E47\u0E2D\u0E04\u0E2D\u0E31\u0E15\u0E23\u0E32\u0E2A\u0E48\u0E27\u0E19\u0E20\u0E32\u0E1E";
var Zq = "\u0E1B\u0E25\u0E14\u0E25\u0E47\u0E2D\u0E01\u0E2D\u0E31\u0E15\u0E23\u0E32\u0E2A\u0E48\u0E27\u0E19\u0E20\u0E32\u0E1E";
var Xq = "\u0E01\u0E25\u0E38\u0E48\u0E21";
var qq = "\u0E22\u0E01\u0E40\u0E25\u0E34\u0E01\u0E01\u0E25\u0E38\u0E48\u0E21";
var Jq = "\u0E22\u0E49\u0E32\u0E22\u0E44\u0E1B\u0E14\u0E49\u0E32\u0E19\u0E2B\u0E25\u0E31\u0E07";
var Qq = "\u0E02\u0E22\u0E31\u0E1A\u0E16\u0E2D\u0E22\u0E2B\u0E25\u0E31\u0E07";
var eJ = "\u0E02\u0E22\u0E31\u0E1A\u0E44\u0E1B\u0E2B\u0E19\u0E49\u0E32";
var tJ = "\u0E22\u0E49\u0E32\u0E22\u0E44\u0E1B\u0E14\u0E49\u0E32\u0E19\u0E2B\u0E19\u0E49\u0E32";
var nJ = "\u0E23\u0E35\u0E40\u0E0B\u0E47\u0E15\u0E21\u0E38\u0E21";
var oJ = "\u0E25\u0E47\u0E2D\u0E04";
var rJ = "\u0E1B\u0E25\u0E14\u0E25\u0E47\u0E2D\u0E04";
var sJ = "\u0E08\u0E31\u0E14\u0E15\u0E33\u0E41\u0E2B\u0E19\u0E48\u0E07 / \u0E01\u0E23\u0E30\u0E08\u0E32\u0E22";
var iJ = "\u0E22\u0E49\u0E32\u0E22\u0E44\u0E1B\u0E22\u0E31\u0E07\u0E2B\u0E19\u0E49\u0E32";
var aJ = "\u0E1E\u0E25\u0E34\u0E01\u0E41\u0E19\u0E27\u0E19\u0E2D\u0E19";
var lJ = "\u0E1E\u0E25\u0E34\u0E01\u0E41\u0E19\u0E27\u0E15\u0E31\u0E49\u0E07";
var dJ = "\u0E22\u0E49\u0E32\u0E22";
var cJ = "\u0E44\u0E1B\u0E22\u0E31\u0E07\u0E14\u0E49\u0E32\u0E19\u0E2B\u0E19\u0E49\u0E32";
var pJ = "\u0E02\u0E49\u0E32\u0E07\u0E2B\u0E19\u0E49\u0E32";
var uJ = "\u0E02\u0E49\u0E32\u0E07\u0E2B\u0E25\u0E31\u0E07";
var hJ = "\u0E44\u0E1B\u0E22\u0E31\u0E07\u0E14\u0E49\u0E32\u0E19\u0E2B\u0E25\u0E31\u0E07";
var mJ = "\u0E20\u0E32\u0E29\u0E32";
var gJ = "\u0E40\u0E23\u0E35\u0E22\u0E19\u0E23\u0E39\u0E49\u0E40\u0E1E\u0E34\u0E48\u0E21\u0E40\u0E15\u0E34\u0E21";
var fJ = "\u0E15\u0E33\u0E41\u0E2B\u0E19\u0E48\u0E07\u0E41\u0E16\u0E1A\u0E40\u0E04\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E21\u0E37\u0E2D";
var SJ = "\u0E02\u0E49\u0E32\u0E07\u0E25\u0E48\u0E32\u0E07";
var bJ = "\u0E02\u0E49\u0E32\u0E07\u0E0B\u0E49\u0E32\u0E22";
var TJ = "\u0E02\u0E49\u0E32\u0E07\u0E02\u0E27\u0E32";
var yJ = "\u0E02\u0E49\u0E32\u0E07\u0E1A\u0E19";
var wJ = "\u0E2B\u0E19\u0E49\u0E32";
var xJ = "\u0E41\u0E1B\u0E49\u0E19\u0E1E\u0E34\u0E21\u0E1E\u0E4C\u0E25\u0E31\u0E14";
var kJ = "\u0E04\u0E49\u0E19\u0E2B\u0E32";
var vJ = "\u0E01\u0E33\u0E25\u0E31\u0E07\u0E42\u0E2B\u0E25\u0E14{dots}";
var IJ = "\u0E2A\u0E48\u0E07\u0E2D\u0E2D\u0E01\u0E1E\u0E37\u0E49\u0E19\u0E2B\u0E25\u0E31\u0E07";
var CJ = "\u0E42\u0E1B\u0E23\u0E48\u0E07\u0E43\u0E2A";
var DJ = "\u0E2D\u0E31\u0E15\u0E42\u0E19\u0E21\u0E31\u0E15\u0E34";
var PJ = "\u0E2A\u0E27\u0E48\u0E32\u0E07";
var MJ = "\u0E21\u0E37\u0E14";
var EJ = "Github";
var BJ = "Twitter";
var RJ = "Discord";
var AJ = "\u0E20\u0E32\u0E1E";
var LJ = "\u0E08\u0E31\u0E14\u0E43\u0E2B\u0E49\u0E0A\u0E34\u0E14\u0E0B\u0E49\u0E32\u0E22";
var HJ = "\u0E08\u0E31\u0E14\u0E43\u0E2B\u0E49\u0E2D\u0E22\u0E39\u0E48\u0E01\u0E36\u0E48\u0E07\u0E01\u0E25\u0E32\u0E07\u0E41\u0E19\u0E27\u0E19\u0E2D\u0E19";
var zJ = "\u0E08\u0E31\u0E14\u0E43\u0E2B\u0E49\u0E0A\u0E34\u0E14\u0E02\u0E27\u0E32";
var OJ = "\u0E08\u0E31\u0E14\u0E43\u0E2B\u0E49\u0E2D\u0E22\u0E39\u0E48\u0E14\u0E49\u0E32\u0E19\u0E1A\u0E19";
var FJ = "\u0E08\u0E31\u0E14\u0E43\u0E2B\u0E49\u0E2D\u0E22\u0E39\u0E48\u0E01\u0E36\u0E48\u0E07\u0E01\u0E25\u0E32\u0E07\u0E41\u0E19\u0E27\u0E15\u0E31\u0E49\u0E07";
var jJ = "\u0E08\u0E31\u0E14\u0E43\u0E2B\u0E49\u0E2D\u0E22\u0E39\u0E48\u0E14\u0E49\u0E32\u0E19\u0E25\u0E48\u0E32\u0E07";
var GJ = "\u0E01\u0E23\u0E30\u0E08\u0E32\u0E22\u0E41\u0E19\u0E27\u0E19\u0E2D\u0E19";
var VJ = "\u0E01\u0E23\u0E30\u0E08\u0E32\u0E22\u0E41\u0E19\u0E27\u0E15\u0E31\u0E49\u0E07";
var $J = "\u0E22\u0E37\u0E14\u0E41\u0E19\u0E27\u0E19\u0E2D\u0E19";
var NJ = "\u0E22\u0E37\u0E14\u0E41\u0E19\u0E27\u0E15\u0E31\u0E49\u0E07";
var WJ = "\u0E04\u0E38\u0E13\u0E15\u0E49\u0E2D\u0E07\u0E01\u0E32\u0E23\u0E1A\u0E31\u0E19\u0E17\u0E36\u0E01\u0E42\u0E1B\u0E23\u0E40\u0E08\u0E47\u0E01\u0E15\u0E4C\u0E1B\u0E31\u0E08\u0E08\u0E38\u0E1A\u0E31\u0E19\u0E02\u0E2D\u0E07\u0E04\u0E38\u0E13\u0E2B\u0E23\u0E37\u0E2D\u0E44\u0E21\u0E48?";
var UJ = "\u0E04\u0E38\u0E13\u0E15\u0E49\u0E2D\u0E07\u0E01\u0E32\u0E23\u0E1A\u0E31\u0E19\u0E17\u0E36\u0E01\u0E01\u0E32\u0E23\u0E40\u0E1B\u0E25\u0E35\u0E48\u0E22\u0E19\u0E41\u0E1B\u0E25\u0E07\u0E43\u0E19\u0E42\u0E1B\u0E23\u0E40\u0E08\u0E47\u0E01\u0E15\u0E4C\u0E1B\u0E31\u0E08\u0E08\u0E38\u0E1A\u0E31\u0E19\u0E02\u0E2D\u0E07\u0E04\u0E38\u0E13\u0E2B\u0E23\u0E37\u0E2D\u0E44\u0E21\u0E48?";
var KJ = "\u0E22\u0E01\u0E40\u0E25\u0E34\u0E01";
var _J = "\u0E44\u0E21\u0E48";
var YJ = "\u0E43\u0E0A\u0E48";
var ZJ = "\u0E01\u0E23\u0E2D\u0E01\u0E0A\u0E37\u0E48\u0E2D\u0E44\u0E1F\u0E25\u0E4C";
var ka = { "style.menu.color": AX, "style.menu.fill": LX, "style.menu.dash": HX, "style.menu.size": zX, "style.menu.keep.open": OX, "style.menu.font": FX, "style.menu.align": jX, styles: GX, "zoom.in": VX, "zoom.out": $X, to: NX, "menu.tools": WX, "menu.transform": UX, "menu.file": KX, "menu.edit": _X, "menu.view": YX, "menu.preferences": ZX, "menu.sign.in": XX, "menu.sign.out": qX, "become.a.sponsor": JX, "zoom.to.content": QX, "zoom.to.selection": eq, "zoom.to.fit": tq, "zoom.to": nq, "preferences.dark.mode": oq, "preferences.focus.mode": rq, "preferences.debug.mode": sq, "preferences.show.grid": iq, "preferences.use.cad.selection": aq, "preferences.keep.stylemenu.open": lq, "preferences.always.show.snaps": dq, "preferences.rotate.handles": cq, "preferences.binding.handles": pq, "preferences.clone.handles": uq, undo: hq, redo: mq, cut: gq, copy: fq, paste: Sq, "copy.as": bq, "export.as": Tq, "select.all": yq, "select.none": wq, delete: xq, "new.project": kq, open: vq, save: Iq, "save.as": Cq, "upload.media": Dq, "create.page": Pq, "new.page": Mq, "page.name": Eq, duplicate: Bq, cancel: Rq, "copy.invite.link": Aq, "copy.readonly.link": Lq, "create.multiplayer.project": Hq, "copy.multiplayer.project": zq, select: Oq, eraser: Fq, draw: jq, arrow: Gq, text: Vq, sticky: $q, rectangle: Nq, ellipse: Wq, triangle: Uq, line: Kq, rotate: _q, "lock.aspect.ratio": Yq, "unlock.aspect.ratio": Zq, group: Xq, ungroup: qq, "move.to.back": Jq, "move.backward": Qq, "move.forward": eJ, "move.to.front": tJ, "reset.angle": nJ, lock: oJ, unlock: rJ, "align.distribute": sJ, "move.to.page": iJ, "flip.horizontal": aJ, "flip.vertical": lJ, move: dJ, "to.front": cJ, forward: pJ, backward: uJ, back: hJ, language: mJ, "translation.link": gJ, "dock.position": fJ, bottom: SJ, left: bJ, right: TJ, top: yJ, page: wJ, "keyboard.shortcuts": xJ, search: kJ, loading: vJ, "export.background": IJ, transparent: CJ, auto: DJ, light: PJ, dark: MJ, github: EJ, twitter: BJ, discord: RJ, image: AJ, "align.left": LJ, "align.center.x": HJ, "align.right": zJ, "align.top": OJ, "align.center.y": FJ, "align.bottom": jJ, "distribute.x": GJ, "distribute.y": VJ, "stretch.x": $J, "stretch.y": NJ, "dialog.save.firsttime": WJ, "dialog.save.again": UJ, "dialog.cancel": KJ, "dialog.no": _J, "dialog.yes": YJ, "enter.file.name": ZJ };
var XJ = "Renk";
var qJ = "Doldur";
var JJ = "\xC7izgi";
var QJ = "Boyut";
var eQ = "A\xE7\u0131k Tut";
var tQ = "Yaz\u0131 Tipi";
var nQ = "Hizala";
var oQ = "Stiller";
var rQ = "Yak\u0131nla\u015Ft\u0131r";
var sQ = "Uzakla\u015Ft\u0131r";
var iQ = "";
var aQ = "Dosya";
var lQ = "D\xFCzenle";
var dQ = "G\xF6r\xFCnt\xFC";
var cQ = "Tercihler";
var pQ = "Giri\u015F Yap";
var uQ = "Oturumu Kapat";
var hQ = "Sponsor Ol";
var mQ = "Se\xE7ime Yak\u0131nla\u015Ft\u0131r";
var gQ = "S\u0131\u011Fd\u0131rmak i\xE7in Yak\u0131nla\u015Ft\u0131r";
var fQ = "Yak\u0131nla\u015Ft\u0131r";
var SQ = "Karanl\u0131k Mod";
var bQ = "Odak Modu";
var TQ = "Debug Modu";
var yQ = "Izgaray\u0131 G\xF6ster";
var wQ = "CAD Se\xE7imi Kullan";
var xQ = "Stil Men\xFCs\xFCn\xFC A\xE7\u0131k Tut";
var kQ = "Hiza \xC7izgilerini Hep G\xF6ster";
var vQ = "Rotasyon Kontrolc\xFCleri";
var IQ = "Ba\u011Flama Kontrolc\xFCleri";
var CQ = "Klon Kontrolc\xFCleri";
var DQ = "Geri Al";
var PQ = "Yinele";
var MQ = "Kes";
var EQ = "Kopyala";
var BQ = "Yap\u0131\u015Ft\u0131r";
var RQ = "Olarak Kopyala";
var AQ = "Olarak D\u0131\u015Far\u0131 Aktar";
var LQ = "Hepsini Se\xE7";
var HQ = "Hi\xE7birini Se\xE7me";
var zQ = "Sil";
var OQ = "Yeni Proje";
var FQ = "A\xE7";
var jQ = "Kaydet";
var GQ = "Farkl\u0131 Kaydet";
var VQ = "Medya Y\xFCkle";
var $Q = "Sayfa Olu\u015Ftur";
var NQ = "Yeni Sayfa";
var WQ = "Sayfa \u0130smi";
var UQ = "Kopya Olu\u015Ftur";
var KQ = "\u0130ptal";
var _Q = "Davet Linkini Kopyala";
var YQ = "\xC7ok Oyunculu Proje Olu\u015Ftur";
var ZQ = "\xC7ok Oyunculu Projeye Kopyala";
var XQ = "Se\xE7";
var qQ = "Silgi";
var JQ = "\xC7izim";
var QQ = "Ok";
var eee = "Yaz\u0131";
var tee = "Yap\u0131\u015Fkan";
var nee = "Dikd\xF6rtgen";
var oee = "Elips";
var ree = "\xDC\xE7gen";
var see = "\xC7izgi";
var iee = "D\xF6nd\xFCr";
var aee = "En Boy Oran\u0131n\u0131 Kilitle";
var lee = "En Boy Oran\u0131 Kilidini A\xE7";
var dee = "Grupla";
var cee = "Gruplamay\u0131 Kald\u0131r";
var pee = "Arkaya Ta\u015F\u0131";
var uee = "En Arkaya Ta\u015F\u0131";
var hee = "En \xD6ne Ta\u015F\u0131";
var mee = "\xD6ne Ta\u015F\u0131";
var gee = "A\xE7\u0131y\u0131 S\u0131f\u0131rla";
var fee = "Kilitle";
var See = "Kilidini A\xE7";
var bee = "Sayfaya Ta\u015F\u0131";
var Tee = "Yatay \xC7evir";
var yee = "Dikey \xC7evir";
var wee = "Ta\u015F\u0131";
var xee = "\xD6ne";
var kee = "En \xD6ne";
var vee = "En Arkaya";
var Iee = "Arkaya";
var Cee = "Dil";
var va = { "style.menu.color": XJ, "style.menu.fill": qJ, "style.menu.dash": JJ, "style.menu.size": QJ, "style.menu.keep.open": eQ, "style.menu.font": tQ, "style.menu.align": nQ, styles: oQ, "zoom.in": rQ, "zoom.out": sQ, to: iQ, "menu.file": aQ, "menu.edit": lQ, "menu.view": dQ, "menu.preferences": cQ, "menu.sign.in": pQ, "menu.sign.out": uQ, "become.a.sponsor": hQ, "zoom.to.selection": mQ, "zoom.to.fit": gQ, "zoom.to": fQ, "preferences.dark.mode": SQ, "preferences.focus.mode": bQ, "preferences.debug.mode": TQ, "preferences.show.grid": yQ, "preferences.use.cad.selection": wQ, "preferences.keep.stylemenu.open": xQ, "preferences.always.show.snaps": kQ, "preferences.rotate.handles": vQ, "preferences.binding.handles": IQ, "preferences.clone.handles": CQ, undo: DQ, redo: PQ, cut: MQ, copy: EQ, paste: BQ, "copy.as": RQ, "export.as": AQ, "select.all": LQ, "select.none": HQ, delete: zQ, "new.project": OQ, open: FQ, save: jQ, "save.as": GQ, "upload.media": VQ, "create.page": $Q, "new.page": NQ, "page.name": WQ, duplicate: UQ, cancel: KQ, "copy.invite.link": _Q, "create.multiplayer.project": YQ, "copy.multiplayer.project": ZQ, select: XQ, eraser: qQ, draw: JQ, arrow: QQ, text: eee, sticky: tee, rectangle: nee, ellipse: oee, triangle: ree, line: see, rotate: iee, "lock.aspect.ratio": aee, "unlock.aspect.ratio": lee, group: dee, ungroup: cee, "move.to.back": pee, "move.backward": uee, "move.forward": hee, "move.to.front": mee, "reset.angle": gee, lock: fee, unlock: See, "move.to.page": bee, "flip.horizontal": Tee, "flip.vertical": yee, move: wee, "to.front": xee, forward: kee, backward: vee, back: Iee, language: Cee };
var Dee = "\u041A\u043E\u043B\u0456\u0440";
var Pee = "\u0417\u0430\u043F\u043E\u0432\u043D\u044E\u0432\u0430\u0442\u0438";
var Mee = "\u0428\u0442\u0440\u0438\u0445";
var Eee = "\u0420\u043E\u0437\u043C\u0456\u0440";
var Bee = "\u0422\u0440\u0438\u043C\u0430\u0442\u0438 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438\u043C";
var Ree = "\u0428\u0440\u0438\u0444\u0442";
var Aee = "\u0412\u0438\u0440\u0456\u0432\u043D\u044F\u0442\u0438";
var Lee = "\u0421\u0442\u0438\u043B\u044C";
var Hee = "\u0417\u0431\u0456\u043B\u044C\u0448\u0438\u0442\u0438";
var zee = "\u0417\u043C\u0435\u043D\u0448\u0438\u0442\u0438";
var Oee = "\u0434\u043E";
var Fee = "\u0424\u0430\u0439\u043B";
var jee = "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u043D\u043D\u044F";
var Gee = "\u0412\u0438\u0433\u043B\u044F\u0434";
var Vee = "\u041D\u0430\u043B\u0430\u0448\u0442\u0443\u0432\u0430\u043D\u043D\u044F";
var $ee = "\u0423\u0432\u0456\u0439\u0442\u0438";
var Nee = "\u0412\u0438\u0439\u0442\u0438";
var Wee = "\u0421\u0442\u0430\u0442\u0438 \u0441\u043F\u043E\u043D\u0441\u043E\u0440\u043E\u043C";
var Uee = "\u041D\u0430\u0431\u043B\u0438\u0437\u0438\u0442\u0438 \u0434\u043E \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var Kee = "\u0417\u0431\u0456\u043B\u044C\u0448\u0438\u0442\u0438 \u0437\u0430 \u0440\u043E\u0437\u043C\u0456\u0440\u043E\u043C \u0435\u043A\u0440\u0430\u043D\u0443";
var _ee = "\u041D\u0430\u0431\u043B\u0438\u0437\u0438\u0442\u0438 \u0434\u043E";
var Yee = "\u0422\u0435\u043C\u043D\u0430 \u0442\u0435\u043C\u0430";
var Zee = "\u041C\u0456\u043D\u0456\u043C\u0430\u043B\u0456\u0441\u0442\u0438\u0447\u043D\u0438\u0439 \u0440\u0435\u0436\u0438\u043C";
var Xee = "\u0420\u0435\u0436\u0438\u043C \u043D\u0430\u043B\u0430\u0433\u043E\u0434\u0436\u0435\u043D\u043D\u044F";
var qee = "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0441\u0456\u0442\u043A\u0443";
var Jee = "\u0412\u0438\u043A\u043E\u0440\u0438\u0441\u0442\u043E\u0432\u0443\u0432\u0430\u0442\u0438 CAD \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var Qee = "\u0422\u0440\u0438\u043C\u0430\u0442\u0438 \u043C\u0435\u043D\u044E \u0441\u0442\u0438\u043B\u0456\u0432 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438\u043C";
var ete = "\u0417\u0430\u0432\u0436\u0434\u0438 \u043F\u043E\u043A\u0430\u0437\u0443\u0432\u0430\u0442\u0438 \u043F\u0440\u0438\u0432'\u044F\u0437\u043A\u0438";
var tte = "\u0420\u0443\u0447\u043A\u0438 \u043E\u0431\u0435\u0440\u0442\u0430\u043D\u043D\u044F";
var nte = "\u0420\u0443\u0447\u043A\u0438 \u043F\u0440\u0438\u0432'\u044F\u0437\u043A\u0438";
var ote = "\u0420\u0443\u0447\u043A\u0438 \u043A\u043B\u043E\u043D\u0443\u0432\u0430\u043D\u043D\u044F";
var rte = "\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438";
var ste = "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u0438";
var ite = "\u0412\u0438\u0440\u0456\u0437\u0430\u0442\u0438";
var ate = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438";
var lte = "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u0438";
var dte = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438 \u044F\u043A";
var cte = "\u0415\u043A\u0441\u043F\u043E\u0440\u0442\u0443\u0432\u0430\u0442\u0438 \u044F\u043A";
var pte = "\u041E\u0431\u0440\u0430\u0442\u0438 \u0432\u0441\u0435";
var ute = "\u0417\u043D\u044F\u0442\u0438 \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var hte = "\u0412\u0438\u0434\u0430\u043B\u0438\u0442\u0438";
var mte = "\u041D\u043E\u0432\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var gte = "\u0412\u0456\u0434\u043A\u0440\u0438\u0442\u0438";
var fte = "\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438";
var Ste = "\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u044F\u043A";
var bte = "\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0438\u0442\u0438 \u043C\u0435\u0434\u0456\u0430";
var Tte = "\u0421\u0442\u0432\u043E\u0440\u0438\u0442\u0438 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
var yte = "\u041D\u043E\u0432\u0430 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0430";
var wte = "\u041D\u0430\u0437\u0432\u0430 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0438";
var xte = "\u0414\u0443\u0431\u043B\u044E\u0432\u0430\u0442\u0438";
var kte = "\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438";
var vte = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438 \u043F\u043E\u0441\u0438\u043B\u0430\u043D\u043D\u044F \u043D\u0430 \u0437\u0430\u043F\u0440\u043E\u0448\u0435\u043D\u043D\u044F";
var Ite = "\u0421\u0442\u0432\u043E\u0440\u0438\u0442\u0438 \u0431\u0430\u0433\u0430\u0442\u043E\u043A\u043E\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0446\u044C\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var Cte = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438 \u0432 \u0431\u0430\u0433\u0430\u0442\u043E\u043A\u043E\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0446\u044C\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var Dte = "\u0412\u0438\u0431\u0438\u0440\u0430\u0442\u0438";
var Pte = "\u041B\u0430\u0441\u0442\u0438\u043A";
var Mte = "\u041C\u0430\u043B\u044E\u0432\u0430\u0442\u0438";
var Ete = "\u0421\u0442\u0440\u0456\u043B\u043A\u0430";
var Bte = "\u0422\u0435\u043A\u0441\u0442";
var Rte = "\u041D\u043E\u0442\u0430\u0442\u043A\u0430";
var Ate = "\u041F\u0440\u044F\u043C\u043E\u043A\u0443\u0442\u043D\u0438\u043A";
var Lte = "\u0415\u043B\u0456\u043F\u0441";
var Hte = "\u0422\u0440\u0438\u043A\u0443\u0442\u043D\u0438\u043A";
var zte = " \u041B\u0456\u043D\u0456\u044F";
var Ote = "\u041F\u043E\u0432\u0435\u0440\u043D\u0443\u0442\u0438";
var Fte = "\u0417\u0430\u0431\u043B\u043E\u043A\u0443\u0432\u0430\u0442\u0438 \u0441\u043F\u0456\u0432\u0432\u0456\u0434\u043D\u043E\u0448\u0435\u043D\u043D\u044F \u0441\u0442\u043E\u0440\u0456\u043D";
var jte = " \u0420\u043E\u0437\u0431\u043B\u043E\u043A\u0443\u0432\u0430\u0442\u0438 \u0441\u043F\u0456\u0432\u0432\u0456\u0434\u043D\u043E\u0448\u0435\u043D\u043D\u044F \u0441\u0442\u043E\u0440\u0456\u043D";
var Gte = "\u0417\u0433\u0440\u0443\u043F\u0443\u0432\u0430\u0442\u0438";
var Vte = " \u0420\u043E\u0437\u0433\u0440\u0443\u043F\u0443\u0432\u0430\u0442\u0438";
var $te = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u043D\u0430\u0437\u0430\u0434";
var Nte = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u043D\u0430 \u0437\u0430\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var Wte = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u0432\u043F\u0435\u0440\u0435\u0434";
var Ute = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u043D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var Kte = "\u0421\u043A\u0438\u0434\u0430\u043D\u043D\u044F \u043A\u0443\u0442\u0430";
var _te = "\u0411\u043B\u043E\u043A\u0443\u0432\u0430\u043D\u043D\u044F";
var Yte = " \u0420\u043E\u0437\u0431\u043B\u043E\u043A\u0443\u0432\u0430\u043D\u043D\u044F";
var Zte = "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
var Xte = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u0438 \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E";
var qte = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u0438 \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E";
var Jte = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438";
var Qte = "\u041D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var ene = " \u0412\u043F\u0435\u0440\u0435\u0434";
var tne = "\u041D\u0430 \u0437\u0430\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var nne = "\u041D\u0430\u0437\u0430\u0434";
var one = "\u041C\u043E\u0432\u0430";
var Ia = { "style.menu.color": Dee, "style.menu.fill": Pee, "style.menu.dash": Mee, "style.menu.size": Eee, "style.menu.keep.open": Bee, "style.menu.font": Ree, "style.menu.align": Aee, styles: Lee, "zoom.in": Hee, "zoom.out": zee, to: Oee, "menu.file": Fee, "menu.edit": jee, "menu.view": Gee, "menu.preferences": Vee, "menu.sign.in": $ee, "menu.sign.out": Nee, "become.a.sponsor": Wee, "zoom.to.selection": Uee, "zoom.to.fit": Kee, "zoom.to": _ee, "preferences.dark.mode": Yee, "preferences.focus.mode": Zee, "preferences.debug.mode": Xee, "preferences.show.grid": qee, "preferences.use.cad.selection": Jee, "preferences.keep.stylemenu.open": Qee, "preferences.always.show.snaps": ete, "preferences.rotate.handles": tte, "preferences.binding.handles": nte, "preferences.clone.handles": ote, undo: rte, redo: ste, cut: ite, copy: ate, paste: lte, "copy.as": dte, "export.as": cte, "select.all": pte, "select.none": ute, delete: hte, "new.project": mte, open: gte, save: fte, "save.as": Ste, "upload.media": bte, "create.page": Tte, "new.page": yte, "page.name": wte, duplicate: xte, cancel: kte, "copy.invite.link": vte, "create.multiplayer.project": Ite, "copy.multiplayer.project": Cte, select: Dte, eraser: Pte, draw: Mte, arrow: Ete, text: Bte, sticky: Rte, rectangle: Ate, ellipse: Lte, triangle: Hte, line: zte, rotate: Ote, "lock.aspect.ratio": Fte, "unlock.aspect.ratio": jte, group: Gte, ungroup: Vte, "move.to.back": $te, "move.backward": Nte, "move.forward": Wte, "move.to.front": Ute, "reset.angle": Kte, lock: _te, unlock: Yte, "move.to.page": Zte, "flip.horizontal": Xte, "flip.vertical": qte, move: Jte, "to.front": Qte, forward: ene, backward: tne, back: nne, language: one };
var rne = "\u989C\u8272";
var sne = "\u586B\u5145";
var ine = "\u8FB9\u6846";
var ane = "\u5C3A\u5BF8";
var lne = "\u4FDD\u6301\u5E38\u5F00";
var dne = "\u5B57\u4F53";
var cne = "\u5BF9\u9F50";
var pne = "\u6837\u5F0F";
var une = "\u653E\u5927";
var hne = "\u7F29\u5C0F";
var mne = "\u7F29\u653E\u81F3";
var gne = "\u5DE5\u5177";
var fne = "\u8F6C\u6362";
var Sne = "\u6587\u4EF6";
var bne = "\u7F16\u8F91";
var Tne = "\u89C6\u56FE";
var yne = "\u504F\u597D";
var wne = "\u767B\u5F55";
var xne = "\u767B\u51FA";
var kne = "\u641C\u7D22";
var vne = "\u6210\u4E3A\u8D5E\u52A9\u8005";
var Ine = "\u7F29\u653E\u9009\u4E2D";
var Cne = "\u81EA\u9002\u5E94\u7F29\u653E";
var Dne = "\u7F29\u653E\u81F3";
var Pne = "\u7F29\u653E\u81F3\u5185\u5BB9";
var Mne = "\u6697\u9ED1\u6A21\u5F0F";
var Ene = "\u4E13\u6CE8\u6A21\u5F0F";
var Bne = "\u8C03\u8BD5\u6A21\u5F0F";
var Rne = "\u663E\u793A\u7F51\u683C";
var Ane = "\u4F7F\u7528 CAD \u9009\u62E9";
var Lne = "\u4FDD\u6301\u6837\u5F0F\u83DC\u5355\u5E38\u5F00";
var Hne = "\u603B\u662F\u5C55\u793A\u5BF9\u9F50\u7EBF";
var zne = "\u65CB\u8F6C\u624B\u67C4";
var One = "\u6346\u7ED1\u624B\u67C4";
var Fne = "\u514B\u9686\u624B\u67C4";
var jne = "\u64A4\u9500";
var Gne = "\u91CD\u505A";
var Vne = "\u526A\u5207";
var $ne = "\u590D\u5236";
var Nne = "\u7C98\u8D34";
var Wne = "\u590D\u5236\u4E3A";
var Une = "\u5BFC\u51FA\u4E3A";
var Kne = "\u9009\u4E2D\u5168\u90E8";
var _ne = "\u53D6\u6D88\u9009\u4E2D";
var Yne = "\u5220\u9664";
var Zne = "\u65B0\u9879\u76EE";
var Xne = "\u6253\u5F00";
var qne = "\u4FDD\u5B58";
var Jne = "\u4FDD\u5B58\u4E3A";
var Qne = "\u4E0A\u4F20\u5A92\u4F53\u6587\u4EF6";
var eoe = "\u521B\u5EFA\u9875\u9762";
var toe = "\u65B0\u9875\u9762";
var noe = "\u9875\u9762\u540D\u79F0";
var ooe = "\u590D\u5236";
var roe = "\u53D6\u6D88";
var soe = "\u590D\u5236\u9080\u8BF7\u94FE\u63A5";
var ioe = "\u521B\u5EFA\u591A\u4EBA\u9879\u76EE";
var aoe = "\u590D\u5236\u5230\u591A\u4EBA\u9879\u76EE";
var loe = "\u9009\u62E9";
var doe = "\u6A61\u76AE";
var coe = "\u753B\u7B14";
var poe = "\u7BAD\u5934";
var uoe = "\u6587\u672C";
var hoe = "\u4FBF\u5229\u8D34";
var moe = "\u77E9\u5F62";
var goe = "\u692D\u5706\u5F62";
var foe = "\u4E09\u89D2\u5F62";
var Soe = "\u76F4\u7EBF";
var boe = "\u65CB\u8F6C";
var Toe = "\u9501\u5B9A\u5BBD\u9AD8\u6BD4";
var yoe = "\u89E3\u9501\u5BBD\u9AD8\u6BD4";
var woe = "\u5206\u7EC4";
var xoe = "\u53D6\u6D88\u5206\u7EC4";
var koe = "\u7F6E\u5E95";
var voe = "\u4E0B\u79FB\u4E00\u5C42";
var Ioe = "\u4E0A\u79FB\u4E00\u5C42";
var Coe = "\u7F6E\u9876";
var Doe = "\u91CD\u7F6E\u65CB\u8F6C\u89D2\u5EA6";
var Poe = "\u9501\u5B9A";
var Moe = "\u89E3\u9501";
var Eoe = "\u79FB\u52A8\u5230\u9875\u9762";
var Boe = "\u6C34\u5E73\u7FFB\u8F6C";
var Roe = "\u5782\u76F4\u7FFB\u8F6C";
var Aoe = "\u79FB\u52A8";
var Loe = "\u7F6E\u9876";
var Hoe = "\u4E0A\u4E00\u5C42";
var zoe = "\u4E0B\u4E00\u5C42";
var Ooe = "\u7F6E\u5E95";
var Foe = "\u8BED\u8A00";
var joe = "\u952E\u76D8\u5FEB\u6377\u952E";
var Goe = "\u4E86\u89E3\u66F4\u591A";
var Voe = "\u9875\u9762";
var $oe = "\u951A\u70B9\u4F4D\u7F6E";
var Noe = "\u4E0B\u9762";
var Woe = "\u5DE6\u9762";
var Uoe = "\u53F3\u9762";
var Koe = "\u4E0A\u9762";
var _oe = "\u5BFC\u51FA\u80CC\u666F\u8272";
var Yoe = "\u900F\u660E";
var Zoe = "\u81EA\u52A8";
var Xoe = "\u660E\u4EAE";
var qoe = "\u6697\u9ED1";
var Joe = "\u590D\u5236\u53EA\u8BFB\u94FE\u63A5";
var Qoe = "\u56FE\u7247";
var ere = "\u5BF9\u9F50 / \u5206\u6563";
var tre = "\u60A8\u662F\u5426\u60F3\u4FDD\u5B58\u5F53\u524D\u7684\u9879\u76EE\uFF1F";
var nre = "\u60A8\u662F\u5426\u60F3\u4FDD\u5B58\u5BF9\u5F53\u524D\u9879\u76EE\u7684\u66F4\u6539\uFF1F";
var ore = "\u53D6\u6D88";
var rre = "\u5426";
var sre = "\u662F";
var Ca = { "style.menu.color": rne, "style.menu.fill": sne, "style.menu.dash": ine, "style.menu.size": ane, "style.menu.keep.open": lne, "style.menu.font": dne, "style.menu.align": cne, styles: pne, "zoom.in": une, "zoom.out": hne, to: mne, "menu.tools": gne, "menu.transform": fne, "menu.file": Sne, "menu.edit": bne, "menu.view": Tne, "menu.preferences": yne, "menu.sign.in": wne, "menu.sign.out": xne, search: kne, "become.a.sponsor": vne, "zoom.to.selection": Ine, "zoom.to.fit": Cne, "zoom.to": Dne, "zoom.to.content": Pne, "preferences.dark.mode": Mne, "preferences.focus.mode": Ene, "preferences.debug.mode": Bne, "preferences.show.grid": Rne, "preferences.use.cad.selection": Ane, "preferences.keep.stylemenu.open": Lne, "preferences.always.show.snaps": Hne, "preferences.rotate.handles": zne, "preferences.binding.handles": One, "preferences.clone.handles": Fne, undo: jne, redo: Gne, cut: Vne, copy: $ne, paste: Nne, "copy.as": Wne, "export.as": Une, "select.all": Kne, "select.none": _ne, delete: Yne, "new.project": Zne, open: Xne, save: qne, "save.as": Jne, "upload.media": Qne, "create.page": eoe, "new.page": toe, "page.name": noe, duplicate: ooe, cancel: roe, "copy.invite.link": soe, "create.multiplayer.project": ioe, "copy.multiplayer.project": aoe, select: loe, eraser: doe, draw: coe, arrow: poe, text: uoe, sticky: hoe, rectangle: moe, ellipse: goe, triangle: foe, line: Soe, rotate: boe, "lock.aspect.ratio": Toe, "unlock.aspect.ratio": yoe, group: woe, ungroup: xoe, "move.to.back": koe, "move.backward": voe, "move.forward": Ioe, "move.to.front": Coe, "reset.angle": Doe, lock: Poe, unlock: Moe, "move.to.page": Eoe, "flip.horizontal": Boe, "flip.vertical": Roe, move: Aoe, "to.front": Loe, forward: Hoe, backward: zoe, back: Ooe, language: Foe, "keyboard.shortcuts": joe, "translation.link": Goe, page: Voe, "dock.position": $oe, bottom: Noe, left: Woe, right: Uoe, top: Koe, "export.background": _oe, transparent: Yoe, auto: Zoe, light: Xoe, dark: qoe, "copy.readonly.link": Joe, image: Qoe, "align.distribute": ere, "dialog.save.firsttime": tre, "dialog.save.again": nre, "dialog.cancel": ore, "dialog.no": rre, "dialog.yes": sre };
var ire = "\u984F\u8272";
var are = "\u586B\u5145";
var lre = "\u865B\u7DDA";
var dre = "\u5927\u5C0F";
var cre = "\u4FDD\u6301\u958B\u555F";
var pre = "\u5B57\u578B";
var ure = "\u5C0D\u9F4A";
var hre = "\u6A23\u5F0F";
var mre = "\u653E\u5927";
var gre = "\u7E2E\u5C0F";
var fre = "\u81F3";
var Sre = "\u6A94\u6848";
var bre = "\u7DE8\u8F2F";
var Tre = "\u6AA2\u8996";
var yre = "\u9078\u9805";
var wre = "\u767B\u5165";
var xre = "\u767B\u51FA";
var kre = "\u6210\u70BA\u8D0A\u52A9\u8005";
var vre = "\u7E2E\u653E\u81F3\u9078\u53D6\u7BC4\u570D";
var Ire = "\u7E2E\u653E\u81F3\u9069\u7576\u5927\u5C0F";
var Cre = "\u7E2E\u653E\u81F3";
var Dre = "\u6DF1\u8272\u6A21\u5F0F";
var Pre = "\u5C08\u6CE8\u6A21\u5F0F";
var Mre = "\u9664\u932F\u6A21\u5F0F";
var Ere = "\u986F\u793A\u7DB2\u683C";
var Bre = "\u4F7F\u7528 CAD \u9078\u53D6";
var Rre = "\u6A23\u5F0F\u9078\u55AE\u4FDD\u6301\u958B\u555F";
var Are = "\u6C38\u9060\u986F\u793A\u5C0D\u9F4A\u7DDA";
var Lre = "\u65CB\u8F49\u63A7\u9EDE";
var Hre = "\u7D81\u5B9A\u63A7\u9EDE";
var zre = "\u8907\u88FD\u63A7\u9EDE";
var Ore = "\u5FA9\u539F";
var Fre = "\u53D6\u6D88\u5FA9\u539F";
var jre = "\u526A\u4E0B";
var Gre = "\u8907\u88FD";
var Vre = "\u8CBC\u4E0A";
var $re = "\u8907\u88FD\u6210";
var Nre = "\u532F\u51FA\u6210";
var Wre = "\u5168\u9078";
var Ure = "\u53D6\u6D88\u9078\u53D6";
var Kre = "\u522A\u9664";
var _re = "\u65B0\u5C08\u6848";
var Yre = "\u958B\u555F";
var Zre = "\u5132\u5B58";
var Xre = "\u53E6\u5B58\u70BA";
var qre = "\u4E0A\u50B3\u5A92\u9AD4";
var Jre = "\u5EFA\u7ACB\u9801\u9762";
var Qre = "\u65B0\u9801\u9762";
var ese = "\u9801\u9762\u540D\u7A31";
var tse = "\u8907\u88FD";
var nse = "\u53D6\u6D88";
var ose = "\u8907\u88FD\u9080\u8ACB\u9023\u7D50";
var rse = "\u8907\u88FD\u552F\u8B80\u9023\u7D50";
var sse = "\u5EFA\u7ACB\u591A\u4EBA\u5C08\u6848";
var ise = "\u8907\u88FD\u81F3\u591A\u4EBA\u5C08\u6848";
var ase = "\u9078\u53D6";
var lse = "\u6A61\u76AE\u64E6";
var dse = "\u624B\u7E6A";
var cse = "\u7BAD\u982D";
var pse = "\u6587\u5B57";
var use = "\u4FBF\u5229\u8CBC";
var hse = "\u9577\u65B9\u5F62";
var mse = "\u6A62\u5713\u5F62";
var gse = "\u4E09\u89D2\u5F62";
var fse = "\u76F4\u7DDA";
var Sse = "\u65CB\u8F49";
var bse = "\u9396\u5B9A\u9577\u5BEC\u6BD4";
var Tse = "\u89E3\u9396\u9577\u5BEC\u6BD4";
var yse = "\u7D44\u6210\u7FA4\u7D44";
var wse = "\u53D6\u6D88\u7FA4\u7D44";
var xse = "\u79FB\u5230\u6700\u4E0B\u5C64";
var kse = "\u4E0B\u79FB\u4E00\u5C64";
var vse = "\u4E0A\u79FB\u4E00\u5C64";
var Ise = "\u79FB\u5230\u6700\u4E0A\u5C64";
var Cse = "\u91CD\u8A2D\u89D2\u5EA6";
var Dse = "\u9396\u5B9A";
var Pse = "\u89E3\u9396";
var Mse = "\u79FB\u81F3\u9801\u9762";
var Ese = "\u6C34\u5E73\u7FFB\u8F49";
var Bse = "\u5782\u76F4\u7FFB\u8F49";
var Rse = "\u79FB\u52D5";
var Ase = "\u5230\u6700\u4E0A\u5C64";
var Lse = "\u5230\u4E0A\u4E00\u5C64";
var Hse = "\u5230\u4E0B\u4E00\u5C64";
var zse = "\u5230\u6700\u4E0B\u5C64";
var Ose = "\u8A9E\u8A00";
var Fse = "\u4E86\u89E3\u8A73\u60C5";
var jse = "\u5DE5\u5177\u5217\u4F4D\u7F6E";
var Gse = "\u4E0B\u65B9";
var Vse = "\u5DE6\u5074";
var $se = "\u53F3\u5074";
var Nse = "\u4E0A\u65B9";
var Wse = "\u9801\u9762";
var Da = { "style.menu.color": ire, "style.menu.fill": are, "style.menu.dash": lre, "style.menu.size": dre, "style.menu.keep.open": cre, "style.menu.font": pre, "style.menu.align": ure, styles: hre, "zoom.in": mre, "zoom.out": gre, to: fre, "menu.file": Sre, "menu.edit": bre, "menu.view": Tre, "menu.preferences": yre, "menu.sign.in": wre, "menu.sign.out": xre, "become.a.sponsor": kre, "zoom.to.selection": vre, "zoom.to.fit": Ire, "zoom.to": Cre, "preferences.dark.mode": Dre, "preferences.focus.mode": Pre, "preferences.debug.mode": Mre, "preferences.show.grid": Ere, "preferences.use.cad.selection": Bre, "preferences.keep.stylemenu.open": Rre, "preferences.always.show.snaps": Are, "preferences.rotate.handles": Lre, "preferences.binding.handles": Hre, "preferences.clone.handles": zre, undo: Ore, redo: Fre, cut: jre, copy: Gre, paste: Vre, "copy.as": $re, "export.as": Nre, "select.all": Wre, "select.none": Ure, delete: Kre, "new.project": _re, open: Yre, save: Zre, "save.as": Xre, "upload.media": qre, "create.page": Jre, "new.page": Qre, "page.name": ese, duplicate: tse, cancel: nse, "copy.invite.link": ose, "copy.readonly.link": rse, "create.multiplayer.project": sse, "copy.multiplayer.project": ise, select: ase, eraser: lse, draw: dse, arrow: cse, text: pse, sticky: use, rectangle: hse, ellipse: mse, triangle: gse, line: fse, rotate: Sse, "lock.aspect.ratio": bse, "unlock.aspect.ratio": Tse, group: yse, ungroup: wse, "move.to.back": xse, "move.backward": kse, "move.forward": vse, "move.to.front": Ise, "reset.angle": Cse, lock: Dse, unlock: Pse, "move.to.page": Mse, "flip.horizontal": Ese, "flip.vertical": Bse, move: Rse, "to.front": Ase, forward: Lse, backward: Hse, back: zse, language: Ose, "translation.link": Fse, "dock.position": jse, bottom: Gse, left: Vse, right: $se, top: Nse, page: Wse };
var Ir = [{ locale: "ar", label: "\u0639\u0631\u0628\u064A", messages: Qi }, { locale: "da", label: "Danish", messages: ea }, { locale: "de", label: "Deutsch", messages: ta }, { locale: "en", label: "English", messages: na }, { locale: "es", label: "Espa\xF1ol", messages: oa }, { locale: "fa", label: "\u0641\u0627\u0631\u0633\u06CC", messages: ra }, { locale: "fr", label: "Fran\xE7ais", messages: sa }, { locale: "gl", label: "Galego", messages: ia }, { locale: "he", label: "\u05E2\u05D1\u05E8\u05D9\u05EA", messages: aa }, { locale: "it", label: "Italiano", messages: la }, { locale: "ja", label: "\u65E5\u672C\u8A9E", messages: da }, { locale: "ko-kr", label: "\uD55C\uAD6D\uC5B4", messages: ca }, { locale: "my", label: "\u1019\u103C\u1014\u103A\u1019\u102C\u1005\u102C", messages: ha }, { locale: "nb-no", label: "Norwegian Bokm\xE5l", messages: ma }, { locale: "ne", label: "\u0928\u0947\u092A\u093E\u0932\u0940", messages: ga }, { locale: "nn-no", label: "Norwegian Nynorsk", messages: fa }, { locale: "pl", label: "Polski", messages: Sa }, { locale: "pt", label: "Portugu\xEAs - Europeu", messages: Ta }, { locale: "pt-br", label: "Portugu\xEAs - Brasil", messages: ba }, { locale: "ru", label: "Russian", messages: ya }, { locale: "sv", label: "Svenska", messages: wa }, { locale: "te", label: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41", messages: xa }, { locale: "tr", label: "T\xFCrk\xE7e", messages: va }, { locale: "uk", label: "Ukrainian", messages: Ia }, { locale: "zh-ch", label: "\u7B80\u4F53\u4E2D\u6587", messages: Ca }, { locale: "zh-tw", label: "\u7E41\u9AD4\u4E2D\u6587 (\u53F0\u7063)", messages: Da }, { locale: "th", label: "\u0E20\u0E32\u0E29\u0E32\u0E44\u0E17\u0E22", messages: ka }, { locale: "ku", label: "\u06A9\u0648\u0631\u062F\u06CC", messages: pa }];
Ir.sort((r10, e10) => r10.locale < e10.locale ? -1 : 1);
function Pa(r10) {
  var t10;
  let e10 = Ir.find((n10) => n10.locale === r10);
  return { locale: r10, label: (t10 = e10 == null ? void 0 : e10.label) != null ? t10 : r10, messages: S4(S4({}, ua), e10 == null ? void 0 : e10.messages) };
}
function Ea(r10) {
  return Ma.useMemo(() => Pa(r10 != null ? r10 : navigator.language.split(/[-_]/)[0]), [r10]);
}
var gs = Cr.createContext({});
var br = () => {
  let r10 = Cr.useContext(gs);
  if (!r10)
    throw new Error("useCtx must be inside a Provider with a value");
  return r10;
};
var ke = Zt.forwardRef((m10, p10) => {
  var h10 = m10, { onSelect: r10, onClick: e10, onDoubleClick: t10, variant: n10, children: o10, isToolLocked: s10 = false, disabled: a10 = false, isActive: d10 = false, onKeyDown: i10, id: c10 } = h10, u10 = Je2(h10, ["onSelect", "onClick", "onDoubleClick", "variant", "children", "isToolLocked", "disabled", "isActive", "onKeyDown", "id"]);
  return Zt.createElement(Use, S4({ ref: p10, isActive: d10, variant: n10, onClick: e10, disabled: a10, onPointerDown: r10, onDoubleClick: t10, onKeyDown: i10, bp: Qe2, id: c10 }, u10), Zt.createElement(Yt2, null, o10), s10 && Zt.createElement(Kse, null));
});
function Xt2(s10) {
  var a10 = s10, { label: r10, kbd: e10, variant: t10, isLocked: n10 } = a10, o10 = Je2(a10, ["label", "kbd", "variant", "isLocked"]);
  let d10 = me3(), i10 = Zt.useCallback(() => {
    d10.toggleToolLock();
  }, []), c10 = Zt.useCallback((u10) => {
    u10.key === " " && d10.isForcePanning && u10.preventDefault();
  }, []);
  return Zt.createElement(Le2, { label: r10[0].toUpperCase() + r10.slice(1), kbd: e10 }, Zt.createElement(ke, x5(S4({}, o10), { variant: t10, isToolLocked: n10 && o10.isActive, onDoubleClick: i10, onKeyDown: c10, "aria-label": r10[0].toUpperCase() + r10.slice(1) })));
}
var Yt2 = H5("div", { position: "relative", height: "100%", width: "100%", backgroundColor: "$panel", borderRadius: "$2", margin: "0", display: "flex", alignItems: "center", justifyContent: "center", fontFamily: "$ui", color: "inherit", userSelect: "none", WebkitUserSelect: "none", boxSizing: "border-box", border: "1px solid transparent", "-webkit-tap-highlight-color": "transparent", "tap-highlight-color": "transparent" });
var Use = H5("button", { position: "relative", color: "$text", fontSize: "$0", background: "none", margin: "0", padding: "$2", display: "flex", alignItems: "center", justifyContent: "center", outline: "none", cursor: "pointer", pointerEvents: "all", height: "40px", width: "40px", border: "1px solid $panel", "-webkit-tap-highlight-color": "transparent", "tap-highlight-color": "transparent", [`&:disabled ${Yt2}`]: { opacity: 0.618 }, variants: { variant: { primary: { marginTop: "0" }, icon: { [`& ${Yt2}`]: { display: "grid", "& > *": { gridRow: 1, gridColumn: 1 } } }, text: { width: "auto", [`& ${Yt2}`]: { fontSize: "$1", padding: "0 $3", gap: "$3" } }, circle: { padding: 0, height: 32, width: 32, border: "none", [`& ${Yt2}`]: { border: "1px solid $panelContrast", borderRadius: "100%", boxShadow: "$panel" }, [`& ${Yt2} > svg`]: { width: 14, height: 14 } } }, isActive: { true: {}, false: {} }, bp: { mobile: { padding: 0 }, small: {} } }, compoundVariants: [{ variant: "primary", bp: "mobile", css: { height: 40, width: 36, [`& ${Yt2} > svg`]: { width: 16, height: 16 } } }, { variant: "primary", bp: "small", css: { height: "40px", width: "40px", [`& ${Yt2} > svg`]: { width: 20, height: 20 } } }, { isActive: true, css: { [`${Yt2}`]: { backgroundColor: "$selected", color: "$selectedContrast" } } }, { isActive: false, bp: "small", css: { [`&:hover:not(:disabled) ${Yt2}`]: { backgroundColor: "$hover" }, [`&:focus:not(:disabled) ${Yt2}`]: { backgroundColor: "$hover" } } }] });
var Kse = H5("div", { position: "absolute", width: 10, height: 10, backgroundColor: "$selected", borderRadius: "100%", bottom: -2, border: "2px solid $panel", zIndex: 100 });
var rie = (r10) => r10.document.pageStates[r10.appState.currentPageId].selectedIds.length;
var sie = (r10) => r10.settings.isDebugMode;
var iie = (r10) => r10.document.pageStates[r10.appState.currentPageId].selectedIds.some((e10) => r10.document.pages[r10.appState.currentPageId].shapes[e10].children !== void 0);
var aie = (r10) => r10.stopPropagation();
var lie = ({ onBlur: r10, children: e10 }) => {
  let t10 = Lt2();
  return C6.createElement($1b0217ee4a91d156$export$be92b6f5f03c0fe9, { dir: "ltr" }, C6.createElement($1b0217ee4a91d156$export$41fb9f06171c75f4, { dir: "ltr" }, e10), C6.createElement($1b0217ee4a91d156$export$602eac185826482c, { container: t10.current }, C6.createElement($1b0217ee4a91d156$export$7c6e2c02157bb7d2, { onEscapeKeyDown: aie, tabIndex: -1, onBlur: r10, asChild: true }, C6.createElement(Rt2, { id: "TD-ContextMenu" }, C6.createElement(die, null)))));
};
var die = C6.memo(function() {
  let e10 = me3(), t10 = useIntl(), n10 = e10.useStore(rie), o10 = e10.useStore(sie), s10 = e10.useStore(iie), a10 = C6.useCallback(() => {
    e10.flipHorizontal();
  }, [e10]), d10 = C6.useCallback(() => {
    e10.flipVertical();
  }, [e10]), i10 = C6.useCallback(() => {
    e10.duplicate();
  }, [e10]), c10 = C6.useCallback(() => {
    e10.toggleLocked();
  }, [e10]), u10 = C6.useCallback(() => {
    e10.group();
  }, [e10]), p10 = C6.useCallback(() => {
    e10.moveToBack();
  }, [e10]), m10 = C6.useCallback(() => {
    e10.moveBackward();
  }, [e10]), h10 = C6.useCallback(() => {
    e10.moveForward();
  }, [e10]), g10 = C6.useCallback(() => {
    e10.moveToFront();
  }, [e10]), f10 = C6.useCallback(() => {
    e10.delete();
  }, [e10]), T10 = C6.useCallback(() => {
    e10.cut();
  }, [e10]), w10 = C6.useCallback(() => {
    e10.copy();
  }, [e10]), b10 = C6.useCallback(() => {
    e10.paste();
  }, [e10]), y10 = C6.useCallback(() => {
    e10.copyImage("svg", { scale: 1, quality: 1, transparentBackground: false });
  }, [e10]), R10 = C6.useCallback(() => {
    e10.copyImage("png", { scale: 2, quality: 1, transparentBackground: true });
  }, [e10]), U10 = C6.useCallback(() => {
    e10.undo();
  }, [e10]), L10 = C6.useCallback(() => {
    e10.redo();
  }, [e10]), k10 = C6.useCallback(() => pe4(this, null, function* () {
    e10.exportImage("png", { scale: 2, quality: 1 });
  }), [e10]), I10 = C6.useCallback(() => pe4(this, null, function* () {
    e10.exportImage("jpeg", { scale: 2, quality: 1 });
  }), [e10]), q10 = C6.useCallback(() => pe4(this, null, function* () {
    e10.exportImage("webp", { scale: 2, quality: 1 });
  }), [e10]), de4 = C6.useCallback(() => pe4(this, null, function* () {
    e10.exportImage("svg", { scale: 1, quality: 1 });
  }), [e10]), le3 = C6.useCallback(() => pe4(this, null, function* () {
    e10.copyJson();
  }), [e10]), Ae2 = C6.useCallback(() => pe4(this, null, function* () {
    e10.exportJson();
  }), [e10]), Ce2 = n10 > 0, De2 = n10 > 1, Ve = n10 > 2;
  return C6.createElement(C6.Fragment, null, Ce2 ? C6.createElement(C6.Fragment, null, C6.createElement(Ee2, { onClick: i10, kbd: "#D", id: "TD-ContextMenu-Duplicate" }, C6.createElement(message_default, { id: "duplicate" })), C6.createElement(Ee2, { onClick: a10, kbd: "\u21E7H", id: "TD-ContextMenu-Flip_Horizontal" }, C6.createElement(message_default, { id: "flip.horizontal" })), C6.createElement(Ee2, { onClick: d10, kbd: "\u21E7V", id: "TD-ContextMenu-Flip_Vertical" }, C6.createElement(message_default, { id: "flip.vertical" })), C6.createElement(Ee2, { onClick: c10, kbd: "#\u21E7L", id: "TD-ContextMenu- Lock_Unlock" }, C6.createElement(message_default, { id: "lock" }), " / ", C6.createElement(message_default, { id: "unlock" })), (De2 || s10) && C6.createElement(Pe2, null), De2 && C6.createElement(Ee2, { onClick: u10, kbd: "#G", id: "TD-ContextMenu-Group" }, C6.createElement(message_default, { id: "group" })), s10 && C6.createElement(Ee2, { onClick: u10, kbd: "#G", id: "TD-ContextMenu-Ungroup" }, C6.createElement(message_default, { id: "ungroup" })), C6.createElement(Pe2, null), C6.createElement(Dr, { label: t10.formatMessage({ id: "move" }), id: "TD-ContextMenu-Move" }, C6.createElement(Ee2, { onClick: g10, kbd: "\u21E7]", id: "TD-ContextMenu-Move-To_Front" }, C6.createElement(message_default, { id: "to.front" })), C6.createElement(Ee2, { onClick: h10, kbd: "]", id: "TD-ContextMenu-Move-Forward" }, C6.createElement(message_default, { id: "forward" })), C6.createElement(Ee2, { onClick: m10, kbd: "[", id: "TD-ContextMenu-Move-Backward" }, C6.createElement(message_default, { id: "backward" })), C6.createElement(Ee2, { onClick: p10, kbd: "\u21E7[", id: "TD-ContextMenu-Move-To_Back" }, C6.createElement(message_default, { id: "back" }))), C6.createElement(mie, null), De2 && C6.createElement(cie, { hasTwoOrMore: De2, hasThreeOrMore: Ve }), C6.createElement(Pe2, null), C6.createElement(Ee2, { onClick: T10, kbd: "#X", id: "TD-ContextMenu-Cut" }, C6.createElement(message_default, { id: "cut" })), C6.createElement(Ee2, { onClick: w10, kbd: "#C", id: "TD-ContextMenu-Copy" }, C6.createElement(message_default, { id: "copy" })), C6.createElement(Ee2, { onClick: b10, kbd: "#V", id: "TD-ContextMenu-Paste" }, C6.createElement(message_default, { id: "paste" })), C6.createElement(Pe2, null), C6.createElement(Dr, { label: `${t10.formatMessage({ id: "copy.as" })}...`, size: "small", id: "TD-ContextMenu-Copy-As" }, C6.createElement(Ee2, { onClick: y10, id: "TD-ContextMenu-Copy-as-SVG" }, "SVG"), C6.createElement(Ee2, { onClick: R10, id: "TD-ContextMenu-Copy-As-PNG" }, "PNG"), o10 && C6.createElement(Ee2, { onClick: le3, id: "TD-ContextMenu-Copy_as_JSON" }, "JSON")), C6.createElement(Dr, { label: `${t10.formatMessage({ id: "export.as" })}...`, size: "small", id: "TD-ContextMenu-Export" }, C6.createElement(Ee2, { onClick: de4, id: "TD-ContextMenu-Export-SVG" }, "SVG"), C6.createElement(Ee2, { onClick: k10, id: "TD-ContextMenu-Export-PNG" }, "PNG"), C6.createElement(Ee2, { onClick: I10, id: "TD-ContextMenu-Export-JPG" }, "JPG"), C6.createElement(Ee2, { onClick: q10, id: "TD-ContextMenu-Export-WEBP" }, "WEBP"), o10 && C6.createElement(Ee2, { onClick: Ae2, id: "TD-ContextMenu-Export-JSON" }, "JSON")), C6.createElement(Pe2, null), C6.createElement(Ee2, { onClick: f10, kbd: "\u232B", id: "TD-ContextMenu-Delete" }, C6.createElement(message_default, { id: "delete" }))) : C6.createElement(C6.Fragment, null, C6.createElement(Ee2, { onClick: b10, kbd: "#V", id: "TD-ContextMenu-Paste" }, C6.createElement(message_default, { id: "paste" })), C6.createElement(Ee2, { onClick: U10, kbd: "#Z", id: "TD-ContextMenu-Undo" }, C6.createElement(message_default, { id: "undo" })), C6.createElement(Ee2, { onClick: L10, kbd: "#\u21E7Z", id: "TD-ContextMenu-Redo" }, C6.createElement(message_default, { id: "redo" })), C6.createElement(Dr, { label: `${t10.formatMessage({ id: "export.as" })}...`, size: "small", id: "TD-ContextMenu-Export" }, C6.createElement(Ee2, { onClick: de4, id: "TD-ContextMenu-Export-SVG" }, "SVG"), C6.createElement(Ee2, { onClick: k10, id: "TD-ContextMenu-Export-PNG" }, "PNG"), C6.createElement(Ee2, { onClick: I10, id: "TD-ContextMenu-Export-JPG" }, "JPG"), C6.createElement(Ee2, { onClick: q10, id: "TD-ContextMenu-Export-WEBP" }, "WEBP"), o10 && C6.createElement(Ee2, { onClick: Ae2, id: "TD-ContextMenu-Export-JSON" }, "JSON"))));
});
function cie({ hasThreeOrMore: r10 }) {
  let e10 = me3(), t10 = C6.useCallback(() => {
    e10.align("top");
  }, [e10]), n10 = C6.useCallback(() => {
    e10.align("centerVertical");
  }, [e10]), o10 = C6.useCallback(() => {
    e10.align("bottom");
  }, [e10]), s10 = C6.useCallback(() => {
    e10.stretch("vertical");
  }, [e10]), a10 = C6.useCallback(() => {
    e10.distribute("vertical");
  }, [e10]), d10 = C6.useCallback(() => {
    e10.align("left");
  }, [e10]), i10 = C6.useCallback(() => {
    e10.align("centerHorizontal");
  }, [e10]), c10 = C6.useCallback(() => {
    e10.align("right");
  }, [e10]), u10 = C6.useCallback(() => {
    e10.stretch("horizontal");
  }, [e10]), p10 = C6.useCallback(() => {
    e10.distribute("horizontal");
  }, [e10]), m10 = Lt2();
  return C6.createElement($1b0217ee4a91d156$export$d7a01e11500dfb6f, null, C6.createElement(Ss, { id: "TD-ContextMenu-Align-Distribute-Trigger" }, C6.createElement(message_default, { id: "align.distribute" })), C6.createElement($1b0217ee4a91d156$export$602eac185826482c, { container: m10.current }, C6.createElement($1b0217ee4a91d156$export$6d4de93b380beddf, { asChild: true, sideOffset: 4, alignOffset: -2 }, C6.createElement(pie, { numberOfSelected: r10 ? "threeOrMore" : "twoOrMore" }, C6.createElement(an2, { onClick: d10, id: "TD-ContextMenu-Align_Distribute-AlignLeft" }, C6.createElement(AlignLeftIcon, null)), C6.createElement(an2, { onClick: i10, id: "TD-ContextMenu-Align_Distribute-AlignCenterHorizontal" }, C6.createElement(AlignCenterHorizontallyIcon, null)), C6.createElement(an2, { onClick: c10, id: "TD-ContextMenu-Align_Distribute-AlignRight" }, C6.createElement(AlignRightIcon, null)), C6.createElement(an2, { onClick: u10, id: "TD-ContextMenu-Align_Distribute-StretchHorizontal" }, C6.createElement(StretchHorizontallyIcon, null)), r10 && C6.createElement(an2, { onClick: p10, id: "TD-ContextMenu-Align_Distribute-SpaceEvenlyHorizontal" }, C6.createElement(SpaceEvenlyHorizontallyIcon, null)), C6.createElement(an2, { onClick: t10, id: "TD-ContextMenu-Align_Distribute-AlignTop" }, C6.createElement(AlignTopIcon, null)), C6.createElement(an2, { onClick: n10, id: "TD-ContextMenu-Align_Distribute-AlignCenterVertical" }, C6.createElement(AlignCenterVerticallyIcon, null)), C6.createElement(an2, { onClick: o10, id: "TD-ContextMenu-Align_Distribute-AlignBottom" }, C6.createElement(AlignBottomIcon, null)), C6.createElement(an2, { onClick: s10, id: "TD-ContextMenu-Align_Distribute-StretchVertical" }, C6.createElement(StretchVerticallyIcon, null)), r10 && C6.createElement(an2, { onClick: a10, id: "TD-ContextMenu-Align_Distribute-SpaceEvenlyVertical" }, C6.createElement(SpaceEvenlyVerticallyIcon, null)), C6.createElement(fs, { offset: 13 })))));
}
var pie = H5(Rt2, { display: "grid", variants: { numberOfSelected: { threeOrMore: { gridTemplateColumns: "repeat(5, auto)" }, twoOrMore: { gridTemplateColumns: "repeat(4, auto)" } } } });
var uie = (r10) => r10.appState.currentPageId;
var hie = (r10) => r10.document.pages;
function mie() {
  let r10 = me3(), e10 = r10.useStore(uie), t10 = r10.useStore(hie), n10 = Object.values(t10).sort((s10, a10) => (s10.childIndex || 0) - (a10.childIndex || 0)).filter((s10) => s10.id !== e10), o10 = Lt2();
  return n10.length === 0 ? null : C6.createElement($1b0217ee4a91d156$export$d7a01e11500dfb6f, null, C6.createElement(Ss, null, C6.createElement(message_default, { id: "move.to.page" })), C6.createElement($1b0217ee4a91d156$export$602eac185826482c, { container: o10.current }, C6.createElement($1b0217ee4a91d156$export$6d4de93b380beddf, { sideOffset: 4, alignOffset: -2, asChild: true }, C6.createElement(Rt2, null, n10.map(({ id: s10, name: a10 }, d10) => C6.createElement(Ee2, { key: s10, disabled: s10 === e10, onClick: () => r10.moveToPage(s10) }, a10 || `Page ${d10}`)), C6.createElement(fs, { offset: 13 })))));
}
function Dr({ children: r10, label: e10, size: t10, id: n10 }) {
  let o10 = Lt2();
  return C6.createElement($1b0217ee4a91d156$export$d7a01e11500dfb6f, null, C6.createElement(Ss, null, e10), C6.createElement($1b0217ee4a91d156$export$602eac185826482c, { container: o10.current }, C6.createElement($1b0217ee4a91d156$export$6d4de93b380beddf, { sideOffset: 4, alignOffset: -2, asChild: true }, C6.createElement(Rt2, { size: t10 }, r10, C6.createElement(fs, { offset: 13 })))));
}
var fs = H5($1b0217ee4a91d156$export$f47d0a58228a61e2, { fill: "$panel" });
function an2(t10) {
  var n10 = t10, { onSelect: r10 } = n10, e10 = Je2(n10, ["onSelect"]);
  return C6.createElement($1b0217ee4a91d156$export$16a26dc176a49100, { dir: "ltr", onSelect: r10, asChild: true }, C6.createElement(ke, S4({}, e10)));
}
var Ee2 = (t10) => {
  var n10 = t10, { id: r10 } = n10, e10 = Je2(n10, ["id"]);
  return C6.createElement($1b0217ee4a91d156$export$16a26dc176a49100, { asChild: true, id: r10 }, C6.createElement(je2, S4({}, e10)));
};
var Ss = (t10) => {
  var n10 = t10, { id: r10 } = n10, e10 = Je2(n10, ["id"]);
  return C6.createElement($1b0217ee4a91d156$export$2ea8a7a591ac5eac, { asChild: true, id: r10 }, C6.createElement(je2, S4({ hasArrow: true }, e10)));
};
var Ba = C6.memo(lie);
function Ra({ error: r10, resetErrorBoundary: e10 }) {
  let t10 = me3(), n10 = () => {
    window.location.reload(), e10();
  }, o10 = () => {
    let d10 = document.createElement("textarea");
    d10.value = r10.message, document.body.appendChild(d10), d10.select(), document.execCommand("copy"), d10.remove();
  }, s10 = () => {
    t10.saveProjectAs();
  }, a10 = () => {
    t10.resetDocument(), e10();
  };
  return Ht2.createElement(gie, null, Ht2.createElement(fie, null, Ht2.createElement("div", null, "We've encountered an error!"), Ht2.createElement("pre", null, Ht2.createElement("code", null, r10.message)), Ht2.createElement(Sie, null, Ht2.createElement(je2, { onClick: o10 }, "Copy Error"), Ht2.createElement(je2, { onClick: n10 }, "Refresh Page")), Ht2.createElement(Pe2, null), Ht2.createElement("p", null, "Keep getting this error?", " ", Ht2.createElement("a", { onClick: s10, title: "Download your project" }, "Download your project"), " ", "as a backup and then", " ", Ht2.createElement("a", { onClick: a10, title: "Reset the document" }, "reset the document"), ".")));
}
var gie = H5("div", { position: "absolute", top: 0, left: 0, width: "100%", height: "100%", display: "flex", alignItems: "center", justifyContent: "center", backgroundColor: "$canvas" });
var fie = H5("div", { backgroundColor: "$panel", border: "1px solid $panelContrast", padding: "$5", borderRadius: 8, boxShadow: "$panel", maxWidth: 320, color: "$text", fontFamily: "$ui", fontSize: "$2", textAlign: "center", display: "flex", flexDirection: "column", gap: "$3", "& > pre": { marginTop: "$3", marginBottom: "$3", textAlign: "left", whiteSpace: "pre-wrap", backgroundColor: "$hover", padding: "$4", borderRadius: "$2", fontFamily: '"Menlo", "Monaco", monospace', fontWeight: 500 }, "& p": { fontFamily: "$body", lineHeight: 1.7, padding: "$5", margin: 0 }, "& a": { color: "$text", cursor: "pointer", textDecoration: "underline" }, "& hr": { marginLeft: "-$5", marginRight: "-$5" } });
var Sie = H5("div", { display: "flex", "& > button > div": { justifyContent: "center", textAlign: "center" } });
var go = H5("button", { position: "relative", height: "32px", width: "32px", backgroundColor: "$panel", borderRadius: "4px", padding: "0", margin: "0", outline: "none", border: "none", pointerEvents: "all", fontSize: "$0", color: "$text", cursor: "pointer", display: "grid", alignItems: "center", justifyContent: "center", "& > *": { gridRow: 1, gridColumn: 1 }, "&:disabled": { opacity: "0.5" }, "& > span": { width: "100%", height: "100%", display: "flex", alignItems: "center" }, variants: { bp: { mobile: { backgroundColor: "transparent" }, small: { "&:hover:not(:disabled)": { backgroundColor: "$hover" } } }, size: { small: { height: 32, width: 32, "& svg:nth-of-type(1)": { height: "16px", width: "16px" } }, medium: { height: 44, width: 44, "& svg:nth-of-type(1)": { height: "18px", width: "18px" } }, large: { height: 44, width: 44, "& svg:nth-of-type(1)": { height: "20px", width: "20px" } } }, isActive: { true: { color: "$selected" } } } });
function Aa({ onSelect: r10 }) {
  return Pr.createElement(Tie, null, Pr.createElement(go, { onClick: r10 }, Pr.createElement(DotFilledIcon, null)));
}
var Tie = H5("div", { opacity: 1, zIndex: 100, backgroundColor: "transparent", "& svg": { color: "$text" }, "&:hover svg": { color: "$text" } });
var wie = (r10) => r10.appState.isLoading;
function Ts() {
  let e10 = me3().useStore(wie);
  return bs.createElement(xie, { hidden: !e10 }, bs.createElement(message_default, { id: "loading", values: { dots: "..." } }));
}
var xie = H5("div", { position: "absolute", top: 0, left: "50%", transform: "translate(-50%, 0)", borderBottomLeftRadius: "12px", borderBottomRightRadius: "12px", padding: "8px 16px", fontFamily: "var(--fonts-ui)", fontSize: "var(--fontSizes-1)", boxShadow: "var(--shadows-panel)", backgroundColor: "white", zIndex: 200, pointerEvents: "none", "& > div > *": { pointerEvents: "all" }, variants: { transform: { hidden: { transform: "translate(-50%, 100%)" }, visible: { transform: "translate(-50%, 0%)" } } } });
function vie({ children: r10, onClose: e10, container: t10 }) {
  return ht2.createElement($905f4ae918aab1aa$export$602eac185826482c, { container: t10 }, ht2.createElement(Eie, null), ht2.createElement(Bie, { onKeyDown: (o10) => {
    switch (o10.key) {
      case "Escape":
        e10 == null || e10();
        break;
    }
  } }, r10));
}
var Iie = H5($905f4ae918aab1aa$export$393edc798c47379d, { marginBottom: 20, color: "$text", fontSize: "$2", lineHeight: 1.5, textAlign: "center", maxWidth: "62%", minWidth: 0, alignSelf: "center" });
var Cie = $905f4ae918aab1aa$export$be92b6f5f03c0fe9;
var Die = vie;
var Pie = Iie;
var La = $905f4ae918aab1aa$export$e19cd5f9376f8cee;
var Mie = $905f4ae918aab1aa$export$848c9b7ead0df967;
var Ha = ({ container: r10 }) => {
  let { setDialogState: e10, dialogState: t10, onCancel: n10, onNo: o10, onYes: s10 } = br(), a10 = useIntl(), d10 = { saveFirstTime: a10.formatMessage({ id: "dialog.save.firsttime" }), saveAgain: a10.formatMessage({ id: "dialog.save.again" }) };
  return ht2.createElement(Cie, { open: t10 !== null }, ht2.createElement(Die, { onClose: () => e10(null), container: r10 }, t10 && ht2.createElement(Pie, null, d10[t10]), ht2.createElement("div", { style: { width: "100%", gap: "$6", display: "flex", justifyContent: "space-between" } }, n10 && ht2.createElement(Mie, { asChild: true }, ht2.createElement(fo, { css: { color: "$text" }, onClick: () => {
    n10(), e10(null);
  } }, ht2.createElement(message_default, { id: "dialog.cancel" }))), ht2.createElement("div", { style: { flexShrink: 0 } }, o10 && ht2.createElement(La, { asChild: true }, ht2.createElement(fo, { onClick: () => {
    o10(), e10(null);
  } }, ht2.createElement(message_default, { id: "dialog.no" }))), s10 && ht2.createElement(La, { asChild: true }, ht2.createElement(fo, { css: { backgroundColor: "#2F80ED", color: "White" }, onClick: () => {
    s10(), e10(null);
  } }, ht2.createElement(message_default, { id: "dialog.yes" })))))));
};
var Eie = H5($905f4ae918aab1aa$export$c6fdb837b070b4ff, { position: "fixed", inset: 0, backgroundColor: "rgba(0, 0, 0, .15)", pointerEvents: "all" });
var lge = H5($905f4ae918aab1aa$export$c6fdb837b070b4ff, { backgroundColor: "rgba(0, 0, 0, .15)", position: "absolute", pointerEvents: "all", inset: 0 });
var Bie = H5($905f4ae918aab1aa$export$7c6e2c02157bb7d2, { position: "fixed", font: "$ui", top: "50%", left: "50%", transform: "translate(-50%, -50%)", width: "max-content", padding: "$3", pointerEvents: "all", backgroundColor: "$panel", borderRadius: "$3", display: "flex", flexDirection: "column", justifyContent: "center", fontFamily: "$ui", border: "1px solid $panelContrast", boxShadow: "$panel" });
var fo = H5("button", { all: "unset", display: "inline-flex", alignItems: "center", justifyContent: "center", borderRadius: "$2", padding: "0 15px", fontSize: "$1", lineHeight: 1, fontWeight: "normal", height: 36, color: "$text", cursor: "pointer", minWidth: 48 });
var Mr = So.forwardRef((n10, t10) => {
  var o10 = n10, { icon: r10 } = o10, e10 = Je2(o10, ["icon"]);
  return So.createElement(Rie, null, So.createElement(Aie, x5(S4({}, e10), { ref: t10 })), r10 ? So.createElement(Lie, null, r10) : null);
});
var Rie = H5("div", { position: "relative", width: "100%", height: "min-content" });
var Aie = H5("input", { color: "$text", border: "none", textAlign: "left", width: "100%", paddingLeft: "$3", paddingRight: "$6", backgroundColor: "$background", height: "32px", outline: "none", fontFamily: "$ui", fontSize: "$1", "&:focus": { backgroundColor: "$hover" }, borderRadius: "$2" });
var Lie = H5(ut2, { top: 0, right: 0, position: "absolute", paddingLeft: "$3", paddingRight: "$3", pointerEvents: "none", color: "$text" });
var Oa = ({ isOpen: r10, onClose: e10 }) => {
  let t10 = me3(), n10 = Lt2(), o10 = useIntl(), [s10, a10] = dt2.useState(t10.document.name), d10 = dt2.useCallback((u10) => {
    let p10 = u10.target.value.trimStart();
    a10(p10);
  }, []);
  function i10(u10) {
    u10.stopPropagation();
  }
  let c10 = dt2.useCallback((u10) => {
    switch (u10.key) {
      case "Enter": {
        t10.saveProjectAs(s10), e10();
        break;
      }
      case "Escape": {
        e10();
        break;
      }
    }
  }, []);
  return dt2.createElement($905f4ae918aab1aa$export$be92b6f5f03c0fe9, { open: r10 }, dt2.createElement($905f4ae918aab1aa$export$602eac185826482c, { container: n10.current }, dt2.createElement(Fie, { onPointerDown: e10 }), dt2.createElement(Oie, { dir: "ltr", onKeyDown: i10, onKeyUp: i10 }, dt2.createElement(Gie, { placeholder: o10.formatMessage({ id: "enter.file.name" }), value: s10, onChange: d10, onKeyDown: c10, icon: dt2.createElement(Pencil1Icon, null) }), dt2.createElement(jie, null, dt2.createElement($905f4ae918aab1aa$export$e19cd5f9376f8cee, { asChild: true }, dt2.createElement(fo, { onClick: e10 }, dt2.createElement(message_default, { id: "cancel" }))), dt2.createElement($905f4ae918aab1aa$export$e19cd5f9376f8cee, { asChild: true }, dt2.createElement(fo, { css: { backgroundColor: "#2F80ED", color: "White" }, onClick: () => {
    let u10 = s10.trim().replace(/\.tldr$/, "");
    t10.saveProjectAs(u10), e10();
  } }, dt2.createElement(message_default, { id: "save" })))))));
};
var Oie = H5($905f4ae918aab1aa$export$7c6e2c02157bb7d2, { position: "absolute", top: "50%", left: "50%", transform: "translate(-50%, -50%)", minWidth: 300, maxWidth: "fit-content", maxHeight: "85vh", marginTop: "-5vh", pointerEvents: "all", backgroundColor: "$panel", padding: "$3", borderRadius: "$2", font: "$ui", zIndex: 999999, "&:focus": { outline: "none" } });
var Fie = H5($905f4ae918aab1aa$export$c6fdb837b070b4ff, { backgroundColor: "rgba(0, 0, 0, .15)", position: "absolute", pointerEvents: "all", inset: 0, zIndex: 999998 });
var jie = H5("div", { width: "100%", display: "flex", alignItems: "center", gap: 8, justifyContent: "flex-end", marginTop: 10 });
var Gie = H5(Mr, { background: "$hover" });
function xe3(n10) {
  var o10 = n10, { onSelect: r10, id: e10 } = o10, t10 = Je2(o10, ["onSelect", "id"]);
  return ws.createElement($d08ef79370b62062$export$6d08773d2e66f8f2, { dir: "ltr", asChild: true, onSelect: r10, id: e10 }, ws.createElement(je2, S4({}, t10)));
}
var He2 = (r10) => r10.preventDefault();
function Pt2({ checked: r10, disabled: e10 = false, variant: t10, onCheckedChange: n10, kbd: o10, id: s10, ariaLabel: a10, children: d10 }) {
  return xs.createElement($d08ef79370b62062$export$16ce288f89fa631c, { dir: "ltr", onSelect: He2, onCheckedChange: n10, checked: r10, disabled: e10, asChild: true, id: s10, "aria-label": a10 }, xs.createElement(je2, { kbd: o10, variant: t10, hasIndicator: true }, d10));
}
var ft2 = (r10) => r10.stopPropagation();
function Mt2({ sideOffset: r10 = 4, alignOffset: e10 = 0, children: t10, align: n10, variant: o10, id: s10, overflow: a10 = false, side: d10 = "bottom" }) {
  let i10 = Lt2();
  return Er.createElement($d08ef79370b62062$export$602eac185826482c, { container: i10.current, dir: "ltr" }, Er.createElement($d08ef79370b62062$export$7c6e2c02157bb7d2, { align: n10, alignOffset: e10, sideOffset: r10, onEscapeKeyDown: ft2, asChild: true, id: s10, side: d10 }, Er.createElement(Nie, { variant: o10, overflow: a10 }, t10)));
}
var Nie = H5(Rt2, { width: "fit-content", height: "fit-content", minWidth: 0, maxHeight: "100vh", overflowY: "auto", overflowX: "hidden", "&::webkit-scrollbar": { display: "none" }, "-ms-overflow-style": "none", scrollbarWidth: "none", variants: { variant: { horizontal: { flexDirection: "row" }, menu: { minWidth: 128 } }, overflow: { true: { maxHeight: "60vh" } } } });
var Nge = H5($d08ef79370b62062$export$1ff3c3f08ae963c0, { backgroundColor: "$hover", height: 1, marginTop: "$2", marginRight: "-$2", marginBottom: "$2", marginLeft: "-$2" });
var jo = H5($d08ef79370b62062$export$371ab307eab489c0, { height: "32px", width: "32px", backgroundColor: "$panel", borderRadius: "4px", padding: "0", margin: "0", display: "flex", alignItems: "center", justifyContent: "center", outline: "none", border: "none", pointerEvents: "all", cursor: "pointer", variants: { isActive: { true: { backgroundColor: "$selected", color: "white" }, false: {} }, bp: { mobile: {}, small: {} } }, compoundVariants: [{ isActive: false, bp: "small", css: { "&:focus": { backgroundColor: "$hover" }, "&:hover:not(:disabled)": { backgroundColor: "$hover" } } }] });
function ln2({ children: r10, size: e10, overflow: t10 = false, disabled: n10 = false, label: o10, id: s10 }) {
  return to.createElement($d08ef79370b62062$export$d7a01e11500dfb6f, { key: s10 }, to.createElement($d08ef79370b62062$export$2ea8a7a591ac5eac, { dir: "ltr", asChild: true }, to.createElement(je2, { disabled: n10, hasArrow: true }, o10)), to.createElement($d08ef79370b62062$export$6d4de93b380beddf, { asChild: true, sideOffset: 4, alignOffset: -4 }, to.createElement(Rt2, { size: e10, overflow: t10 }, r10, to.createElement($d08ef79370b62062$export$21b07c8f274aebd5, { offset: 13 }))));
}
function Rr(n10) {
  var o10 = n10, { id: r10, children: e10 } = o10, t10 = Je2(o10, ["id", "children"]);
  return ks2.createElement($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true, id: r10 }, ks2.createElement(ke, S4({}, t10), e10));
}
var wae = (r10) => r10.settings.dockPosition;
var xae = (r10) => r10.document.pageStates[r10.appState.currentPageId].selectedIds.length;
var kae = (r10) => {
  let e10 = r10.document.pages[r10.appState.currentPageId], { selectedIds: t10 } = r10.document.pageStates[r10.appState.currentPageId];
  return t10.every((n10) => e10.shapes[n10].isLocked);
};
var vae = (r10) => {
  let e10 = r10.document.pages[r10.appState.currentPageId], { selectedIds: t10 } = r10.document.pageStates[r10.appState.currentPageId];
  return t10.every((n10) => e10.shapes[n10].isAspectRatioLocked);
};
var Iae = (r10) => {
  let e10 = r10.document.pages[r10.appState.currentPageId], t10 = r10.document.pageStates[r10.appState.currentPageId].selectedIds.map((n10) => e10.shapes[n10]);
  return t10.every((n10) => n10.children !== void 0 || n10.parentId === t10[0].parentId && t10[0].parentId !== r10.appState.currentPageId);
};
var Cae = (r10) => {
  let { selectedIds: e10 } = r10.document.pageStates[r10.appState.currentPageId];
  return e10.length > 0;
};
var Dae = (r10) => {
  let { selectedIds: e10 } = r10.document.pageStates[r10.appState.currentPageId];
  return e10.length > 1;
};
function Fa() {
  let r10 = me3(), e10 = useIntl(), t10 = r10.useStore(kae), n10 = r10.useStore(vae), o10 = r10.useStore(Iae), s10 = r10.useStore(Cae), a10 = r10.useStore(Dae), d10 = r10.useStore(xae), i10 = r10.useStore(wae), c10 = d10 > 1, u10 = d10 > 2, p10 = X3.useCallback(() => {
    r10.rotate();
  }, [r10]), m10 = X3.useCallback(() => {
    r10.duplicate();
  }, [r10]), h10 = X3.useCallback(() => {
    r10.toggleLocked();
  }, [r10]), g10 = X3.useCallback(() => {
    r10.toggleAspectRatioLocked();
  }, [r10]), f10 = X3.useCallback(() => {
    r10.group();
  }, [r10]), T10 = X3.useCallback(() => {
    r10.moveToBack();
  }, [r10]), w10 = X3.useCallback(() => {
    r10.moveBackward();
  }, [r10]), b10 = X3.useCallback(() => {
    r10.moveForward();
  }, [r10]), y10 = X3.useCallback(() => {
    r10.moveToFront();
  }, [r10]), R10 = X3.useCallback(() => {
    r10.setShapeProps({ rotation: 0 });
  }, [r10]), U10 = X3.useCallback(() => {
    r10.align("top");
  }, [r10]), L10 = X3.useCallback(() => {
    r10.align("centerVertical");
  }, [r10]), k10 = X3.useCallback(() => {
    r10.align("bottom");
  }, [r10]), I10 = X3.useCallback(() => {
    r10.stretch("vertical");
  }, [r10]), q10 = X3.useCallback(() => {
    r10.distribute("vertical");
  }, [r10]), de4 = X3.useCallback(() => {
    r10.align("left");
  }, [r10]), le3 = X3.useCallback(() => {
    r10.align("centerHorizontal");
  }, [r10]), Ae2 = X3.useCallback(() => {
    r10.align("right");
  }, [r10]), Ce2 = X3.useCallback(() => {
    r10.stretch("horizontal");
  }, [r10]), De2 = X3.useCallback(() => {
    r10.distribute("horizontal");
  }, [r10]), Ve = X3.useCallback((jt) => {
    r10.setMenuOpen(jt);
  }, [r10]), $e2 = i10 === "bottom" || i10 === "top" ? "top" : i10;
  return X3.createElement($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr", onOpenChange: Ve }, X3.createElement($d08ef79370b62062$export$41fb9f06171c75f4, { dir: "ltr", asChild: true, id: "TD-Tools-Dots" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "shape.options" }), variant: "circle" }, X3.createElement(DotsHorizontalIcon, null))), X3.createElement(Mt2, { sideOffset: 16, side: $e2 }, X3.createElement(X3.Fragment, null, X3.createElement(Ar, null, X3.createElement(Le2, { label: e10.formatMessage({ id: "duplicate" }), kbd: "#D", id: "TD-Tools-Copy" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "duplicate" }), disabled: !s10, onClick: m10 }, X3.createElement(CopyIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "rotate" }), id: "TD-Tools-Rotate" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "rotate" }), disabled: !s10, onClick: p10 }, X3.createElement(RotateCounterClockwiseIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: t10 ? "unlock" : "lock" }), kbd: "#L", id: "TD-Tools-Lock" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: t10 ? "unlock" : "lock" }), disabled: !s10, onClick: h10 }, t10 ? X3.createElement(LockClosedIcon, null) : X3.createElement(LockOpen1Icon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: n10 ? "unlock.aspect.ratio" : "lock.aspect.ratio" }), id: "TD-Tools-AspectRatio" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: n10 ? "unlock.aspect.ratio" : "lock.aspect.ratio" }), disabled: !s10, onClick: g10 }, n10 ? X3.createElement(AspectRatioIcon, null) : X3.createElement(BoxIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "group" }), kbd: "#G", id: "TD-Tools-Group" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "group" }), disabled: !s10 || !o10 && !a10, onClick: f10 }, X3.createElement(GroupIcon, null)))), X3.createElement(Ar, null, X3.createElement(Le2, { label: e10.formatMessage({ id: "move.to.back" }), kbd: "#\u21E7[", id: "TD-Tools-PinBottom" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "move.to.back" }), disabled: !s10, onClick: T10 }, X3.createElement(PinBottomIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "move.backward" }), kbd: "#[", id: "TD-Tools-ArrowDown" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "move.backward" }), disabled: !s10, onClick: w10 }, X3.createElement(ArrowDownIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "move.forward" }), kbd: "#]", id: "TD-Tools-ArrowUp" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "move.forward" }), disabled: !s10, onClick: b10 }, X3.createElement(ArrowUpIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "move.to.front" }), kbd: "#\u21E7]", id: "TD-Tools-PinTop" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "move.to.front" }), disabled: !s10, onClick: y10 }, X3.createElement(PinTopIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "reset.angle" }), id: "TD-Tools-ResetAngle" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "reset.angle" }), disabled: !s10, onClick: R10 }, X3.createElement(AngleIcon, null)))), X3.createElement(Pe2, null), X3.createElement(Ar, null, X3.createElement(Le2, { label: e10.formatMessage({ id: "align.left" }), id: "TD-Tools-AlignLeft" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "align.left" }), disabled: !c10, onClick: de4 }, X3.createElement(AlignLeftIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "align.center.x" }), id: "TD-Tools-AlignCenterHorizontal" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "align.center.x" }), disabled: !c10, onClick: le3 }, X3.createElement(AlignCenterHorizontallyIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "align.right" }), id: "TD-Tools-AlignRight" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "align.right" }), disabled: !c10, onClick: Ae2 }, X3.createElement(AlignRightIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "stretch.x" }), id: "TD-Tools-StretchHorizontal" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "stretch.x" }), disabled: !c10, onClick: Ce2 }, X3.createElement(StretchHorizontallyIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "distribute.x" }), id: "TD-Tools-SpaceEvenlyHorizontal" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "distribute.x" }), disabled: !u10, onClick: De2 }, X3.createElement(SpaceEvenlyHorizontallyIcon, null)))), X3.createElement(Ar, null, X3.createElement(Le2, { label: e10.formatMessage({ id: "align.top" }), id: "TD-Tools-AlignTop" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "align.top" }), disabled: !c10, onClick: U10 }, X3.createElement(AlignTopIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "align.center.y" }), id: "TD-Tools-AlignCenterVertical" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "align.center.y" }), disabled: !c10, onClick: L10 }, X3.createElement(AlignCenterVerticallyIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "align.bottom" }), id: "TD-Tools-AlignBottom" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "align.bottom" }), disabled: !c10, onClick: k10 }, X3.createElement(AlignBottomIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "stretch.y" }), id: "TD-Tools-StretchVertical" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "stretch.y" }), disabled: !c10, onClick: I10 }, X3.createElement(StretchVerticallyIcon, null))), X3.createElement(Le2, { label: e10.formatMessage({ id: "distribute.y" }), id: "TD-Tools-SpaceEvenlyVertical" }, X3.createElement(ke, { "aria-label": e10.formatMessage({ id: "distribute.y" }), disabled: !u10, onClick: q10 }, X3.createElement(SpaceEvenlyVerticallyIcon, null)))))));
}
var Ar = H5("div", { position: "relative", display: "flex", width: "100%", background: "none", border: "none", cursor: "pointer", outline: "none", alignItems: "center", justifyContent: "flex-start", padding: 0 });
var Mae = (r10) => r10.appState.isEmptyCanvas && Object.keys(r10.document.pages[r10.appState.currentPageId].shapes).length > 0;
var Eae = (r10) => r10.settings.isDebugMode;
var Bae = (r10) => r10.settings.dockPosition;
var ja = bo.memo(function() {
  let e10 = me3(), t10 = e10.useStore(Mae), n10 = e10.useStore(Bae), o10 = e10.useStore(Eae), s10 = { bottom: n10 === "bottom" && o10 ? 120 : n10 === "bottom" ? 80 : o10 ? 60 : 20, left: "50%", transform: "translate(-50%,0)" };
  return t10 ? bo.createElement(Rae, { id: "TD-Tools-Back_to_content", style: S4({}, s10) }, bo.createElement(je2, { onClick: e10.zoomToContent }, bo.createElement(message_default, { id: "zoom.to.content" }))) : null;
});
var Rae = H5(Rt2, { pointerEvents: "all", width: "fit-content", minWidth: 0, position: "fixed", bottom: 0 });
function Is(r10) {
  let n10 = r10, { size: e10 = 16 } = n10, t10 = Je2(n10, ["size"]);
  return vs.createElement("svg", S4({ width: 24, height: 24 }, t10), vs.createElement("circle", { cx: 12, cy: 12, r: e10 / 2 }));
}
function Ga() {
  return Cs2.createElement("svg", { width: "24", height: "24", stroke: "currentColor", xmlns: "http://www.w3.org/2000/svg" }, Cs2.createElement("circle", { cx: 12, cy: 12, r: 8, fill: "none", strokeWidth: 2.5, strokeLinecap: "round", strokeDasharray: 50.26548 * 0.1 }));
}
var Lae = `${50.26548 * 0.025} ${50.26548 * 0.1}`;
function Va() {
  return Ds.createElement("svg", { width: "24", height: "24", stroke: "currentColor", xmlns: "http://www.w3.org/2000/svg" }, Ds.createElement("circle", { cx: 12, cy: 12, r: 8, fill: "none", strokeWidth: 2.5, strokeLinecap: "round", strokeDasharray: Lae }));
}
function $a() {
  return Ps.createElement("svg", { width: "24", height: "24", viewBox: "1 1.5 21 22", fill: "currentColor", stroke: "currentColor", xmlns: "http://www.w3.org/2000/svg" }, Ps.createElement("path", { d: "M10.0162 19.2768C10.0162 19.2768 9.90679 19.2517 9.6879 19.2017C9.46275 19.1454 9.12816 19.0422 8.68413 18.8921C8.23384 18.7358 7.81482 18.545 7.42707 18.3199C7.03307 18.101 6.62343 17.7883 6.19816 17.3818C5.77289 16.9753 5.33511 16.3718 4.88482 15.5713C4.43453 14.7645 4.1531 13.8545 4.04053 12.8414C3.92795 11.822 4.04991 10.8464 4.40639 9.91451C4.76286 8.98266 5.39452 8.10084 6.30135 7.26906C7.21444 6.44353 8.29325 5.83377 9.5378 5.43976C10.7823 5.05202 11.833 4.92068 12.6898 5.04576C13.5466 5.16459 14.3878 5.43664 15.2133 5.86191C16.0388 6.28718 16.7768 6.8688 17.4272 7.60678C18.0714 8.34475 18.5404 9.21406 18.8344 10.2147C19.1283 11.2153 19.1721 12.2598 18.9657 13.348C18.7593 14.4299 18.2872 15.4337 17.5492 16.3593C16.8112 17.2849 15.9263 18.0072 14.8944 18.5263C13.8624 19.0391 12.9056 19.3174 12.0238 19.3612C11.142 19.405 10.2101 19.2705 9.22823 18.9578C8.24635 18.6451 7.35828 18.151 6.56402 17.4756C5.77601 16.8002 6.08871 16.8658 7.50212 17.6726C8.90927 18.4731 10.1444 18.8484 11.2076 18.7983C12.2645 18.7545 13.2965 18.4825 14.3034 17.9822C15.3102 17.4819 16.1264 16.8221 16.7518 16.0028C17.3772 15.1835 17.7681 14.3111 17.9244 13.3855C18.0808 12.4599 18.0401 11.5781 17.8025 10.74C17.5586 9.902 17.1739 9.15464 16.6486 8.49797C16.1233 7.8413 15.2289 7.27844 13.9656 6.80939C12.7086 6.34034 11.4203 6.20901 10.1007 6.41539C8.78732 6.61552 7.69599 7.06893 6.82669 7.77564C5.96363 8.48859 5.34761 9.26409 4.97863 10.1021C4.60964 10.9402 4.45329 11.8376 4.50958 12.7945C4.56586 13.7513 4.79101 14.6238 5.18501 15.4118C5.57276 16.1998 5.96363 16.8002 6.35764 17.2129C6.75164 17.6257 7.13313 17.9509 7.50212 18.1886C7.87736 18.4325 8.28074 18.642 8.71227 18.8171C9.15005 18.9922 9.47839 19.111 9.69728 19.1736C9.91617 19.2361 10.0256 19.2705 10.0256 19.2768H10.0162Z", strokeWidth: "2" }));
}
function Na() {
  return Ms.createElement("svg", { width: "24", height: "24", stroke: "currentColor", xmlns: "http://www.w3.org/2000/svg" }, Ms.createElement("circle", { cx: 12, cy: 12, r: 8, fill: "none", strokeWidth: 2, strokeLinecap: "round" }));
}
function Wa(r10) {
  return Go.createElement("svg", S4({ width: 18, height: 18, viewBox: "0 0 15 15", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg" }, r10), Go.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M2 4.656a.5.5 0 01.5-.5h9.7a.5.5 0 010 1H2.5a.5.5 0 01-.5-.5z" }), Go.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M6.272 3a.578.578 0 00-.578.578v.578h3.311v-.578A.578.578 0 008.428 3H6.272zm3.733 1.156v-.578A1.578 1.578 0 008.428 2H6.272a1.578 1.578 0 00-1.578 1.578v.578H3.578a.5.5 0 00-.5.5V12.2a1.578 1.578 0 001.577 1.578h5.39a1.578 1.578 0 001.577-1.578V4.656a.5.5 0 00-.5-.5h-1.117zm-5.927 1V12.2a.578.578 0 00.577.578h5.39a.578.578 0 00.577-.578V5.156H4.078z" }), Go.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M6.272 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5zM8.428 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5z" }));
}
function Bs(t10) {
  var n10 = t10, { flipHorizontal: r10 } = n10, e10 = Je2(n10, ["flipHorizontal"]);
  return Es.createElement("svg", S4({ width: 24, height: 24, viewBox: "0 0 15 15", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", style: { transform: r10 ? "scale(-1, 1)" : "scale(1, 1)" } }, e10), Es.createElement("path", { d: "M10.6707 8.5081C10.6707 10.1923 9.3004 11.5625 7.61631 11.5625H6.5351C6.35593 11.5625 6.21074 11.4173 6.21074 11.2382V11.13C6.21074 10.9508 6.35591 10.8057 6.5351 10.8057H7.61631C8.88313 10.8057 9.91387 9.77492 9.91387 8.5081C9.91387 7.24128 8.88313 6.21054 7.61631 6.21054H5.62155L6.99534 7.58433C7.14289 7.73183 7.14289 7.97195 6.99534 8.11944C6.85216 8.26251 6.60298 8.2623 6.46013 8.11944L4.44045 6.09971C4.36898 6.02824 4.32959 5.93321 4.32959 5.8321C4.32959 5.73106 4.36898 5.63598 4.44045 5.56454L6.46024 3.54472C6.60309 3.40176 6.85248 3.40176 6.99535 3.54472C7.14291 3.69218 7.14291 3.93234 6.99535 4.07979L5.62156 5.45368H7.61631C9.3004 5.45368 10.6707 6.82393 10.6707 8.5081Z" }));
}
function Ua(r10) {
  return Rs.createElement("svg", S4({ width: 24, height: 24, viewBox: "-2 -2 28 28", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg" }, r10), Rs.createElement("path", { d: "M12.4239 4.62C13.3572 4.62 14.1572 4.73333 14.8239 4.96C15.4906 5.17333 15.9772 5.43333 16.2839 5.74C16.3639 5.82 16.4039 5.94 16.4039 6.1V8.86H14.0639C13.9172 8.86 13.8439 8.78666 13.8439 8.64V7.26C13.4306 7.12666 12.9572 7.06 12.4239 7.06C11.6506 7.06 11.0639 7.18 10.6639 7.42C10.2639 7.66 10.0639 8.04666 10.0639 8.58V9C10.0639 9.38666 10.1639 9.69333 10.3639 9.92C10.5772 10.1333 11.0306 10.3467 11.7239 10.56L13.6439 11.14C14.4706 11.38 15.1172 11.66 15.5839 11.98C16.0506 12.3 16.3772 12.68 16.5639 13.12C16.7639 13.5467 16.8639 14.0733 16.8639 14.7V15.62C16.8639 16.7933 16.4039 17.7133 15.4839 18.38C14.5639 19.0467 13.2839 19.38 11.6439 19.38C10.6706 19.38 9.79723 19.2867 9.0239 19.1C8.2639 18.9133 7.71056 18.6533 7.3639 18.32C7.3239 18.28 7.29056 18.24 7.2639 18.2C7.25056 18.1467 7.2439 18.06 7.2439 17.94V15.74H7.6239C8.2239 16.1533 8.85056 16.4533 9.5039 16.64C10.1572 16.8267 10.9306 16.92 11.8239 16.92C12.6506 16.92 13.2506 16.7867 13.6239 16.52C14.0106 16.2533 14.2039 15.9333 14.2039 15.56V14.88C14.2039 14.6667 14.1639 14.48 14.0839 14.32C14.0172 14.16 13.8706 14.0133 13.6439 13.88C13.4172 13.7467 13.0572 13.6067 12.5639 13.46L10.6639 12.88C9.7839 12.6133 9.11056 12.3 8.6439 11.94C8.17723 11.58 7.85056 11.18 7.6639 10.74C7.49056 10.3 7.4039 9.83333 7.4039 9.34V8.38C7.4039 7.64666 7.61056 7 8.0239 6.44C8.43723 5.88 9.01723 5.44 9.7639 5.12C10.5239 4.78666 11.4106 4.62 12.4239 4.62Z" }));
}
function Ka(r10) {
  return As.createElement("svg", S4({ width: 24, height: 24, viewBox: "-2 -2 28 28", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg" }, r10), As.createElement("path", { d: "M8.16191 19H5.68191C5.53525 19 5.46191 18.9267 5.46191 18.78V5H8.76191C8.88191 5 8.97525 5.03333 9.04191 5.1C9.10858 5.15333 9.17525 5.27333 9.24191 5.46C9.72191 6.59333 10.1686 7.7 10.5819 8.78C11.0086 9.84667 11.4352 10.98 11.8619 12.18H12.1619C12.6019 10.9667 13.0352 9.79333 13.4619 8.66C13.8886 7.52667 14.3552 6.30667 14.8619 5H18.3219C18.4686 5 18.5419 5.07333 18.5419 5.22V19H16.0619C15.9152 19 15.8419 18.9267 15.8419 18.78V16.26C15.8419 15.5267 15.8486 14.8133 15.8619 14.12C15.8886 13.4267 15.9286 12.6867 15.9819 11.9C16.0486 11.1 16.1419 10.1933 16.2619 9.18H15.9019C15.4352 10.3533 14.9486 11.5667 14.4419 12.82C13.9486 14.06 13.4819 15.2333 13.0419 16.34H11.1019C11.0619 16.34 11.0152 16.3333 10.9619 16.32C10.9219 16.2933 10.8886 16.2467 10.8619 16.18C10.4619 15.18 10.0086 14.06 9.50191 12.82C9.00858 11.58 8.53525 10.3667 8.08191 9.18H7.70191C7.83525 10.18 7.93525 11.0733 8.00191 11.86C8.06858 12.6467 8.10858 13.3933 8.12191 14.1C8.14858 14.8067 8.16191 15.5267 8.16191 16.26V19Z" }));
}
function _a2(r10) {
  return Ls.createElement("svg", S4({ width: 24, height: 24, viewBox: "-2 -2 28 28", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg" }, r10), Ls.createElement("path", { d: "M7.68191 19C7.53525 19 7.46191 18.9267 7.46191 18.78V5H10.1219C10.2686 5 10.3419 5.07333 10.3419 5.22V16.56H13.4419V15.02H15.7619C15.9086 15.02 15.9819 15.0933 15.9819 15.24V19H7.68191Z" }));
}
function Ya() {
  return Vo.createElement("svg", { width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, Vo.createElement("path", { d: "M1.72838 9.33987L8.84935 2.34732C9.23874 1.96494 9.86279 1.96539 10.2516 2.34831L13.5636 5.60975C13.9655 6.00555 13.9607 6.65526 13.553 7.04507L8.13212 12.2278C7.94604 12.4057 7.69851 12.505 7.44107 12.505L6.06722 12.505L3.83772 12.505C3.5673 12.505 3.30842 12.3954 3.12009 12.2014L1.7114 10.7498C1.32837 10.3551 1.33596 9.72521 1.72838 9.33987Z", stroke: "currentColor" }), Vo.createElement("line", { x1: "6.01807", y1: "12.5", x2: "10.7959", y2: "12.5", stroke: "currentColor", strokeLinecap: "round" }), Vo.createElement("line", { x1: "5.50834", y1: "5.74606", x2: "10.1984", y2: "10.4361", stroke: "currentColor" }));
}
function Za() {
  return Hs.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", fill: "currentColor", viewBox: "0 0 16 16" }, Hs.createElement("path", { d: "M13.545 2.907a13.227 13.227 0 0 0-3.257-1.011.05.05 0 0 0-.052.025c-.141.25-.297.577-.406.833a12.19 12.19 0 0 0-3.658 0 8.258 8.258 0 0 0-.412-.833.051.051 0 0 0-.052-.025c-1.125.194-2.22.534-3.257 1.011a.041.041 0 0 0-.021.018C.356 6.024-.213 9.047.066 12.032c.001.014.01.028.021.037a13.276 13.276 0 0 0 3.995 2.02.05.05 0 0 0 .056-.019c.308-.42.582-.863.818-1.329a.05.05 0 0 0-.01-.059.051.051 0 0 0-.018-.011 8.875 8.875 0 0 1-1.248-.595.05.05 0 0 1-.02-.066.051.051 0 0 1 .015-.019c.084-.063.168-.129.248-.195a.05.05 0 0 1 .051-.007c2.619 1.196 5.454 1.196 8.041 0a.052.052 0 0 1 .053.007c.08.066.164.132.248.195a.051.051 0 0 1-.004.085 8.254 8.254 0 0 1-1.249.594.05.05 0 0 0-.03.03.052.052 0 0 0 .003.041c.24.465.515.909.817 1.329a.05.05 0 0 0 .056.019 13.235 13.235 0 0 0 4.001-2.02.049.049 0 0 0 .021-.037c.334-3.451-.559-6.449-2.366-9.106a.034.034 0 0 0-.02-.019Zm-8.198 7.307c-.789 0-1.438-.724-1.438-1.612 0-.889.637-1.613 1.438-1.613.807 0 1.45.73 1.438 1.613 0 .888-.637 1.612-1.438 1.612Zm5.316 0c-.788 0-1.438-.724-1.438-1.612 0-.889.637-1.613 1.438-1.613.807 0 1.451.73 1.438 1.613 0 .888-.631 1.612-1.438 1.612Z" }));
}
function Xa() {
  return zs.createElement("svg", { width: "15", height: "15", viewBox: "0 0 15 15", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg" }, zs.createElement("path", { d: "M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L11.1464 3.14645C11.3417 2.95118 11.6583 2.95118 11.8536 3.14645C12.0488 3.34171 12.0488 3.65829 11.8536 3.85355L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z" }));
}
function qa() {
  let r10 = me3(), e10 = useIntl(), t10 = To.useCallback(() => {
    r10.delete();
  }, [r10]), n10 = r10.useStore((o10) => o10.appState.status === "idle" && o10.document.pageStates[o10.appState.currentPageId].selectedIds.length > 0);
  return To.createElement(Le2, { label: e10.formatMessage({ id: "delete" }), kbd: "\u232B", id: "TD-Delete" }, To.createElement(ke, { "aria-label": e10.formatMessage({ id: "delete" }), variant: "circle", disabled: !n10, onSelect: t10 }, To.createElement(Wa, null)));
}
var Fae = (r10) => r10.settings.language;
var Ja = () => {
  let r10 = me3(), e10 = r10.useStore(Fae), t10 = Jt2.useCallback((n10) => {
    r10.setSetting("language", n10);
  }, [r10]);
  return Jt2.createElement(Mt2, { variant: "menu", overflow: true, id: "language-menu", side: "left", sideOffset: 8 }, Ir.map(({ locale: n10, label: o10 }) => Jt2.createElement(Pt2, { key: n10, checked: e10 === n10, onCheckedChange: () => t10(n10), id: `TD-MenuItem-Language-${n10}` }, o10)), Jt2.createElement(Pe2, null), Jt2.createElement("a", { href: "https://github.com/tldraw/tldraw/blob/main/guides/translation.md", target: "_blank", rel: "nofollow" }, Jt2.createElement(xe3, { id: "TD-MenuItem-Translation-Link" }, Jt2.createElement(message_default, { id: "translation.link" }), Jt2.createElement(ut2, null, Jt2.createElement(ExternalLinkIcon, null)))));
};
function Qa({ onOpenChange: r10 }) {
  let e10 = useIntl(), t10 = Lt2(), n10 = { Tools: [{ label: e10.formatMessage({ id: "select" }), kbd: "1" }, { label: e10.formatMessage({ id: "draw" }), kbd: "2" }, { label: e10.formatMessage({ id: "eraser" }), kbd: "3" }, { label: e10.formatMessage({ id: "rectangle" }), kbd: "4" }, { label: e10.formatMessage({ id: "ellipse" }), kbd: "5" }, { label: e10.formatMessage({ id: "triangle" }), kbd: "6" }, { label: e10.formatMessage({ id: "line" }), kbd: "7" }, { label: e10.formatMessage({ id: "arrow" }), kbd: "8" }, { label: e10.formatMessage({ id: "text" }), kbd: "9" }, { label: e10.formatMessage({ id: "sticky" }), kbd: "0" }], View: [{ label: e10.formatMessage({ id: "zoom.in" }), kbd: "#+" }, { label: e10.formatMessage({ id: "zoom.out" }), kbd: "#-" }, { label: `${e10.formatMessage({ id: "zoom.to" })} 100%`, kbd: "\u21E7+0" }, { label: e10.formatMessage({ id: "zoom.to.fit" }), kbd: "\u21E7+1" }, { label: e10.formatMessage({ id: "zoom.to.selection" }), kbd: "\u21E7+2" }, { label: e10.formatMessage({ id: "preferences.dark.mode" }), kbd: "#\u21E7D" }, { label: e10.formatMessage({ id: "preferences.focus.mode" }), kbd: "#." }, { label: e10.formatMessage({ id: "preferences.show.grid" }), kbd: "#\u21E7G" }], Transform: [{ label: e10.formatMessage({ id: "flip.horizontal" }), kbd: "\u21E7H" }, { label: e10.formatMessage({ id: "flip.vertical" }), kbd: "\u21E7V" }, { label: `${e10.formatMessage({ id: "lock" })} / ${e10.formatMessage({ id: "unlock" })}`, kbd: "#\u21E7L" }, { label: `${e10.formatMessage({ id: "move" })} ${e10.formatMessage({ id: "to.front" })}`, kbd: "\u21E7]" }, { label: `${e10.formatMessage({ id: "move" })} ${e10.formatMessage({ id: "forward" })}`, kbd: "]" }, { label: `${e10.formatMessage({ id: "move" })} ${e10.formatMessage({ id: "backward" })}`, kbd: "[" }, { label: `${e10.formatMessage({ id: "move" })} ${e10.formatMessage({ id: "back" })}`, kbd: "\u21E7[" }], File: [{ label: e10.formatMessage({ id: "new.project" }), kbd: "#N" }, { label: e10.formatMessage({ id: "open" }), kbd: "#O" }, { label: e10.formatMessage({ id: "save" }), kbd: "#S" }, { label: e10.formatMessage({ id: "save.as" }), kbd: "#\u21E7S" }, { label: e10.formatMessage({ id: "upload.media" }), kbd: "#U" }], Edit: [{ label: e10.formatMessage({ id: "undo" }), kbd: "#Z" }, { label: e10.formatMessage({ id: "redo" }), kbd: "#\u21E7Z" }, { label: e10.formatMessage({ id: "cut" }), kbd: "#X" }, { label: e10.formatMessage({ id: "copy" }), kbd: "#C" }, { label: e10.formatMessage({ id: "paste" }), kbd: "#V" }, { label: e10.formatMessage({ id: "select.all" }), kbd: "#A" }, { label: e10.formatMessage({ id: "delete" }), kbd: "\u232B" }, { label: e10.formatMessage({ id: "duplicate" }), kbd: "#D" }] };
  return rt2.createElement($5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9, { onOpenChange: r10 }, rt2.createElement($5d3850c4d0b4e6c7$export$41fb9f06171c75f4, { asChild: true }, rt2.createElement(je2, { id: "TD-HelpItem-Keyboard", variant: "wide" }, rt2.createElement(message_default, { id: "keyboard.shortcuts" }))), rt2.createElement($5d3850c4d0b4e6c7$export$602eac185826482c, { container: t10.current }, rt2.createElement(Kae, null), rt2.createElement(Wae, null, rt2.createElement(Yae, null, rt2.createElement(message_default, { id: "keyboard.shortcuts" }), rt2.createElement($5d3850c4d0b4e6c7$export$f39c2d165cd861fe, { asChild: true }, rt2.createElement(_ae, null, rt2.createElement(Cross2Icon, null)))), rt2.createElement(Uae, { bp: Qe2 }, Object.entries(n10).map(([o10, s10]) => rt2.createElement(Fs, { key: o10 }, rt2.createElement(Vae, null, rt2.createElement(message_default, { id: `menu.${o10.toLocaleLowerCase()}` })), rt2.createElement($ae, null, s10.map((a10) => rt2.createElement(Nae, { key: a10.label }, a10.label, rt2.createElement(po, { variant: "menu" }, a10.kbd))))))))));
}
var Vae = H5("h3", { fontSize: "$2", color: "$text", fontFamily: "$ui", margin: 0, paddingBottom: "$5" });
var Fs = H5("div", { breakInside: "avoid", paddingBottom: 24 });
var $ae = H5("ul", { listStyleType: "none", width: "100%", padding: 0, margin: 0 });
var Nae = H5("li", { display: "flex", alignItems: "center", justifyContent: "space-between", height: 32, minHeight: 32, width: "100%", outline: "none", color: "$text", fontFamily: "$ui", fontWeight: 400, fontSize: "$1", borderRadius: 4, userSelect: "none", WebkitUserSelect: "none", margin: 0, padding: "0 0" });
var Wae = H5($5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2, { borderRadius: 6, boxShadow: "hsl(206 22% 7% / 35%) 0px 10px 38px -10px, hsl(206 22% 7% / 20%) 0px 10px 20px -15px", position: "fixed", top: "50%", left: "50%", transform: "translate(-50%, -50%)", width: "fit-content", maxWidth: "90vw", maxHeight: "74vh", overflowY: "auto", padding: 25, zIndex: 9999, pointerEvents: "all", background: "$panel", "&:focus": { outline: "none" } });
var Uae = H5("div", { maxWidth: "100%", width: "fit-content", height: "fit-content", overflowY: "auto", columnGap: 64, variants: { bp: { mobile: { columns: 1, [`& ${Fs}`]: { minWidth: "0px" } }, small: { columns: 2, [`& ${Fs}`]: { minWidth: "200px" } }, medium: { columns: 3 }, large: { columns: 3 } } } });
var Kae = H5($5d3850c4d0b4e6c7$export$c6fdb837b070b4ff, { backgroundColor: "$overlay", position: "fixed", inset: 0, zIndex: 9998 });
var _ae = H5(go, { fontFamily: "inherit", borderRadius: "100%", height: 25, width: 25, display: "inline-flex", alignItems: "center", justifyContent: "center", color: "$text", cursor: "pointer", "&:hover": { backgroundColor: "$hover" } });
var Yae = H5($5d3850c4d0b4e6c7$export$f99233281efd08a0, { fontFamily: "$body", fontSize: "$3", color: "$text", paddingBottom: 32, display: "flex", alignItems: "center", justifyContent: "space-between", margin: 0 });
var ele = (r10) => r10.settings.isDebugMode;
var tle = (r10) => r10.settings.dockPosition;
function tl() {
  let r10 = me3(), e10 = r10.useStore(ele), t10 = r10.useStore(tle), [n10, o10] = ze2.useState(false);
  return ze2.createElement($cb5cc270b50c6fcd$export$be92b6f5f03c0fe9, null, ze2.createElement(ale, { dir: "ltr", debug: e10, side: t10, bp: Qe2 }, ze2.createElement($cb5cc270b50c6fcd$export$41fb9f06171c75f4, { dir: "ltr", asChild: true }, ze2.createElement(sle, null, ze2.createElement(QuestionMarkIcon, null)))), ze2.createElement($cb5cc270b50c6fcd$export$7c6e2c02157bb7d2, { dir: "ltr", align: "end", side: "top", alignOffset: 10, sideOffset: 8, asChild: true }, ze2.createElement(ile, { style: { visibility: n10 ? "hidden" : "visible" } }, ze2.createElement(nle, null), ze2.createElement(Qa, { onOpenChange: o10 }), ze2.createElement(Pe2, null), ze2.createElement(rle, null))));
}
var nle = () => ze2.createElement($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr" }, ze2.createElement($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true }, ze2.createElement(je2, { variant: "wide", hasArrow: true }, ze2.createElement(message_default, { id: "language" }))), ze2.createElement(Ja, null));
var ole = [{ id: "tldraw-beta", icon: ExternalLinkIcon, url: "https://beta.tldraw.com" }, { id: "github", icon: GitHubLogoIcon, url: "https://github.com/tldraw/tldraw" }, { id: "twitter", icon: TwitterLogoIcon, url: "https://twitter.com/tldraw" }, { id: "discord", icon: Za, url: "https://discord.gg/SBBEVCA4PG" }, { id: "become.a.sponsor", icon: HeartFilledIcon, url: "https://github.com/sponsors/steveruizok" }];
var rle = () => ze2.createElement(ze2.Fragment, null, ole.map((r10) => ze2.createElement("a", { key: r10.id, href: r10.url, target: "_blank", rel: "nofollow" }, ze2.createElement(je2, { id: `TD-Link-${r10.id}`, variant: "wide" }, ze2.createElement(message_default, { id: r10.id }), ze2.createElement(ut2, null, ze2.createElement(r10.icon, null))))));
var sle = H5("button", { width: 32, height: 32, borderRadius: "100%", display: "flex", padding: 0, justifyContent: "center", alignItems: "center", outline: "none", backgroundColor: "$panel", cursor: "pointer", boxShadow: "$panel", border: "1px solid $panelContrast", color: "$text", "& svg": { height: 12, width: 12 } });
var ile = H5(Rt2, { width: "fit-content", height: "fit-content", minWidth: 200, maxHeight: 380, overflowY: "auto", "& *": { boxSizing: "border-box" }, "& a": { outline: "none" }, variants: { variant: { horizontal: { flexDirection: "row" }, menu: { minWidth: 128 } } } });
var ale = H5($cb5cc270b50c6fcd$export$b688253958b8dfe7, { position: "absolute", zIndex: 999, right: 10, bottom: 10, width: 32, height: 32, variants: { debug: { true: {}, false: {} }, bp: { mobile: { bottom: 64 }, small: { bottom: 20 }, medium: {}, large: {} }, side: { top: {}, left: {}, right: {}, bottom: {} } }, compoundVariants: [{ debug: true, css: { bottom: 50 } }, { bp: "mobile", side: "bottom", debug: true, css: { bottom: 104 } }, { bp: "small", side: "bottom", debug: true, css: { bottom: 60 } }, { bp: "small", side: "bottom", debug: true, css: { bottom: 60 } }] });
var no = H5("div", { backgroundColor: "$panel", display: "flex", alignItems: "center", flexDirection: "row", boxShadow: "$panel", padding: "$2", border: "1px solid $panelContrast", gap: 0, overflow: "hidden", variants: { side: { center: { borderRadius: 9 }, left: { padding: 0, borderTop: 0, borderLeft: 0, borderTopRightRadius: 0, borderBottomRightRadius: 9, borderBottomLeftRadius: 0 }, right: { padding: 0, borderTop: 0, borderRight: 0, borderTopLeftRadius: 0, borderBottomLeftRadius: 9, borderBottomRightRadius: 0 } } }, "& hr": { height: 10, width: "100%", backgroundColor: "red", border: "none" } });
var js = ["rectangle", "ellipse", "triangle", "line"];
var nl = { ["rectangle"]: Ue2.createElement(SquareIcon, null), ["ellipse"]: Ue2.createElement(CircleIcon, null), ["triangle"]: Ue2.createElement(VercelLogoIcon, null), ["line"]: Ue2.createElement(Xa, null) };
var ule = (r10) => r10.settings.dockPosition;
var ol = Ue2.memo(function({ activeTool: e10, isToolLocked: t10 }) {
  let n10 = me3(), o10 = useIntl(), s10 = n10.useStore(ule), [a10, d10] = Ue2.useState("rectangle");
  Ue2.useEffect(() => {
    js.includes(e10) && a10 !== e10 && d10(e10);
  }, [e10]);
  let i10 = Ue2.useCallback(() => {
    n10.selectTool(a10);
  }, [e10, n10]), c10 = Ue2.useCallback(() => {
    n10.toggleToolLock();
  }, [n10]), u10 = Ue2.useCallback((g10) => {
    g10.key === " " && n10.shiftKey && g10.preventDefault();
  }, []), p10 = js.includes(e10), m10 = s10 === "bottom" || s10 === "top" ? "top" : s10, h10 = s10 === "bottom" || s10 === "top" ? "row" : "column";
  return Ue2.createElement($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr", onOpenChange: i10 }, Ue2.createElement($d08ef79370b62062$export$41fb9f06171c75f4, { dir: "ltr", asChild: true, id: "TD-PrimaryTools-Shapes" }, Ue2.createElement(ke, { disabled: p10 && n10.shiftKey, variant: "primary", onDoubleClick: c10, isToolLocked: p10 && t10, isActive: p10, onKeyDown: u10, "aria-label": o10.formatMessage({ id: "shapes" }) }, nl[a10])), Ue2.createElement($d08ef79370b62062$export$7c6e2c02157bb7d2, { asChild: true, side: m10, sideOffset: 12 }, Ue2.createElement(no, { side: "center", style: { flexDirection: h10 } }, js.map((g10, f10) => Ue2.createElement(Le2, { key: g10, label: o10.formatMessage({ id: g10 }), kbd: (4 + f10).toString(), id: `TD-PrimaryTools-Shapes-${g10}` }, Ue2.createElement($d08ef79370b62062$export$6d08773d2e66f8f2, { asChild: true }, Ue2.createElement(ke, { "aria-label": o10.formatMessage({ id: g10 }), variant: "primary", onClick: () => {
    n10.selectTool(g10), d10(g10);
  } }, nl[g10])))))));
});
var yle = (r10) => r10.appState.activeTool;
var wle = (r10) => r10.appState.isToolLocked;
var xle = (r10) => r10.settings.dockPosition;
var rl = Oe2.memo(function() {
  let e10 = me3(), t10 = useIntl(), n10 = e10.useStore(yle), o10 = e10.useStore(wle), s10 = e10.useStore(xle), a10 = Oe2.useCallback(() => {
    e10.selectTool("select");
  }, [e10]), d10 = Oe2.useCallback(() => {
    e10.selectTool("erase");
  }, [e10]), i10 = Oe2.useCallback(() => {
    e10.selectTool("draw");
  }, [e10]), c10 = Oe2.useCallback(() => {
    e10.selectTool("arrow");
  }, [e10]), u10 = Oe2.useCallback(() => {
    e10.selectTool("text");
  }, [e10]), p10 = Oe2.useCallback(() => {
    e10.selectTool("sticky");
  }, [e10]), m10 = Oe2.useCallback(() => pe4(this, null, function* () {
    e10.openAsset();
  }), [e10]);
  return Oe2.createElement(kle, { side: "center", id: "TD-PrimaryTools", style: { flexDirection: s10 === "bottom" || s10 === "top" ? "row" : "column" }, bp: Qe2 }, Oe2.createElement(Xt2, { kbd: "1", label: t10.formatMessage({ id: "select" }), onClick: a10, isActive: n10 === "select", variant: "primary", id: "TD-PrimaryTools-CursorArrow" }, Oe2.createElement(CursorArrowIcon, null)), Oe2.createElement(Xt2, { kbd: "2", label: t10.formatMessage({ id: "draw" }), onClick: i10, isActive: n10 === "draw", variant: "primary", id: "TD-PrimaryTools-Pencil" }, Oe2.createElement(Pencil1Icon, null)), Oe2.createElement(Xt2, { kbd: "3", label: t10.formatMessage({ id: "eraser" }), onClick: d10, isActive: n10 === "erase", variant: "primary", id: "TD-PrimaryTools-Eraser" }, Oe2.createElement(Ya, null)), Oe2.createElement(ol, { activeTool: n10, isToolLocked: o10 }), Oe2.createElement(Xt2, { kbd: "8", label: t10.formatMessage({ id: "arrow" }), onClick: c10, isLocked: o10, variant: "primary", isActive: n10 === "arrow", id: "TD-PrimaryTools-ArrowTopRight" }, Oe2.createElement(ArrowTopRightIcon, null)), Oe2.createElement(Xt2, { kbd: "9", label: t10.formatMessage({ id: "text" }), onClick: u10, isLocked: o10, variant: "primary", isActive: n10 === "text", id: "TD-PrimaryTools-Text" }, Oe2.createElement(TextIcon, null)), Oe2.createElement(Xt2, { kbd: "0", label: t10.formatMessage({ id: "sticky" }), onClick: p10, isActive: n10 === "sticky", variant: "primary", id: "TD-PrimaryTools-Pencil2" }, Oe2.createElement(Pencil2Icon, null)), Oe2.createElement(Xt2, { label: t10.formatMessage({ id: "image" }), onClick: m10, id: "TD-PrimaryTools-Image", variant: "primary" }, Oe2.createElement(ImageIcon, null)));
});
var kle = H5(no, { variants: { bp: { mobile: { padding: "$0", borderRadius: "10px" }, small: { padding: "$2" } } } });
var vle = (r10) => r10.appState.status;
var Ile = (r10) => r10.appState.activeTool;
function sl() {
  let r10 = me3(), e10 = r10.useStore(vle), t10 = r10.useStore(Ile);
  return Gs.createElement(Cle, { bp: Qe2, id: "TD-StatusBar" }, Gs.createElement(Dle, null, t10, " | ", e10));
}
var Cle = H5("div", { height: 40, userSelect: "none", WebkitUserSelect: "none", borderTop: "1px solid $panelContrast", gridArea: "status", display: "flex", color: "$text", justifyContent: "space-between", alignItems: "center", backgroundColor: "$panel", gap: 8, fontFamily: "$ui", fontSize: "$0", padding: "0 16px", variants: { bp: { small: { fontSize: "$1" } } } });
var Dle = H5("div", { whiteSpace: "nowrap", overflow: "hidden" });
var Ple = (r10) => r10.settings.isDebugMode;
var Mle = (r10) => r10.settings.dockPosition;
var il = Tt2.memo(function({ onBlur: e10 }) {
  let t10 = me3(), n10 = t10.useStore(Mle), o10 = t10.useStore(Ple);
  return Tt2.createElement(Tt2.Fragment, null, Tt2.createElement(Ele, { side: n10, onBlur: e10, bp: Qe2, debug: o10 }, Tt2.createElement(Ble, { id: "TD-Tools" }, Tt2.createElement(ja, null), Tt2.createElement(Ale, { orientation: n10 === "bottom" || n10 === "top" ? "horizontal" : "vertical" }, Tt2.createElement(Fa, null), Tt2.createElement(rl, null), Tt2.createElement(qa, null)))), Tt2.createElement(tl, null), o10 && Tt2.createElement(Rle, null, Tt2.createElement(sl, null)));
});
var Ele = H5("div", { position: "absolute", width: "100%", minWidth: 0, maxWidth: "100%", height: 64, gap: "$4", display: "flex", justifyContent: "center", alignItems: "center", zIndex: 200, overflow: "hidden", pointerEvents: "none", "& > div > *": { pointerEvents: "all" }, variants: { debug: { true: {}, false: {} }, bp: { mobile: {}, small: {}, medium: {}, large: {} }, side: { top: { width: "100%", height: 64, left: 0, right: 0, top: 45 }, right: { width: 64, height: "100%", top: 0, right: 0 }, bottom: { width: "100%", left: 0, right: 0, bottom: 4 }, left: { width: 64, height: "100%", left: 0 } } }, compoundVariants: [{ side: "top", bp: "large", css: { top: 0 } }, { side: "bottom", debug: true, css: { bottom: 44 } }] });
var Ble = H5("div", { display: "flex", width: "fit-content", height: "fit-content", alignItems: "center", justifyContent: "center", flexDirection: "column", gap: "$4" });
var Rle = H5("div", { position: "absolute", bottom: "0px", left: "0px", right: "0px", height: "40px", width: "100%", maxWidth: "100%" });
var Ale = H5("div", { position: "relative", display: "flex", alignItems: "center", height: "fit-content", gap: "$3", variants: { orientation: { horizontal: { flexDirection: "row" }, vertical: { flexDirection: "column" } } } });
var Hle = (r10) => r10.settings;
var zle = ["bottom", "left", "right", "top"];
function ll() {
  let r10 = me3(), e10 = useIntl(), t10 = r10.useStore(Hle), n10 = Me2.useCallback(() => {
    r10.setSetting("isDebugMode", (p10) => !p10);
  }, [r10]), o10 = Me2.useCallback(() => {
    r10.setSetting("isDarkMode", (p10) => !p10);
  }, [r10]), s10 = Me2.useCallback(() => {
    r10.setSetting("isFocusMode", (p10) => !p10);
  }, [r10]), a10 = Me2.useCallback(() => {
    r10.setSetting("showGrid", (p10) => !p10);
  }, [r10]), d10 = Me2.useCallback(() => {
    r10.setSetting("keepStyleMenuOpen", (p10) => !p10);
  }, [r10]), i10 = Me2.useCallback(() => {
    r10.setSetting("isCadSelectMode", (p10) => !p10);
  }, [r10]), c10 = Me2.useCallback((p10) => {
    r10.setSetting("dockPosition", p10);
  }, [r10]), u10 = Me2.useCallback((p10) => {
    r10.setSetting("exportBackground", p10);
  }, [r10]);
  return Me2.createElement(ln2, { label: e10.formatMessage({ id: "menu.preferences" }), id: "TD-MenuItem-Preferences" }, Me2.createElement(Pt2, { checked: t10.isDarkMode, onCheckedChange: o10, kbd: "#\u21E7D", id: "TD-MenuItem-Preferences-Dark_Mode", ariaLabel: e10.formatMessage({ id: "preferences.dark.mode" }) }, Me2.createElement(message_default, { id: "preferences.dark.mode" })), Me2.createElement(Pt2, { checked: t10.isFocusMode, onCheckedChange: s10, kbd: "#.", id: "TD-MenuItem-Preferences-Focus_Mode", ariaLabel: e10.formatMessage({ id: "preferences.focus.mode" }) }, Me2.createElement(message_default, { id: "preferences.focus.mode" })), Me2.createElement(Pt2, { checked: t10.isDebugMode, onCheckedChange: n10, id: "TD-MenuItem-Preferences-Debug_Mode", ariaLabel: e10.formatMessage({ id: "preferences.debug.mode" }) }, Me2.createElement(message_default, { id: "preferences.debug.mode" })), Me2.createElement(Pe2, null), Me2.createElement(Pt2, { checked: t10.showGrid, onCheckedChange: a10, kbd: "#\u21E7G", id: "TD-MenuItem-Preferences-Grid", ariaLabel: e10.formatMessage({ id: "preferences.show.grid" }) }, Me2.createElement(message_default, { id: "preferences.show.grid" })), Me2.createElement(Pt2, { checked: t10.isCadSelectMode, onCheckedChange: i10, id: "TD-MenuItem-Preferences-Cad_Selection", ariaLabel: e10.formatMessage({ id: "preferences.use.cad.selection" }) }, Me2.createElement(message_default, { id: "preferences.use.cad.selection" })), Me2.createElement(Pt2, { checked: t10.keepStyleMenuOpen, onCheckedChange: d10, id: "TD-MenuItem-Preferences-Style_menu", ariaLabel: e10.formatMessage({ id: "preferences.keep.stylemenu.open" }) }, Me2.createElement(message_default, { id: "preferences.keep.stylemenu.open" })), Me2.createElement(ln2, { label: e10.formatMessage({ id: "dock.position" }) }, zle.map((p10) => Me2.createElement(Pt2, { key: p10, checked: t10.dockPosition === p10, onCheckedChange: () => c10(p10), id: `TD-MenuItem-DockPosition-${p10}`, ariaLabel: `DockPosition-${p10}` }, Me2.createElement(al, null, Me2.createElement(message_default, { id: p10 }))))), Me2.createElement(ln2, { label: e10.formatMessage({ id: "export.background" }) }, Object.values(Fo).map((p10) => Me2.createElement(Pt2, { key: p10, checked: t10.exportBackground === p10, onCheckedChange: () => u10(p10), id: `TD-MenuItem-ExportBackground-${p10}`, ariaLabel: `ExportBackground-${p10}` }, Me2.createElement(al, null, Me2.createElement(message_default, { id: p10 }))))));
}
var al = H5("span", { textTransform: "capitalize" });
var Gle = (r10) => r10.document.pageStates[r10.appState.currentPageId].selectedIds.length;
var Vle = (r10) => r10.appState.disableAssets;
var cl = ee4.memo(function({ readOnly: e10 }) {
  let t10 = me3(), n10 = useIntl(), [o10, s10] = ee4.useState(false), a10 = t10.useStore(Gle), d10 = t10.useStore(Vle), [i10, c10] = ee4.useState(0);
  ee4.useEffect(() => c10(1), []);
  let { onNewProject: u10, onOpenProject: p10, onSaveProject: m10, onSaveProjectAs: h10 } = Sr(), g10 = ee4.useCallback(() => {
    e4 ? t10.saveProjectAs() : s10(true);
  }, [t10]), f10 = ee4.useCallback(() => {
    t10.delete();
  }, [t10]), T10 = ee4.useCallback(() => {
    t10.copyImage("svg", { scale: 1, quality: 1, transparentBackground: false });
  }, [t10]), w10 = ee4.useCallback(() => {
    t10.copyImage("png", { scale: 2, quality: 1, transparentBackground: true });
  }, [t10]), b10 = ee4.useCallback(() => pe4(this, null, function* () {
    t10.exportImage("png", { scale: 2, quality: 1 });
  }), [t10]), y10 = ee4.useCallback(() => pe4(this, null, function* () {
    t10.exportImage("jpeg", { scale: 2, quality: 1 });
  }), [t10]), R10 = ee4.useCallback(() => pe4(this, null, function* () {
    t10.exportImage("webp", { scale: 2, quality: 1 });
  }), [t10]), U10 = ee4.useCallback(() => pe4(this, null, function* () {
    t10.exportImage("svg", { scale: 2, quality: 1 });
  }), [t10]), L10 = ee4.useCallback(() => pe4(this, null, function* () {
    t10.copyJson();
  }), [t10]), k10 = ee4.useCallback(() => pe4(this, null, function* () {
    t10.exportJson();
  }), [t10]), I10 = ee4.useCallback(() => {
    t10.cut();
  }, [t10]), q10 = ee4.useCallback(() => {
    t10.copy();
  }, [t10]), de4 = ee4.useCallback(() => {
    t10.paste();
  }, [t10]), le3 = ee4.useCallback(() => {
    t10.selectAll();
  }, [t10]), Ae2 = ee4.useCallback(() => {
    t10.selectNone();
  }, [t10]), Ce2 = ee4.useCallback(() => {
    t10.openAsset();
  }, [t10]), De2 = ee4.useCallback(() => {
    t10.zoomTo(1);
  }, [t10]), Ve = t10.callbacks.onNewProject || t10.callbacks.onOpenProject || t10.callbacks.onSaveProject || t10.callbacks.onSaveProjectAs || t10.callbacks.onExport, $e2 = a10 > 0;
  return ee4.createElement(ee4.Fragment, null, ee4.createElement($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr" }, ee4.createElement(Rr, { id: "TD-MenuIcon" }, ee4.createElement(HamburgerMenuIcon, null)), ee4.createElement(Mt2, { variant: "menu", id: "TD-Menu", side: "bottom", align: "start", sideOffset: 4, alignOffset: 4 }, Ve && ee4.createElement(ln2, { label: `${n10.formatMessage({ id: "menu.file" })}...`, id: "TD-MenuItem-File" }, t10.callbacks.onNewProject && ee4.createElement(xe3, { onClick: u10, kbd: "#N", id: "TD-MenuItem-File-New_Project" }, ee4.createElement(message_default, { id: "new.project" })), t10.callbacks.onOpenProject && ee4.createElement(xe3, { onClick: p10, kbd: "#O", id: "TD-MenuItem-File-Open" }, ee4.createElement(message_default, { id: "open" }), "..."), t10.callbacks.onSaveProject && ee4.createElement(xe3, { onClick: m10, kbd: "#S", id: "TD-MenuItem-File-Save" }, ee4.createElement(message_default, { id: "save" })), t10.callbacks.onSaveProjectAs && ee4.createElement(xe3, { onClick: g10, kbd: "#\u21E7S", id: "TD-MenuItem-File-Save_As" }, ee4.createElement(message_default, { id: "save.as" }), "..."), ee4.createElement(ln2, { label: `${n10.formatMessage({ id: "export.as" })}...`, size: "small", id: "TD-MenuItem-Export" }, ee4.createElement(xe3, { onClick: U10, id: "TD-MenuItem-Export-SVG" }, "SVG"), ee4.createElement(xe3, { onClick: b10, id: "TD-MenuItem-Export-PNG" }, "PNG"), ee4.createElement(xe3, { onClick: y10, id: "TD-MenuItem-Export-JPG" }, "JPG"), ee4.createElement(xe3, { onClick: R10, id: "TD-MenuItem-Export-WEBP" }, "WEBP"), ee4.createElement(xe3, { onClick: k10, id: "TD-MenuItem-Export-JSON" }, "JSON")), !d10 && ee4.createElement(ee4.Fragment, null, ee4.createElement(Pe2, null), ee4.createElement(xe3, { onClick: Ce2, kbd: "#U", id: "TD-MenuItem-File-Upload_Media" }, ee4.createElement(message_default, { id: "upload.media" })))), ee4.createElement(ln2, { label: `${n10.formatMessage({ id: "menu.edit" })}...`, id: "TD-MenuItem-Edit" }, ee4.createElement(xe3, { onSelect: He2, onClick: t10.undo, disabled: e10, kbd: "#Z", id: "TD-MenuItem-Edit-Undo" }, ee4.createElement(message_default, { id: "undo" })), ee4.createElement(xe3, { onSelect: He2, onClick: t10.redo, disabled: e10, kbd: "#\u21E7Z", id: "TD-MenuItem-Edit-Redo" }, ee4.createElement(message_default, { id: "redo" })), ee4.createElement(Pe2, null), ee4.createElement(xe3, { onSelect: He2, disabled: !$e2 || e10, onClick: I10, kbd: "#X", id: "TD-MenuItem-Edit-Cut" }, ee4.createElement(message_default, { id: "cut" })), ee4.createElement(xe3, { onSelect: He2, disabled: !$e2, onClick: q10, kbd: "#C", id: "TD-MenuItem-Edit-Copy" }, ee4.createElement(message_default, { id: "copy" })), ee4.createElement(xe3, { onSelect: He2, onClick: de4, kbd: "#V", id: "TD-MenuItem-Edit-Paste" }, ee4.createElement(message_default, { id: "paste" })), ee4.createElement(Pe2, null), ee4.createElement(ln2, { label: `${n10.formatMessage({ id: "copy.as" })}...`, size: "small", id: "TD-MenuItem-Copy-As" }, ee4.createElement(xe3, { onClick: T10, id: "TD-MenuItem-Copy-as-SVG" }, "SVG"), ee4.createElement(xe3, { onClick: w10, id: "TD-MenuItem-Copy-As-PNG" }, "PNG"), ee4.createElement(xe3, { onClick: L10, id: "TD-MenuItem-Copy_as_JSON" }, "JSON")), ee4.createElement(Pe2, null), ee4.createElement(xe3, { onSelect: He2, onClick: le3, kbd: "#A", id: "TD-MenuItem-Select_All" }, ee4.createElement(message_default, { id: "select.all" })), ee4.createElement(xe3, { onSelect: He2, disabled: !$e2, onClick: Ae2, id: "TD-MenuItem-Select_None" }, ee4.createElement(message_default, { id: "select.none" })), ee4.createElement(Pe2, null), ee4.createElement(xe3, { onSelect: f10, disabled: !$e2, kbd: "\u232B", id: "TD-MenuItem-Delete" }, ee4.createElement(message_default, { id: "delete" }))), ee4.createElement(ln2, { label: n10.formatMessage({ id: "menu.view" }), id: "TD-MenuItem-Edit" }, ee4.createElement(xe3, { onSelect: He2, onClick: t10.zoomIn, kbd: "#+", id: "TD-MenuItem-View-ZoomIn" }, ee4.createElement(message_default, { id: "zoom.in" })), ee4.createElement(xe3, { onSelect: He2, onClick: t10.zoomOut, kbd: "#-", id: "TD-MenuItem-View-ZoomOut" }, ee4.createElement(message_default, { id: "zoom.out" })), ee4.createElement(xe3, { onSelect: He2, onClick: De2, kbd: "\u21E7+0", id: "TD-MenuItem-View-ZoomTo100" }, ee4.createElement(message_default, { id: "zoom.to" }), " 100%"), ee4.createElement(xe3, { onSelect: He2, onClick: t10.zoomToFit, kbd: "\u21E7+1", id: "TD-MenuItem-View-ZoomToFit" }, ee4.createElement(message_default, { id: "zoom.to.fit" })), ee4.createElement(xe3, { onSelect: He2, onClick: t10.zoomToSelection, kbd: "\u21E7+2", id: "TD-MenuItem-View-ZoomToSelection" }, ee4.createElement(message_default, { id: "zoom.to.selection" }))), ee4.createElement(Pe2, null), ee4.createElement(ll, null))), ee4.createElement(Oa, { isOpen: o10, onClose: () => s10(false) }));
});
function pl() {
  return Vs.createElement("svg", { width: "15", height: "15", viewBox: "0 0 15 15", xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }, Vs.createElement("path", { d: "M1.36482 4.71089C1.36482 3.21371 2.57853 2 4.07572 2C5.5729 2 6.78661 3.21371 6.78661 4.71089C6.78661 5.76842 6.18106 6.68452 5.29779 7.13136C5.80465 7.24611 6.26407 7.44186 6.66028 7.73182C7.18674 8.11711 7.57215 8.64722 7.81073 9.30983C7.81452 9.30606 7.81832 9.3023 7.82212 9.29855C8.30448 8.82317 8.91325 8.52463 9.60905 8.37275C8.68812 7.922 8.05394 6.97569 8.05394 5.88126C8.05394 4.35017 9.29513 3.10898 10.8262 3.10898C12.3573 3.10898 13.5985 4.35017 13.5985 5.88126C13.5985 6.97561 12.9644 7.92186 12.0436 8.37265C12.7396 8.52449 13.3486 8.82306 13.831 9.29854C14.5795 10.0361 14.9481 11.1249 14.9481 12.5176C14.9481 12.7799 14.7354 12.9926 14.473 12.9926C14.2107 12.9926 13.9981 12.7799 13.9981 12.5175C13.9981 11.2848 13.6738 10.4774 13.1642 9.97518C12.6532 9.4716 11.8802 9.20024 10.8266 9.20024C9.77294 9.20024 8.99993 9.4716 8.48896 9.97518C7.97939 10.4774 7.65513 11.2848 7.65513 12.5176C7.65513 12.7799 7.44247 12.9926 7.18013 12.9926C6.9178 12.9926 6.70513 12.7799 6.70513 12.5176C6.70513 11.6734 6.84053 10.941 7.11384 10.3307C7.0922 10.2895 7.0763 10.2444 7.06737 10.1962C6.91739 9.38749 6.57392 8.84586 6.09923 8.49845C5.61626 8.14499 4.94481 7.95427 4.07574 7.95427C3.05232 7.95427 2.30368 8.21784 1.80952 8.70485C1.31675 9.19047 1.00176 9.97257 1.00176 11.1702C1.00176 11.4326 0.789093 11.6452 0.526758 11.6452C0.264423 11.6452 0.0517578 11.4326 0.0517578 11.1702C0.0517578 9.81263 0.411052 8.74925 1.14268 8.02821C1.60624 7.57137 2.18892 7.28191 2.85378 7.13142C1.97043 6.68461 1.36482 5.76848 1.36482 4.71089ZM4.07572 2.95C3.1032 2.95 2.31482 3.73838 2.31482 4.71089C2.31482 5.68341 3.1032 6.47178 4.07572 6.47178C5.04823 6.47178 5.83661 5.68341 5.83661 4.71089C5.83661 3.73838 5.04823 2.95 4.07572 2.95ZM10.8262 4.05898C9.8198 4.05898 9.00394 4.87484 9.00394 5.88126C9.00394 6.88768 9.8198 7.70355 10.8262 7.70355C11.8326 7.70355 12.6485 6.88768 12.6485 5.88126C12.6485 4.87484 11.8326 4.05898 10.8262 4.05898Z" }));
}
var Vt2 = "-0.03em";
var yo = [0.5, 0.5];
var tTe = Math.PI * 2;
var zr = ".tldr";
var oo = { linear: (r10) => r10, easeInQuad: (r10) => r10 * r10, easeOutQuad: (r10) => r10 * (2 - r10), easeInOutQuad: (r10) => r10 < 0.5 ? 2 * r10 * r10 : -1 + (4 - 2 * r10) * r10, easeInCubic: (r10) => r10 * r10 * r10, easeOutCubic: (r10) => --r10 * r10 * r10 + 1, easeInOutCubic: (r10) => r10 < 0.5 ? 4 * r10 * r10 * r10 : (r10 - 1) * (2 * r10 - 2) * (2 * r10 - 2) + 1, easeInQuart: (r10) => r10 * r10 * r10 * r10, easeOutQuart: (r10) => 1 - --r10 * r10 * r10 * r10, easeInOutQuart: (r10) => r10 < 0.5 ? 8 * r10 * r10 * r10 * r10 : 1 - 8 * --r10 * r10 * r10 * r10, easeInQuint: (r10) => r10 * r10 * r10 * r10 * r10, easeOutQuint: (r10) => 1 + --r10 * r10 * r10 * r10 * r10, easeInOutQuint: (r10) => r10 < 0.5 ? 16 * r10 * r10 * r10 * r10 * r10 : 1 + 16 * --r10 * r10 * r10 * r10 * r10, easeInSine: (r10) => 1 - Math.cos(r10 * Math.PI / 2), easeOutSine: (r10) => Math.sin(r10 * Math.PI / 2), easeInOutSine: (r10) => -(Math.cos(Math.PI * r10) - 1) / 2, easeInExpo: (r10) => r10 <= 0 ? 0 : Math.pow(2, 10 * r10 - 10), easeOutExpo: (r10) => r10 >= 1 ? 1 : 1 - Math.pow(2, -10 * r10), easeInOutExpo: (r10) => r10 <= 0 ? 0 : r10 >= 1 ? 1 : r10 < 0.5 ? Math.pow(2, 20 * r10 - 10) / 2 : (2 - Math.pow(2, -20 * r10 + 10)) / 2 };
var $s = ["#EC5E41", "#F2555A", "#F04F88", "#E34BA9", "#BD54C6", "#9D5BD2", "#7B66DC", "#02B1CC", "#11B3A3", "#39B178", "#55B467", "#FF802B"];
var $le = typeof Window == "undefined" ? false : /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
var ul = typeof Window == "undefined" ? false : /linux/i.test(navigator.userAgent);
var Or = [".png", ".svg", ".jpg", ".jpeg", ".gif"];
var Fr = $le ? [] : [".mp4", ".webm"];
function St2(r10) {
  if (r10 === null)
    return r10;
  if (r10 instanceof Date)
    return new Date(r10.getTime());
  if (typeof r10 == "object")
    if (typeof r10[Symbol.iterator] == "function") {
      let e10 = [];
      if (r10.length > 0)
        for (let t10 of r10)
          e10.push(St2(t10));
      return e10;
    } else {
      let e10 = Object.keys(r10), t10 = {};
      if (e10.length > 0)
        for (let n10 of e10)
          t10[n10] = St2(r10[n10]);
      return t10;
    }
  return r10;
}
function $t2(r10, e10) {
  let t10 = C3.getFromCache(e10, r10, () => {
    let [n10, o10] = r10.size;
    return { minX: 0, maxX: n10, minY: 0, maxY: o10, width: n10, height: o10 };
  });
  return C3.translateBounds(t10, r10.point);
}
var Nle = { ["start"]: "left", ["middle"]: "center", ["end"]: "right", ["justify"]: "justify" };
function ml(r10 = "start") {
  return Nle[r10];
}
var jn;
function Wle() {
  var e10;
  (e10 = document.getElementById("__textLabelMeasure")) == null || e10.remove();
  let r10 = document.createElement("pre");
  return r10.id = "__textLabelMeasure", Object.assign(r10.style, { whiteSpace: "pre", width: "auto", border: "1px solid transparent", padding: "4px", margin: "0px", letterSpacing: Vt2, opacity: "0", position: "absolute", top: "-500px", left: "0px", zIndex: "9999", pointerEvents: "none", userSelect: "none", "-webkit-user-select": "none", alignmentBaseline: "mathematical", dominantBaseline: "mathematical" }), r10.tabIndex = -1, document.body.appendChild(r10), r10;
}
typeof window != "undefined" && (jn = Wle());
var Ws = "";
var gl = "";
var Ns = [0, 0];
function fl() {
  Ws = "";
}
function Gn(r10, e10) {
  if (!r10)
    return [16, 32];
  if (!jn)
    return [10, 10];
  if (jn.parent || document.body.appendChild(jn), r10 === Ws && e10 === gl)
    return Ns;
  Ws = r10, gl = e10, jn.textContent = r10, jn.style.font = e10;
  let t10 = jn.offsetWidth || 1, n10 = jn.offsetHeight || 1;
  return Ns = [t10, n10], Ns;
}
var Ule = new RegExp(`${[32, 160, 4961, 65792, 65793, 4153, 4241].map((r10) => String.fromCodePoint(r10)).join("|")}`);
function Vn(r10, e10, t10, n10, o10, s10 = false) {
  let a10 = "normal", i10 = Vt2, c10 = Kle({ text: r10, wrap: s10, width: o10, fontSize: e10, fontWeight: a10, fontFamily: t10, fontStyle: "normal", textAlign: "left", letterSpacing: Vt2, lineHeight: 1 }), u10 = document.createElementNS("http://www.w3.org/2000/svg", "text");
  u10.setAttribute("font-size", e10 + "px"), u10.setAttribute("font-family", t10), u10.setAttribute("font-weight", a10), u10.setAttribute("line-height", 1 * e10 + "px"), u10.setAttribute("letter-spacing", i10), u10.setAttribute("text-align", n10 != null ? n10 : "left"), u10.setAttribute("dominant-baseline", "mathematical"), u10.setAttribute("alignment-baseline", "mathematical");
  let p10 = c10.map((m10, h10) => {
    let g10 = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
    return g10.textContent = m10 + `
`, g10.setAttribute("y", 1 * e10 * (h10 + 0.5) + "px"), u10.appendChild(g10), g10;
  });
  switch (n10) {
    case "middle": {
      u10.setAttribute("text-align", "center"), u10.setAttribute("text-anchor", "middle"), p10.forEach((m10) => m10.setAttribute("x", o10 / 2 + ""));
      break;
    }
    case "end": {
      u10.setAttribute("text-align", "right"), u10.setAttribute("text-anchor", "end"), p10.forEach((m10) => m10.setAttribute("x", -4 + o10 + ""));
      break;
    }
    default:
      u10.setAttribute("text-align", "left"), u10.setAttribute("text-anchor", "start"), p10.forEach((m10) => m10.setAttribute("x", 4 + ""));
  }
  return u10;
}
function Kle(r10) {
  let e10 = document.createElement("div");
  e10.style.setProperty("position", "absolute"), e10.style.setProperty("top", "-9999px"), e10.style.setProperty("left", "-9999px"), e10.style.setProperty("width", r10.width + "px"), e10.style.setProperty("height", "min-content"), e10.style.setProperty("font-size", r10.fontSize + "px"), e10.style.setProperty("font-family", r10.fontFamily), e10.style.setProperty("font-weight", r10.fontWeight), e10.style.setProperty("line-height", r10.lineHeight * r10.fontSize + "px"), e10.style.setProperty("letter-spacing", r10.letterSpacing), e10.style.setProperty("text-align", r10.textAlign), document.body.appendChild(e10);
  let t10 = r10.text.split(Ule).flatMap((a10) => a10.replace(`
`, ` 
`)).join(" ").split(" ");
  e10.innerText = t10[0];
  let n10 = e10.offsetHeight, o10 = [t10[0]], s10 = [o10];
  for (let a10 = 1; a10 < t10.length; a10++) {
    let d10 = t10[a10];
    e10.innerText += " " + d10;
    let i10 = e10.offsetHeight;
    i10 > n10 && (n10 = i10, o10 = [], s10.push(o10)), o10.push(d10);
  }
  return e10.remove(), s10.map((a10) => a10.join(" "));
}
function Sl({ id: r10, bounds: e10, labelSize: t10, offset: n10, scale: o10 = 1 }) {
  return $o.createElement("defs", null, $o.createElement("mask", { id: r10 + "_clip" }, $o.createElement("rect", { x: -100, y: -100, width: e10.width + 200, height: e10.height + 200, fill: "white" }), $o.createElement("rect", { x: e10.width / 2 - t10[0] / 2 * o10 + ((n10 == null ? void 0 : n10[0]) || 0), y: e10.height / 2 - t10[1] / 2 * o10 + ((n10 == null ? void 0 : n10[1]) || 0), width: t10[0] * o10, height: t10[1] * o10, rx: 4 * o10, ry: 4 * o10, fill: "black", opacity: Math.max(o10, 0.8) })));
}
var jr = Math.PI * 2;
var zt2 = class {
  static inwardEdgeNormal(e10) {
    let t10 = p.sub(e10[1], e10[0]), n10 = p.len2(t10);
    return [-t10[0] / n10, t10[1] / n10];
  }
  static outwardEdgeNormal(e10) {
    return p.neg(zt2.inwardEdgeNormal(e10));
  }
  static isReflexVertex(e10, t10) {
    let n10 = e10.length, o10 = e10[(t10 + n10 - 1) % n10], s10 = e10[t10], a10 = e10[(t10 + 1) % n10];
    return zt2.leftSide(o10, a10, s10) < 0;
  }
  static getEdges(e10) {
    return e10.map((t10, n10) => [t10, e10[(n10 + 1) % e10.length]]);
  }
  static edgesIntersection([e10, t10], [n10, o10]) {
    let s10 = (o10[1] - n10[1]) * (t10[0] - e10[0]) - (o10[0] - n10[0]) * (t10[1] - e10[1]);
    if (s10 == 0)
      return null;
    let a10 = ((o10[0] - n10[0]) * (e10[1] - n10[1]) - (o10[1] - n10[1]) * (e10[0] - n10[0])) / s10, d10 = ((t10[0] - e10[0]) * (e10[1] - n10[1]) - (t10[1] - e10[1]) * (e10[0] - n10[0])) / s10;
    return a10 < 0 || d10 < 0 || a10 > 1 || d10 > 1 ? null : [e10[0] + a10 * (t10[0] - e10[0]), e10[1] + a10 * (t10[1] - e10[1])];
  }
  static appendArc(e10, t10, n10, o10, s10, a10 = false) {
    let d10 = [...e10], i10 = Math.atan2(o10[1] - t10[1], o10[0] - t10[0]), c10 = Math.atan2(s10[1] - t10[1], s10[0] - t10[0]);
    i10 < 0 && (i10 += jr), c10 < 0 && (c10 += jr);
    let u10 = 5, p10 = i10 > c10 ? i10 - c10 : i10 + jr - c10, m10 = (a10 ? -p10 : jr - p10) / u10;
    d10.push(o10);
    for (let h10 = 1; h10 < u10; ++h10) {
      let g10 = i10 + m10 * h10;
      d10.push([t10[0] + Math.cos(g10) * n10, t10[1] + Math.sin(g10) * n10]);
    }
    return d10.push(s10), d10;
  }
  static createOffsetEdge(e10, t10) {
    return e10.map((n10) => p.add(n10, t10));
  }
  static getOffsetPolygon(e10, t10 = 0) {
    let n10 = zt2.getEdges(e10), o10 = n10.map((a10) => zt2.createOffsetEdge(a10, p.mul(zt2.outwardEdgeNormal(a10), t10))), s10 = [];
    for (let a10 = 0; a10 < o10.length; a10++) {
      let d10 = o10[a10], i10 = o10[(a10 + o10.length - 1) % o10.length], c10 = zt2.edgesIntersection(i10, d10);
      c10 ? s10.push(c10) : zt2.appendArc(s10, n10[a10][0], t10, i10[1], d10[0], false);
    }
    return s10;
  }
  static createPaddingPolygon(e10, t10 = 0) {
    let n10 = e10.map((s10) => zt2.createOffsetEdge(s10, zt2.inwardEdgeNormal(s10))), o10 = [];
    for (let s10 = 0; s10 < n10.length; s10++) {
      let a10 = n10[s10], d10 = n10[(s10 + n10.length - 1) % n10.length], i10 = zt2.edgesIntersection(d10, a10);
      i10 ? o10.push(i10) : zt2.appendArc(o10, e10[s10][0], t10, d10[1], a10[0], true);
    }
    return o10;
  }
};
var bl = zt2;
l7(bl, "leftSide", p.isLeft);
function Tl(r10, e10) {
  if (r10.length < 3)
    throw Error("Polygon must have at least 3 points");
  let t10 = r10.length;
  return r10.map((n10, o10) => [n10, r10[(o10 + 1) % t10]]).map(([n10, o10]) => {
    let s10 = p.mul(p.per(p.uni(p.sub(o10, n10))), e10);
    return [p.add(n10, s10), p.add(o10, s10)];
  }).map((n10, o10, s10) => {
    let a10 = ie2(n10, s10[(o10 + 1) % s10.length]);
    if (a10 === void 0)
      throw Error("Expected an intersection");
    return a10;
  });
}
var yl = "#fafafa";
var Us = "#343d45";
var xo = { ["white"]: "#f0f1f3", ["lightGray"]: "#c6cbd1", ["gray"]: "#788492", ["black"]: "#1d1d1d", ["green"]: "#36b24d", ["cyan"]: "#0e98ad", ["blue"]: "#1c7ed6", ["indigo"]: "#4263eb", ["violet"]: "#7746f1", ["red"]: "#ff2133", ["orange"]: "#ff9433", ["yellow"]: "#ffc936" };
var Yle = { light: x5(S4({}, Object.fromEntries(Object.entries(xo).map(([r10, e10]) => [r10, C3.lerpColor(e10, yl, 0.45)]))), { ["white"]: "#ffffff", ["black"]: "#3d3d3d" }), dark: x5(S4({}, Object.fromEntries(Object.entries(xo).map(([r10, e10]) => [r10, C3.lerpColor(C3.lerpColor(e10, "#999999", 0.3), Us, 0.4)]))), { ["white"]: "#1d1d1d", ["black"]: "#bbbbbb" }) };
var ko = { light: x5(S4({}, xo), { ["white"]: "#1d1d1d" }), dark: x5(S4({}, Object.fromEntries(Object.entries(xo).map(([r10, e10]) => [r10, C3.lerpColor(e10, Us, 0.1)]))), { ["white"]: "#cecece", ["black"]: "#cecece" }) };
var Gr = { light: x5(S4({}, Object.fromEntries(Object.entries(xo).map(([r10, e10]) => [r10, C3.lerpColor(e10, yl, 0.82)]))), { ["white"]: "#fefefe" }), dark: x5(S4({}, Object.fromEntries(Object.entries(xo).map(([r10, e10]) => [r10, C3.lerpColor(e10, Us, 0.82)]))), { ["white"]: "rgb(30,33,37)", ["black"]: "#1e1e1f" }) };
var Zle = { ["small"]: 2, ["medium"]: 3.5, ["large"]: 5 };
var Xle = { ["small"]: 28, ["medium"]: 48, ["large"]: 96, auto: "auto" };
var qle = { ["script"]: '"Caveat Brush"', ["sans"]: '"Source Sans Pro"', ["serif"]: '"Crimson Pro"', ["mono"]: '"Source Code Pro"' };
var Jle = { ["script"]: 1, ["sans"]: 1, ["serif"]: 1, ["mono"]: 1 };
var Qle = { ["small"]: 24, ["medium"]: 36, ["large"]: 48, auto: "auto" };
function ede(r10) {
  return Zle[r10];
}
function ro(r10, e10 = "script") {
  return Xle[r10] * Jle[e10];
}
function dn2(r10 = "script") {
  return qle[r10];
}
function Ks(r10) {
  return Qle[r10];
}
function kt2(r10) {
  let e10 = ro(r10.size, r10.font), t10 = dn2(r10.font), { scale: n10 = 1 } = r10;
  return `${e10 * n10}px/1 ${t10}`;
}
function wl(r10) {
  let e10 = Ks(r10.size), t10 = dn2(r10.font), { scale: n10 = 1 } = r10;
  return `${e10 * n10}px/1 ${t10}`;
}
function _s(r10, e10 = false) {
  let { color: t10 } = r10, n10 = e10 ? "dark" : "light", o10 = t10 === "white" || t10 === "black" ? "yellow" : t10;
  return { fill: Yle[n10][o10], stroke: ko[n10][o10], color: e10 ? "#1d1d1d" : "#0d0d0d" };
}
function be3(r10, e10) {
  let { color: t10, size: n10, isFilled: o10 } = r10, s10 = ede(n10), a10 = e10 ? "dark" : "light";
  return { stroke: ko[a10][t10], fill: o10 ? Gr[a10][t10] : "none", strokeWidth: s10 };
}
var ct2 = { color: "black", size: "small", isFilled: false, dash: "draw", scale: 1 };
var vo = x5(S4({}, ct2), { font: "script", textAlign: "middle" });
var xl = "  ";
var st2 = class {
  static insertTextFirefox(e10, t10) {
    e10.setRangeText(t10, e10.selectionStart || 0, e10.selectionEnd || 0, "end"), e10.dispatchEvent(new InputEvent("input", { data: t10, inputType: "insertText", isComposing: false }));
  }
  static insert(e10, t10) {
    let n10 = e10.ownerDocument, o10 = n10.activeElement;
    o10 !== e10 && e10.focus(), n10.execCommand("insertText", false, t10) || st2.insertTextFirefox(e10, t10), o10 === n10.body ? e10.blur() : o10 instanceof HTMLElement && o10 !== e10 && o10.focus();
  }
  static set(e10, t10) {
    e10.select(), st2.insert(e10, t10);
  }
  static getSelection(e10) {
    let { selectionStart: t10, selectionEnd: n10 } = e10;
    return e10.value.slice(t10 || void 0, n10 || void 0);
  }
  static wrapSelection(e10, t10, n10) {
    let { selectionStart: o10, selectionEnd: s10 } = e10, a10 = st2.getSelection(e10);
    st2.insert(e10, t10 + a10 + (n10 != null ? n10 : t10)), e10.selectionStart = (o10 || 0) + t10.length, e10.selectionEnd = (s10 || 0) + t10.length;
  }
  static replace(e10, t10, n10) {
    let o10 = 0;
    e10.value.replace(t10, (...s10) => {
      let a10 = o10 + s10[s10.length - 2], d10 = s10[0].length;
      e10.selectionStart = a10, e10.selectionEnd = a10 + d10;
      let i10 = typeof n10 == "string" ? n10 : n10(...s10);
      return st2.insert(e10, i10), e10.selectionStart = a10, o10 += i10.length - d10, i10;
    });
  }
  static findLineEnd(e10, t10) {
    let n10 = e10.lastIndexOf(`
`, t10 - 1) + 1;
    return e10.charAt(n10) !== "	" ? t10 : n10 + 1;
  }
  static indent(e10) {
    var d10;
    let { selectionStart: t10, selectionEnd: n10, value: o10 } = e10, s10 = o10.slice(t10, n10), a10 = (d10 = /\n/g.exec(s10)) == null ? void 0 : d10.length;
    if (a10 && a10 > 0) {
      let i10 = o10.lastIndexOf(`
`, t10 - 1) + 1, c10 = e10.value.slice(i10, n10 - 1), u10 = c10.replace(/^|\n/g, `$&${xl}`), p10 = u10.length - c10.length;
      e10.setSelectionRange(i10, n10 - 1), st2.insert(e10, u10), e10.setSelectionRange(t10 + 1, n10 + p10);
    } else
      st2.insert(e10, xl);
  }
  static unindent(e10) {
    let { selectionStart: t10, selectionEnd: n10, value: o10 } = e10, s10 = o10.lastIndexOf(`
`, t10 - 1) + 1, a10 = st2.findLineEnd(o10, n10), d10 = e10.value.slice(s10, a10), i10 = d10.replace(/(^|\n)(\t| {1,2})/g, "$1"), c10 = d10.length - i10.length;
    e10.setSelectionRange(s10, a10), st2.insert(e10, i10);
    let u10 = /\t| {1,2}/.exec(o10.slice(s10, t10)), p10 = u10 ? u10[0].length : 0, m10 = t10 - p10;
    e10.setSelectionRange(t10 - p10, Math.max(m10, n10 - c10));
  }
};
var $n2 = et2.memo(function({ font: e10, text: t10, color: n10, offsetX: o10 = 0, offsetY: s10 = 0, scale: a10 = 1, isEditing: d10 = false, onBlur: i10, onChange: c10 }) {
  let u10 = et2.useRef(null), p10 = et2.useRef(false), m10 = et2.useCallback((y10) => {
    c10(v10.normalizeText(y10.currentTarget.value));
  }, [c10]), h10 = et2.useCallback((y10) => {
    if (y10.key === "Escape") {
      y10.preventDefault(), y10.stopPropagation(), i10 == null || i10();
      return;
    }
    if (y10.key === "Tab" && t10.length === 0) {
      y10.preventDefault();
      return;
    }
    if (!(y10.key === "Meta" || y10.metaKey))
      y10.stopPropagation();
    else if (y10.key === "z" && y10.metaKey) {
      y10.shiftKey ? document.execCommand("redo", false) : document.execCommand("undo", false), y10.stopPropagation(), y10.preventDefault();
      return;
    }
    (y10.metaKey || y10.ctrlKey) && y10.key === "=" && y10.preventDefault(), y10.key === "Tab" && (y10.preventDefault(), y10.shiftKey ? st2.unindent(y10.currentTarget) : st2.indent(y10.currentTarget), c10 == null || c10(v10.normalizeText(y10.currentTarget.value)));
  }, [c10]), g10 = et2.useCallback((y10) => {
    y10.currentTarget.setSelectionRange(0, 0), i10 == null || i10();
  }, [i10]), f10 = et2.useCallback((y10) => {
    !d10 || !p10.current || document.activeElement === y10.currentTarget && y10.currentTarget.select();
  }, [d10]), T10 = et2.useCallback((y10) => {
    d10 && y10.stopPropagation();
  }, [d10]), w10 = et2.useRef(d10);
  et2.useEffect(() => {
    d10 ? (w10.current = true, requestAnimationFrame(() => {
      p10.current = true;
      let y10 = u10.current;
      y10 && (y10.focus(), y10.select());
    })) : w10.current && (i10 == null || i10(), w10.current = false);
  }, [d10, i10]);
  let b10 = et2.useRef(null);
  return et2.useLayoutEffect(() => {
    let y10 = b10.current;
    if (!y10)
      return;
    let R10 = Gn(t10, e10);
    y10.style.transform = `scale(${a10}, ${a10}) translate(${o10}px, ${s10}px)`, y10.style.width = R10[0] + 1 + "px", y10.style.height = R10[1] + 1 + "px";
  }, [t10, e10, s10, o10, a10]), et2.createElement(tde, null, et2.createElement(nde, { ref: b10, hasText: !!t10, isEditing: d10, style: { font: e10, color: n10 } }, d10 ? et2.createElement(ode, { ref: u10, style: { font: e10, color: n10 }, name: "text", tabIndex: -1, autoComplete: "false", autoCapitalize: "false", autoCorrect: "false", autoSave: "false", autoFocus: true, placeholder: "", spellCheck: "true", wrap: "off", dir: "auto", datatype: "wysiwyg", defaultValue: t10, color: n10, onFocus: f10, onChange: m10, onKeyDown: h10, onBlur: g10, onPointerDown: T10, onContextMenu: ft2, onCopy: ft2, onPaste: ft2, onCut: ft2 }) : t10, "\u200B"));
});
var tde = H5("div", { position: "absolute", top: 0, left: 0, width: "100%", height: "100%", display: "flex", alignItems: "center", justifyContent: "center", pointerEvents: "none", userSelect: "none", variants: { isGhost: { false: { opacity: 1 }, true: { transition: "opacity .2s", opacity: 0.3 } } } });
var kl = { whiteSpace: "pre-wrap", overflowWrap: "break-word", letterSpacing: Vt2 };
var nde = H5("div", S4({ position: "absolute", padding: "4px", zIndex: 1, minHeight: 1, minWidth: 1, lineHeight: 1, outline: 0, fontWeight: "500", textAlign: "center", backfaceVisibility: "hidden", userSelect: "none", WebkitUserSelect: "none", WebkitTouchCallout: "none", variants: { hasText: { false: { pointerEvents: "none" }, true: { pointerEvents: "all" } }, isEditing: { false: { userSelect: "none" }, true: { background: "$boundsBg", userSelect: "text", WebkitUserSelect: "text" } } } }, kl));
var ode = H5("textarea", x5(S4({ position: "absolute", top: 0, left: 0, zIndex: 1, width: "100%", height: "100%", border: "none", padding: "4px", resize: "none", textAlign: "inherit", minHeight: "inherit", minWidth: "inherit", lineHeight: "inherit", outline: 0, fontWeight: "inherit", overflow: "hidden", backfaceVisibility: "hidden", display: "inline-block", pointerEvents: "all", background: "$boundsBg", userSelect: "text", WebkitUserSelect: "text", fontSmooth: "always", WebkitFontSmoothing: "subpixel-antialiased", MozOsxFontSmoothing: "auto" }, kl), { "&:focus": { outline: "none", border: "none" } }));
function Nn2(r10, e10, { initialShape: t10, transformOrigin: n10, scaleX: o10, scaleY: s10 }) {
  if (r10.rotation || t10.isAspectRatioLocked) {
    let a10 = p.toFixed(p.mul(t10.size, Math.min(Math.abs(o10), Math.abs(s10)))), d10 = p.toFixed([e10.minX + (e10.width - r10.size[0]) * (o10 < 0 ? 1 - n10[0] : n10[0]), e10.minY + (e10.height - r10.size[1]) * (s10 < 0 ? 1 - n10[1] : n10[1])]), i10 = o10 < 0 && s10 >= 0 || s10 < 0 && o10 >= 0 ? t10.rotation ? -t10.rotation : 0 : t10.rotation;
    return { size: a10, point: d10, rotation: i10 };
  } else
    return { point: p.toFixed([e10.minX, e10.minY]), size: p.toFixed([e10.width, e10.height]) };
}
function Wn2(r10, e10) {
  return { size: p.toFixed([e10.width, e10.height]), point: p.toFixed([e10.minX, e10.minY]) };
}
var ye3 = class extends _e2 {
  constructor() {
    super(...arguments);
    l7(this, "canBind", false);
    l7(this, "canEdit", false);
    l7(this, "canClone", false);
    l7(this, "isAspectRatioLocked", false);
    l7(this, "hideResizeHandles", false);
    l7(this, "bindingDistance", 16);
    l7(this, "hitTestPoint", (e10, t10) => C3.pointInBounds(t10, this.getRotatedBounds(e10)));
    l7(this, "hitTestLineSegment", (e10, t10, n10) => {
      let o10 = C3.getBoundsFromPoints([t10, n10]), s10 = this.getBounds(e10);
      return C3.boundsContain(s10, o10) || e10.rotation ? S(t10, n10, C3.getRotatedCorners(this.getBounds(e10))).didIntersect : ce2(t10, n10, this.getBounds(e10)).length > 0;
    });
    l7(this, "create", (e10) => (this.refMap.set(e10.id, Il.createRef()), this.getShape(e10)));
    l7(this, "getCenter", (e10) => C3.getBoundsCenter(this.getBounds(e10)));
    l7(this, "getExpandedBounds", (e10) => C3.expandBounds(this.getBounds(e10), this.bindingDistance));
    l7(this, "getBindingPoint", (e10, t10, n10, o10, s10, a10) => {
      let d10 = this.getBounds(e10), i10 = this.getExpandedBounds(e10);
      if (!C3.pointInBounds(n10, i10))
        return;
      let c10 = se2(o10, s10, i10).filter((T10) => T10.didIntersect).map((T10) => T10.points[0]);
      if (!c10.length)
        return;
      let u10 = this.getCenter(e10), p10 = c10.sort((T10, w10) => e.dist(w10, o10) - e.dist(T10, o10))[0], m10 = e.med(n10, p10), h10, g10;
      a10 ? (h10 = e.dist(n10, u10) < 16 / 2 ? u10 : n10, g10 = 0) : (e.distanceToLineSegment(n10, m10, u10) < 16 / 2 ? h10 = u10 : h10 = m10, C3.pointInBounds(n10, d10) ? g10 = this.bindingDistance : g10 = Math.max(this.bindingDistance, C3.getBoundsSides(d10).map((T10) => e.distanceToLineSegment(T10[1][0], T10[1][1], n10)).sort((T10, w10) => T10 - w10)[0]));
      let f10 = e.divV(e.sub(h10, [i10.minX, i10.minY]), [i10.width, i10.height]);
      return { point: e.clampV(f10, 0, 1), distance: g10 };
    });
    l7(this, "mutate", (e10, t10) => t10);
    l7(this, "transform", (e10, t10, n10) => x5(S4({}, e10), { point: [t10.minX, t10.minY] }));
    l7(this, "transformSingle", (e10, t10, n10) => this.transform(e10, t10, n10));
    l7(this, "updateChildren");
    l7(this, "onChildrenChange");
    l7(this, "onHandleChange");
    l7(this, "onRightPointHandle");
    l7(this, "onDoubleClickHandle");
    l7(this, "onDoubleClickBoundsHandle");
    l7(this, "onSessionComplete");
    l7(this, "getSvgElement", (e10, t10) => {
      var s10, a10, d10, i10, c10;
      let n10 = (s10 = document.getElementById(e10.id + "_svg")) == null ? void 0 : s10.cloneNode(true);
      if (!n10)
        return;
      if ((i10 = (d10 = (a10 = e10.label) == null ? void 0 : a10.trim()) == null ? void 0 : d10.length) != null ? i10 : 0 > 0) {
        let u10 = e10, p10 = document.createElementNS("http://www.w3.org/2000/svg", "g"), m10 = kt2(e10.style), h10 = Gn(e10.label, m10), g10 = ro(e10.style.size, e10.style.font) * ((c10 = e10.style.scale) != null ? c10 : 1), f10 = dn2(e10.style.font).slice(1, -1), T10 = Vn(u10.label, g10, f10, "middle", h10[0], false), w10 = this.getBounds(e10);
        return T10.setAttribute("transform", `translate(${w10.width / 2 - h10[0] / 2}, ${w10.height / 2 - h10[1] / 2})`), T10.setAttribute("fill", be3(e10.style, t10).stroke), T10.setAttribute("transform-origin", "center center"), p10.setAttribute("text-align", "center"), p10.setAttribute("text-anchor", "middle"), p10.appendChild(n10), p10.appendChild(T10), p10;
      }
      return n10;
    });
  }
};
function Ml(r10, e10, t10, n10) {
  return ["M", r10[0], r10[1], "A", t10[2], t10[2], 0, 0, n10 < 0 ? 0 : 1, e10[0], e10[1]].join(" ");
}
function Wo(r10, e10) {
  let { start: t10, end: n10 } = r10, o10 = p.dist(t10.point, n10.point), s10 = p.med(t10.point, n10.point), a10 = o10 / 2 * e10, d10 = p.uni(p.vec(t10.point, n10.point));
  return p.toFixed(Math.abs(a10) < 10 ? s10 : p.add(s10, p.mul(p.per(d10), a10)));
}
function El(r10, e10, t10, n10, o10, s10) {
  let a10 = C3.rng(r10), d10 = be3(e10).strokeWidth, i10 = o10 ? p.nudge(t10, n10, d10) : t10, c10 = s10 ? p.nudge(n10, t10, d10) : n10, u10 = _e([i10, c10], { size: d10, thinning: 0.618 + a10() * 0.2, easing: oo.easeOutQuad, simulatePressure: true, streamline: 0, last: true });
  return C3.getSvgPathFromStroke(u10);
}
function Bl(r10, e10, t10, n10, o10, s10, a10, d10, i10, c10) {
  let u10 = C3.rng(r10), p10 = be3(e10).strokeWidth, m10 = o10 ? p.rotWith(t10, a10, p10 / i10) : t10, h10 = s10 ? p.rotWith(n10, a10, -(p10 / i10)) : n10, g10 = p.angle(a10, m10), f10 = p.angle(a10, h10), T10 = [], w10 = 8 + Math.floor(Math.abs(i10) / 20 * 1 + u10() / 2);
  for (let y10 = 0; y10 < w10; y10++) {
    let R10 = c10(y10 / w10), U10 = C3.lerpAngles(g10, f10, R10);
    T10.push(p.toFixed(p.nudgeAtAngle(a10, U10, d10)));
  }
  let b10 = _e([m10, ...T10, h10], { size: 1 + p10, thinning: 0.618 + u10() * 0.2, easing: oo.easeOutQuad, simulatePressure: false, streamline: 0, last: true });
  return C3.getSvgPathFromStroke(b10);
}
function kn2(r10, e10, t10) {
  return C3.circleFromThreePoints(r10, t10, e10);
}
function Vr(r10, e10, t10, n10, o10) {
  let s10 = le(r10, e10 * 0.618, t10, n10).points;
  if (!s10)
    return v10.warn("Could not find an intersection for the arrow head."), { left: r10, right: r10 };
  let a10 = o10 ? s10[0] : s10[1], d10 = a10 ? p.nudge(p.rotWith(a10, r10, Math.PI / 6), r10, e10 * -0.382) : r10, i10 = a10 ? p.nudge(p.rotWith(a10, r10, -Math.PI / 6), r10, e10 * -0.382) : r10;
  return { left: d10, right: i10 };
}
function $r(r10, e10, t10) {
  let n10 = de2(r10, t10, r10, e10).points;
  if (!n10)
    return v10.warn("Could not find an intersection for the arrow head."), { left: r10, right: r10 };
  let o10 = n10[0], s10 = o10 ? p.rotWith(o10, r10, Math.PI / 6) : r10, a10 = o10 ? p.rotWith(o10, r10, -Math.PI / 6) : r10;
  return { left: s10, right: a10 };
}
function Cl(r10, e10, t10, n10, o10) {
  let { left: s10, right: a10 } = Vr(r10, e10, t10, n10, o10);
  return `M ${s10} L ${r10} ${a10}`;
}
function Dl(r10, e10, t10) {
  let { left: n10, right: o10 } = $r(r10, e10, t10);
  return `M ${n10} L ${r10} ${o10}`;
}
function Rl(r10, e10, t10, n10, o10, s10) {
  let { strokeWidth: a10 } = be3(r10, false), d10 = p.dist(e10, n10), i10 = Math.min(d10 / 3, a10 * 8), c10 = [];
  if (p.dist(t10, p.toFixed(p.med(e10, n10))) < 1)
    c10.push(`M ${e10} L ${n10}`), o10 && c10.push(Dl(e10, n10, i10)), s10 && c10.push(Dl(n10, e10, i10));
  else {
    let p10 = kn2(e10, t10, n10), m10 = [p10[0], p10[1]], h10 = p10[2], g10 = so(m10, h10, e10, n10);
    c10.push(`M ${e10} A ${h10} ${h10} 0 0 ${g10 > 0 ? "1" : "0"} ${n10}`), o10 && c10.push(Cl(e10, i10, m10, h10, g10 < 0)), s10 && c10.push(Cl(n10, i10, m10, h10, g10 >= 0));
  }
  return c10.join(" ");
}
function Uo(r10, e10, t10) {
  if (p.dist2(e10, p.med(r10, t10)) <= 4)
    return [r10, t10];
  let n10 = [], o10 = kn2(r10, e10, t10), s10 = [o10[0], o10[1]], a10 = o10[2], d10 = p.angle(s10, r10), i10 = p.angle(s10, t10);
  for (let c10 = 0; c10 < 20; c10++) {
    let u10 = c10 / 19, p10 = C3.lerpAngles(d10, i10, u10);
    n10.push(p.nudgeAtAngle(s10, p10, a10));
  }
  return n10;
}
function Al(r10, e10, t10) {
  if (t10 === r10 || t10 === e10)
    return true;
  let n10 = Math.PI * 2, o10 = (e10 - r10 + n10) % n10, s10 = (t10 - r10 + n10) % n10;
  return o10 <= Math.PI != s10 > o10;
}
function so(r10, e10, t10, n10) {
  let o10 = C3.getSweep(r10, t10, n10);
  return e10 * (2 * Math.PI) * (o10 / (2 * Math.PI));
}
function Io({ left: r10, middle: e10, right: t10, stroke: n10, strokeWidth: o10 }) {
  return Nr.createElement("g", null, Nr.createElement("path", { className: "tl-stroke-hitarea", d: `M ${r10} L ${e10} ${t10}` }), Nr.createElement("path", { d: `M ${r10} L ${e10} ${t10}`, fill: "none", stroke: n10, strokeWidth: o10, strokeLinecap: "round", strokeLinejoin: "round", pointerEvents: "none" }));
}
var Hl = cn2.memo(function({ id: e10, style: t10, start: n10, bend: o10, end: s10, arrowBend: a10, decorationStart: d10, decorationEnd: i10, isDraw: c10, isDarkMode: u10 }) {
  let p10 = p.dist(n10, s10);
  if (p10 < 2)
    return null;
  let m10 = be3(t10, u10), { strokeWidth: h10 } = m10, g10 = 1 + h10 * 1.618, f10 = kn2(n10, o10, s10), T10 = [f10[0], f10[1]], w10 = f10[2], b10 = so(T10, w10, n10, s10), y10 = C3.rng(e10), R10 = oo[y10() > 0 ? "easeInOutSine" : "easeInOutCubic"], U10 = c10 ? Bl(e10, t10, n10, s10, d10, i10, T10, w10, b10, R10) : Ml(n10, s10, f10, a10), { strokeDasharray: L10, strokeDashoffset: k10 } = C3.getPerfectDashProps(Math.abs(b10), g10, t10.dash, 2, false), I10 = Math.min(p10 / 3, h10 * 8), q10 = d10 ? Vr(n10, I10, T10, w10, b10 < 0) : null, de4 = i10 ? Vr(s10, I10, T10, w10, b10 >= 0) : null;
  return cn2.createElement(cn2.Fragment, null, cn2.createElement("path", { className: "tl-stroke-hitarea", d: U10 }), cn2.createElement("path", { d: U10, fill: c10 ? m10.stroke : "none", stroke: m10.stroke, strokeWidth: c10 ? 0 : g10, strokeDasharray: L10, strokeDashoffset: k10, strokeLinecap: "round", strokeLinejoin: "round", pointerEvents: "none" }), q10 && cn2.createElement(Io, { left: q10.left, middle: n10, right: q10.right, stroke: m10.stroke, strokeWidth: g10 }), de4 && cn2.createElement(Io, { left: de4.left, middle: s10, right: de4.right, stroke: m10.stroke, strokeWidth: g10 }));
});
var zl = pn.memo(function({ id: e10, style: t10, start: n10, end: o10, decorationStart: s10, decorationEnd: a10, isDraw: d10, isDarkMode: i10 }) {
  let c10 = p.dist(n10, o10);
  if (c10 < 2)
    return null;
  let u10 = be3(t10, i10), { strokeWidth: p10 } = u10, m10 = 1 + p10 * 1.618, h10 = d10 ? El(e10, t10, n10, o10, s10, a10) : "M" + p.toFixed(n10) + "L" + p.toFixed(o10), { strokeDasharray: g10, strokeDashoffset: f10 } = C3.getPerfectDashProps(c10, p10 * 1.618, t10.dash, 2, false), T10 = Math.min(c10 / 3, p10 * 8), w10 = s10 ? $r(n10, o10, T10) : null, b10 = a10 ? $r(o10, n10, T10) : null;
  return pn.createElement(pn.Fragment, null, pn.createElement("path", { className: "tl-stroke-hitarea", d: h10 }), pn.createElement("path", { d: h10, fill: u10.stroke, stroke: u10.stroke, strokeWidth: d10 ? m10 / 2 : m10, strokeDasharray: g10, strokeDashoffset: f10, strokeLinecap: "round", strokeLinejoin: "round", pointerEvents: "stroke" }), w10 && pn.createElement(Io, { left: w10.left, middle: n10, right: w10.right, stroke: u10.stroke, strokeWidth: m10 }), b10 && pn.createElement(Io, { left: b10.left, middle: o10, right: b10.right, stroke: u10.stroke, strokeWidth: m10 }));
});
var Zs = class extends ye3 {
  constructor() {
    super(...arguments);
    l7(this, "type", "arrow");
    l7(this, "hideBounds", true);
    l7(this, "canEdit", true);
    l7(this, "pathCache", /* @__PURE__ */ new WeakMap());
    l7(this, "getShape", (e10) => {
      var t10, n10, o10, s10;
      return S4({ id: "id", type: "arrow", name: "Arrow", parentId: "page", childIndex: 1, point: [0, 0], rotation: 0, bend: 0, handles: { start: S4({ id: "start", index: 0, point: [0, 0], canBind: true }, (t10 = e10.handles) == null ? void 0 : t10.start), end: S4({ id: "end", index: 1, point: [1, 1], canBind: true }, (n10 = e10.handles) == null ? void 0 : n10.end), bend: S4({ id: "bend", index: 2, point: [0.5, 0.5] }, (o10 = e10.handles) == null ? void 0 : o10.bend) }, decorations: (s10 = e10.decorations) != null ? s10 : { end: "arrow" }, style: S4(x5(S4({}, ct2), { isFilled: false }), e10.style), label: "", labelPoint: [0.5, 0.5] }, e10);
    });
    l7(this, "Component", ye3.Component(({ shape: e10, isEditing: t10, isGhost: n10, meta: o10, events: s10, onShapeChange: a10, onShapeBlur: d10 }, i10) => {
      var le3, Ae2;
      let { id: c10, label: u10 = "", handles: { start: p10, bend: m10, end: h10 }, decorations: g10 = {}, style: f10 } = e10, T10 = (Ae2 = (le3 = u10 == null ? void 0 : u10.trim()) == null ? void 0 : le3.length) != null ? Ae2 : 0 > 0, w10 = e.dist(m10.point, e.toFixed(e.med(p10.point, h10.point))) < 1, b10 = kt2(f10), y10 = be3(f10, o10.isDarkMode), R10 = T10 || t10 ? Gn(u10, b10) : [0, 0], U10 = this.getBounds(e10), L10 = _e3.useMemo(() => {
        let { start: Ce2, bend: De2, end: Ve } = e10.handles;
        if (w10)
          return e.dist(Ce2.point, Ve.point);
        let $e2 = kn2(Ce2.point, De2.point, Ve.point), jt = $e2.slice(0, 2), on2 = $e2[2], Lo = so(jt, on2, Ce2.point, Ve.point);
        return Math.abs(Lo);
      }, [e10.handles]), k10 = Math.max(0.5, Math.min(1, Math.max(L10 / (R10[1] + 128), L10 / (R10[0] + 128)))), I10 = _e3.useMemo(() => {
        let Ce2 = this.getBounds(e10);
        return e.sub(e10.handles.bend.point, e.toFixed([Ce2.width / 2, Ce2.height / 2]));
      }, [e10, k10]), q10 = _e3.useCallback((Ce2) => {
        a10 == null || a10({ id: c10, label: Ce2 });
      }, [a10]), de4 = w10 ? zl : Hl;
      return _e3.createElement(fde, S4({ ref: i10 }, s10), _e3.createElement($n2, { font: b10, text: u10, color: y10.stroke, offsetX: I10[0], offsetY: I10[1], scale: k10, isEditing: t10, onChange: q10, onBlur: d10 }), _e3.createElement(te, { id: e10.id + "_svg" }, _e3.createElement("defs", null, _e3.createElement("mask", { id: e10.id + "_clip" }, _e3.createElement("rect", { x: -100, y: -100, width: U10.width + 200, height: U10.height + 200, fill: "white" }), _e3.createElement("rect", { x: U10.width / 2 - R10[0] / 2 * k10 + I10[0], y: U10.height / 2 - R10[1] / 2 * k10 + I10[1], width: R10[0] * k10, height: R10[1] * k10, rx: 4 * k10, ry: 4 * k10, fill: "black", opacity: 1 }))), _e3.createElement("g", { pointerEvents: "none", opacity: n10 ? 0.3 : 1, mask: T10 || t10 ? `url(#${e10.id}_clip)` : "" }, _e3.createElement(de4, { id: c10, style: f10, start: p10.point, end: h10.point, bend: m10.point, arrowBend: e10.bend, decorationStart: g10 == null ? void 0 : g10.start, decorationEnd: g10 == null ? void 0 : g10.end, isDraw: f10.dash === "draw", isDarkMode: o10.isDarkMode }))));
    }));
    l7(this, "Indicator", ye3.Indicator(({ shape: e10, bounds: t10 }) => {
      var T10, w10;
      let { style: n10, decorations: o10, label: s10, handles: { start: a10, bend: d10, end: i10 } } = e10, c10 = (w10 = (T10 = s10 == null ? void 0 : s10.trim()) == null ? void 0 : T10.length) != null ? w10 : 0 > 0, u10 = kt2(n10), p10 = c10 ? Gn(s10, u10) : [0, 0], m10 = e.dist(d10.point, e.toFixed(e.med(a10.point, i10.point))) < 1, h10 = _e3.useMemo(() => {
        let { start: b10, bend: y10, end: R10 } = e10.handles;
        if (m10)
          return e.dist(b10.point, R10.point);
        let U10 = kn2(b10.point, y10.point, R10.point), L10 = U10.slice(0, 2), k10 = U10[2], I10 = so(L10, k10, b10.point, R10.point);
        return Math.abs(I10);
      }, [e10.handles]), g10 = Math.max(0.5, Math.min(1, Math.max(h10 / (p10[1] + 128), h10 / (p10[0] + 128)))), f10 = _e3.useMemo(() => {
        let b10 = this.getBounds(e10);
        return e.sub(e10.handles.bend.point, [b10.width / 2, b10.height / 2]);
      }, [e10, g10]);
      return _e3.createElement(_e3.Fragment, null, c10 && _e3.createElement(Sl, { id: e10.id, scale: g10, offset: f10, bounds: t10, labelSize: p10 }), _e3.createElement("path", { d: Rl(n10, a10.point, d10.point, i10.point, o10 == null ? void 0 : o10.start, o10 == null ? void 0 : o10.end), mask: c10 ? `url(#${e10.id}_clip)` : "" }), c10 && _e3.createElement("rect", { x: t10.width / 2 - p10[0] / 2 * g10 + f10[0], y: t10.height / 2 - p10[1] / 2 * g10 + f10[1], width: p10[0] * g10, height: p10[1] * g10, rx: 4 * g10, ry: 4 * g10, fill: "transparent" }));
    }));
    l7(this, "getBounds", (e10) => {
      let t10 = C3.getFromCache(this.boundsCache, e10, () => {
        let { handles: { start: n10, bend: o10, end: s10 } } = e10;
        return C3.getBoundsFromPoints(Uo(n10.point, o10.point, s10.point));
      });
      return C3.translateBounds(t10, e10.point);
    });
    l7(this, "getRotatedBounds", (e10) => {
      let { handles: { start: t10, bend: n10, end: o10 } } = e10, s10 = Uo(t10.point, n10.point, o10.point), { minX: a10, minY: d10, maxX: i10, maxY: c10 } = C3.getBoundsFromPoints(s10);
      return e10.rotation !== 0 && (s10 = s10.map((u10) => e.rotWith(u10, [(a10 + i10) / 2, (d10 + c10) / 2], e10.rotation || 0))), C3.translateBounds(C3.getBoundsFromPoints(s10), e10.point);
    });
    l7(this, "getCenter", (e10) => {
      let { start: t10, end: n10 } = e10.handles;
      return e.add(e10.point, e.med(t10.point, n10.point));
    });
    l7(this, "shouldRender", (e10, t10) => t10.decorations !== e10.decorations || t10.handles !== e10.handles || t10.style !== e10.style || t10.label !== e10.label);
    l7(this, "hitTestPoint", (e10, t10) => {
      let { handles: { start: n10, bend: o10, end: s10 } } = e10, a10 = e.sub(t10, e10.point), d10 = Uo(n10.point, o10.point, s10.point);
      for (let i10 = 1; i10 < d10.length; i10++)
        if (e.distanceToLineSegment(d10[i10 - 1], d10[i10], a10) < 1)
          return true;
      return false;
    });
    l7(this, "hitTestLineSegment", (e10, t10, n10) => {
      let { handles: { start: o10, bend: s10, end: a10 } } = e10, d10 = e.sub(t10, e10.point), i10 = e.sub(n10, e10.point), c10 = Uo(o10.point, s10.point, a10.point);
      for (let u10 = 1; u10 < c10.length; u10++)
        if (B2(c10[u10 - 1], c10[u10], d10, i10).didIntersect)
          return true;
      return false;
    });
    l7(this, "hitTestBounds", (e10, t10) => {
      let { start: n10, end: o10, bend: s10 } = e10.handles, a10 = e.add(e10.point, n10.point), d10 = e.add(e10.point, o10.point);
      if (C3.pointInBounds(a10, t10) || C3.pointInBounds(d10, t10))
        return true;
      if (e.isEqual(e.med(n10.point, o10.point), s10.point))
        return ce2(a10, d10, t10).length > 0;
      {
        let [i10, c10, u10] = kn2(n10.point, s10.point, o10.point), p10 = e.add(e10.point, [i10, c10]);
        return be(p10, u10, a10, d10, t10).length > 0;
      }
    });
    l7(this, "transform", (e10, t10, { initialShape: n10, scaleX: o10, scaleY: s10 }) => {
      let a10 = this.getBounds(n10), d10 = ["start", "end"], i10 = S4({}, n10.handles);
      d10.forEach((p10) => {
        if (p10 === "bend")
          return;
        let [m10, h10] = i10[p10].point, g10 = m10 / a10.width, f10 = h10 / a10.height;
        i10[p10] = x5(S4({}, i10[p10]), { point: [t10.width * (o10 < 0 ? 1 - g10 : g10), t10.height * (s10 < 0 ? 1 - f10 : f10)] });
      });
      let c10 = o10 > 0 && s10 < 0 || o10 < 0 && s10 > 0 ? -n10.bend : n10.bend, u10 = Wo(i10, c10);
      return i10.bend.point = u10, { point: e.toFixed([t10.minX, t10.minY]), handles: i10, bend: c10 };
    });
    l7(this, "onDoubleClickHandle", (e10, t10) => {
      var n10, o10;
      switch (t10) {
        case "bend":
          return { bend: 0, handles: x5(S4({}, e10.handles), { bend: x5(S4({}, e10.handles.bend), { point: Wo(e10.handles, e10.bend) }) }) };
        case "start":
          return { decorations: x5(S4({}, e10.decorations), { start: ((n10 = e10.decorations) == null ? void 0 : n10.start) ? void 0 : "arrow" }) };
        case "end":
          return { decorations: x5(S4({}, e10.decorations), { end: ((o10 = e10.decorations) == null ? void 0 : o10.end) ? void 0 : "arrow" }) };
      }
      return this;
    });
    l7(this, "onHandleChange", (e10, t10) => {
      let n10 = C3.deepMerge(e10.handles, t10), o10 = e10.bend;
      if (n10 = C3.deepMerge(n10, { start: { point: e.toFixed(n10.start.point) }, end: { point: e.toFixed(n10.end.point) } }), e.isEqual(n10.start.point, n10.end.point))
        return;
      if ("bend" in t10) {
        let { start: c10, end: u10, bend: p10 } = n10, m10 = e.dist(c10.point, u10.point), h10 = e.med(c10.point, u10.point), g10 = e.angle(c10.point, u10.point), f10 = e.uni(e.vec(c10.point, u10.point)), T10 = e.add(h10, e.mul(e.per(f10), m10)), w10 = e.sub(h10, e.mul(e.per(f10), m10)), b10 = e.nearestPointOnLineSegment(T10, w10, p10.point, true), R10 = e.dist(h10, b10) / (m10 / 2);
        o10 = C3.clamp(R10, -0.99, 0.99);
        let U10 = e.angle(c10.point, b10);
        e.isEqual(h10, Wo(n10, o10)) ? o10 = 0 : Al(g10, g10 + Math.PI, U10) && (o10 *= -1);
      }
      let s10 = { point: e10.point, bend: o10, handles: x5(S4({}, n10), { bend: x5(S4({}, n10.bend), { point: Wo(n10, o10) }) }) }, a10 = e10.point, d10 = this.getBounds(S4({}, s10)), i10 = e.sub([d10.minX, d10.minY], a10);
      return e.isEqual(i10, [0, 0]) || (Object.values(s10.handles).forEach((c10) => {
        c10.point = e.toFixed(e.sub(c10.point, i10));
      }), s10.point = e.toFixed(e.add(s10.point, i10))), s10;
    });
    l7(this, "getSvgElement", (e10, t10) => {
      var s10, a10, d10, i10, c10;
      let n10 = (s10 = document.getElementById(e10.id + "_svg")) == null ? void 0 : s10.cloneNode(true);
      if (!n10)
        return;
      if ((i10 = (d10 = (a10 = e10.label) == null ? void 0 : a10.trim()) == null ? void 0 : d10.length) != null ? i10 : 0 > 0) {
        let u10 = e10, p10 = document.createElementNS("http://www.w3.org/2000/svg", "g"), m10 = kt2(e10.style), h10 = Gn(e10.label, m10), g10 = ro(e10.style.size, e10.style.font) * ((c10 = e10.style.scale) != null ? c10 : 1), f10 = dn2(e10.style.font).slice(1, -1), T10 = Vn(u10.label, g10, f10, "start", h10[0], false), w10, { start: b10, bend: y10, end: R10 } = e10.handles;
        if (e.dist(y10.point, e.toFixed(e.med(b10.point, R10.point))) < 1)
          w10 = e.dist(b10.point, R10.point);
        else {
          let le3 = kn2(b10.point, y10.point, R10.point), Ae2 = le3.slice(0, 2), Ce2 = le3[2], De2 = so(Ae2, Ce2, b10.point, R10.point);
          w10 = Math.abs(De2);
        }
        let L10 = Math.max(0.5, Math.min(1, Math.max(w10 / (h10[1] + 128), w10 / (h10[0] + 128)))), k10 = this.getBounds(e10), I10 = e.sub(e10.handles.bend.point, [k10.width / 2, k10.height / 2]), q10 = k10.width / 2 - h10[0] / 2 * L10 + I10[0], de4 = k10.height / 2 - h10[1] / 2 * L10 + I10[1];
        return T10.setAttribute("transform", `translate(${q10}, ${de4})`), T10.setAttribute("fill", be3(e10.style, t10).stroke), T10.setAttribute("transform-origin", "center center"), p10.setAttribute("text-align", "center"), p10.setAttribute("text-anchor", "middle"), p10.appendChild(n10), p10.appendChild(T10), p10;
      }
      return n10;
    });
  }
};
var fde = H5("div", { width: "100%", height: "100%" });
var Tde = { easing: (r10) => Math.sin(r10 * Math.PI / 2), simulatePressure: true };
var yde = { easing: (r10) => r10 * r10, simulatePressure: false };
function qs(r10) {
  let e10 = be3(r10.style);
  return x5(S4({ size: 1 + e10.strokeWidth * 1.5, thinning: 0.65, streamline: 0.65, smoothing: 0.65 }, r10.points[1][2] === 0.5 ? Tde : yde), { last: r10.isComplete });
}
function Fl(r10) {
  return r10.points.length < 2 ? "" : C3.getSvgPathFromStroke(me(r10.points, qs(r10)).map((e10) => e10.point));
}
function jl(r10, e10) {
  return me(r10.points, e10);
}
function Gl(r10) {
  if (r10.points.length < 2)
    return "";
  let e10 = qs(r10), t10 = jl(r10, e10);
  return C3.getSvgPathFromStroke(ce(t10, e10));
}
function Js(r10) {
  let { points: e10 } = r10;
  if (e10.length < 2)
    return "M 0 0 L 0 0";
  let t10 = qs(r10), n10 = jl(r10, t10), o10 = e10[e10.length - 1];
  return p.isEqual(n10[0].point, o10) || n10.push({ point: o10 }), C3.getSvgPathFromStrokePoints(n10);
}
var ei = class extends ye3 {
  constructor() {
    super(...arguments);
    l7(this, "type", "draw");
    l7(this, "pointsBoundsCache", /* @__PURE__ */ new WeakMap([]));
    l7(this, "shapeBoundsCache", /* @__PURE__ */ new Map());
    l7(this, "rotatedCache", /* @__PURE__ */ new WeakMap([]));
    l7(this, "pointCache", {});
    l7(this, "canClone", true);
    l7(this, "getShape", (e10) => C3.deepMerge({ id: "id", type: "draw", name: "Draw", parentId: "page", childIndex: 1, point: [0, 0], rotation: 0, style: ct2, points: [], isComplete: false }, e10));
    l7(this, "Component", ye3.Component(({ shape: e10, meta: t10, isSelected: n10, isGhost: o10, events: s10 }, a10) => {
      let { points: d10, style: i10, isComplete: c10 } = e10, u10 = pt2.useMemo(() => Fl(e10), [d10, i10.size]), p10 = pt2.useMemo(() => i10.dash === "draw" ? Gl(e10) : Js(e10), [d10, i10.size, i10.dash, c10]), m10 = be3(i10, t10.isDarkMode), { stroke: h10, fill: g10, strokeWidth: f10 } = m10, T10 = this.getBounds(e10);
      if (T10.width <= f10 / 2 && T10.height <= f10 / 2) {
        let L10 = 1 + f10;
        return pt2.createElement(te, S4({ ref: a10, id: e10.id + "_svg" }, s10), pt2.createElement("circle", { r: L10, fill: h10, stroke: h10, pointerEvents: "all", opacity: o10 ? 0.3 : 1 }));
      }
      let b10 = i10.isFilled && d10.length > 3 && e.dist(d10[0], d10[d10.length - 1]) < f10 * 2;
      if (e10.style.dash === "draw")
        return pt2.createElement(te, S4({ ref: a10, id: e10.id + "_svg" }, s10), pt2.createElement("g", { opacity: o10 ? 0.3 : 1 }, pt2.createElement("path", { className: b10 || n10 ? "tl-fill-hitarea" : "tl-stroke-hitarea", d: p10 }), b10 && pt2.createElement("path", { d: u10, stroke: "none", fill: g10, strokeLinejoin: "round", strokeLinecap: "round", pointerEvents: "none" }), pt2.createElement("path", { d: p10, fill: h10, stroke: h10, strokeWidth: f10 / 2, strokeLinejoin: "round", strokeLinecap: "round", pointerEvents: "none" })));
      let y10 = { ["draw"]: "none", ["solid"]: "none", ["dotted"]: `0.1 ${f10 * 4}`, ["dashed"]: `${f10 * 4} ${f10 * 4}` }[i10.dash], R10 = { ["draw"]: "none", ["solid"]: "none", ["dotted"]: "0", ["dashed"]: "0" }[i10.dash], U10 = 1 + f10 * 1.5;
      return pt2.createElement(te, S4({ ref: a10, id: e10.id + "_svg" }, s10), pt2.createElement("g", { opacity: o10 ? 0.3 : 1 }, pt2.createElement("path", { className: b10 && n10 ? "tl-fill-hitarea" : "tl-stroke-hitarea", d: p10 }), pt2.createElement("path", { d: p10, fill: b10 ? g10 : "none", stroke: "none", strokeWidth: Math.min(4, f10 * 2), strokeLinejoin: "round", strokeLinecap: "round", pointerEvents: "none" }), pt2.createElement("path", { d: p10, fill: "none", stroke: h10, strokeWidth: U10, strokeDasharray: y10, strokeDashoffset: R10, strokeLinejoin: "round", strokeLinecap: "round", pointerEvents: "none" })));
    }));
    l7(this, "Indicator", ye3.Indicator(({ shape: e10 }) => {
      let { points: t10 } = e10, n10 = pt2.useMemo(() => Js(e10), [t10]), o10 = this.getBounds(e10);
      return o10.width < 4 && o10.height < 4 ? pt2.createElement("circle", { x: o10.width / 2, y: o10.height / 2, r: 1 }) : pt2.createElement("path", { d: n10 });
    }));
    l7(this, "transform", (e10, t10, { initialShape: n10, scaleX: o10, scaleY: s10 }) => {
      let a10 = C3.getFromCache(this.boundsCache, n10, () => C3.getBoundsFromPoints(n10.points)), d10 = n10.points.map(([u10, p10, m10]) => [t10.width * (o10 < 0 ? 1 - u10 / a10.width : u10 / a10.width), t10.height * (s10 < 0 ? 1 - p10 / a10.height : p10 / a10.height), m10]), i10 = C3.getBoundsFromPoints(e10.points), c10 = e.sub([t10.minX, t10.minY], [i10.minX, i10.minY]);
      return { points: d10, point: c10 };
    });
    l7(this, "getBounds", (e10) => {
      let t10 = !this.pointsBoundsCache.has(e10.points), n10 = this.pointCache[e10.id] !== e10.point;
      if (t10) {
        let o10 = C3.getBoundsFromPoints(e10.points);
        this.pointsBoundsCache.set(e10.points, o10), this.shapeBoundsCache.set(e10.id, C3.translateBounds(o10, e10.point)), this.pointCache[e10.id] = e10.point;
      } else
        n10 && !t10 && (this.pointCache[e10.id] = e10.point, this.shapeBoundsCache.set(e10.id, C3.translateBounds(this.pointsBoundsCache.get(e10.points), e10.point)));
      return this.shapeBoundsCache.get(e10.id);
    });
    l7(this, "shouldRender", (e10, t10) => t10.points !== e10.points || t10.style !== e10.style || t10.isComplete !== e10.isComplete);
    l7(this, "hitTestPoint", (e10, t10) => {
      let n10 = e.sub(t10, e10.point);
      return C3.pointInPolyline(n10, e10.points);
    });
    l7(this, "hitTestLineSegment", (e10, t10, n10) => {
      let { points: o10, point: s10 } = e10, a10 = e.sub(t10, s10), d10 = e.sub(n10, s10), i10 = this.getBounds(e10);
      if (i10.width < 8 && i10.height < 8)
        return e.distanceToLineSegment(t10, n10, C3.getBoundsCenter(i10)) < 5;
      if (ce2(a10, d10, i10)) {
        for (let c10 = 1; c10 < o10.length; c10++)
          if (B2(o10[c10 - 1], o10[c10], a10, d10).didIntersect)
            return true;
      }
      return false;
    });
    l7(this, "hitTestBounds", (e10, t10) => {
      if (!e10.rotation) {
        let s10 = this.getBounds(e10);
        return C3.boundsContain(t10, s10) || (C3.boundsContain(s10, t10) || Te(s10, t10).length > 0) && ye(C3.translateBounds(t10, e.neg(e10.point)), e10.points).length > 0;
      }
      let n10 = this.getRotatedBounds(e10), o10 = C3.getFromCache(this.rotatedCache, e10, () => {
        let s10 = C3.getBoundsCenter(C3.getBoundsFromPoints(e10.points));
        return e10.points.map((a10) => e.rotWith(a10, s10, e10.rotation || 0));
      });
      return C3.boundsContain(t10, n10) || ye(C3.translateBounds(t10, e.neg(e10.point)), o10).length > 0;
    });
  }
};
var Nl = Kn2.memo(function({ radius: e10, style: t10, isSelected: n10, isDarkMode: o10 }) {
  let { stroke: s10, strokeWidth: a10, fill: d10 } = be3(t10, o10), i10 = 1 + a10 * 1.618, c10 = Math.max(0, e10[0] - i10 / 2), u10 = Math.max(0, e10[1] - i10 / 2), p10 = C3.perimeterOfEllipse(c10, u10), { strokeDasharray: m10, strokeDashoffset: h10 } = C3.getPerfectDashProps(p10 < 64 ? p10 * 2 : p10, a10 * 1.618, t10.dash, 4);
  return Kn2.createElement(Kn2.Fragment, null, Kn2.createElement("ellipse", { className: t10.isFilled || n10 ? "tl-fill-hitarea" : "tl-stroke-hitarea", cx: e10[0], cy: e10[1], rx: e10[0], ry: e10[1] }), Kn2.createElement("ellipse", { cx: e10[0], cy: e10[1], rx: c10, ry: u10, fill: d10, stroke: s10, strokeWidth: i10, strokeDasharray: m10, strokeDashoffset: h10, pointerEvents: "none", strokeLinecap: "round", strokeLinejoin: "round" }));
});
function Wl(r10, e10, t10) {
  let { strokeWidth: n10 } = be3(t10), o10 = C3.rng(r10), s10 = e10[0] + o10() * n10 * 2, a10 = e10[1] + o10() * n10 * 2, d10 = C3.perimeterOfEllipse(s10, a10), i10 = [], c10 = Math.PI + Math.PI * o10(), u10 = Math.abs(o10()), p10 = Math.max(16, d10 / 10);
  for (let m10 = 0; m10 < p10; m10++) {
    let h10 = oo.easeInOutSine(m10 / (p10 + 1)), g10 = c10 * 2 + Math.PI * (2 + u10) * h10, f10 = Math.cos(g10), T10 = Math.sin(g10);
    i10.push([s10 * f10 + e10[0], a10 * T10 + e10[1], h10 + 0.5 + o10() / 2]);
  }
  return me(i10, { size: 1 + n10 * 2, thinning: 0.618, end: { taper: d10 / 8 }, start: { taper: d10 / 12 }, streamline: 0, simulatePressure: true });
}
function Ul(r10, e10, t10) {
  let { strokeWidth: n10 } = be3(t10), o10 = C3.rng(r10), s10 = e10[0] + o10() * n10 * 2, a10 = e10[1] + o10() * n10 * 2, d10 = C3.perimeterOfEllipse(s10, a10);
  return C3.getSvgPathFromStroke(ce(Wl(r10, e10, t10), { size: 2 + n10 * 2, thinning: 0.618, end: { taper: d10 / 8 }, start: { taper: d10 / 12 }, streamline: 0, simulatePressure: true }));
}
function Wr(r10, e10, t10) {
  return C3.getSvgPathFromStrokePoints(Wl(r10, e10, t10));
}
var Kl = In2.memo(function({ id: e10, radius: t10, style: n10, isSelected: o10, isDarkMode: s10 }) {
  let { stroke: a10, strokeWidth: d10, fill: i10 } = be3(n10, s10), c10 = Ul(e10, t10, n10);
  return In2.createElement(In2.Fragment, null, In2.createElement("ellipse", { className: n10.isFilled || o10 ? "tl-fill-hitarea" : "tl-stroke-hitarea", cx: t10[0], cy: t10[1], rx: t10[0], ry: t10[1] }), n10.isFilled && In2.createElement("path", { d: Wr(e10, t10, n10), stroke: "none", fill: i10, pointerEvents: "none" }), In2.createElement("path", { d: c10, fill: a10, stroke: a10, strokeWidth: d10, pointerEvents: "none", strokeLinecap: "round", strokeLinejoin: "round" }));
});
var ni = class extends ye3 {
  constructor() {
    super(...arguments);
    l7(this, "type", "ellipse");
    l7(this, "canBind", true);
    l7(this, "canClone", true);
    l7(this, "canEdit", true);
    l7(this, "getShape", (e10) => C3.deepMerge({ id: "id", type: "ellipse", name: "Ellipse", parentId: "page", childIndex: 1, point: [0, 0], radius: [1, 1], rotation: 0, style: ct2, label: "", labelPoint: [0.5, 0.5] }, e10));
    l7(this, "Component", ye3.Component(({ shape: e10, isGhost: t10, isSelected: n10, isBinding: o10, isEditing: s10, meta: a10, bounds: d10, events: i10, onShapeChange: c10, onShapeBlur: u10 }, p10) => {
      let { id: m10, radius: h10, style: g10, label: f10 = "", labelPoint: T10 = yo } = e10, w10 = kt2(e10.style), b10 = be3(g10, a10.isDarkMode), y10 = b10.strokeWidth, R10 = 1 + y10 * 1.618, U10 = Math.max(0, h10[0] - R10 / 2), L10 = Math.max(0, h10[1] - R10 / 2), k10 = g10.dash === "draw" ? Kl : Nl, I10 = un2.useCallback((q10) => c10 == null ? void 0 : c10({ id: m10, label: q10 }), [c10]);
      return un2.createElement(Mde, S4({ ref: p10 }, i10), un2.createElement($n2, { isEditing: s10, onChange: I10, onBlur: u10, font: w10, text: f10, color: b10.stroke, offsetX: (T10[0] - 0.5) * d10.width, offsetY: (T10[1] - 0.5) * d10.height }), un2.createElement(te, { id: e10.id + "_svg", opacity: t10 ? 0.3 : 1 }, o10 && un2.createElement("ellipse", { className: "tl-binding-indicator", cx: h10[0], cy: h10[1], rx: U10, ry: L10, strokeWidth: this.bindingDistance }), un2.createElement(k10, { id: m10, radius: h10, style: g10, isSelected: n10, isDarkMode: a10.isDarkMode })));
    }));
    l7(this, "Indicator", ye3.Indicator(({ shape: e10 }) => {
      let { id: t10, radius: n10, style: o10 } = e10, a10 = be3(o10).strokeWidth, d10 = 1 + a10 * 1.618, i10 = Math.max(0, n10[0] - d10 / 2), c10 = Math.max(0, n10[1] - d10 / 2);
      return o10.dash === "draw" ? un2.createElement("path", { d: Wr(t10, n10, o10) }) : un2.createElement("ellipse", { cx: n10[0], cy: n10[1], rx: i10, ry: c10 });
    }));
    l7(this, "hitTestPoint", (e10, t10) => C3.pointInBounds(t10, this.getRotatedBounds(e10)) && C3.pointInEllipse(t10, this.getCenter(e10), e10.radius[0], e10.radius[1], e10.rotation || 0));
    l7(this, "hitTestLineSegment", (e10, t10, n10) => y(t10, n10, this.getCenter(e10), e10.radius[0], e10.radius[1], e10.rotation || 0).didIntersect);
    l7(this, "getBounds", (e10) => C3.getFromCache(this.boundsCache, e10, () => C3.getRotatedEllipseBounds(e10.point[0], e10.point[1], e10.radius[0], e10.radius[1], 0)));
    l7(this, "getRotatedBounds", (e10) => C3.getRotatedEllipseBounds(e10.point[0], e10.point[1], e10.radius[0], e10.radius[1], e10.rotation));
    l7(this, "hitTestBounds", (e10, t10) => {
      let n10 = this.getBounds(e10);
      return C3.boundsContained(n10, t10) || pe2(this.getCenter(e10), e10.radius[0], e10.radius[1], e10.rotation || 0, t10).length > 0;
    });
    l7(this, "shouldRender", (e10, t10) => t10.radius !== e10.radius || t10.style !== e10.style || t10.label !== e10.label);
    l7(this, "getCenter", (e10) => e.add(e10.point, e10.radius));
    l7(this, "getBindingPoint", (e10, t10, n10, o10, s10, a10) => {
      {
        let d10 = this.getExpandedBounds(e10), i10 = this.getCenter(e10), c10, u10;
        if (!C3.pointInEllipse(n10, i10, e10.radius[0] + this.bindingDistance, e10.radius[1] + this.bindingDistance))
          return;
        if (a10)
          e.dist(n10, this.getCenter(e10)) < 12 ? c10 = [0.5, 0.5] : c10 = e.divV(e.sub(n10, [d10.minX, d10.minY]), [d10.width, d10.height]), u10 = 0;
        else {
          let p10 = F(o10, s10, i10, e10.radius[0], e10.radius[1], e10.rotation || 0).points.sort((h10, g10) => e.dist(h10, o10) - e.dist(g10, o10))[0];
          if (p10 || (p10 = y(n10, i10, i10, e10.radius[0], e10.radius[1], e10.rotation || 0).points.sort((h10, g10) => e.dist(h10, n10) - e.dist(g10, n10))[0]), !p10)
            return;
          let m10 = e.med(n10, p10);
          if (e.distanceToLineSegment(n10, m10, this.getCenter(e10)) < 12 ? c10 = [0.5, 0.5] : c10 = e.divV(e.sub(m10, [d10.minX, d10.minY]), [d10.width, d10.height]), C3.pointInEllipse(n10, i10, e10.radius[0], e10.radius[1], e10.rotation || 0))
            u10 = this.bindingDistance / 2;
          else {
            let h10 = y(n10, i10, i10, e10.radius[0], e10.radius[1], e10.rotation || 0).points[0];
            if (!h10)
              return;
            u10 = Math.max(this.bindingDistance / 2, e.dist(n10, h10));
          }
        }
        return { point: c10, distance: u10 };
      }
    });
    l7(this, "transform", (e10, t10, { scaleX: n10, scaleY: o10, initialShape: s10 }) => {
      let { rotation: a10 = 0 } = s10;
      return { point: [t10.minX, t10.minY], radius: [t10.width / 2, t10.height / 2], rotation: n10 < 0 && o10 >= 0 || o10 < 0 && n10 >= 0 ? -(a10 || 0) : a10 || 0 };
    });
    l7(this, "transformSingle", (e10, t10) => ({ point: e.toFixed([t10.minX, t10.minY]), radius: e.div([t10.width, t10.height], 2) }));
  }
};
var Mde = H5("div", { width: "100%", height: "100%" });
var oi = class extends ye3 {
  constructor() {
    super(...arguments);
    l7(this, "type", "group");
    l7(this, "canBind", true);
    l7(this, "getShape", (e10) => C3.deepMerge({ id: "id", type: "group", name: "Group", parentId: "page", childIndex: 1, point: [0, 0], size: [100, 100], rotation: 0, children: [], style: ct2 }, e10));
    l7(this, "Component", ye3.Component(({ shape: e10, isBinding: t10, isGhost: n10, isHovered: o10, isSelected: s10, events: a10 }, d10) => {
      let { id: i10, size: c10 } = e10, u10 = 2, p10 = Math.max(0, c10[0] - u10 / 2), m10 = Math.max(0, c10[1] - u10 / 2), g10 = [[[u10 / 2, u10 / 2], [p10, u10 / 2], p10 - u10 / 2], [[p10, u10 / 2], [p10, m10], m10 - u10 / 2], [[p10, m10], [u10 / 2, m10], p10 - u10 / 2], [[u10 / 2, m10], [u10 / 2, u10 / 2], m10 - u10 / 2]].map(([f10, T10], w10) => Dn2.createElement("line", { key: i10 + "_" + w10, x1: f10[0], y1: f10[1], x2: T10[0], y2: T10[1] }));
      return Dn2.createElement(te, S4({ ref: d10 }, a10), t10 && Dn2.createElement("rect", { className: "tl-binding-indicator", strokeWidth: this.bindingDistance }), Dn2.createElement("g", { opacity: n10 ? 0.3 : 1 }, Dn2.createElement("rect", { x: 0, y: 0, width: c10[0], height: c10[1], fill: "transparent", pointerEvents: "all" }), Dn2.createElement(_l, { stroke: "black", opacity: o10 || s10 ? 1 : 0, strokeLinecap: "round", pointerEvents: "stroke" }, g10)));
    }));
    l7(this, "Indicator", ye3.Indicator(({ shape: e10 }) => {
      let { id: t10, size: n10 } = e10, o10 = 2, s10 = Math.max(0, n10[0] - o10 / 2), a10 = Math.max(0, n10[1] - o10 / 2), i10 = [[[o10 / 2, o10 / 2], [s10, o10 / 2], s10 - o10 / 2], [[s10, o10 / 2], [s10, a10], a10 - o10 / 2], [[s10, a10], [o10 / 2, a10], s10 - o10 / 2], [[o10 / 2, a10], [o10 / 2, o10 / 2], a10 - o10 / 2]].map(([c10, u10], p10) => Dn2.createElement("line", { key: t10 + "_" + p10, x1: c10[0], y1: c10[1], x2: u10[0], y2: u10[1] }));
      return Dn2.createElement(_l, { strokeLinecap: "round", pointerEvents: "stroke" }, i10);
    }));
    l7(this, "getBounds", (e10) => $t2(e10, this.boundsCache));
    l7(this, "shouldRender", (e10, t10) => t10.size !== e10.size || t10.style !== e10.style);
  }
};
var _l = H5("g", { strokeWidth: "calc(1.5px * var(--tl-scale))", strokeDasharray: "calc(1px * var(--tl-scale)), calc(3px * var(--tl-scale))" });
var ri = class extends ye3 {
  constructor() {
    super(...arguments);
    l7(this, "type", "image");
    l7(this, "canBind", true);
    l7(this, "canClone", true);
    l7(this, "isAspectRatioLocked", true);
    l7(this, "showCloneHandles", false);
    l7(this, "getShape", (e10) => C3.deepMerge({ id: "image", type: "image", name: "Image", parentId: "page", childIndex: 1, point: [0, 0], size: [1, 1], rotation: 0, style: x5(S4({}, ct2), { isFilled: true }), assetId: "assetId" }, e10));
    l7(this, "Component", ye3.Component(({ shape: e10, asset: t10 = { src: "" }, isBinding: n10, isGhost: o10, meta: s10, events: a10, onShapeChange: d10 }, i10) => {
      let { size: c10, style: u10 } = e10, { bindingDistance: p10 } = this, m10 = en.useRef(null), h10 = en.useRef(null);
      return en.useLayoutEffect(() => {
        let g10 = h10.current;
        if (!g10)
          return;
        let [f10, T10] = c10;
        g10.style.width = `${f10}px`, g10.style.height = `${T10}px`;
      }, [c10]), en.createElement(Xs, S4({ ref: i10 }, a10), n10 && en.createElement("div", { className: "tl-binding-indicator", style: { position: "absolute", top: `calc(${-p10}px * var(--tl-zoom))`, left: `calc(${-p10}px * var(--tl-zoom))`, width: `calc(100% + ${p10 * 2}px * var(--tl-zoom))`, height: `calc(100% + ${p10 * 2}px * var(--tl-zoom))`, backgroundColor: "var(--tl-selectFill)" } }), en.createElement(Lde, { ref: h10, isDarkMode: s10.isDarkMode, isFilled: u10.isFilled, isGhost: o10 }, en.createElement(Hde, { id: e10.id + "_image", ref: m10, src: t10.src, alt: "tl_image_asset", draggable: false })));
    }));
    l7(this, "Indicator", ye3.Indicator(({ shape: e10 }) => {
      let { size: [t10, n10] } = e10;
      return en.createElement("rect", { x: 0, y: 0, rx: 2, ry: 2, width: Math.max(1, t10), height: Math.max(1, n10) });
    }));
    l7(this, "getBounds", (e10) => $t2(e10, this.boundsCache));
    l7(this, "shouldRender", (e10, t10) => t10.size !== e10.size || t10.style !== e10.style);
    l7(this, "transform", Nn2);
    l7(this, "transformSingle", Wn2);
    l7(this, "getSvgElement", (e10) => {
      let t10 = this.getBounds(e10), n10 = document.createElementNS("http://www.w3.org/2000/svg", "image");
      return n10.setAttribute("width", `${t10.width}`), n10.setAttribute("height", `${t10.height}`), n10.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink"), n10;
    });
  }
};
var Lde = re2("div", { pointerEvents: "all", position: "relative", fontFamily: "sans-serif", fontSize: "2em", height: "100%", width: "100%", borderRadius: "3px", perspective: "800px", overflow: "hidden", p: { userSelect: "none" }, img: { userSelect: "none" }, variants: { isGhost: { false: { opacity: 1 }, true: { transition: "opacity .2s", opacity: 0.3 } }, isFilled: { true: {}, false: {} }, isDarkMode: { true: {}, false: {} } }, compoundVariants: [{ isFilled: true, isDarkMode: true, css: { boxShadow: "2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)" } }, { isFilled: true, isDarkMode: false, css: { boxShadow: "2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)" } }] });
var Hde = re2("img", { position: "absolute", top: 0, left: 0, width: "100%", height: "100%", maxWidth: "100%", minWidth: "100%", pointerEvents: "none", objectFit: "cover", userSelect: "none", borderRadius: 2 });
function Xl({ strokeWidth: r10, size: e10 }) {
  return Zl.createElement("rect", { className: "tl-binding-indicator", x: r10, y: r10, width: Math.max(0, e10[0] - r10 / 2), height: Math.max(0, e10[1] - r10 / 2), strokeWidth: 16 * 2 });
}
var ql = hn2.memo(function({ id: e10, style: t10, size: n10, isSelected: o10, isDarkMode: s10 }) {
  let { stroke: a10, strokeWidth: d10, fill: i10 } = be3(t10, s10), c10 = 1 + d10 * 1.618, u10 = Math.max(0, n10[0] - c10 / 2), p10 = Math.max(0, n10[1] - c10 / 2), h10 = [[[c10 / 2, c10 / 2], [u10, c10 / 2], u10 - c10 / 2], [[u10, c10 / 2], [u10, p10], p10 - c10 / 2], [[u10, p10], [c10 / 2, p10], u10 - c10 / 2], [[c10 / 2, p10], [c10 / 2, c10 / 2], p10 - c10 / 2]].map(([g10, f10, T10], w10) => {
    let { strokeDasharray: b10, strokeDashoffset: y10 } = C3.getPerfectDashProps(T10, d10 * 1.618, t10.dash);
    return hn2.createElement("line", { key: e10 + "_" + w10, x1: g10[0], y1: g10[1], x2: f10[0], y2: f10[1], strokeDasharray: b10, strokeDashoffset: y10 });
  });
  return hn2.createElement(hn2.Fragment, null, hn2.createElement("rect", { className: o10 || t10.isFilled ? "tl-fill-hitarea" : "tl-stroke-hitarea", x: c10 / 2, y: c10 / 2, width: u10, height: p10, strokeWidth: 16 }), t10.isFilled && hn2.createElement("rect", { x: c10 / 2, y: c10 / 2, width: u10, height: p10, fill: i10, pointerEvents: "none" }), hn2.createElement("g", { pointerEvents: "none", stroke: a10, strokeWidth: c10, strokeLinecap: "round" }, h10));
});
function jde(r10, e10, t10) {
  let n10 = be3(e10), o10 = C3.rng(r10), s10 = n10.strokeWidth, a10 = Math.max(0, t10[0]), d10 = Math.max(0, t10[1]), i10 = Array.from(Array(4)).map(() => [o10() * s10 * 0.75, o10() * s10 * 0.75]), c10 = p.add([s10 / 2, s10 / 2], i10[0]), u10 = p.add([a10 - s10 / 2, s10 / 2], i10[1]), p10 = p.add([a10 - s10 / 2, d10 - s10 / 2], i10[2]), m10 = p.add([s10 / 2, d10 - s10 / 2], i10[3]), h10 = Math.round(Math.abs(o10() * 2 * 4)), g10 = Math.min(a10 / 4, s10 * 2), f10 = Math.min(d10 / 4, s10 * 2), T10 = Math.max(8, Math.floor(a10 / 16)), w10 = Math.max(8, Math.floor(d10 / 16)), b10 = C3.rotateArray([p.pointsBetween(p.add(c10, [g10, 0]), p.sub(u10, [g10, 0]), T10), p.pointsBetween(p.add(u10, [0, f10]), p.sub(p10, [0, f10]), w10), p.pointsBetween(p.sub(p10, [g10, 0]), p.add(m10, [g10, 0]), T10), p.pointsBetween(p.sub(m10, [0, f10]), p.add(c10, [0, f10]), w10)], h10);
  return { points: [...b10.flat(), ...b10[0]].slice(5, Math.floor((h10 % 2 === 0 ? T10 : w10) / -2) + 3) };
}
function Jl(r10, e10, t10) {
  let { points: n10 } = jde(r10, e10, t10), { strokeWidth: o10 } = be3(e10);
  return { points: n10, options: { size: o10, thinning: 0.65, streamline: 0.3, smoothing: 1, simulatePressure: false, last: true } };
}
function Ql(r10, e10, t10) {
  let { points: n10, options: o10 } = Jl(r10, e10, t10), s10 = _e(n10, o10);
  return C3.getSvgPathFromStroke(s10);
}
function Kr(r10, e10, t10) {
  let { points: n10, options: o10 } = Jl(r10, e10, t10);
  return C3.getSvgPathFromStrokePoints(me(n10, o10));
}
var ed = Pn2.memo(function({ id: e10, style: t10, size: n10, isSelected: o10, isDarkMode: s10 }) {
  let { isFilled: a10 } = t10, { stroke: d10, strokeWidth: i10, fill: c10 } = be3(t10, s10), u10 = Ql(e10, t10, n10), p10 = Kr(e10, t10, n10);
  return Pn2.createElement(Pn2.Fragment, null, Pn2.createElement("path", { className: t10.isFilled || o10 ? "tl-fill-hitarea" : "tl-stroke-hitarea", d: p10 }), a10 && Pn2.createElement("path", { d: p10, fill: c10, pointerEvents: "none" }), Pn2.createElement("path", { d: u10, fill: d10, stroke: d10, strokeWidth: i10, pointerEvents: "none" }));
});
var si = class extends ye3 {
  constructor() {
    super(...arguments);
    l7(this, "type", "rectangle");
    l7(this, "canBind", true);
    l7(this, "canClone", true);
    l7(this, "canEdit", true);
    l7(this, "getShape", (e10) => C3.deepMerge({ id: "id", type: "rectangle", name: "Rectangle", parentId: "page", childIndex: 1, point: [0, 0], size: [1, 1], rotation: 0, style: ct2, label: "", labelPoint: [0.5, 0.5] }, e10));
    l7(this, "Component", ye3.Component(({ shape: e10, isEditing: t10, isBinding: n10, isSelected: o10, isGhost: s10, meta: a10, bounds: d10, events: i10, onShapeBlur: c10, onShapeChange: u10 }, p10) => {
      let { id: m10, size: h10, style: g10, label: f10 = "", labelPoint: T10 = yo } = e10, w10 = kt2(g10), b10 = be3(g10, a10.isDarkMode), y10 = g10.dash === "draw" ? ed : ql, R10 = mn2.useCallback((U10) => u10 == null ? void 0 : u10({ id: m10, label: U10 }), [u10]);
      return mn2.createElement($de, S4({ ref: p10 }, i10), mn2.createElement($n2, { isEditing: t10, onChange: R10, onBlur: c10, font: w10, text: f10, color: b10.stroke, offsetX: (T10[0] - 0.5) * d10.width, offsetY: (T10[1] - 0.5) * d10.height }), mn2.createElement(te, { id: e10.id + "_svg", opacity: s10 ? 0.3 : 1 }, n10 && mn2.createElement(Xl, { strokeWidth: b10.strokeWidth, size: h10 }), mn2.createElement(y10, { id: m10, style: g10, size: h10, isSelected: o10, isDarkMode: a10.isDarkMode })));
    }));
    l7(this, "Indicator", ye3.Indicator(({ shape: e10 }) => {
      let { id: t10, style: n10, size: o10 } = e10, a10 = be3(n10, false).strokeWidth;
      return n10.dash === "draw" ? mn2.createElement("path", { d: Kr(t10, n10, o10) }) : mn2.createElement("rect", { x: a10, y: a10, rx: 1, ry: 1, width: Math.max(1, o10[0] - a10 * 2), height: Math.max(1, o10[1] - a10 * 2) });
    }));
    l7(this, "getBounds", (e10) => $t2(e10, this.boundsCache));
    l7(this, "shouldRender", (e10, t10) => t10.size !== e10.size || t10.style !== e10.style || t10.label !== e10.label);
    l7(this, "transform", Nn2);
    l7(this, "transformSingle", Wn2);
  }
};
var $de = H5("div", { width: "100%", height: "100%" });
var ai = class extends ye3 {
  constructor() {
    super(...arguments);
    l7(this, "type", "sticky");
    l7(this, "canBind", true);
    l7(this, "canEdit", true);
    l7(this, "canClone", true);
    l7(this, "hideResizeHandles", true);
    l7(this, "showCloneHandles", true);
    l7(this, "getShape", (e10) => C3.deepMerge({ id: "id", type: "sticky", name: "Sticky", parentId: "page", childIndex: 1, point: [0, 0], size: [200, 200], text: "", rotation: 0, style: vo }, e10));
    l7(this, "Component", ye3.Component(({ shape: e10, meta: t10, events: n10, isGhost: o10, isBinding: s10, isEditing: a10, onShapeBlur: d10, onShapeChange: i10 }, c10) => {
      let u10 = wl(e10.style), { color: p10, fill: m10 } = _s(e10.style, t10.isDarkMode), h10 = Xe2.useRef(null), g10 = Xe2.useRef(null), f10 = Xe2.useRef(null), T10 = Xe2.useRef(false), w10 = Xe2.useCallback((I10) => {
        I10.stopPropagation();
      }, []), b10 = Xe2.useCallback((I10) => {
        i10 == null || i10({ id: e10.id, type: e10.type, text: v10.normalizeText(I10) });
      }, [e10.id]), y10 = Xe2.useCallback((I10) => {
        b10(I10.currentTarget.value);
      }, [i10, b10]), R10 = Xe2.useCallback((I10) => {
        if (I10.key === "Escape") {
          I10.preventDefault(), I10.stopPropagation(), d10 == null || d10();
          return;
        }
        if (I10.key === "Tab" && e10.text.length === 0) {
          I10.preventDefault();
          return;
        }
        if (!(I10.key === "Meta" || I10.metaKey))
          I10.stopPropagation();
        else if (I10.key === "z" && I10.metaKey) {
          I10.shiftKey ? document.execCommand("redo", false) : document.execCommand("undo", false), I10.stopPropagation(), I10.preventDefault();
          return;
        }
        (I10.metaKey || I10.ctrlKey) && I10.key === "=" && I10.preventDefault(), I10.key === "Tab" && (I10.preventDefault(), I10.shiftKey ? st2.unindent(I10.currentTarget) : st2.indent(I10.currentTarget), i10 == null || i10(x5(S4({}, e10), { text: v10.normalizeText(I10.currentTarget.value) })));
      }, [e10, i10]), U10 = Xe2.useCallback((I10) => {
        I10.currentTarget.setSelectionRange(0, 0), d10 == null || d10();
      }, []), L10 = Xe2.useCallback((I10) => {
        !a10 || !T10.current || I10.currentTarget.select();
      }, [a10]);
      Xe2.useEffect(() => {
        if (a10) {
          T10.current = true;
          let I10 = g10.current;
          I10.focus(), I10.select();
        }
      }, [a10]), Xe2.useEffect(() => {
        let I10 = f10.current, { size: q10 } = e10, { offsetHeight: de4 } = I10, le3 = ii - gn2 * 2, Ae2 = q10[1] - gn2 * 2;
        if (de4 === Ae2)
          return;
        if (de4 > le3) {
          i10 == null || i10({ id: e10.id, size: [q10[0], de4 + gn2 * 2] });
          return;
        }
        if (de4 < le3 && q10[1] > ii) {
          i10 == null || i10({ id: e10.id, size: [q10[0], ii] });
          return;
        }
        let Ce2 = g10.current;
        Ce2 == null || Ce2.focus();
      }, [e10.text, e10.size[1], e10.style]);
      let k10 = { font: u10, color: p10, textShadow: t10.isDarkMode ? "0.5px 0.5px 2px rgba(255, 255, 255,.25)" : "0.5px 0.5px 2px rgba(255, 255, 255,.5)" };
      return Xe2.createElement(Xs, S4({ ref: c10 }, n10), Xe2.createElement(Kde, { ref: h10, isDarkMode: t10.isDarkMode, isGhost: o10, style: S4({ backgroundColor: m10 }, k10) }, s10 && Xe2.createElement("div", { className: "tl-binding-indicator", style: { position: "absolute", top: -this.bindingDistance, left: -this.bindingDistance, width: `calc(100% + ${this.bindingDistance * 2}px)`, height: `calc(100% + ${this.bindingDistance * 2}px)`, backgroundColor: "var(--tl-selectFill)" } }), Xe2.createElement(_de, { ref: f10, isEditing: a10, alignment: e10.style.textAlign }, e10.text, "\u200B"), a10 && Xe2.createElement(Yde, { ref: g10, onPointerDown: w10, value: e10.text, onChange: y10, onKeyDown: R10, onFocus: L10, onBlur: U10, tabIndex: -1, autoComplete: "false", autoCapitalize: "false", autoCorrect: "false", autoSave: "false", autoFocus: true, spellCheck: true, alignment: e10.style.textAlign, onContextMenu: ft2, onCopy: ft2, onPaste: ft2, onCut: ft2 })));
    }));
    l7(this, "Indicator", ye3.Indicator(({ shape: e10 }) => {
      let { size: [t10, n10] } = e10;
      return Xe2.createElement("rect", { x: 0, y: 0, rx: 3, ry: 3, width: Math.max(1, t10), height: Math.max(1, n10) });
    }));
    l7(this, "getBounds", (e10) => $t2(e10, this.boundsCache));
    l7(this, "shouldRender", (e10, t10) => t10.size !== e10.size || t10.style !== e10.style || t10.text !== e10.text);
    l7(this, "transform", (e10, t10, { scaleX: n10, scaleY: o10, transformOrigin: s10 }) => ({ point: e.toFixed([t10.minX + (t10.width - e10.size[0]) * (n10 < 0 ? 1 - s10[0] : s10[0]), t10.minY + (t10.height - e10.size[1]) * (o10 < 0 ? 1 - s10[1] : s10[1])]) }));
    l7(this, "transformSingle", (e10) => e10);
    l7(this, "getSvgElement", (e10, t10) => {
      var p10, m10;
      let n10 = this.getBounds(e10), o10 = _s(e10.style, t10), s10 = Ks(e10.style.size) * ((p10 = e10.style.scale) != null ? p10 : 1), a10 = dn2(e10.style.font).slice(1, -1), d10 = (m10 = e10.style.textAlign) != null ? m10 : "start", i10 = Vn(e10.text, s10, a10, d10, n10.width - gn2 * 2, true);
      i10.setAttribute("fill", o10.color), i10.setAttribute("transform", `translate(${gn2}, ${gn2})`);
      let c10 = document.createElementNS("http://www.w3.org/2000/svg", "g"), u10 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      return u10.setAttribute("width", n10.width + ""), u10.setAttribute("height", n10.height + ""), u10.setAttribute("fill", o10.fill), u10.setAttribute("rx", "3"), u10.setAttribute("ry", "3"), c10.appendChild(u10), c10.appendChild(i10), c10;
    });
  }
};
var gn2 = 16;
var ii = 200;
var Kde = H5("div", { pointerEvents: "all", position: "relative", backgroundColor: "rgba(255, 220, 100)", fontFamily: "sans-serif", height: "100%", width: "100%", padding: gn2 + "px", borderRadius: "3px", perspective: "800px", variants: { isGhost: { false: { opacity: 1 }, true: { transition: "opacity .2s", opacity: 0.3 } }, isDarkMode: { true: { boxShadow: "2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)" }, false: { boxShadow: "2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)" } } } });
var td = { whiteSpace: "pre-wrap", overflowWrap: "break-word", letterSpacing: Vt2 };
var _de = H5("div", S4({ position: "absolute", top: gn2, left: gn2, width: `calc(100% - ${gn2 * 2}px)`, height: "fit-content", font: "inherit", pointerEvents: "none", userSelect: "none", variants: { isEditing: { true: { opacity: 1 }, false: { opacity: 1 } }, alignment: { ["start"]: { textAlign: "left" }, ["middle"]: { textAlign: "center" }, ["end"]: { textAlign: "right" }, ["justify"]: { textAlign: "justify" } } } }, td));
var Yde = H5("textarea", x5(S4({ width: "100%", height: "100%", border: "none", overflow: "hidden", background: "none", outline: "none", textAlign: "left", font: "inherit", padding: 0, color: "transparent", verticalAlign: "top", resize: "none", caretColor: "black" }, td), { variants: { alignment: { ["start"]: { textAlign: "left" }, ["middle"]: { textAlign: "center" }, ["end"]: { textAlign: "right" }, ["justify"]: { textAlign: "justify" } } }, "&:focus": { outline: "none", border: "none" } }));
var di = class extends ye3 {
  constructor() {
    super(...arguments);
    l7(this, "type", "text");
    l7(this, "isAspectRatioLocked", true);
    l7(this, "canEdit", true);
    l7(this, "canBind", true);
    l7(this, "canClone", true);
    l7(this, "bindingDistance", 16 / 2);
    l7(this, "getShape", (e10) => C3.deepMerge({ id: "id", type: "text", name: "Text", parentId: "page", childIndex: 1, point: [0, 0], rotation: 0, text: " ", style: vo }, e10));
    l7(this, "texts", /* @__PURE__ */ new Map());
    l7(this, "Component", ye3.Component(({ shape: e10, isBinding: t10, isGhost: n10, isEditing: o10, onShapeBlur: s10, onShapeChange: a10, meta: d10, events: i10 }, c10) => {
      let { text: u10, style: p10 } = e10, m10 = be3(p10, d10.isDarkMode), h10 = kt2(e10.style), g10 = qe2.useRef(null), f10 = qe2.useRef(false), T10 = qe2.useRef(u10);
      qe2.useLayoutEffect(() => {
        if (u10 !== T10.current) {
          let k10 = [0, 0];
          this.texts.set(e10.id, u10);
          let I10 = this.getBounds(e10), q10 = this.getBounds(e10);
          switch (e10.style.textAlign) {
            case "start":
              break;
            case "middle": {
              k10 = e.div([q10.width - I10.width, 0], 2);
              break;
            }
            case "end": {
              k10 = [q10.width - I10.width, 0];
              break;
            }
          }
          T10.current = u10, a10 == null || a10(x5(S4({}, e10), { id: e10.id, point: e.sub(e10.point, k10), text: u10 }));
        }
      }, [u10]);
      let w10 = qe2.useCallback((k10) => {
        let I10 = [0, 0], q10 = v10.normalizeText(k10.currentTarget.value), de4 = this.getBounds(e10);
        this.texts.set(e10.id, q10);
        let le3 = this.getBounds(x5(S4({}, e10), { text: q10 }));
        switch (e10.style.textAlign) {
          case "start":
            break;
          case "middle": {
            I10 = e.div([le3.width - de4.width, 0], 2);
            break;
          }
          case "end": {
            I10 = [le3.width - de4.width, 0];
            break;
          }
        }
        T10.current = q10, a10 == null || a10(x5(S4({}, e10), { id: e10.id, point: e.sub(e10.point, I10), text: q10 }));
      }, [e10.id, e10.point]), b10 = qe2.useCallback((k10) => {
        if (k10.key === "Escape") {
          k10.preventDefault(), k10.stopPropagation(), s10 == null || s10();
          return;
        }
        if (k10.key === "Tab" && e10.text.length === 0) {
          k10.preventDefault();
          return;
        }
        if (k10.key === "Enter" && (k10.metaKey || k10.ctrlKey)) {
          k10.preventDefault(), k10.stopPropagation(), g10.current.blur();
          return;
        }
        if (!(k10.key === "Meta" || k10.metaKey))
          k10.stopPropagation();
        else if (k10.key === "z" && k10.metaKey) {
          k10.shiftKey ? document.execCommand("redo", false) : document.execCommand("undo", false), k10.stopPropagation(), k10.preventDefault();
          return;
        }
        (k10.metaKey || k10.ctrlKey) && k10.key === "=" && k10.preventDefault(), k10.key === "Tab" && (k10.preventDefault(), k10.shiftKey ? st2.unindent(k10.currentTarget) : st2.indent(k10.currentTarget), a10 == null || a10(x5(S4({}, e10), { text: v10.normalizeText(k10.currentTarget.value) })));
      }, [e10, a10]), y10 = qe2.useCallback((k10) => {
        k10.currentTarget.setSelectionRange(0, 0), s10 == null || s10();
      }, []), R10 = qe2.useCallback((k10) => {
        !o10 || !f10.current || document.activeElement === k10.currentTarget && k10.currentTarget.select();
      }, [o10]), U10 = qe2.useCallback((k10) => {
        o10 && k10.stopPropagation();
      }, [o10]), L10 = qe2.useRef(o10);
      return qe2.useEffect(() => {
        o10 ? (L10.current = true, this.texts.set(e10.id, u10), requestAnimationFrame(() => {
          f10.current = true;
          let k10 = g10.current;
          k10 && (k10.focus(), k10.select());
        })) : L10.current && (L10.current = false, s10 == null || s10());
      }, [o10]), qe2.createElement(Xs, S4({ ref: c10 }, i10), qe2.createElement(qde, { isGhost: n10, isEditing: o10, onPointerDown: U10 }, qe2.createElement(Jde, { style: { font: h10, color: m10.stroke, textAlign: ml(p10.textAlign) } }, t10 && qe2.createElement("div", { className: "tl-binding-indicator", style: { position: "absolute", top: -this.bindingDistance, left: -this.bindingDistance, width: `calc(100% + ${this.bindingDistance * 2}px)`, height: `calc(100% + ${this.bindingDistance * 2}px)`, backgroundColor: "var(--tl-selectFill)" } }), o10 ? qe2.createElement(Qde, { ref: g10, style: { font: h10, color: m10.stroke }, name: "text", tabIndex: -1, autoComplete: "false", autoCapitalize: "false", autoCorrect: "false", autoSave: "false", autoFocus: true, placeholder: "", spellCheck: "true", wrap: "off", dir: "auto", datatype: "wysiwyg", defaultValue: u10, color: m10.stroke, onFocus: R10, onChange: w10, onKeyDown: b10, onBlur: y10, onPointerDown: U10, onContextMenu: ft2, onCopy: ft2, onPaste: ft2, onCut: ft2 }) : u10, "\u200B")));
    }));
    l7(this, "Indicator", ye3.Indicator(({ shape: e10 }) => {
      let { width: t10, height: n10 } = this.getBounds(e10);
      return qe2.createElement("rect", { x: 0, y: 0, width: t10, height: n10 });
    }));
    l7(this, "getBounds", (e10) => {
      let t10 = C3.getFromCache(this.boundsCache, e10, () => {
        var s10;
        if (!Yn2)
          return { minX: 0, minY: 0, maxX: 10, maxY: 10, width: 10, height: 10 };
        Yn2.parentNode || document.body.appendChild(Yn2), Yn2.style.font = kt2(e10.style), Yn2.textContent = (s10 = this.texts.get(e10.id)) != null ? s10 : e10.text;
        let n10 = Yn2.offsetWidth || 1, o10 = Yn2.offsetHeight || 1;
        return { minX: 0, maxX: n10, minY: 0, maxY: o10, width: n10, height: o10 };
      });
      return C3.translateBounds(t10, e10.point);
    });
    l7(this, "shouldRender", (e10, t10) => t10.text !== e10.text || t10.style.scale !== e10.style.scale || t10.style !== e10.style);
    l7(this, "transform", (e10, t10, { initialShape: n10, scaleX: o10, scaleY: s10 }) => {
      let { rotation: a10 = 0, style: { scale: d10 = 1 } } = n10, i10 = d10 * Math.abs(Math.min(o10, s10));
      return { point: [t10.minX, t10.minY], rotation: o10 < 0 && s10 >= 0 || s10 < 0 && o10 >= 0 ? -(a10 || 0) : a10, style: x5(S4({}, n10.style), { scale: i10 }) };
    });
    l7(this, "transformSingle", (e10, t10, { initialShape: n10, scaleX: o10, scaleY: s10 }) => {
      let { style: { scale: a10 = 1 } } = n10;
      return { point: e.toFixed([t10.minX, t10.minY]), style: x5(S4({}, n10.style), { scale: a10 * Math.max(Math.abs(s10), Math.abs(o10)) }) };
    });
    l7(this, "onDoubleClickBoundsHandle", (e10) => {
      let t10 = this.getCenter(e10), n10 = this.getCenter(x5(S4({}, e10), { style: x5(S4({}, e10.style), { scale: 1 }) }));
      return { style: x5(S4({}, e10.style), { scale: 1 }), point: e.toFixed(e.add(e10.point, e.sub(t10, n10))) };
    });
    l7(this, "getSvgElement", (e10, t10) => {
      var c10, u10;
      let n10 = this.getBounds(e10), o10 = be3(e10.style, t10), s10 = ro(e10.style.size, e10.style.font) * ((c10 = e10.style.scale) != null ? c10 : 1), a10 = dn2(e10.style.font).slice(1, -1), d10 = (u10 = e10.style.textAlign) != null ? u10 : "middle", i10 = Vn(e10.text, s10, a10, d10, n10.width, false);
      return i10.setAttribute("fill", o10.stroke), i10;
    });
  }
};
var Yn2;
function Xde() {
  var e10;
  (e10 = document.getElementById("__textMeasure")) == null || e10.remove();
  let r10 = document.createElement("pre");
  return r10.id = "__textMeasure", Object.assign(r10.style, { whiteSpace: "pre", width: "auto", border: "1px solid transparent", padding: "4px", margin: "0px", letterSpacing: Vt2, opacity: "0", position: "absolute", top: "-500px", left: "0px", zIndex: "9999", pointerEvents: "none", userSelect: "none", alignmentBaseline: "mathematical", dominantBaseline: "mathematical" }), r10.tabIndex = -1, document.body.appendChild(r10), r10;
}
typeof window != "undefined" && (Yn2 = Xde());
var qde = H5("div", { width: "100%", height: "100%", variants: { isGhost: { false: { opacity: 1 }, true: { transition: "opacity .2s", opacity: 0.3 } }, isEditing: { false: { pointerEvents: "all", userSelect: "all" }, true: { pointerEvents: "none", userSelect: "none" } } } });
var nd = { whiteSpace: "pre-wrap", overflowWrap: "break-word" };
var Jde = H5("div", S4({ position: "absolute", width: "100%", height: "100%", padding: "4px", zIndex: 1, minHeight: 1, minWidth: 1, lineHeight: 1, letterSpacing: Vt2, outline: 0, fontWeight: "500", backfaceVisibility: "hidden", userSelect: "none", pointerEvents: "none", WebkitUserSelect: "none", WebkitTouchCallout: "none", isEditing: { false: {}, true: { pointerEvents: "all", background: "$boundsBg", userSelect: "text", WebkitUserSelect: "text" } } }, nd));
var Qde = H5("textarea", x5(S4({ position: "absolute", top: 0, left: 0, zIndex: 1, width: "100%", height: "100%", border: "none", padding: "4px", resize: "none", textAlign: "inherit", minHeight: "inherit", minWidth: "inherit", lineHeight: "inherit", letterSpacing: "inherit", outline: 0, fontWeight: "inherit", overflow: "hidden", backfaceVisibility: "hidden", display: "inline-block", pointerEvents: "all", background: "$boundsBg", userSelect: "text", WebkitUserSelect: "text" }, nd), { "&:focus": { outline: "none", border: "none" } }));
function tn2(r10, e10 = 0, t10 = 0) {
  let [n10, o10] = r10, s10 = [[n10 / 2, 0], [n10, o10], [0, o10]];
  return e10 && (s10 = Tl(s10, e10)), t10 && (s10 = s10.map((a10) => p.rotWith(a10, [n10 / 2, o10 / 2], t10))), s10;
}
function ci(r10) {
  let [e10, t10] = r10, n10 = [[e10 / 2, 0], [e10, t10], [0, t10]];
  return [(n10[0][0] + n10[1][0] + n10[2][0]) / 3, (n10[0][1] + n10[1][1] + n10[2][1]) / 3];
}
function nce(r10, e10, t10) {
  let [n10, o10] = e10, s10 = C3.rng(r10), a10 = Array.from(Array(3)).map(() => [s10() * t10 * 0.75, s10() * t10 * 0.75]), d10 = [p.add([n10 / 2, 0], a10[0]), p.add([n10, o10], a10[1]), p.add([0, o10], a10[2])], i10 = Math.round(Math.abs(s10() * 2 * 3)), c10 = C3.rotateArray([p.pointsBetween(d10[0], d10[1], 32), p.pointsBetween(d10[1], d10[2], 32), p.pointsBetween(d10[2], d10[0], 32)], i10);
  return { points: [...c10.flat(), ...c10[0]] };
}
function od(r10, e10, t10) {
  let { strokeWidth: n10 } = be3(t10), { points: o10 } = nce(r10, e10, n10);
  return { points: o10, options: { size: n10, thinning: 0.65, streamline: 0.3, smoothing: 1, simulatePressure: false, last: true } };
}
function rd(r10, e10, t10) {
  let { points: n10, options: o10 } = od(r10, e10, t10), s10 = _e(n10, o10);
  return C3.getSvgPathFromStroke(s10);
}
function sd(r10, e10, t10) {
  let { points: n10, options: o10 } = od(r10, e10, t10);
  return C3.getSvgPathFromStrokePoints(me(n10, o10));
}
var ad = fn2.memo(function({ id: e10, size: t10, style: n10, isSelected: o10, isDarkMode: s10 }) {
  let { stroke: a10, strokeWidth: d10, fill: i10 } = be3(n10, s10), c10 = 1 + d10 * 1.618, u10 = tn2(t10), m10 = C3.pointsToLineSegments(u10, true).map(([g10, f10], T10) => {
    let { strokeDasharray: w10, strokeDashoffset: b10 } = C3.getPerfectDashProps(p.dist(g10, f10), d10 * 1.618, n10.dash);
    return fn2.createElement("line", { key: e10 + "_" + T10, x1: g10[0], y1: g10[1], x2: f10[0], y2: f10[1], stroke: a10, strokeWidth: c10, strokeLinecap: "round", strokeDasharray: w10, strokeDashoffset: b10 });
  }), h10 = u10.join();
  return fn2.createElement(fn2.Fragment, null, fn2.createElement("polygon", { className: n10.isFilled || o10 ? "tl-fill-hitarea" : "tl-stroke-hitarea", points: h10 }), n10.isFilled && fn2.createElement("polygon", { fill: i10, points: h10, pointerEvents: "none" }), fn2.createElement("g", { pointerEvents: "stroke" }, m10));
});
var ld = Mn2.memo(function({ id: e10, size: t10, style: n10, isSelected: o10, isDarkMode: s10 }) {
  let { stroke: a10, strokeWidth: d10, fill: i10 } = be3(n10, s10), c10 = rd(e10, t10, n10), u10 = sd(e10, t10, n10);
  return Mn2.createElement(Mn2.Fragment, null, Mn2.createElement("path", { className: n10.isFilled || o10 ? "tl-fill-hitarea" : "tl-stroke-hitarea", d: u10 }), n10.isFilled && Mn2.createElement("path", { d: u10, fill: i10, pointerEvents: "none" }), Mn2.createElement("path", { d: c10, fill: a10, stroke: a10, strokeWidth: d10, pointerEvents: "none" }));
});
function cd({ size: r10 }) {
  let e10 = tn2(r10).join();
  return dd.createElement("polygon", { className: "tl-binding-indicator", points: e10, strokeWidth: 16 * 2 });
}
var pi = class extends ye3 {
  constructor() {
    super(...arguments);
    l7(this, "type", "triangle");
    l7(this, "canBind", true);
    l7(this, "canClone", true);
    l7(this, "canEdit", true);
    l7(this, "getShape", (e10) => C3.deepMerge({ id: "id", type: "triangle", name: "Triangle", parentId: "page", childIndex: 1, point: [0, 0], size: [1, 1], rotation: 0, style: ct2, label: "", labelPoint: [0.5, 0.5] }, e10));
    l7(this, "Component", ye3.Component(({ shape: e10, bounds: t10, isBinding: n10, isEditing: o10, isSelected: s10, isGhost: a10, meta: d10, events: i10, onShapeChange: c10, onShapeBlur: u10 }, p10) => {
      let { id: m10, label: h10 = "", size: g10, style: f10, labelPoint: T10 = yo } = e10, w10 = kt2(f10), b10 = be3(f10, d10.isDarkMode), y10 = f10.dash === "draw" ? ld : ad, R10 = nn2.useCallback((L10) => c10 == null ? void 0 : c10({ id: m10, label: L10 }), [c10]), U10 = nn2.useMemo(() => {
        let L10 = p.div(g10, 2);
        return (ci(g10)[1] - L10[1]) * 0.72;
      }, [g10]);
      return nn2.createElement(lce, S4({ ref: p10 }, i10), nn2.createElement($n2, { font: w10, text: h10, color: b10.stroke, offsetX: (T10[0] - 0.5) * t10.width, offsetY: U10 + (T10[1] - 0.5) * t10.height, isEditing: o10, onChange: R10, onBlur: u10 }), nn2.createElement(te, { id: e10.id + "_svg", opacity: a10 ? 0.3 : 1 }, n10 && nn2.createElement(cd, { size: g10 }), nn2.createElement(y10, { id: m10, style: f10, size: g10, isSelected: s10, isDarkMode: d10.isDarkMode })));
    }));
    l7(this, "Indicator", ye3.Indicator(({ shape: e10 }) => {
      let { size: t10 } = e10;
      return nn2.createElement("polygon", { points: tn2(t10).join() });
    }));
    l7(this, "shouldRender", (e10, t10) => t10.size !== e10.size || t10.style !== e10.style || t10.label !== e10.label);
    l7(this, "getBounds", (e10) => $t2(e10, this.boundsCache));
    l7(this, "getExpandedBounds", (e10) => C3.getBoundsFromPoints(tn2(e10.size, this.bindingDistance).map((t10) => p.add(t10, e10.point))));
    l7(this, "hitTestLineSegment", (e10, t10, n10) => S(t10, n10, this.getPoints(e10)).didIntersect);
    l7(this, "hitTestBounds", (e10, t10) => C3.boundsContained(this.getBounds(e10), t10) || Se(t10, this.getPoints(e10)).length > 0);
    l7(this, "getBindingPoint", (e10, t10, n10, o10, s10, a10) => {
      let d10 = this.getExpandedBounds(e10);
      if (!C3.pointInBounds(n10, d10))
        return;
      let i10 = tn2(e10.size).map((b10) => p.add(b10, e10.point)), c10 = tn2(e10.size, this.bindingDistance).map((b10) => p.add(b10, e10.point)), u10 = C3.pointsToLineSegments(i10, true).map(([b10, y10]) => p.distanceToLineSegment(b10, y10, n10)).sort((b10, y10) => b10 - y10)[0];
      if (!(C3.pointInPolygon(n10, c10) || u10 < this.bindingDistance))
        return;
      let p10 = C3.pointsToLineSegments(c10.concat([c10[0]])).map((b10) => x(o10, s10, b10[0], b10[1])).filter((b10) => b10.didIntersect).flatMap((b10) => b10.points);
      if (!p10.length)
        return;
      let m10 = p.add(ci(e10.size), e10.point), h10 = p10.sort((b10, y10) => p.dist(y10, o10) - p.dist(b10, o10))[0], g10 = p.med(n10, h10), f10, T10;
      a10 ? (f10 = p.dist(n10, m10) < 16 / 2 ? m10 : n10, T10 = 0) : (p.distanceToLineSegment(n10, g10, m10) < 16 / 2 ? f10 = m10 : f10 = g10, C3.pointInPolygon(n10, i10) ? T10 = this.bindingDistance : T10 = Math.max(this.bindingDistance, u10));
      let w10 = p.divV(p.sub(f10, [d10.minX, d10.minY]), [d10.width, d10.height]);
      return { point: p.clampV(w10, 0, 1), distance: T10 };
    });
    l7(this, "transform", Nn2);
    l7(this, "transformSingle", Wn2);
  }
  getPoints(e10) {
    let { rotation: t10 = 0, point: [n10, o10], size: [s10, a10] } = e10;
    return [[n10 + s10 / 2, o10], [n10, o10 + a10], [n10 + s10, o10 + a10]].map((d10) => p.rotWith(d10, this.getCenter(e10), t10));
  }
};
var lce = H5("div", { width: "100%", height: "100%" });
var ui = class extends ye3 {
  constructor() {
    super(...arguments);
    l7(this, "type", "video");
    l7(this, "canBind", true);
    l7(this, "canEdit", true);
    l7(this, "canClone", true);
    l7(this, "isAspectRatioLocked", true);
    l7(this, "showCloneHandles", false);
    l7(this, "isStateful", true);
    l7(this, "getShape", (e10) => C3.deepMerge({ id: "video", type: "video", name: "Video", parentId: "page", childIndex: 1, point: [0, 0], size: [1, 1], rotation: 0, style: ct2, assetId: "assetId", isPlaying: true, currentTime: 0 }, e10));
    l7(this, "Component", ye3.Component(({ shape: e10, asset: t10 = { src: "" }, isBinding: n10, isEditing: o10, isGhost: s10, meta: a10, events: d10, onShapeChange: i10 }, c10) => {
      let u10 = gt2.useRef(null), p10 = gt2.useRef(null), { currentTime: m10 = 0, size: h10, isPlaying: g10, style: f10 } = e10;
      gt2.useLayoutEffect(() => {
        let y10 = p10.current;
        if (!y10)
          return;
        let [R10, U10] = h10;
        y10.style.width = `${R10}px`, y10.style.height = `${U10}px`;
      }, [h10]), gt2.useLayoutEffect(() => {
        let y10 = u10.current;
        !y10 || (g10 ? y10.play() : y10.pause());
      }, [g10]), gt2.useLayoutEffect(() => {
        let y10 = u10.current;
        !y10 || m10 !== y10.currentTime && (y10.currentTime = m10);
      }, [m10]);
      let T10 = gt2.useCallback(() => {
        i10 == null || i10({ id: e10.id, isPlaying: true });
      }, []), w10 = gt2.useCallback(() => {
        i10 == null || i10({ id: e10.id, isPlaying: false });
      }, []), b10 = gt2.useCallback(() => {
        let y10 = u10.current;
        !y10 || !o10 || i10 == null || i10({ id: e10.id, currentTime: y10.currentTime });
      }, [o10]);
      return gt2.createElement(Xs, S4({ ref: c10 }, d10), n10 && gt2.createElement("div", { className: "tl-binding-indicator", style: { position: "absolute", top: -this.bindingDistance, left: -this.bindingDistance, width: `calc(100% + ${this.bindingDistance * 2}px)`, height: `calc(100% + ${this.bindingDistance * 2}px)`, backgroundColor: "var(--tl-selectFill)" } }), gt2.createElement(pce, { ref: p10, isDarkMode: a10.isDarkMode, isGhost: s10, isFilled: f10.isFilled }, gt2.createElement(uce, { ref: u10, id: e10.id + "_video", muted: true, loop: true, playsInline: true, disableRemotePlayback: true, disablePictureInPicture: true, controls: o10, autoPlay: g10, onPlay: T10, onPause: w10, onTimeUpdate: b10 }, gt2.createElement("source", { src: t10.src }))));
    }));
    l7(this, "Indicator", ye3.Indicator(({ shape: e10 }) => {
      let { size: [t10, n10] } = e10;
      return gt2.createElement("rect", { x: 0, y: 0, rx: 2, ry: 2, width: Math.max(1, t10), height: Math.max(1, n10) });
    }));
    l7(this, "getBounds", (e10) => $t2(e10, this.boundsCache));
    l7(this, "shouldRender", (e10, t10) => t10.size !== e10.size || t10.style !== e10.style || t10.isPlaying !== e10.isPlaying);
    l7(this, "getSvgElement", (e10) => {
      let t10 = this.getBounds(e10), n10 = document.createElementNS("http://www.w3.org/2000/svg", "image");
      return n10.setAttribute("width", `${t10.width}`), n10.setAttribute("height", `${t10.height}`), n10.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink"), n10;
    });
    l7(this, "transform", Nn2);
    l7(this, "transformSingle", Wn2);
  }
};
var pce = re2("div", { pointerEvents: "all", position: "relative", fontFamily: "sans-serif", fontSize: "2em", height: "100%", width: "100%", borderRadius: "3px", perspective: "800px", overflow: "hidden", p: { userSelect: "none" }, img: { userSelect: "none" }, variants: { isGhost: { false: { opacity: 1 }, true: { transition: "opacity .2s", opacity: 0.3 } }, isFilled: { true: {}, false: {} }, isDarkMode: { true: {}, false: {} } }, compoundVariants: [{ isFilled: true, isDarkMode: true, css: { boxShadow: "2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)" } }, { isFilled: true, isDarkMode: false, css: { boxShadow: "2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)" } }] });
var uce = re2("video", { position: "absolute", top: 0, left: 0, width: "100%", height: "100%", maxWidth: "100%", minWidth: "100%", pointerEvents: "none", objectFit: "cover", userSelect: "none", borderRadius: 2 });
var hi = new si();
var mi = new pi();
var gi = new ni();
var fi = new ei();
var Ko = new Zs();
var hce = new di();
var mce = new oi();
var Yr = new ai();
var gce = new ri();
var fce = new ui();
var En2 = { ["rectangle"]: hi, ["triangle"]: mi, ["ellipse"]: gi, ["draw"]: fi, ["arrow"]: Ko, ["text"]: hce, ["group"]: mce, ["sticky"]: Yr, ["image"]: gce, ["video"]: fce };
var ud = (r10) => typeof r10 == "string" ? En2[r10] : En2[r10.type];
var hd = false;
var he3 = class {
  static getShapeUtil(e10) {
    return ud(e10);
  }
  static getSelectedShapes(e10, t10) {
    let n10 = he3.getPage(e10, t10);
    return he3.getSelectedIds(e10, t10).map((s10) => n10.shapes[s10]);
  }
  static screenToWorld(e10, t10) {
    let n10 = he3.getPageState(e10, e10.appState.currentPageId).camera;
    return e.sub(e.div(t10, n10.zoom), n10.point);
  }
  static getCameraZoom(e10) {
    return C3.clamp(e10, 0.1, 5);
  }
  static getPage(e10, t10) {
    return e10.document.pages[t10];
  }
  static getPageState(e10, t10) {
    return e10.document.pageStates[t10];
  }
  static getSelectedIds(e10, t10) {
    return he3.getPageState(e10, t10).selectedIds;
  }
  static getShapes(e10, t10) {
    return Object.values(he3.getPage(e10, t10).shapes);
  }
  static getCamera(e10, t10) {
    return he3.getPageState(e10, t10).camera;
  }
  static getShape(e10, t10, n10) {
    return he3.getPage(e10, n10).shapes[t10];
  }
  static getCenter(e10) {
    return he3.getShapeUtil(e10).getCenter(e10);
  }
  static getBounds(e10) {
    return he3.getShapeUtil(e10).getBounds(e10);
  }
  static getRotatedBounds(e10) {
    return he3.getShapeUtil(e10).getRotatedBounds(e10);
  }
  static getSelectedBounds(e10) {
    return C3.getCommonBounds(he3.getSelectedShapes(e10, e10.appState.currentPageId).map((t10) => he3.getShapeUtil(t10).getBounds(t10)));
  }
  static getParentId(e10, t10, n10) {
    return he3.getShape(e10, t10, n10).parentId;
  }
  static getDocumentBranch(e10, t10, n10) {
    let o10 = he3.getShape(e10, t10, n10);
    return o10.children === void 0 ? [t10] : [t10, ...o10.children.flatMap((s10) => he3.getDocumentBranch(e10, s10, n10))];
  }
  static getSelectedBranchSnapshot(e10, t10, n10) {
    let o10 = he3.getPage(e10, t10), s10 = he3.getSelectedIds(e10, t10).flatMap((a10) => he3.getDocumentBranch(e10, a10, t10).map((d10) => o10.shapes[d10])).filter((a10) => !a10.isLocked).map(C3.deepClone);
    return n10 !== void 0 ? s10.map((a10) => S4({ id: a10.id }, n10(a10))) : s10;
  }
  static getSelectedShapeSnapshot(e10, t10, n10) {
    let o10 = he3.getSelectedShapes(e10, t10).filter((s10) => !s10.isLocked).map(C3.deepClone);
    return n10 !== void 0 ? o10.map((s10) => S4({ id: s10.id }, n10(s10))) : o10;
  }
  static getAllEffectedShapeIds(e10, t10, n10) {
    let o10 = he3.getPage(e10, n10), s10 = new Set(t10);
    return t10.forEach((a10) => {
      let d10 = o10.shapes[a10];
      function i10(u10) {
        u10.children !== void 0 && u10.children.filter((p10) => !s10.has(p10)).forEach((p10) => {
          s10.add(p10), i10(o10.shapes[p10]);
        });
      }
      i10(d10);
      function c10(u10) {
        let p10 = u10.parentId;
        p10 !== o10.id && (s10.has(p10) || (s10.add(p10), c10(o10.shapes[p10])));
      }
      c10(d10), s10.forEach((u10) => {
        Object.values(o10.bindings).filter((p10) => p10.fromId === u10 || p10.toId === u10).forEach((p10) => s10.add(p10.fromId === u10 ? p10.toId : p10.fromId));
      });
    }), Array.from(s10.values());
  }
  static getLinkedShapeIds(e10, t10, n10, o10 = true) {
    let s10 = he3.getSelectedIds(e10, t10), a10 = he3.getPage(e10, t10), d10 = new Set(s10), i10 = /* @__PURE__ */ new Set(), c10 = [...s10], u10 = new Set(Object.values(a10.shapes).filter((p10) => {
      var m10;
      return p10.type === "arrow" && (p10.handles.start.bindingId || ((m10 = p10.handles) == null ? void 0 : m10.end.bindingId));
    }));
    for (; c10.length; ) {
      let p10 = c10.pop();
      if (!(p10 && u10.size))
        break;
      i10.has(p10) || (i10.add(p10), u10.forEach((m10) => {
        var b10, y10;
        let { handles: { start: { bindingId: h10 }, end: { bindingId: g10 } } } = m10, f10 = h10 ? a10.bindings[h10] : null, T10 = g10 ? a10.bindings[g10] : null, w10 = false;
        f10 && f10.toId === p10 ? (n10 === "center" ? w10 = true : ((b10 = m10.decorations) == null ? void 0 : b10.start) && T10 ? w10 = n10 === "left" : w10 = n10 === "right", w10 && (o10 && d10.add(m10.id), d10.add(p10), T10 && (d10.add(T10.toId), c10.push(T10.toId)))) : T10 && T10.toId === p10 && (n10 === "center" ? w10 = true : ((y10 = m10.decorations) == null ? void 0 : y10.end) && f10 ? w10 = n10 === "left" : w10 = n10 === "right", w10 && (o10 && d10.add(m10.id), d10.add(p10), f10 && (d10.add(f10.toId), c10.push(f10.toId)))), (!f10 || d10.has(f10.toId)) && (!T10 || d10.has(T10.toId)) && u10.delete(m10);
      }));
    }
    return Array.from(d10.values());
  }
  static getChildIndexAbove(e10, t10, n10) {
    let o10 = e10.document.pages[n10], s10 = o10.shapes[t10], a10;
    if (s10.parentId === o10.id)
      a10 = Object.values(o10.shapes).filter((c10) => c10.parentId === o10.id).sort((c10, u10) => c10.childIndex - u10.childIndex);
    else {
      let c10 = o10.shapes[s10.parentId];
      if (!c10.children)
        throw Error("No children in parent!");
      a10 = c10.children.map((u10) => o10.shapes[u10]).sort((u10, p10) => u10.childIndex - p10.childIndex);
    }
    let d10 = a10.indexOf(s10), i10 = a10[d10 + 1];
    return i10 ? i10.childIndex : s10.childIndex + 1;
  }
  static getBeforeShape(e10, t10) {
    return Object.fromEntries(Object.keys(t10).map((n10) => [n10, e10[n10]]));
  }
  static mutateShapes(e10, t10, n10, o10, s10 = false) {
    let a10 = {}, d10 = {};
    t10.forEach((c10, u10) => {
      let p10 = he3.getShape(e10, c10, o10);
      if (p10.isLocked)
        return;
      (p10 == null ? void 0 : p10.type) === "group" && (t10.length === 1 || s10) && p10.children.forEach((h10, g10) => {
        let f10 = he3.getShape(e10, h10, o10);
        if (f10.isLocked)
          return;
        let T10 = n10(f10, g10);
        T10 && (a10[h10] = he3.getBeforeShape(f10, T10), d10[h10] = T10);
      });
      let m10 = n10(p10, u10);
      m10 && (a10[c10] = he3.getBeforeShape(p10, m10), d10[c10] = m10);
    });
    let i10 = C3.deepMerge(e10, { document: { pages: { [e10.appState.currentPageId]: { shapes: d10 } } } });
    return { before: a10, after: d10, data: i10 };
  }
  static createShapes(e10, t10, n10) {
    let o10 = { document: { pages: { [n10]: { shapes: S4({}, Object.fromEntries(t10.flatMap((a10) => {
      let d10 = [[a10.id, void 0]];
      if (a10.parentId !== n10) {
        let i10 = he3.getShape(e10, a10.parentId, n10);
        if (!i10.children)
          throw Error("No children in parent!");
        d10.push([i10.id, { children: i10.children }]);
      }
      return d10;
    }))) } } } }, s10 = { document: { pages: { [n10]: { shapes: { shapes: S4({}, Object.fromEntries(t10.flatMap((a10) => {
      let d10 = [[a10.id, a10]];
      if (a10.parentId !== n10) {
        let i10 = he3.getShape(e10, a10.parentId, n10);
        if (!i10.children)
          throw Error("No children in parent!");
        d10.push([i10.id, { children: [...i10.children, a10.id] }]);
      }
      return d10;
    }))) } } } } };
    return { before: o10, after: s10 };
  }
  static deleteShapes(e10, t10, n10) {
    n10 = n10 || e10.appState.currentPageId;
    let o10 = he3.getPage(e10, n10), s10 = typeof t10[0] == "string" ? t10 : t10.map((i10) => i10.id), a10 = { document: { pages: { [n10]: { shapes: S4({}, Object.fromEntries(s10.flatMap((i10) => {
      let c10 = o10.shapes[i10], u10 = [[c10.id, c10]];
      if (c10.parentId !== n10) {
        let p10 = o10.shapes[c10.parentId];
        if (!p10.children)
          throw Error("No children in parent!");
        u10.push([p10.id, { children: p10.children }]);
      }
      return u10;
    }))), bindings: S4({}, Object.fromEntries(Object.values(o10.bindings).filter((i10) => s10.includes(i10.fromId) || s10.includes(i10.toId)).map((i10) => [i10.id, i10]))) } } } }, d10 = { document: { pages: { [n10]: { shapes: S4({}, Object.fromEntries(s10.flatMap((i10) => {
      let c10 = o10.shapes[i10], u10 = [[c10.id, void 0]];
      if (c10.parentId !== o10.id) {
        let p10 = o10.shapes[c10.parentId];
        if (!p10.children)
          throw Error("No children in parent!");
        u10.push([p10.id, { children: p10.children.filter((m10) => m10 !== c10.id) }]);
      }
      return u10;
    }))) } } } };
    return { before: a10, after: d10 };
  }
  static onSessionComplete(e10) {
    var n10, o10;
    let t10 = (o10 = (n10 = he3.getShapeUtil(e10)).onSessionComplete) == null ? void 0 : o10.call(n10, e10);
    return t10 ? S4(S4({}, e10), t10) : e10;
  }
  static onChildrenChange(e10, t10, n10) {
    var s10, a10;
    if (!t10.children)
      return;
    let o10 = (a10 = (s10 = he3.getShapeUtil(t10)).onChildrenChange) == null ? void 0 : a10.call(s10, t10, t10.children.map((d10) => he3.getShape(e10, d10, n10)));
    return o10 ? S4(S4({}, t10), o10) : t10;
  }
  static updateArrowBindings(e10, t10) {
    var a10, d10, i10, c10, u10, p10;
    let n10 = { start: St2(t10.handles.start), end: St2(t10.handles.end) }, o10 = { isBound: false, handle: t10.handles.start, point: e.add(t10.handles.start.point, t10.point) }, s10 = { isBound: false, handle: t10.handles.end, point: e.add(t10.handles.end.point, t10.point) };
    if (t10.handles.start.bindingId) {
      let m10 = ((a10 = t10.decorations) == null ? void 0 : a10.start) !== void 0, h10 = t10.handles.start, g10 = e10.bindings[t10.handles.start.bindingId];
      if (!g10)
        throw Error("Could not find a binding to match the start handle's bindingId: " + t10.handles.start.bindingId);
      let f10 = e10.shapes[g10.toId], T10 = he3.getShapeUtil(f10), w10 = T10.getBounds(f10), b10 = T10.getExpandedBounds(f10), y10 = m10 ? C3.expandBounds(w10, g10.distance) : w10, { minX: R10, minY: U10, width: L10, height: k10 } = b10, I10 = e.add([R10, U10], e.mulV([L10, k10], e.rotWith(g10.point, [0.5, 0.5], f10.rotation || 0)));
      o10 = { isBound: true, hasDecoration: m10, binding: g10, handle: h10, point: I10, util: T10, target: f10, bounds: w10, expandedBounds: b10, intersectBounds: y10, center: T10.getCenter(f10) };
    }
    if (t10.handles.end.bindingId) {
      let m10 = ((d10 = t10.decorations) == null ? void 0 : d10.end) !== void 0, h10 = t10.handles.end, g10 = e10.bindings[t10.handles.end.bindingId];
      if (!g10)
        throw Error("Could not find a binding to match the end handle's bindingId");
      let f10 = e10.shapes[g10.toId], T10 = he3.getShapeUtil(f10), w10 = T10.getBounds(f10), b10 = T10.getExpandedBounds(f10), y10 = m10 ? C3.expandBounds(w10, g10.distance) : w10, { minX: R10, minY: U10, width: L10, height: k10 } = b10, I10 = e.add([R10, U10], e.mulV([L10, k10], e.rotWith(g10.point, [0.5, 0.5], f10.rotation || 0)));
      s10 = { isBound: true, hasDecoration: m10, binding: g10, handle: h10, point: I10, util: T10, target: f10, bounds: w10, expandedBounds: b10, intersectBounds: y10, center: T10.getCenter(f10) };
    }
    for (let m10 of ["end", "start"]) {
      let h10 = m10 === "start" ? o10 : s10, g10 = m10 === "start" ? s10 : o10;
      if (h10.isBound)
        if (!h10.binding.distance)
          n10[m10].point = e.sub(h10.point, t10.point);
        else {
          let f10 = e.uni(e.sub(h10.point, g10.point));
          switch (h10.target.type) {
            case "ellipse": {
              let T10 = F(g10.point, f10, h10.center, h10.target.radius[0] + (h10.hasDecoration ? h10.binding.distance : 0), h10.target.radius[1] + (h10.hasDecoration ? h10.binding.distance : 0), h10.target.rotation || 0).points.sort((w10, b10) => e.dist(w10, g10.point) - e.dist(b10, g10.point));
              T10[0] !== void 0 && (n10[m10].point = e.toFixed(e.sub(T10[0], t10.point)));
              break;
            }
            case "triangle": {
              let T10 = h10.target.point, w10 = tn2(h10.target.size, h10.hasDecoration ? 16 : 0, h10.target.rotation).map((y10) => e.add(y10, T10)), b10 = C3.pointsToLineSegments(w10, true).map(([y10, R10]) => x(g10.point, f10, y10, R10)).filter((y10) => y10.didIntersect).flatMap((y10) => y10.points).sort((y10, R10) => e.dist(y10, g10.point) - e.dist(R10, g10.point));
              b10[0] !== void 0 && (n10[m10].point = e.toFixed(e.sub(b10[0], t10.point)));
              break;
            }
            default: {
              let T10 = se2(g10.point, f10, h10.intersectBounds, h10.target.rotation).filter((b10) => b10.didIntersect).map((b10) => b10.points[0]).sort((b10, y10) => e.dist(b10, g10.point) - e.dist(y10, g10.point));
              if (!T10[0])
                continue;
              let w10;
              if (g10.isBound && (w10 = se2(g10.point, f10, g10.intersectBounds, g10.target.rotation).filter((y10) => y10.didIntersect).map((y10) => y10.points[0]).sort((y10, R10) => e.dist(y10, g10.point) - e.dist(R10, g10.point))[0]), g10.isBound && (T10.length < 2 || w10 && T10[0] && Math.ceil(e.dist(T10[0], w10)) < 16 * 2.5 || C3.boundsContain(h10.expandedBounds, g10.expandedBounds) || C3.boundsCollide(h10.expandedBounds, g10.expandedBounds))) {
                let b10 = e.uni(e.sub(g10.point, h10.point)), y10 = se2(h10.point, b10, h10.bounds, h10.target.rotation).filter((R10) => R10.didIntersect).map((R10) => R10.points[0]);
                if (!y10[0])
                  continue;
                n10[m10].point = e.toFixed(e.sub(y10[0], t10.point)), n10[m10 === "start" ? "end" : "start"].point = e.toFixed(e.add(e.sub(y10[0], t10.point), e.mul(b10, Math.min(e.dist(y10[0], g10.point), 16 * 2.5 * (C3.boundsContain(g10.bounds, h10.intersectBounds) ? -1 : 1)))));
              } else if (!g10.isBound && (T10[0] && e.dist(T10[0], g10.point) < 16 * 2.5 || C3.pointInBounds(g10.point, h10.intersectBounds))) {
                let b10 = e.uni(e.sub(h10.center, g10.point));
                return (c10 = (i10 = he3.getShapeUtil(t10)).onHandleChange) == null ? void 0 : c10.call(i10, t10, { [m10]: x5(S4({}, t10.handles[m10]), { point: e.toFixed(e.add(e.sub(g10.point, t10.point), e.mul(b10, 16 * 2.5))) }) });
              } else
                T10[0] && (n10[m10].point = e.toFixed(e.sub(T10[0], t10.point)));
            }
          }
        }
    }
    return (p10 = (u10 = he3.getShapeUtil(t10)).onHandleChange) == null ? void 0 : p10.call(u10, t10, n10);
  }
  static transform(e10, t10, n10) {
    let o10 = he3.getShapeUtil(e10).transform(e10, t10, n10);
    return o10 ? S4(S4({}, e10), o10) : e10;
  }
  static transformSingle(e10, t10, n10) {
    let o10 = he3.getShapeUtil(e10).transformSingle(e10, t10, n10);
    return o10 ? S4(S4({}, e10), o10) : e10;
  }
  static getRotatedShapeMutation(e10, t10, n10, o10) {
    var c10, u10;
    let s10 = e.sub(t10, e10.point), a10 = e.rotWith(t10, n10, o10), d10 = e.toFixed(e.sub(a10, s10));
    if (e10.handles !== void 0)
      return (u10 = (c10 = this.getShapeUtil(e10)).onHandleChange) == null ? void 0 : u10.call(c10, x5(S4({}, e10), { point: d10 }), Object.fromEntries(Object.entries(e10.handles).map(([m10, h10]) => {
        let g10 = e.toFixed(e.rotWith(h10.point, s10, o10));
        return [m10, x5(S4({}, h10), { point: g10 })];
      })));
    let i10 = C3.clampRadians((e10.rotation || 0) + o10);
    return { point: d10, rotation: i10 };
  }
  static updateParents(e10, t10, n10) {
    let o10 = he3.getPage(e10, t10);
    if (n10.length === 0)
      return;
    let { shapes: s10 } = he3.getPage(e10, t10), a10 = Array.from(new Set(n10.map((d10) => s10[d10].parentId).values())).filter((d10) => d10 !== o10.id);
    for (let d10 of a10) {
      let i10 = s10[d10];
      if (!i10.children)
        throw Error("A shape is parented to a shape without a children array.");
      he3.onChildrenChange(e10, i10, t10);
    }
    he3.updateParents(e10, t10, a10);
  }
  static getBinding(e10, t10, n10) {
    return he3.getPage(e10, n10).bindings[t10];
  }
  static getBindings(e10, t10) {
    let n10 = he3.getPage(e10, t10);
    return Object.values(n10.bindings);
  }
  static getBindableShapeIds(e10) {
    return he3.getShapes(e10, e10.appState.currentPageId).filter((t10) => he3.getShapeUtil(t10).canBind).sort((t10, n10) => n10.childIndex - t10.childIndex).map((t10) => t10.id);
  }
  static getBindingsWithShapeIds(e10, t10, n10) {
    return Array.from(new Set(he3.getBindings(e10, n10).filter((o10) => t10.includes(o10.toId) || t10.includes(o10.fromId))).values());
  }
  static getRelatedBindings(e10, t10, n10) {
    let o10 = new Set(t10), s10 = he3.getPage(e10, n10), a10 = Object.values(s10.bindings), d10 = new Set(a10.filter((u10) => o10.has(u10.toId) || o10.has(u10.fromId))), i10 = d10.size, c10 = -1;
    for (; c10 !== 0; )
      d10.forEach((u10) => {
        let p10 = u10.fromId;
        for (let m10 of a10)
          m10.fromId === p10 && d10.add(m10), m10.toId === p10 && d10.add(m10);
      }), c10 = d10.size - i10, i10 = d10.size;
    return Array.from(d10.values());
  }
  static normalizeText(e10) {
    return e10.replace(he3.fixNewLines, `
`).split(`
`).map((t10) => t10 || " ").join(`
`);
  }
  static assertShapeHasProperty(e10, t10) {
    if (e10[t10] === void 0)
      throw new Error();
  }
  static warn(e10) {
    hd && console.warn(e10);
  }
  static error(e10) {
    hd && console.error(e10);
  }
  static getSvgString(e10, t10 = 1) {
    let n10 = e10.cloneNode(true);
    return e10.setAttribute("width", +e10.getAttribute("width") * t10 + ""), e10.setAttribute("height", +e10.getAttribute("height") * t10 + ""), new XMLSerializer().serializeToString(n10).replaceAll("&#10;      ", "").replaceAll(/((\s|")[0-9]*\.[0-9]{2})([0-9]*)(\b|"|\))/g, "$1");
  }
  static getSvgAsDataUrl(e10, t10 = 1) {
    let n10 = he3.getSvgString(e10, t10);
    return `data:image/svg+xml;base64,${window.btoa(unescape(n10))}`;
  }
  static getImageForSvg(o10) {
    return pe4(this, arguments, function* (e10, t10 = "png", n10 = {}) {
      let { scale: s10 = 2, quality: a10 = 1 } = n10, d10 = he3.getSvgString(e10, s10);
      if (!d10)
        return;
      let i10 = yield new Promise((u10) => {
        let p10 = new Image();
        p10.crossOrigin = "anonymous";
        let h10 = `data:image/svg+xml;base64,${window.btoa(unescape(encodeURIComponent(d10)))}`;
        p10.onload = () => {
          let g10 = document.createElement("canvas"), f10 = g10.getContext("2d"), T10 = p10.width, w10 = p10.height;
          g10.width = T10, g10.height = w10, f10.drawImage(p10, 0, 0, T10, w10), URL.revokeObjectURL(h10), u10(g10);
        }, p10.onerror = () => {
          console.warn("Could not convert that SVG to an image.");
        }, p10.src = h10;
      });
      return yield new Promise((u10) => i10.toBlob((p10) => u10(p10), "image/" + t10, a10));
    });
  }
};
var v10 = he3;
l7(v10, "copyStringToClipboard", (e10) => {
  try {
    navigator.clipboard && navigator.clipboard.write([new ClipboardItem({ "text/plain": new Blob([e10], { type: "text/plain" }) })]);
  } catch (t10) {
    let n10 = document.createElement("textarea");
    n10.setAttribute("position", "fixed"), n10.setAttribute("top", "0"), n10.setAttribute("readonly", "true"), n10.setAttribute("contenteditable", "true"), n10.style.position = "fixed", n10.value = e10, document.body.appendChild(n10), n10.focus(), n10.select();
    try {
      let o10 = document.createRange();
      o10.selectNodeContents(n10);
      let s10 = window.getSelection();
      s10 && (s10.removeAllRanges(), s10.addRange(o10), n10.setSelectionRange(0, n10.value.length)), document.execCommand("copy");
    } catch (o10) {
    } finally {
      document.body.removeChild(n10);
    }
  }
}), l7(v10, "flattenShape", (e10, t10) => {
  var n10;
  return [t10, ...((n10 = t10.children) != null ? n10 : []).map((o10) => he3.getShape(e10, o10, e10.appState.currentPageId)).sort((o10, s10) => o10.childIndex - s10.childIndex).flatMap((o10) => he3.flattenShape(e10, o10))];
}), l7(v10, "flattenPage", (e10, t10) => Object.values(e10.document.pages[t10].shapes).sort((n10, o10) => n10.childIndex - o10.childIndex).reduce((n10, o10) => [...n10, ...he3.flattenShape(e10, o10)], [])), l7(v10, "getTopChildIndex", (e10, t10) => {
  let n10 = he3.getShapes(e10, t10);
  return n10.length === 0 ? 1 : n10.filter((o10) => o10.parentId === t10).sort((o10, s10) => s10.childIndex - o10.childIndex)[0].childIndex + 1;
}), l7(v10, "fixNewLines", /\r?\n|\r/g);
var Tce = (r10) => r10.room;
var Sd = function() {
  let e10 = me3(), t10 = e10.useStore(Tce), [n10, o10] = Re2.useState(false), s10 = Re2.useRef(0), a10 = Re2.useCallback(() => {
    o10(true), v10.copyStringToClipboard(window.location.href), clearTimeout(s10.current), s10.current = setTimeout(() => o10(false), 1200);
  }, []), d10 = Re2.useCallback(() => {
    o10(true);
    let u10 = window.location.href.split("/");
    u10[u10.length - 2] = "v", u10[u10.length - 1] = C3.lns(u10[u10.length - 1]), v10.copyStringToClipboard(u10.join("/")), clearTimeout(s10.current), s10.current = setTimeout(() => o10(false), 1200);
  }, []), i10 = Re2.useCallback(() => pe4(this, null, function* () {
    e10.isDirty ? e10.fileSystemHandle ? window.confirm("Do you want to save changes to your current project?") && (yield e10.saveProject()) : window.confirm("Do you want to save your current project?") && (yield e10.saveProject()) : e10.fileSystemHandle || window.confirm("Do you want to save your current project?") && (yield e10.saveProject());
  }), []), c10 = Re2.useCallback(() => pe4(this, null, function* () {
    var p10;
    let u10 = C3.deepClone(e10.document);
    e10.setIsLoading(true);
    try {
      if (e10.callbacks.onAssetUpload)
        for (let h10 in u10.assets) {
          let g10 = u10.assets[h10];
          if (g10.src.includes("base64")) {
            let f10 = yce(g10.src, ((p10 = g10.fileName) != null ? p10 : g10.type === "video") ? "image.png" : "image.mp4"), T10 = yield e10.callbacks.onAssetUpload(e10, f10, h10);
            T10 ? g10.src = T10 : g10.src = "";
          }
        }
      let m10 = yield fetch("/api/create", { method: "POST", mode: "no-cors", headers: { "Access-Control-Allow-Origin": "*", "Content-Type": "application/json" }, body: JSON.stringify({ roomId: C3.uniqueId(), pageId: e10.currentPageId, document: u10 }) }).then((h10) => h10.json());
      (m10 == null ? void 0 : m10.url) ? window.location.href = m10.url : v10.warn(m10 == null ? void 0 : m10.message);
    } catch (m10) {
      v10.warn(m10.message);
    }
    e10.setIsLoading(false);
  }), []);
  return Re2.createElement($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr" }, Re2.createElement(Rr, { id: "TD-MultiplayerMenuIcon", isActive: !!t10 }, Re2.createElement(pl, null)), Re2.createElement(Mt2, { variant: "menu", id: "TD-MultiplayerMenu", side: "bottom", align: "start", sideOffset: 4 }, Re2.createElement(xe3, { id: "TD-Multiplayer-CopyInviteLink", onClick: a10, disabled: !t10 }, Re2.createElement(message_default, { id: "copy.invite.link" }), Re2.createElement(ut2, null, n10 ? Re2.createElement(CheckIcon, null) : Re2.createElement(ClipboardIcon, null))), Re2.createElement(xe3, { id: "TD-Multiplayer-CopyReadOnlyLink", onClick: d10, disabled: !t10 }, Re2.createElement(message_default, { id: "copy.readonly.link" }), Re2.createElement(ut2, null, n10 ? Re2.createElement(CheckIcon, null) : Re2.createElement(ClipboardIcon, null))), Re2.createElement(Pe2, null), Re2.createElement(xe3, { id: "TD-Multiplayer-CreateMultiplayerProject", onClick: i10 }, Re2.createElement("a", { href: `${window.location.origin}/r` }, Re2.createElement(message_default, { id: "create.multiplayer.project" }))), Re2.createElement(xe3, { id: "TD-Multiplayer-CopyToMultiplayerProject", onClick: c10 }, Re2.createElement(message_default, { id: "copy.multiplayer.project" }))));
};
function yce(r10, e10) {
  var d10, i10;
  let t10 = r10.split(","), n10 = (i10 = (d10 = t10[0]) == null ? void 0 : d10.match(/:(.*?);/)) == null ? void 0 : i10[1], o10 = window.atob(t10[1]), s10 = o10.length, a10 = new Uint8Array(s10);
  for (; s10--; )
    a10[s10] = o10.charCodeAt(s10);
  return new File([a10], e10, { type: n10 });
}
var vce = (r10) => Object.keys(r10.document.pages).length > 1;
function Td({ page: r10, onOpen: e10, onClose: t10 }) {
  let n10 = me3(), o10 = useIntl(), [s10, a10] = ve2.useState(false), [d10, i10] = ve2.useState(r10.name || "Page"), c10 = n10.useStore(vce), u10 = ve2.useRef(null), p10 = ve2.useCallback(() => {
    a10(false);
  }, []), m10 = ve2.useCallback(() => {
    n10.duplicatePage(r10.id);
  }, [n10]), h10 = ve2.useCallback(() => {
    window.confirm("Are you sure you want to delete this page?") && n10.deletePage(r10.id);
  }, [n10]), g10 = ve2.useCallback((L10) => {
    if (a10(L10), L10) {
      e10 == null || e10();
      return;
    }
  }, [n10]);
  function f10(L10) {
    L10.stopPropagation();
  }
  let T10 = ve2.useRef(r10.name || "Page"), w10 = ve2.useRef(T10.current), b10 = ve2.useCallback((L10) => {
    let k10 = L10.target.value.trimStart();
    w10.current = k10, i10(k10);
  }, []), y10 = ve2.useCallback((L10) => {
    switch (L10.key) {
      case "Enter": {
        w10.current === T10.current || (T10.current = w10.current, n10.renamePage(r10.id, w10.current.trim())), a10(false);
        break;
      }
      case "Escape": {
        if (w10.current === T10.current) {
          a10(false);
          return;
        }
        w10.current = T10.current, i10(T10.current), requestAnimationFrame(() => {
          let k10 = u10.current;
          k10 && (k10.focus(), k10.setSelectionRange(0, k10.value.length));
        });
        break;
      }
    }
  }, []), R10 = ve2.useRef(false);
  ve2.useEffect(() => (s10 ? (R10.current = true, T10.current = r10.name || "Page", w10.current = T10.current, requestAnimationFrame(() => {
    let L10 = u10.current;
    L10 && (L10.focus(), L10.setSelectionRange(0, L10.value.length));
  })) : R10.current && (t10 == null || t10()), () => {
    w10.current !== T10.current && (T10.current = w10.current, n10.renamePage(r10.id, w10.current));
  }), [s10]);
  let U10 = Lt2();
  return ve2.createElement($905f4ae918aab1aa$export$be92b6f5f03c0fe9, { open: s10, onOpenChange: g10 }, ve2.createElement($905f4ae918aab1aa$export$41fb9f06171c75f4, { asChild: true, "data-shy": "true" }, ve2.createElement(go, { bp: Qe2 }, ve2.createElement(ut2, null, ve2.createElement(MixerVerticalIcon, null)))), ve2.createElement($905f4ae918aab1aa$export$602eac185826482c, { container: U10.current }, ve2.createElement(Cce, { onPointerDown: p10 }), ve2.createElement(Ice, { dir: "ltr", onKeyDown: f10, onKeyUp: f10 }, ve2.createElement(Mr, { ref: u10, placeholder: o10.formatMessage({ id: "page.name" }), value: d10, onChange: b10, onKeyDown: y10, icon: ve2.createElement(Pencil1Icon, null) }), ve2.createElement(Pe2, null), ve2.createElement(bd, { onSelect: m10 }, ve2.createElement(message_default, { id: "duplicate" })), ve2.createElement(bd, { disabled: !c10, onSelect: h10 }, ve2.createElement(message_default, { id: "delete" })), ve2.createElement(Pe2, null), ve2.createElement($905f4ae918aab1aa$export$848c9b7ead0df967, { asChild: true }, ve2.createElement(je2, null, ve2.createElement(message_default, { id: "cancel" }))))));
}
var Ice = H5($905f4ae918aab1aa$export$7c6e2c02157bb7d2, { position: "absolute", top: "50%", left: "50%", transform: "translate(-50%, -50%)", minWidth: 240, maxWidth: "fit-content", maxHeight: "85vh", marginTop: "-5vh", pointerEvents: "all", backgroundColor: "$panel", padding: "$1", borderRadius: "$2", font: "$ui", zIndex: 999999, "&:focus": { outline: "none" } });
var Cce = H5($905f4ae918aab1aa$export$c6fdb837b070b4ff, { backgroundColor: "rgba(0, 0, 0, .15)", position: "absolute", pointerEvents: "all", inset: 0, zIndex: 999998 });
function bd(t10) {
  var n10 = t10, { onSelect: r10 } = n10, e10 = Je2(n10, ["onSelect"]);
  return ve2.createElement($905f4ae918aab1aa$export$e19cd5f9376f8cee, { asChild: true, onClick: r10, onSelect: r10 }, ve2.createElement(je2, S4({}, e10)));
}
var Ece = (r10) => Object.values(r10.document.pages).sort((e10, t10) => (e10.childIndex || 0) - (t10.childIndex || 0));
var Bce = (r10) => r10.document.pages[r10.appState.currentPageId].name;
var Rce = (r10) => r10.document.pages[r10.appState.currentPageId].id;
function wd() {
  let r10 = me3(), e10 = useIntl(), t10 = we2.useRef(false), [n10, o10] = we2.useState(false);
  we2.useEffect(() => {
    t10.current !== n10 && (t10.current = n10);
  }, [n10]);
  let s10 = we2.useCallback(() => {
    o10(false);
  }, [o10]), a10 = we2.useCallback((i10) => {
    t10.current !== i10 && o10(i10);
  }, [o10]), d10 = r10.useStore(Bce);
  return we2.createElement($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr", open: n10, onOpenChange: a10 }, we2.createElement($d08ef79370b62062$export$41fb9f06171c75f4, { dir: "ltr", asChild: true, id: "TD-Page" }, we2.createElement(ke, { variant: "text" }, d10 || e10.formatMessage({ id: "page" }))), we2.createElement(Mt2, { variant: "menu", align: "start", sideOffset: 4 }, n10 && we2.createElement(Ace, { onClose: s10 })));
}
function Ace({ onClose: r10 }) {
  let e10 = me3(), t10 = useIntl(), n10 = e10.useStore(Ece), o10 = e10.useStore(Rce), s10 = t10.formatMessage({ id: "page" }), a10 = we2.useCallback(() => {
    let f10 = s10 + " " + (Object.keys(e10.document.pages).length + 1);
    e10.createPage(void 0, f10);
  }, [e10]), d10 = we2.useCallback((f10) => {
    r10(), e10.changePage(f10);
  }, [e10]), [i10, c10] = we2.useState(null), [u10, p10] = we2.useState(null), m10 = we2.useCallback((f10) => {
    c10(f10.currentTarget.id), p10(n10.findIndex((T10) => T10.id === f10.currentTarget.id)), f10.dataTransfer.effectAllowed = "move";
  }, []), h10 = we2.useCallback((f10) => {
    f10.preventDefault();
    let T10 = n10.findIndex((y10) => y10.id === f10.currentTarget.id), w10 = f10.currentTarget.getBoundingClientRect();
    T10 = (f10.clientY - w10.top) / w10.height < 0.5 ? T10 : T10 + 1, p10(T10);
  }, [i10, n10]), g10 = we2.useCallback(() => {
    i10 !== null && u10 !== null && e10.movePage(i10, u10), c10(null), p10(null);
  }, [i10, u10]);
  return we2.createElement(we2.Fragment, null, we2.createElement($d08ef79370b62062$export$a98f0dcb43a68a25, { dir: "ltr", value: o10, onValueChange: d10 }, n10.map((f10, T10) => we2.createElement(Lce, { key: f10.id, isDropAbove: T10 === u10 && T10 === 0, isDropBelow: u10 !== null && T10 === u10 - 1 }, we2.createElement($d08ef79370b62062$export$371ab307eab489c0, { title: f10.name || s10, value: f10.id, key: f10.id, id: f10.id, asChild: true, onDragOver: h10, onDragStart: m10, onDrop: g10, draggable: true }, we2.createElement(Hce, null, we2.createElement("span", { id: f10.id }, f10.name || s10), we2.createElement($d08ef79370b62062$export$c3468e2714d175fa, null, we2.createElement(ut2, null, we2.createElement(CheckIcon, null))))), we2.createElement(Td, { page: f10, onClose: r10 })))), we2.createElement(Pe2, null), we2.createElement($d08ef79370b62062$export$6d08773d2e66f8f2, { onSelect: a10, asChild: true }, we2.createElement(je2, null, we2.createElement("span", null, we2.createElement(message_default, { id: "create.page" })), we2.createElement(ut2, null, we2.createElement(PlusIcon, null)))));
}
var Lce = H5("div", { position: "relative", display: "grid", gridTemplateColumns: "1fr auto", gridAutoFlow: "column", margin: 0, '& > *[data-shy="true"]': { opacity: 0 }, '&:hover > *[data-shy="true"]': { opacity: 1 }, variants: { isDropAbove: { true: { "&::after": { content: "", display: "block", position: "absolute", top: 0, width: "100%", height: "1px", backgroundColor: "$selected", zIndex: 999, pointerEvents: "none" } } }, isDropBelow: { true: { "&::after": { content: "", display: "block", position: "absolute", width: "100%", height: "1px", top: "100%", backgroundColor: "$selected", zIndex: 999, pointerEvents: "none" } } } } });
var Hce = H5(je2, { minWidth: 128 });
var Vce = (r10) => r10.appState.currentStyle;
var $ce = (r10) => r10.document.pageStates[r10.appState.currentPageId].selectedIds;
var Nce = Object.keys(vo);
var xd = { ["draw"]: ce4.createElement($a, null), ["solid"]: ce4.createElement(Na, null), ["dashed"]: ce4.createElement(Ga, null), ["dotted"]: ce4.createElement(Va, null) };
var Wce = { ["small"]: ce4.createElement(Ua, null), ["medium"]: ce4.createElement(Ka, null), ["large"]: ce4.createElement(_a2, null) };
var Uce = { ["start"]: ce4.createElement(TextAlignLeftIcon, null), ["middle"]: ce4.createElement(TextAlignCenterIcon, null), ["end"]: ce4.createElement(TextAlignRightIcon, null), ["justify"]: ce4.createElement(TextAlignJustifyIcon, null) };
var Kce = (r10) => r10.settings.isDarkMode ? "dark" : "light";
var _ce = (r10) => r10.settings.keepStyleMenuOpen;
var Yce = (r10) => {
  let { activeTool: e10, currentPageId: t10 } = r10.appState;
  switch (e10) {
    case "select": {
      let n10 = r10.document.pages[t10], o10 = false, s10 = false;
      for (let a10 of r10.document.pageStates[t10].selectedIds)
        "text" in n10.shapes[a10] && (o10 = true), "label" in n10.shapes[a10] && (s10 = true);
      return o10 ? "text" : s10 ? "label" : "";
    }
    case "text":
      return "text";
    case "rectangle":
      return "label";
    case "ellipse":
      return "label";
    case "triangle":
      return "label";
    case "arrow":
      return "label";
    case "line":
      return "label";
  }
  return false;
};
var kd = ce4.memo(function() {
  let e10 = me3(), t10 = useIntl(), n10 = e10.useStore(Kce), o10 = e10.useStore(_ce), s10 = e10.useStore(Yce), a10 = e10.useStore(Vce), d10 = e10.useStore($ce), [i10, c10] = ce4.useState(a10), u10 = ce4.useRef(a10);
  ce4.useEffect(() => {
    let { appState: { currentStyle: b10 }, page: y10, selectedIds: R10 } = e10, U10 = {};
    if (R10.length <= 0)
      U10 = b10;
    else {
      let L10 = /* @__PURE__ */ new Set([]);
      e10.selectedIds.map((k10) => y10.shapes[k10]).forEach((k10) => {
        Nce.forEach((I10) => {
          if (!L10.has(I10))
            if (U10[I10] === void 0)
              U10[I10] = k10.style[I10];
            else {
              if (U10[I10] === k10.style[I10])
                return;
              U10[I10] = k10.style[I10], L10.add(I10);
            }
        });
      });
    }
    JSON.stringify(U10) !== JSON.stringify(u10.current) && (u10.current = U10, c10(U10));
  }, [a10, d10]);
  let p10 = ce4.useCallback((b10) => {
    e10.setSetting("keepStyleMenuOpen", b10);
  }, []), m10 = ce4.useCallback((b10) => {
    e10.style({ isFilled: b10 });
  }, []), h10 = ce4.useCallback((b10) => {
    e10.style({ dash: b10 });
  }, []), g10 = ce4.useCallback((b10) => {
    e10.style({ size: b10 });
  }, []), f10 = ce4.useCallback((b10) => {
    e10.style({ font: b10 });
  }, []), T10 = ce4.useCallback((b10) => {
    e10.style({ textAlign: b10 });
  }, []), w10 = ce4.useCallback((b10) => {
    e10.setMenuOpen(b10);
  }, [e10]);
  return ce4.createElement($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr", onOpenChange: w10, open: o10 ? true : void 0, modal: false }, ce4.createElement($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true, id: "TD-Styles" }, ce4.createElement(ke, { "aria-label": t10.formatMessage({ id: "styles" }), variant: "text" }, ce4.createElement(message_default, { id: "styles" }), ce4.createElement(Xce, { style: { color: ko[n10][i10.color] } }, i10.isFilled && ce4.createElement(Is, { size: 16, stroke: "none", fill: Gr[n10][i10.color] }), xd[i10.dash]))), ce4.createElement(Mt2, { id: "TD-StylesMenu", side: "bottom", align: "end", sideOffset: 4, alignOffset: 4 }, ce4.createElement(_o, { variant: "tall", id: "TD-Styles-Color-Container" }, ce4.createElement("span", null, ce4.createElement(message_default, { id: "style.menu.color" })), ce4.createElement(Zce, null, Object.keys(ko.light).map((b10) => ce4.createElement($d08ef79370b62062$export$6d08773d2e66f8f2, { key: b10, onSelect: He2, asChild: true, id: `TD-Styles-Color-Swatch-${b10}` }, ce4.createElement(ke, { variant: "icon", isActive: i10.color === b10, onClick: () => e10.style({ color: b10 }), "aria-label": t10.formatMessage({ id: b10 }) }, ce4.createElement(Is, { size: 18, strokeWidth: 2.5, fill: i10.isFilled ? Gr[n10][b10] : "transparent", stroke: ko.light[b10] })))))), ce4.createElement(Pt2, { variant: "styleMenu", checked: !!i10.isFilled, onCheckedChange: m10, id: "TD-Styles-Fill" }, ce4.createElement(message_default, { id: "style.menu.fill" })), ce4.createElement(_o, { id: "TD-Styles-Dash-Container" }, ce4.createElement(message_default, { id: "style.menu.dash" }), ce4.createElement(Xr, { dir: "ltr", value: i10.dash, onValueChange: h10 }, Object.values(yn2).map((b10) => ce4.createElement(jo, { key: b10, isActive: b10 === i10.dash, value: b10, onSelect: He2, bp: Qe2, id: `TD-Styles-Dash-${b10}`, "aria-label": t10.formatMessage({ id: b10 }) }, xd[b10])))), ce4.createElement(_o, { id: "TD-Styles-Size-Container" }, ce4.createElement(message_default, { id: "style.menu.size" }), ce4.createElement(Xr, { dir: "ltr", value: i10.size, onValueChange: g10 }, Object.values(kr).map((b10) => ce4.createElement(jo, { key: b10, isActive: b10 === i10.size, value: b10, onSelect: He2, bp: Qe2, id: `TD-Styles-Dash-${b10}`, "aria-label": t10.formatMessage({ id: b10 }) }, Wce[b10])))), (s10 === "text" || s10 === "label") && ce4.createElement(ce4.Fragment, null, ce4.createElement(Pe2, null), ce4.createElement(_o, { id: "TD-Styles-Font-Container" }, ce4.createElement(message_default, { id: "style.menu.font" }), ce4.createElement(Xr, { dir: "ltr", value: i10.font, onValueChange: f10 }, Object.values(Oo).map((b10) => ce4.createElement(jo, { key: b10, isActive: b10 === i10.font, value: b10, onSelect: He2, bp: Qe2, id: `TD-Styles-Font-${b10}` }, ce4.createElement(qce, { fontStyle: b10 }, "Aa"))))), s10 === "text" && ce4.createElement(_o, { id: "TD-Styles-Align-Container" }, ce4.createElement(message_default, { id: "style.menu.align" }), ce4.createElement(Xr, { dir: "ltr", value: i10.textAlign, onValueChange: T10 }, Object.values(Gt).map((b10) => ce4.createElement(jo, { key: b10, isActive: b10 === i10.textAlign, value: b10, onSelect: He2, bp: Qe2, id: `TD-Styles-Align-${b10}` }, Uce[b10]))))), ce4.createElement(Pe2, null), ce4.createElement(Pt2, { variant: "styleMenu", checked: o10, onCheckedChange: p10, id: "TD-Styles-Keep-Open" }, ce4.createElement(message_default, { id: "style.menu.keep.open" }))));
});
var Zce = H5("div", { display: "grid", gridTemplateColumns: "repeat(4, auto)", gap: 0 });
var _o = H5("div", { position: "relative", width: "100%", background: "none", border: "none", cursor: "pointer", minHeight: "32px", outline: "none", color: "$text", fontFamily: "$ui", fontWeight: 400, fontSize: "$1", padding: "$2 0 $2 $3", borderRadius: 4, userSelect: "none", WebkitUserSelect: "none", margin: 0, display: "flex", gap: "$3", flexDirection: "row", alignItems: "center", justifyContent: "space-between", variants: { variant: { tall: { alignItems: "flex-start", padding: "0 0 0 $3", "& > span": { paddingTop: "$4" } } } } });
var Xr = H5($d08ef79370b62062$export$3323ad73d55f587e, { display: "flex", flexDirection: "row", gap: "$1" });
var Xce = H5("div", { display: "grid", "& > *": { gridColumn: 1, gridRow: 1 } });
var qce = H5("div", { width: 32, height: 32, display: "flex", alignItems: "center", justifyContent: "center", fontSize: "$3", variants: { fontStyle: { ["script"]: { fontFamily: "Caveat Brush" }, ["sans"]: { fontFamily: "Recursive" }, ["serif"]: { fontFamily: "Georgia" }, ["mono"]: { fontFamily: "Recursive Mono" } } } });
var Jce = (r10) => r10.document.pageStates[r10.appState.currentPageId].camera.zoom;
var vd = function() {
  let e10 = me3(), t10 = e10.useStore(Jce);
  return Ct2.createElement($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr" }, Ct2.createElement($d08ef79370b62062$export$41fb9f06171c75f4, { dir: "ltr", asChild: true, id: "TD-Zoom" }, Ct2.createElement(Qce, { onDoubleClick: e10.resetZoom, variant: "text" }, Math.round(t10 * 100), "%")), Ct2.createElement(Mt2, { align: "end" }, Ct2.createElement(xe3, { onSelect: He2, onClick: e10.zoomIn, kbd: "#+", id: "TD-Zoom-Zoom_In" }, Ct2.createElement(message_default, { id: "zoom.in" })), Ct2.createElement(xe3, { onSelect: He2, onClick: e10.zoomOut, kbd: "#\u2212", id: "TD-Zoom-Zoom_Out" }, Ct2.createElement(message_default, { id: "zoom.out" })), Ct2.createElement(xe3, { onSelect: He2, onClick: e10.resetZoom, kbd: "\u21E70", id: "TD-Zoom-Zoom_To_100%" }, Ct2.createElement(message_default, { id: "zoom.to" }), " 100%"), Ct2.createElement(xe3, { onSelect: He2, onClick: e10.zoomToFit, kbd: "\u21E71", id: "TD-Zoom-To_Fit" }, Ct2.createElement(message_default, { id: "zoom.to.fit" })), Ct2.createElement(xe3, { onSelect: He2, onClick: e10.zoomToSelection, kbd: "\u21E72", id: "TD-Zoom-To_Selection" }, Ct2.createElement(message_default, { id: "zoom.to.selection" }))));
};
var Qce = H5(ke, { minWidth: 56 });
function tpe({ readOnly: r10, showPages: e10, showMenu: t10, showStyles: n10, showZoom: o10, showMultiplayerMenu: s10 }) {
  let a10 = me3(), d10 = useIntl();
  return at2.createElement(npe, null, (t10 || e10) && at2.createElement(no, { side: "left", id: "TD-MenuPanel" }, t10 && at2.createElement(cl, { readOnly: r10 }), s10 && at2.createElement(Sd, null), e10 && at2.createElement(wd, null)), at2.createElement(ope, null), (n10 || o10) && at2.createElement(no, { side: "right" }, a10.readOnly ? at2.createElement(rpe, null, "Read Only") : at2.createElement(at2.Fragment, null, at2.createElement(Xt2, { kbd: "#Z", label: d10.formatMessage({ id: "undo" }), onClick: a10.undo, id: "TD-TopPanel-Undo", "aria-label": d10.formatMessage({ id: "undo" }) }, at2.createElement(Bs, null)), at2.createElement(Xt2, { kbd: "#\u21E7Z", label: d10.formatMessage({ id: "redo" }), onClick: a10.redo, id: "TD-TopPanel-Redo", "aria-label": d10.formatMessage({ id: "redo" }) }, at2.createElement(Bs, { flipHorizontal: true }))), o10 && at2.createElement(vd, null), n10 && !r10 && at2.createElement(kd, null)));
}
var npe = H5("div", { width: "100%", position: "absolute", top: 0, left: 0, right: 0, display: "flex", flexDirection: "row", pointerEvents: "none", "& > *": { pointerEvents: "all" } });
var ope = H5("div", { flexGrow: 2, pointerEvents: "none" });
var rpe = H5("div", { width: "100%", display: "flex", alignItems: "center", justifyContent: "center", fontFamily: "$ui", fontSize: "$1", paddingLeft: "$4", paddingRight: "$1", userSelect: "none", WebkitUserSelect: "none" });
var Id = at2.memo(tpe);
function Cd(r10) {
  import_react93.default.useEffect(() => {
    let e10 = false, t10 = false, n10 = r10.current;
    if (!n10)
      return;
    let o10 = (i10) => {
      i10.key === " " && !t10 && (t10 = true, e10 ? n10.setAttribute("style", "cursor: grabbing !important") : n10.setAttribute("style", "cursor: grab !important"));
    }, s10 = (i10) => {
      i10.key === " " && (t10 = false, n10.setAttribute("style", "cursor: initial"));
    }, a10 = (i10) => {
      e10 = true, i10.button === 1 && n10.setAttribute("style", "cursor: grabbing !important"), i10.button === 0 && t10 && n10.setAttribute("style", "cursor: grabbing !important");
    }, d10 = () => {
      e10 = false, t10 ? n10.setAttribute("style", "cursor: grab !important") : n10.setAttribute("style", "cursor: initial");
    };
    return n10.addEventListener("keydown", o10), n10.addEventListener("keyup", s10), n10.addEventListener("pointerdown", a10), n10.addEventListener("pointerup", d10), () => {
      n10.removeEventListener("keydown", o10), n10.removeEventListener("keyup", s10), n10.removeEventListener("pointerdown", a10), n10.removeEventListener("pointerup", d10);
    };
  }, [r10.current]);
}
var Dd = "tldraw_clipboard";
function Pd() {
  return pe4(this, null, function* () {
    return get(Dd);
  });
}
function Md(r10) {
  return pe4(this, null, function* () {
    return set(Dd, r10);
  });
}
var yi = class {
  constructor(e10, t10, n10, o10) {
    l7(this, "_idbId");
    l7(this, "initialState");
    l7(this, "store");
    l7(this, "pointer", -1);
    l7(this, "_state");
    l7(this, "_status", "loading");
    l7(this, "stack", []);
    l7(this, "_snapshot");
    l7(this, "useStore");
    l7(this, "ready");
    l7(this, "isPaused", false);
    l7(this, "persist", (e11, t11) => {
      if (this._status === "ready" && (this.onPersist && this.onPersist(this._state, e11, t11), this._idbId))
        return set(this._idbId, this._state).catch((n11) => console.error(n11));
    });
    l7(this, "applyPatch", (e11, t11) => {
      let n11 = this._state, o11 = C3.deepMerge(this._state, e11), s10 = this.cleanup(o11, n11, e11, t11);
      return this.onStateWillChange && this.onStateWillChange(s10, t11), this._state = s10, this.store.setState(this._state, true), this.onStateDidChange && this.onStateDidChange(this._state, t11), this;
    });
    l7(this, "migrate", (e11) => e11);
    l7(this, "cleanup", (e11, t11, n11, o11) => e11);
    l7(this, "onStateWillChange");
    l7(this, "onStateDidChange");
    l7(this, "patchState", (e11, t11) => (this.applyPatch(e11, t11), this.onPatch && this.onPatch(this._state, e11, t11), this));
    l7(this, "replaceState", (e11, t11) => {
      let n11 = this.cleanup(e11, this._state, e11, t11);
      return this.onStateWillChange && this.onStateWillChange(n11, "replace"), this._state = n11, this.store.setState(this._state, true), this.onStateDidChange && this.onStateDidChange(this._state, "replace"), this;
    });
    l7(this, "setState", (e11, t11 = e11.id) => (this.pointer < this.stack.length - 1 && (this.stack = this.stack.slice(0, this.pointer + 1)), this.stack.push(x5(S4({}, e11), { id: t11 })), this.pointer = this.stack.length - 1, this.applyPatch(e11.after, t11), this.onCommand && this.onCommand(this._state, e11, t11), this.persist(e11.after, t11), this));
    l7(this, "onReady");
    l7(this, "onPatch");
    l7(this, "onCommand");
    l7(this, "onPersist");
    l7(this, "onReplace");
    l7(this, "onReset");
    l7(this, "onResetHistory");
    l7(this, "onUndo");
    l7(this, "onRedo");
    l7(this, "reset", () => (this.onStateWillChange && this.onStateWillChange(this.initialState, "reset"), this._state = this.initialState, this.store.setState(this._state, true), this.resetHistory(), this.persist({}, "reset"), this.onStateDidChange && this.onStateDidChange(this._state, "reset"), this.onReset && this.onReset(this._state), this));
    l7(this, "replaceHistory", (e11, t11 = e11.length - 1) => (this.stack = e11, this.pointer = t11, this.onReplace && this.onReplace(this._state), this));
    l7(this, "resetHistory", () => (this.stack = [], this.pointer = -1, this.onResetHistory && this.onResetHistory(this._state), this));
    l7(this, "undo", () => {
      if (!this.isPaused) {
        if (!this.canUndo)
          return this;
        let e11 = this.stack[this.pointer];
        this.pointer--, this.applyPatch(e11.before, "undo"), this.persist(e11.before, "undo");
      }
      return this.onUndo && this.onUndo(this._state), this;
    });
    l7(this, "redo", () => {
      if (!this.isPaused) {
        if (!this.canRedo)
          return this;
        this.pointer++;
        let e11 = this.stack[this.pointer];
        this.applyPatch(e11.after, "redo"), this.persist(e11.after, "undo");
      }
      return this.onRedo && this.onRedo(this._state), this;
    });
    l7(this, "setSnapshot", () => (this._snapshot = S4({}, this._state), this));
    l7(this, "forceUpdate", () => {
      this.store.setState(this._state, true);
    });
    this._idbId = t10, this._state = St2(e10), this._snapshot = St2(e10), this.initialState = St2(e10), this.store = vanilla(() => this._state), this.useStore = react(this.store), this.ready = new Promise((s10) => {
      let a10 = "none";
      this._idbId ? (a10 = "restored", get(this._idbId).then((d10) => pe4(this, null, function* () {
        if (d10) {
          let i10 = d10;
          if (n10) {
            let u10 = yield get(t10 + "_version");
            u10 && u10 < n10 && (i10 = o10 ? o10(d10, e10, u10) : e10, a10 = "migrated");
          }
          yield set(t10 + "_version", n10 || -1);
          let c10 = this._state.appState.isEmptyCanvas;
          i10 = this.migrate(i10), this._state = St2(i10), this._snapshot = St2(i10), this._state.appState.isEmptyCanvas = c10, this.store.setState(this._state, true);
        } else
          yield set(t10 + "_version", n10 || -1);
        this._status = "ready", s10(a10);
      })).catch((d10) => console.error(d10))) : (this._status = "ready", s10(a10));
    }).then((s10) => (this.onReady && this.onReady(s10), s10));
  }
  pause() {
    this.isPaused = true;
  }
  resume() {
    this.isPaused = false;
  }
  get canUndo() {
    return this.pointer > -1;
  }
  get canRedo() {
    return this.pointer < this.stack.length - 1;
  }
  get state() {
    return this._state;
  }
  get status() {
    return this._status;
  }
  get snapshot() {
    return this._snapshot;
  }
};
function Bd(r10, e10, t10) {
  let { currentPageId: n10 } = r10, o10 = e10.map((m10) => r10.getShape(m10)), s10 = o10.map((m10) => ({ id: m10.id, point: [...m10.point], bounds: v10.getBounds(m10) })), a10 = C3.getCommonBounds(s10.map(({ bounds: m10 }) => m10)), d10 = a10.minX + a10.width / 2, i10 = a10.minY + a10.height / 2, c10 = Object.fromEntries(s10.map(({ id: m10, point: h10, bounds: g10 }) => [m10, { prev: h10, next: { ["top"]: [h10[0], a10.minY], ["centerVertical"]: [h10[0], i10 - g10.height / 2], ["bottom"]: [h10[0], a10.maxY - g10.height], ["left"]: [a10.minX, h10[1]], ["centerHorizontal"]: [d10 - g10.width / 2, h10[1]], ["right"]: [a10.maxX - g10.width, h10[1]] }[t10] }])), { before: u10, after: p10 } = v10.mutateShapes(r10.state, e10, (m10) => c10[m10.id] ? { point: c10[m10.id].next } : m10, n10, false);
  return o10.forEach((m10) => {
    if (m10.type === "group") {
      let h10 = e.sub(p10[m10.id].point, u10[m10.id].point);
      m10.children.forEach((g10) => {
        let f10 = r10.getShape(g10);
        u10[f10.id] = { point: f10.point }, p10[f10.id] = { point: e.add(f10.point, h10) };
      }), delete u10[m10.id], delete p10[m10.id];
    }
  }), { id: "align", before: { document: { pages: { [n10]: { shapes: u10 } }, pageStates: { [n10]: { selectedIds: e10 } } } }, after: { document: { pages: { [n10]: { shapes: p10 } }, pageStates: { [n10]: { selectedIds: e10 } } } } };
}
function Rd(r10, e10) {
  return { id: "change_page", before: { appState: { currentPageId: r10.currentPageId } }, after: { appState: { currentPageId: e10 } } };
}
function Ad(r10, e10) {
  var o10;
  let t10 = r10, n10 = new Set(e10);
  for (; n10.has(t10); )
    t10 = ((o10 = /^.*(\d+)$/.exec(t10)) == null ? void 0 : o10[1]) ? t10.replace(/(\d+)(?=\D?)$/, (s10) => (+s10 + 1).toString()) : `${t10} 1`;
  return t10;
}
function Ld(r10, e10, t10) {
  let n10 = { shapes: {}, bindings: {} }, o10 = { shapes: {}, bindings: {} }, s10 = [], a10 = /* @__PURE__ */ new Set(), d10 = /* @__PURE__ */ new Set();
  e10.filter((c10) => !v10.getShape(r10, c10, t10).isLocked).forEach((c10) => {
    a10.add(c10);
    let u10 = v10.getShape(r10, c10, t10);
    n10.shapes[c10] = u10, o10.shapes[c10] = void 0, u10.children !== void 0 && u10.children.forEach((p10) => {
      a10.add(p10);
      let m10 = v10.getShape(r10, p10, t10);
      n10.shapes[p10] = m10, o10.shapes[p10] = void 0;
    }), u10.parentId !== t10 && s10.push(v10.getShape(r10, u10.parentId, t10)), u10.assetId && d10.add(u10.assetId);
  }), s10.forEach((c10) => {
    var u10;
    e10.includes(c10.id) || (a10.add(c10.id), n10.shapes[c10.id] = { children: c10.children }, o10.shapes[c10.id] = { children: c10.children.filter((p10) => !e10.includes(p10)) }, ((u10 = o10.shapes[c10.id]) == null ? void 0 : u10.children.length) === 0 && (o10.shapes[c10.id] = void 0, n10.shapes[c10.id] = v10.getShape(r10, c10.id, t10)));
  });
  let i10 = v10.getPage(r10, t10);
  return Object.values(i10.bindings).filter((c10) => a10.has(c10.fromId) || a10.has(c10.toId)).forEach((c10) => {
    for (let u10 of [c10.toId, c10.fromId])
      if (o10.shapes[u10] === void 0) {
        n10.bindings[c10.id] = c10, o10.bindings[c10.id] = void 0;
        let p10 = i10.shapes[u10];
        p10 && p10.handles && Object.values(p10.handles).filter((m10) => m10.bindingId === c10.id).forEach((m10) => {
          var h10, g10, f10, T10, w10, b10;
          n10.shapes[u10] = x5(S4({}, n10.shapes[u10]), { handles: x5(S4({}, (h10 = n10.shapes[u10]) == null ? void 0 : h10.handles), { [m10.id]: x5(S4({}, (f10 = (g10 = n10.shapes[u10]) == null ? void 0 : g10.handles) == null ? void 0 : f10[m10.id]), { bindingId: c10.id }) }) }), a10.has(u10) || (o10.shapes[u10] = x5(S4({}, o10.shapes[u10]), { handles: x5(S4({}, (T10 = o10.shapes[u10]) == null ? void 0 : T10.handles), { [m10.id]: x5(S4({}, (b10 = (w10 = o10.shapes[u10]) == null ? void 0 : w10.handles) == null ? void 0 : b10[m10.id]), { bindingId: void 0 }) }) }));
        });
      }
  }), Object.values(r10.document.pages).flatMap((c10) => Object.values(c10.shapes)).forEach((c10) => {
    "assetId" in c10 && c10.assetId && !a10.has(c10.id) && d10.delete(c10.assetId);
  }), { before: n10, after: o10, assetsToRemove: Array.from(d10) };
}
function Hd(r10, e10, t10 = C3.uniqueId(), n10 = "Page") {
  let { currentPageId: o10 } = r10, s10 = Object.values(r10.state.document.pages).sort((u10, p10) => {
    var m10, h10;
    return ((m10 = u10.childIndex) != null ? m10 : 0) - ((h10 = p10.childIndex) != null ? h10 : 0);
  }), a10 = s10[s10.length - 1], d10 = (a10 == null ? void 0 : a10.childIndex) ? (a10 == null ? void 0 : a10.childIndex) + 1 : 1, i10 = { id: t10, name: Ad(n10, s10.map((u10) => {
    var p10;
    return (p10 = u10.name) != null ? p10 : "";
  })), childIndex: d10, shapes: {}, bindings: {} }, c10 = { id: t10, selectedIds: [], camera: { point: e10, zoom: 1 }, editingId: void 0, bindingId: void 0, hoveredId: void 0, pointedId: void 0 };
  return { id: "create_page", before: { appState: { currentPageId: o10 }, document: { pages: { [t10]: void 0 }, pageStates: { [t10]: void 0 } } }, after: { appState: { currentPageId: i10.id }, document: { pages: { [t10]: i10 }, pageStates: { [t10]: c10 } } } };
}
function wi(r10, e10, t10 = []) {
  let { currentPageId: n10 } = r10, o10 = {}, s10 = {};
  e10.forEach((i10) => {
    o10[i10.id] = void 0, s10[i10.id] = i10;
  });
  let a10 = {}, d10 = {};
  return t10.forEach((i10) => {
    a10[i10.id] = void 0, d10[i10.id] = i10;
  }), { id: "create", before: { document: { pages: { [n10]: { shapes: o10, bindings: a10 } }, pageStates: { [n10]: { selectedIds: [...r10.selectedIds] } } } }, after: { document: { pages: { [n10]: { shapes: s10, bindings: d10 } }, pageStates: { [n10]: { selectedIds: e10.map((i10) => i10.id) } } } } };
}
function zd(r10, e10) {
  let { currentPageId: t10, document: { pages: n10, pageStates: o10 } } = r10, s10 = Object.values(n10).sort((i10, c10) => (i10.childIndex || 0) - (c10.childIndex || 0)), a10 = s10.findIndex((i10) => i10.id === e10), d10;
  return e10 === t10 ? a10 === s10.length - 1 ? d10 = s10[s10.length - 2].id : d10 = s10[a10 + 1].id : d10 = t10, { id: "delete_page", before: { appState: { currentPageId: e10 }, document: { pages: { [e10]: S4({}, n10[e10]) }, pageStates: { [e10]: S4({}, o10[e10]) } } }, after: { appState: { currentPageId: d10 }, document: { pages: { [e10]: void 0 }, pageStates: { [e10]: void 0 } } } };
}
var hpe = (r10, e10) => {
  let t10 = S4({}, r10);
  return e10.forEach((n10) => t10[n10] = void 0), t10;
};
function xi(r10, e10, t10 = r10.currentPageId) {
  let { pageState: n10, selectedIds: o10, document: { assets: s10 } } = r10, { before: a10, after: d10, assetsToRemove: i10 } = Ld(r10.state, e10, t10), c10 = hpe(s10, i10);
  return { id: "delete", before: { document: { assets: s10, pages: { [t10]: a10 }, pageStates: { [t10]: { selectedIds: [...r10.selectedIds] } } } }, after: { document: { assets: c10, pages: { [t10]: d10 }, pageStates: { [t10]: { selectedIds: o10.filter((u10) => !e10.includes(u10)), hoveredId: n10.hoveredId && e10.includes(n10.hoveredId) ? void 0 : n10.hoveredId } } } } };
}
function Fd(r10, e10, t10) {
  let { currentPageId: n10 } = r10, o10 = e10.map((i10) => r10.getShape(i10)), s10 = Object.fromEntries(gpe(o10, t10).map((i10) => [i10.id, i10])), { before: a10, after: d10 } = v10.mutateShapes(r10.state, e10.filter((i10) => s10[i10] !== void 0), (i10) => {
    var c10;
    return { point: (c10 = s10[i10.id]) == null ? void 0 : c10.next };
  }, n10);
  return o10.forEach((i10) => {
    if (i10.type === "group") {
      let c10 = p.sub(d10[i10.id].point, a10[i10.id].point);
      i10.children.forEach((u10) => {
        let p10 = r10.getShape(u10);
        a10[p10.id] = { point: p10.point }, d10[p10.id] = { point: p.add(p10.point, c10) };
      }), delete a10[i10.id], delete d10[i10.id];
    }
  }), { id: "distribute", before: { document: { pages: { [n10]: { shapes: a10 } }, pageStates: { [n10]: { selectedIds: e10 } } } }, after: { document: { pages: { [n10]: { shapes: d10 } }, pageStates: { [n10]: { selectedIds: e10 } } } } };
}
function gpe(r10, e10) {
  let t10 = r10.map((a10) => {
    let d10 = v10.getShapeUtil(a10);
    return { id: a10.id, point: [...a10.point], bounds: d10.getBounds(a10), center: d10.getCenter(a10) };
  }), n10 = t10.length, o10 = C3.getCommonBounds(t10.map(({ bounds: a10 }) => a10)), s10 = [];
  switch (e10) {
    case "horizontal": {
      let a10 = t10.reduce((d10, i10) => d10 + i10.bounds.width, 0);
      if (a10 > o10.width) {
        let d10 = t10.sort((m10, h10) => m10.bounds.minX - h10.bounds.minX)[0], i10 = t10.sort((m10, h10) => h10.bounds.maxX - m10.bounds.maxX)[0], c10 = t10.filter((m10) => m10 !== d10 && m10 !== i10).sort((m10, h10) => m10.center[0] - h10.center[0]), u10 = (i10.center[0] - d10.center[0]) / (n10 - 1), p10 = d10.center[0] + u10;
        c10.forEach(({ id: m10, point: h10, bounds: g10 }, f10) => {
          s10.push({ id: m10, prev: h10, next: [p10 + u10 * f10 - g10.width / 2, g10.minY] });
        });
      } else {
        let d10 = t10.sort((u10, p10) => u10.center[0] - p10.center[0]), i10 = o10.minX, c10 = (o10.width - a10) / (n10 - 1);
        d10.forEach(({ id: u10, point: p10, bounds: m10 }) => {
          s10.push({ id: u10, prev: p10, next: [i10, m10.minY] }), i10 += m10.width + c10;
        });
      }
      break;
    }
    case "vertical": {
      let a10 = t10.reduce((d10, i10) => d10 + i10.bounds.height, 0);
      if (a10 > o10.height) {
        let d10 = t10.sort((m10, h10) => m10.bounds.minY - h10.bounds.minY)[0], i10 = t10.sort((m10, h10) => h10.bounds.maxY - m10.bounds.maxY)[0], c10 = t10.filter((m10) => m10 !== d10 && m10 !== i10).sort((m10, h10) => m10.center[1] - h10.center[1]), u10 = (i10.center[1] - d10.center[1]) / (n10 - 1), p10 = d10.center[1] + u10;
        c10.forEach(({ id: m10, point: h10, bounds: g10 }, f10) => {
          s10.push({ id: m10, prev: h10, next: [g10.minX, p10 + u10 * f10 - g10.height / 2] });
        });
      } else {
        let d10 = t10.sort((u10, p10) => u10.center[1] - p10.center[1]), i10 = o10.minY, c10 = (o10.height - a10) / (n10 - 1);
        d10.forEach(({ id: u10, point: p10, bounds: m10 }) => {
          s10.push({ id: u10, prev: p10, next: [m10.minX, i10] }), i10 += m10.height + c10;
        });
      }
      break;
    }
  }
  return s10;
}
function jd(r10, e10) {
  let { currentPageId: t10, pageState: { camera: n10 } } = r10, o10 = r10.document.pages[e10], s10 = C3.uniqueId(), a10 = Object.fromEntries([[o10.id, s10], ...Object.keys(o10.shapes).map((u10) => [u10, C3.uniqueId()]), ...Object.keys(o10.bindings).map((u10) => [u10, C3.uniqueId()])]), d10 = Object.fromEntries(Object.entries(o10.shapes).map(([u10, p10]) => [a10[u10], x5(S4({}, C3.deepClone(p10)), { id: a10[u10], parentId: a10[p10.parentId] })])), i10 = Object.fromEntries(Object.entries(o10.bindings).map(([u10, p10]) => [a10[u10], x5(S4({}, C3.deepClone(p10)), { id: a10[p10.id], fromId: a10[p10.fromId], toId: a10[p10.toId] })]));
  Object.values(o10.bindings).forEach((u10) => {
    let p10 = a10[u10.fromId], m10 = d10[p10].handles;
    m10 && Object.values(m10).forEach((f10) => {
      f10.bindingId === u10.id && (f10.bindingId = a10[u10.id]);
    });
    let h10 = a10[u10.toId], g10 = d10[h10].handles;
    g10 && Object.values(g10).forEach((f10) => {
      f10.bindingId === u10.id && (f10.bindingId = a10[u10.id]);
    });
  });
  let c10 = x5(S4({}, o10), { id: a10[o10.id], name: o10.name + " Copy", shapes: d10, bindings: i10 });
  return { id: "duplicate_page", before: { appState: { currentPageId: t10 }, document: { pages: { [s10]: void 0 }, pageStates: { [s10]: void 0 } } }, after: { appState: { currentPageId: s10 }, document: { pages: { [s10]: c10 }, pageStates: { [s10]: x5(S4({}, o10), { id: s10, selectedIds: [], camera: S4({}, n10), editingId: void 0, bindingId: void 0, hoveredId: void 0, pointedId: void 0 }) } } } };
}
function Gd(r10, e10, t10) {
  let { selectedIds: n10, currentPageId: o10, page: s10, shapes: a10 } = r10, d10 = { shapes: {}, bindings: {} }, i10 = { shapes: {}, bindings: {} }, c10 = {}, u10 = e10.map((h10) => r10.getShape(h10)).filter((h10) => !e10.includes(h10.parentId));
  u10.forEach((h10) => {
    let g10 = C3.uniqueId();
    if (d10.shapes[g10] = void 0, i10.shapes[g10] = x5(S4({}, C3.deepClone(h10)), { id: g10, childIndex: v10.getChildIndexAbove(r10.state, h10.id, o10) }), h10.children && (i10.shapes[g10].children = []), h10.parentId !== o10) {
      let f10 = r10.getShape(h10.parentId);
      d10.shapes[f10.id] = x5(S4({}, d10.shapes[f10.id]), { children: f10.children }), i10.shapes[f10.id] = x5(S4({}, i10.shapes[f10.id]), { children: [...(i10.shapes[f10.id] || f10).children, g10] });
    }
    c10[h10.id] = g10;
  }), u10.forEach((h10) => {
    h10.children && h10.children.forEach((g10) => {
      var b10, y10;
      let f10 = r10.getShape(g10), T10 = C3.uniqueId(), w10 = c10[h10.id];
      d10.shapes[T10] = void 0, i10.shapes[T10] = x5(S4({}, C3.deepClone(f10)), { id: T10, parentId: w10, childIndex: v10.getChildIndexAbove(r10.state, f10.id, o10) }), c10[g10] = T10, (y10 = (b10 = i10.shapes[c10[h10.id]]) == null ? void 0 : b10.children) == null || y10.push(T10);
    });
  });
  let p10 = new Set(Object.keys(c10));
  Object.values(s10.bindings).filter((h10) => p10.has(h10.fromId) || p10.has(h10.toId)).forEach((h10) => {
    if (p10.has(h10.fromId))
      if (p10.has(h10.toId)) {
        let g10 = C3.uniqueId(), f10 = x5(S4({}, C3.deepClone(h10)), { id: g10, fromId: c10[h10.fromId], toId: c10[h10.toId] });
        d10.bindings[g10] = void 0, i10.bindings[g10] = f10;
        let T10 = i10.shapes[f10.fromId];
        Object.values(T10.handles).forEach((w10) => {
          w10.bindingId === h10.id && (w10.bindingId = g10);
        });
      } else {
        let g10 = i10.shapes[c10[h10.fromId]];
        Object.values(g10.handles).forEach((f10) => {
          f10.bindingId === h10.id && (f10.bindingId = void 0);
        });
      }
  });
  let m10 = Object.values(i10.shapes);
  if (t10) {
    let h10 = C3.getCommonBounds(m10.map((f10) => v10.getBounds(f10))), g10 = C3.getBoundsCenter(h10);
    m10.forEach((f10) => {
      !f10.point || (f10.point = e.sub(t10, e.sub(g10, f10.point)));
    });
  } else {
    let h10 = [16, 16];
    m10.forEach((g10) => {
      !g10.point || (g10.point = e.add(g10.point, h10));
    });
  }
  return m10.forEach((h10) => {
    h10.isLocked && (h10.isLocked = false);
  }), { id: "duplicate", before: { document: { pages: { [o10]: d10 }, pageStates: { [o10]: { selectedIds: n10 } } } }, after: { document: { pages: { [o10]: i10 }, pageStates: { [o10]: { selectedIds: Array.from(p10.values()).map((h10) => c10[h10]) } } } } };
}
function vi(r10, e10, t10) {
  let { selectedIds: n10, currentPageId: o10, page: { shapes: s10 } } = r10, a10 = e10.map((p10) => v10.getBounds(s10[p10])), d10 = e10.length === 1 && s10[e10[0]].type === "group", i10 = C3.getCommonBounds(a10), { before: c10, after: u10 } = v10.mutateShapes(r10.state, e10, (p10) => {
    let m10 = v10.getBounds(p10), h10 = p10.parentId !== o10;
    switch (t10) {
      case "horizontal": {
        if (h10 && !d10) {
          let f10 = v10.getBounds(s10[p10.parentId]), w10 = C3.getRelativeTransformedBoundingBox(i10, i10, f10, true, false).minX - f10.minX;
          return v10.getShapeUtil(p10).transform(p10, x5(S4({}, m10), { minX: m10.minX + w10, maxX: m10.maxX + w10 }), { type: He.TopLeft, scaleX: 1, scaleY: 1, initialShape: p10, transformOrigin: [0.5, 0.5] });
        }
        let g10 = C3.getRelativeTransformedBoundingBox(i10, i10, m10, true, false);
        return v10.getShapeUtil(p10).transform(p10, g10, { type: He.TopLeft, scaleX: -1, scaleY: 1, initialShape: p10, transformOrigin: [0.5, 0.5] });
      }
      case "vertical": {
        if (h10 && !d10) {
          let f10 = v10.getBounds(s10[p10.parentId]), w10 = C3.getRelativeTransformedBoundingBox(i10, i10, f10, false, true).minY - f10.minY;
          return v10.getShapeUtil(p10).transform(p10, x5(S4({}, m10), { minY: m10.minY + w10, maxY: m10.maxY + w10 }), { type: He.TopLeft, scaleX: 1, scaleY: 1, initialShape: p10, transformOrigin: [0.5, 0.5] });
        }
        let g10 = C3.getRelativeTransformedBoundingBox(i10, i10, m10, false, true);
        return v10.getShapeUtil(p10).transform(p10, g10, { type: He.TopLeft, scaleX: 1, scaleY: -1, initialShape: p10, transformOrigin: [0.5, 0.5] });
      }
    }
  }, o10, true);
  return { id: "flip", before: { document: { pages: { [o10]: { shapes: c10 } }, pageStates: { [o10]: { selectedIds: n10 } } } }, after: { document: { pages: { [o10]: { shapes: u10 } }, pageStates: { [o10]: { selectedIds: e10 } } } } };
}
function Vd(r10, e10, t10, n10) {
  var R10, U10;
  if (e10.length < 2)
    return;
  let o10 = {}, s10 = {}, a10 = {}, d10 = {}, i10 = [...e10], c10 = [], u10 = [], p10 = [];
  for (let L10 of e10) {
    let k10 = r10.getShape(L10);
    if (!k10.isLocked)
      if (k10.children === void 0)
        c10.push(k10);
      else {
        let I10 = k10.children.filter((q10) => !r10.getShape(q10).isLocked);
        p10.push(k10), i10.push(...I10), c10.push(...I10.map((q10) => r10.getShape(q10)).filter(Boolean));
      }
  }
  if (c10.every((L10) => L10.parentId === c10[0].parentId) && c10[0].parentId !== n10 && ((R10 = r10.getShape(c10[0].parentId).children) == null ? void 0 : R10.length) === i10.length)
    return;
  let m10 = v10.flattenPage(r10.state, n10), h10 = Object.fromEntries(c10.map((L10) => [L10.id, m10.indexOf(L10)])), g10 = c10.sort((L10, k10) => h10[L10.id] - h10[k10.id]), f10 = n10, T10 = (g10.filter((L10) => L10.parentId === n10)[0] || g10[0]).childIndex, w10 = C3.getCommonBounds(c10.map((L10) => v10.getBounds(L10)));
  for (o10[t10] = void 0, s10[t10] = v10.getShapeUtil("group").create({ id: t10, childIndex: T10, parentId: f10, point: [w10.minX, w10.minY], size: [w10.width, w10.height], children: g10.map((L10) => L10.id) }), g10.forEach((L10, k10) => {
    if (L10.parentId !== n10) {
      let I10 = r10.getShape(L10.parentId);
      p10.push(I10);
    }
    o10[L10.id] = x5(S4({}, o10[L10.id]), { parentId: L10.parentId, childIndex: L10.childIndex }), s10[L10.id] = x5(S4({}, s10[L10.id]), { parentId: t10, childIndex: k10 + 1 });
  }); p10.length > 0; ) {
    let L10 = p10.pop();
    if (!L10)
      break;
    let k10 = (((U10 = o10[L10.id]) == null ? void 0 : U10.children) || L10.children).filter((I10) => I10 && !(i10.includes(I10) || u10.includes(I10)));
    k10.length === 0 ? (o10[L10.id] = L10, s10[L10.id] = void 0, L10.parentId !== n10 && (u10.push(L10.id), p10.push(r10.getShape(L10.parentId)))) : (o10[L10.id] = x5(S4({}, o10[L10.id]), { children: L10.children }), s10[L10.id] = x5(S4({}, s10[L10.id]), { children: k10 }));
  }
  let { bindings: b10 } = r10, y10 = new Set(u10);
  return b10.forEach((L10) => {
    for (let k10 of [L10.toId, L10.fromId])
      if (y10.has(k10)) {
        a10[L10.id] = L10, d10[L10.id] = void 0;
        let I10 = r10.getShape(k10);
        I10.handles && Object.values(I10.handles).filter((q10) => q10.bindingId === L10.id).forEach((q10) => {
          var de4, le3;
          o10[k10] = x5(S4({}, o10[k10]), { handles: x5(S4({}, (de4 = o10[k10]) == null ? void 0 : de4.handles), { [q10.id]: { bindingId: L10.id } }) }), u10.includes(k10) || (s10[k10] = x5(S4({}, s10[k10]), { handles: x5(S4({}, (le3 = s10[k10]) == null ? void 0 : le3.handles), { [q10.id]: { bindingId: void 0 } }) }));
        });
      }
  }), { id: "group", before: { document: { pages: { [n10]: { shapes: o10, bindings: a10 } }, pageStates: { [n10]: { selectedIds: e10 } } } }, after: { document: { pages: { [n10]: { shapes: s10, bindings: a10 } }, pageStates: { [n10]: { selectedIds: [t10] } } } } };
}
function Nd(r10, e10, t10, n10, o10) {
  let { page: s10 } = r10, a10 = { before: { shapes: {}, bindings: {} }, after: { shapes: {}, bindings: {} } }, d10 = { before: { shapes: {}, bindings: {} }, after: { shapes: {}, bindings: {} } }, i10 = /* @__PURE__ */ new Set(), c10 = /* @__PURE__ */ new Set();
  e10.map((b10) => r10.getShape(b10, n10)).filter((b10) => !b10.isLocked).forEach((b10) => {
    i10.add(b10.id), c10.add(b10), b10.children !== void 0 && b10.children.forEach((y10) => {
      i10.add(y10), c10.add(r10.getShape(y10, n10));
    });
  });
  let u10 = v10.getTopChildIndex(r10.state, o10), p10 = Array.from(c10.values());
  p10.forEach((b10, y10) => {
    if (a10.before.shapes[b10.id] = b10, a10.after.shapes[b10.id] = void 0, d10.before.shapes[b10.id] = void 0, d10.after.shapes[b10.id] = b10, !i10.has(b10.parentId) && (d10.after.shapes[b10.id] = x5(S4({}, b10), { parentId: o10, childIndex: u10 + y10 }), b10.parentId !== n10)) {
      let R10 = r10.getShape(b10.parentId, n10);
      a10.before.shapes[R10.id] = { children: R10.children }, a10.after.shapes[R10.id] = { children: R10.children.filter((U10) => U10 !== b10.id) };
    }
  }), Object.values(s10.bindings).filter((b10) => i10.has(b10.fromId) || i10.has(b10.toId)).forEach((b10) => {
    a10.before.bindings[b10.id] = b10, a10.after.bindings[b10.id] = void 0;
    let y10 = r10.getShape(b10.fromId, n10);
    if (i10.has(b10.fromId) && i10.has(b10.toId))
      d10.before.bindings[b10.id] = void 0, d10.after.bindings[b10.id] = b10;
    else if (i10.has(b10.fromId)) {
      let U10 = r10.getShape(b10.fromId, n10), k10 = Object.values(y10.handles).find((q10) => q10.bindingId === b10.id).id, I10 = d10.after.shapes[U10.id];
      I10.handles = x5(S4({}, I10.handles), { [k10]: x5(S4({}, I10.handles[k10]), { bindingId: void 0 }) });
    } else {
      let U10 = r10.getShape(b10.fromId, n10), L10 = Object.values(y10.handles).find((k10) => k10.bindingId === b10.id);
      a10.before.shapes[U10.id] = { handles: { [L10.id]: { bindingId: b10.id } } }, a10.after.shapes[U10.id] = { handles: { [L10.id]: { bindingId: void 0 } } };
    }
  });
  let m10 = r10.state.document.pageStates[o10], h10 = C3.getCommonBounds(p10.map((b10) => v10.getBounds(b10))), g10 = v10.getCameraZoom(t10.width < t10.height ? (t10.width - 128) / h10.width : (t10.height - 128) / h10.height), f10 = (t10.width - h10.width * g10) / 2 / g10, T10 = (t10.height - h10.height * g10) / 2 / g10, w10 = e.toFixed(e.add([-h10.minX, -h10.minY], [f10, T10]));
  return { id: "move_to_page", before: { appState: { currentPageId: n10 }, document: { pages: { [n10]: a10.before, [o10]: d10.before }, pageStates: { [n10]: { selectedIds: e10 }, [o10]: { selectedIds: m10.selectedIds, camera: m10.camera } } } }, after: { appState: { currentPageId: o10 }, document: { pages: { [n10]: a10.after, [o10]: d10.after }, pageStates: { [n10]: { selectedIds: [] }, [o10]: { selectedIds: e10, camera: { zoom: g10, point: w10 } } } } } };
}
function Wd(r10, e10, t10) {
  let { pages: n10 } = r10.document, o10 = n10[e10], s10 = Object.values(n10).sort((i10, c10) => {
    var u10, p10;
    return ((u10 = i10.childIndex) != null ? u10 : 0) - ((p10 = c10.childIndex) != null ? p10 : 0);
  }), a10 = s10.indexOf(o10), d10 = [...s10];
  return d10.splice(a10, 1), d10.splice(t10 > a10 ? t10 - 1 : t10, 0, o10), { id: "move_page", before: { document: { pages: Object.fromEntries(s10.map((i10) => [i10.id, { childIndex: i10.childIndex }])) } }, after: { document: { pages: Object.fromEntries(d10.map((i10, c10) => [i10.id, { childIndex: c10 }])) } } };
}
function qo(r10, e10, t10) {
  let { currentPageId: n10, page: o10 } = r10, s10 = new Set(e10.map((u10) => r10.getShape(u10).parentId)), a10 = { before: {}, after: {} }, d10, i10, c10;
  return Array.from(s10.values()).forEach((u10) => {
    let p10 = [];
    if (u10 === o10.id)
      p10 = Object.values(o10.shapes).sort((g10, f10) => g10.childIndex - f10.childIndex);
    else {
      let g10 = r10.getShape(u10);
      if (!g10.children)
        throw Error("No children in parent!");
      p10 = g10.children.map((f10) => r10.getShape(f10)).sort((f10, T10) => f10.childIndex - T10.childIndex);
    }
    let m10 = p10.map((g10) => g10.id), h10 = e10.filter((g10) => m10.includes(g10)).map((g10) => m10.indexOf(g10)).sort((g10, f10) => g10 - f10);
    if (h10.length !== m10.length)
      switch (t10) {
        case "toBack": {
          for (let g10 = 0; g10 < m10.length; g10++)
            if (!h10.includes(g10)) {
              d10 = g10;
              break;
            }
          i10 = p10[d10].childIndex, c10 = i10 / (h10.length + 1), a10 = v10.mutateShapes(r10.state, h10.map((g10) => p10[g10].id).reverse(), (g10, f10) => ({ childIndex: i10 - (f10 + 1) * c10 }), n10);
          break;
        }
        case "toFront": {
          for (let g10 = m10.length - 1; g10 >= 0; g10--)
            if (!h10.includes(g10)) {
              d10 = g10;
              break;
            }
          i10 = p10[d10].childIndex, c10 = 1, a10 = v10.mutateShapes(r10.state, h10.map((g10) => p10[g10].id), (g10, f10) => ({ childIndex: i10 + (f10 + 1) }), n10);
          break;
        }
        case "backward": {
          let g10 = {};
          for (let f10 = m10.length - 1; f10 >= 0; f10--)
            if (h10.includes(f10)) {
              for (let T10 = f10; T10 >= 0; T10--)
                if (!h10.includes(T10)) {
                  let w10 = p10[T10].childIndex, b10, y10;
                  T10 === 0 ? (b10 = w10 / 2, y10 = w10 / 2 / (f10 - T10 + 1)) : (b10 = p10[T10 - 1].childIndex, y10 = (w10 - b10) / (f10 - T10 + 1), b10 += y10);
                  for (let R10 = 0; R10 < f10 - T10; R10++)
                    g10[p10[T10 + R10 + 1].id] = b10 + y10 * R10;
                  break;
                }
            }
          Object.values(g10).length > 0 && (a10 = v10.mutateShapes(r10.state, h10.map((f10) => p10[f10].id), (f10) => ({ childIndex: g10[f10.id] }), n10));
          break;
        }
        case "forward": {
          let g10 = {};
          for (let f10 = 0; f10 < m10.length; f10++)
            if (h10.includes(f10)) {
              for (let T10 = f10; T10 < m10.length; T10++)
                if (!h10.includes(T10)) {
                  i10 = p10[T10].childIndex;
                  let w10 = T10 === m10.length - 1 ? 1 : (p10[T10 + 1].childIndex - i10) / (T10 - f10 + 1);
                  for (let b10 = 0; b10 < T10 - f10; b10++)
                    g10[p10[f10 + b10].id] = i10 + w10 * (b10 + 1);
                  break;
                }
            }
          Object.values(g10).length > 0 && (a10 = v10.mutateShapes(r10.state, h10.map((f10) => p10[f10].id), (f10) => ({ childIndex: g10[f10.id] }), n10));
          break;
        }
      }
  }), { id: "move", before: { document: { pages: { [n10]: { shapes: a10.before } }, pageStates: { [n10]: { selectedIds: e10 } } } }, after: { document: { pages: { [n10]: { shapes: a10.after } }, pageStates: { [n10]: { selectedIds: e10 } } } } };
}
function Ud(r10, e10, t10) {
  let { page: n10 } = r10;
  return { id: "rename_page", before: { document: { pages: { [e10]: { name: n10.name } } } }, after: { document: { pages: { [e10]: { name: t10 } } } } };
}
function Ii(r10, e10, t10) {
  let { currentPageId: n10 } = r10, { before: o10, after: s10 } = v10.mutateShapes(r10.state, e10, (a10) => {
    var d10, i10;
    return (i10 = (d10 = r10.getShapeUtil(a10)).onDoubleClickBoundsHandle) == null ? void 0 : i10.call(d10, a10);
  }, t10);
  return { id: "reset_bounds", before: { document: { pages: { [n10]: { shapes: o10 } }, pageStates: { [n10]: { selectedIds: e10 } } } }, after: { document: { pages: { [n10]: { shapes: s10 } }, pageStates: { [n10]: { selectedIds: e10 } } } } };
}
var bpe = Math.PI * 2;
function _d(r10, e10, t10 = -bpe / 4) {
  let { currentPageId: n10 } = r10, o10 = {}, s10 = {}, a10 = e10.flatMap((i10) => {
    let c10 = r10.getShape(i10);
    return c10.children ? c10.children.map((u10) => r10.getShape(u10)) : c10;
  }).filter((i10) => !i10.isLocked), d10 = C3.getBoundsCenter(C3.getCommonBounds(a10.map((i10) => v10.getBounds(i10))));
  return a10.forEach((i10) => {
    let c10 = v10.getRotatedShapeMutation(i10, v10.getCenter(i10), d10, t10);
    !c10 || (o10[i10.id] = v10.getBeforeShape(i10, c10), s10[i10.id] = c10);
  }), { id: "rotate", before: { document: { pages: { [n10]: { shapes: o10 } }, pageStates: { [n10]: { selectedIds: e10 } } } }, after: { document: { pages: { [n10]: { shapes: s10 } }, pageStates: { [n10]: { selectedIds: e10 } } } } };
}
function Zd(r10, e10, t10) {
  let { currentPageId: n10, selectedIds: o10 } = r10, s10 = e10.map((p10) => r10.getShape(p10)), a10 = s10.map((p10) => v10.getBounds(p10)), d10 = C3.getCommonBounds(a10), i10 = e10.flatMap((p10) => {
    let m10 = r10.getShape(p10);
    return m10.children ? m10.children : m10.id;
  }).filter((p10) => !r10.getShape(p10).isLocked), { before: c10, after: u10 } = v10.mutateShapes(r10.state, i10, (p10) => {
    let m10 = v10.getBounds(p10);
    switch (t10) {
      case "horizontal": {
        let h10 = x5(S4({}, m10), { minX: d10.minX, maxX: d10.maxX, width: d10.width });
        return v10.getShapeUtil(p10).transformSingle(p10, h10, { type: He.TopLeft, scaleX: h10.width / m10.width, scaleY: 1, initialShape: p10, transformOrigin: [0.5, 0.5] });
      }
      case "vertical": {
        let h10 = x5(S4({}, m10), { minY: d10.minY, maxY: d10.maxY, height: d10.height });
        return v10.getShapeUtil(p10).transformSingle(p10, h10, { type: He.TopLeft, scaleX: 1, scaleY: h10.height / m10.height, initialShape: p10, transformOrigin: [0.5, 0.5] });
      }
    }
  }, n10);
  return s10.forEach((p10) => {
    p10.type === "group" && (delete c10[p10.id], delete u10[p10.id]);
  }), { id: "stretch", before: { document: { pages: { [n10]: { shapes: c10 } }, pageStates: { [n10]: { selectedIds: o10 } } } }, after: { document: { pages: { [n10]: { shapes: u10 } }, pageStates: { [n10]: { selectedIds: e10 } } } } };
}
function Xd(r10, e10, t10) {
  let { currentPageId: n10, selectedIds: o10 } = r10, s10 = e10.flatMap((i10) => v10.getDocumentBranch(r10.state, i10, n10)).filter((i10) => !r10.getShape(i10).isLocked), a10 = {}, d10 = {};
  return s10.map((i10) => r10.getShape(i10)).filter((i10) => !i10.isLocked).forEach((i10) => {
    a10[i10.id] = { style: S4({}, Object.fromEntries(Object.keys(t10).map((c10) => [c10, i10.style[c10]]))) }, d10[i10.id] = { style: t10 }, i10.type === "text" && (a10[i10.id].point = i10.point, d10[i10.id].point = e.toFixed(e.add(i10.point, e.sub(r10.getShapeUtil(i10).getCenter(i10), r10.getShapeUtil(i10).getCenter(x5(S4({}, i10), { style: S4(S4({}, i10.style), t10) }))))));
  }), { id: "style", before: { document: { pages: { [n10]: { shapes: a10 } }, pageStates: { [n10]: { selectedIds: o10 } } }, appState: { currentStyle: S4({}, r10.appState.currentStyle) } }, after: { document: { pages: { [n10]: { shapes: d10 } }, pageStates: { [n10]: { selectedIds: e10 } } }, appState: { currentStyle: t10 } } };
}
function qd(r10, e10, t10) {
  let { currentPageId: n10, selectedIds: o10 } = r10, s10 = Object.fromEntries(e10.map((d10) => {
    var i10;
    return [d10, { decorations: { [t10]: (i10 = r10.getShape(d10).decorations) == null ? void 0 : i10[t10] } }];
  })), a10 = Object.fromEntries(e10.filter((d10) => !r10.getShape(d10).isLocked).map((d10) => {
    var i10;
    return [d10, { decorations: { [t10]: ((i10 = r10.getShape(d10).decorations) == null ? void 0 : i10[t10]) ? void 0 : "arrow" } }];
  }));
  return { id: "toggle_decorations", before: { document: { pages: { [n10]: { shapes: s10 } }, pageStates: { [n10]: { selectedIds: o10 } } } }, after: { document: { pages: { [n10]: { shapes: a10 } }, pageStates: { [n10]: { selectedIds: e10 } } } } };
}
function Qr(r10, e10, t10) {
  let { currentPageId: n10 } = r10, o10 = e10.map((i10) => r10.getShape(i10)).filter((i10) => t10 === "isLocked" ? true : !i10.isLocked), s10 = o10.every((i10) => i10[t10]), a10 = {}, d10 = {};
  return o10.forEach((i10) => {
    a10[i10.id] = { [t10]: i10[t10] }, d10[i10.id] = { [t10]: !s10 };
  }), { id: "toggle", before: { document: { pages: { [n10]: { shapes: a10 } }, pageStates: { [n10]: { selectedIds: e10 } } } }, after: { document: { pages: { [n10]: { shapes: d10 } }, pageStates: { [n10]: { selectedIds: e10 } } } } };
}
function Qd(r10, e10, t10) {
  let { currentPageId: n10, selectedIds: o10 } = r10;
  r10.rotationInfo.selectedIds = [...o10];
  let s10 = { shapes: {}, bindings: {} }, a10 = { shapes: {}, bindings: {} }, d10 = e10.flatMap((u10) => {
    let p10 = r10.getShape(u10);
    return p10.children ? p10.children : p10.id;
  }).filter((u10) => !r10.getShape(u10).isLocked), i10 = v10.mutateShapes(r10.state, d10, (u10) => ({ point: e.toFixed(e.add(u10.point, t10)) }), n10);
  return s10.shapes = i10.before, a10.shapes = i10.after, v10.getBindings(r10.state, n10).filter((u10) => e10.includes(u10.fromId) && !e10.includes(u10.toId)).forEach((u10) => {
    s10.bindings[u10.id] = u10, a10.bindings[u10.id] = void 0;
    for (let p10 of [u10.toId, u10.fromId]) {
      let m10 = r10.getShape(p10);
      !m10.handles || Object.values(m10.handles).filter((h10) => h10.bindingId === u10.id).forEach((h10) => {
        var g10, f10;
        s10.shapes[p10] = x5(S4({}, s10.shapes[p10]), { handles: x5(S4({}, (g10 = s10.shapes[p10]) == null ? void 0 : g10.handles), { [h10.id]: { bindingId: u10.id } }) }), a10.shapes[p10] = x5(S4({}, a10.shapes[p10]), { handles: x5(S4({}, (f10 = a10.shapes[p10]) == null ? void 0 : f10.handles), { [h10.id]: { bindingId: void 0 } }) });
      });
    }
  }), { id: "translate", before: { document: { pages: { [n10]: s10 }, pageStates: { [n10]: { selectedIds: e10 } } } }, after: { document: { pages: { [n10]: a10 }, pageStates: { [n10]: { selectedIds: e10 } } } } };
}
function ec(r10, e10, t10, n10) {
  let { bindings: o10 } = r10, s10 = {}, a10 = {}, d10 = {}, i10 = {}, c10 = e10, u10 = e10.filter((p10) => !t10.find((m10) => m10.id === p10));
  return t10.filter((p10) => !p10.isLocked).forEach((p10) => {
    let m10 = [], h10 = [];
    s10[p10.id] = p10, a10[p10.id] = void 0, p10.children.forEach((b10) => {
      u10.push(b10);
      let y10 = r10.getShape(b10, n10);
      m10.push(y10);
    });
    let g10 = p10.childIndex, T10 = (v10.getChildIndexAbove(r10.state, p10.id, n10) - g10) / m10.length;
    m10.sort((b10, y10) => b10.childIndex - y10.childIndex).forEach((b10, y10) => {
      s10[b10.id] = { parentId: b10.parentId, childIndex: b10.childIndex }, a10[b10.id] = { parentId: n10, childIndex: g10 + T10 * y10 };
    }), o10.filter((b10) => b10.toId === p10.id || b10.fromId === p10.id).forEach((b10) => {
      for (let y10 of [b10.toId, b10.fromId])
        if (a10[y10] === void 0) {
          d10[b10.id] = b10, i10[b10.id] = void 0;
          let R10 = r10.getShape(y10, n10);
          R10.handles && Object.values(R10.handles).filter((U10) => U10.bindingId === b10.id).forEach((U10) => {
            var L10, k10;
            s10[y10] = x5(S4({}, s10[y10]), { handles: x5(S4({}, (L10 = s10[y10]) == null ? void 0 : L10.handles), { [U10.id]: { bindingId: b10.id } }) }), h10.includes(y10) || (a10[y10] = x5(S4({}, a10[y10]), { handles: x5(S4({}, (k10 = a10[y10]) == null ? void 0 : k10.handles), { [U10.id]: { bindingId: void 0 } }) }));
          });
        }
    });
  }), { id: "ungroup", before: { document: { pages: { [n10]: { shapes: s10, bindings: d10 } }, pageStates: { [n10]: { selectedIds: c10 } } } }, after: { document: { pages: { [n10]: { shapes: a10, bindings: d10 } }, pageStates: { [n10]: { selectedIds: u10 } } } } };
}
function Di(r10, e10, t10) {
  let n10 = e10.map((s10) => s10.id), o10 = v10.mutateShapes(r10.state, n10.filter((s10) => !r10.getShape(s10, t10).isLocked), (s10, a10) => e10[a10], t10);
  return { id: "update", before: { document: { pages: { [t10]: { shapes: o10.before } } } }, after: { document: { pages: { [t10]: { shapes: o10.after } } } } };
}
function tc(r10, e10, t10) {
  let { currentPageId: n10, selectedIds: o10 } = r10, s10 = e10.map((c10) => r10.getShape(c10)).filter((c10) => t10.isLocked ? true : !c10.isLocked), a10 = {}, d10 = {}, i10 = Object.keys(t10);
  return s10.forEach((c10) => {
    a10[c10.id] = Object.fromEntries(i10.map((u10) => [u10, c10[u10]])), d10[c10.id] = t10;
  }), { id: "set_props", before: { document: { pages: { [n10]: { shapes: a10 } }, pageStates: { [n10]: { selectedIds: o10 } } } }, after: { document: { pages: { [n10]: { shapes: d10 } }, pageStates: { [n10]: { selectedIds: o10 } } } } };
}
function nc(r10, e10, t10 = {}) {
  let { currentPageId: n10 } = r10, { point: o10, select: s10, overwrite: a10 } = t10, d10 = r10.document.pages[n10], i10 = { shapes: {}, bindings: {} }, c10 = {}, u10 = { shapes: {}, bindings: {} };
  if (a10) {
    for (let m10 of e10.shapes)
      i10.shapes[m10.id] = d10.shapes[m10.id], u10.shapes[m10.id] = m10;
    if (e10.bindings)
      for (let m10 of e10.bindings)
        i10.bindings[m10.id] = d10.bindings[m10.id], u10.bindings[m10.id] = m10;
    if (e10.assets)
      for (let m10 of e10.assets)
        c10[m10.id] = m10;
  } else {
    let m10 = {}, h10 = v10.getTopChildIndex(r10.state, n10), g10 = e10.shapes.sort((w10, b10) => w10.childIndex - b10.childIndex).map((w10) => {
      let b10 = C3.uniqueId();
      return m10[w10.id] = b10, x5(S4({}, C3.deepClone(w10)), { id: b10 });
    }), f10 = /* @__PURE__ */ new Set();
    for (; g10.length > 0; ) {
      let w10 = g10.shift();
      if (!w10)
        break;
      if (f10.add(w10.id), w10.parentId === "currentPageId")
        w10.parentId = n10, w10.childIndex = h10++;
      else {
        w10.parentId = m10[w10.parentId];
        let b10 = u10.shapes[w10.parentId];
        if (!b10) {
          f10.has(w10.id) && (w10.parentId = "currentPageId"), g10.push(w10);
          continue;
        }
        b10.children.push(w10.id);
      }
      w10.children && (w10.children = []), i10.shapes[w10.id] = void 0, u10.shapes[w10.id] = w10;
    }
    Object.values(u10.shapes).forEach((w10) => {
      w10.children && w10.children.length === 0 && (delete i10.shapes[w10.id], delete u10.shapes[w10.id]);
    }), e10.bindings && e10.bindings.forEach((w10) => {
      let b10 = C3.uniqueId();
      m10[w10.id] = b10;
      let y10 = m10[w10.toId], R10 = m10[w10.fromId];
      if (!y10 || !R10) {
        if (R10) {
          let I10 = u10.shapes[R10].handles;
          I10 && Object.values(I10).forEach((q10) => {
            q10.bindingId === w10.id && (q10.bindingId = void 0);
          });
        }
        if (y10) {
          let I10 = u10.shapes[y10].handles;
          I10 && Object.values(I10).forEach((q10) => {
            q10.bindingId === w10.id && (q10.bindingId = void 0);
          });
        }
        return;
      }
      let U10 = u10.shapes[R10].handles;
      U10 && Object.values(U10).forEach((I10) => {
        I10.bindingId === w10.id && (I10.bindingId = b10);
      }), u10.shapes[y10].handles && Object.values(u10.shapes[y10].handles).forEach((I10) => {
        I10.bindingId === w10.id && (I10.bindingId = b10);
      });
      let k10 = x5(S4({}, C3.deepClone(w10)), { id: b10, toId: y10, fromId: R10 });
      i10.bindings[k10.id] = void 0, u10.bindings[k10.id] = k10;
    });
    let T10 = Object.values(u10.shapes);
    if (T10.length > 0)
      if (o10) {
        let w10 = C3.getCommonBounds(T10.map((y10) => v10.getBounds(y10))), b10 = C3.getBoundsCenter(w10);
        T10.forEach((y10) => {
          !y10.point || (y10.point = e.sub(o10, e.sub(b10, y10.point)));
        });
      } else {
        let w10 = C3.getCommonBounds(T10.map(v10.getBounds));
        if (!(C3.boundsContain(r10.viewport, w10) || C3.boundsCollide(r10.viewport, w10))) {
          let b10 = e.toFixed(r10.getPagePoint(r10.centerPoint)), y10 = C3.centerBounds(w10, b10), R10 = e.sub(C3.getBoundsCenter(y10), C3.getBoundsCenter(w10));
          T10.forEach((U10) => {
            U10.point = e.toFixed(e.add(U10.point, R10));
          });
        }
      }
    if (e10.assets)
      for (let w10 of e10.assets)
        c10[w10.id] = w10;
  }
  let p10 = document.createElement("textarea");
  return Object.values(u10.shapes).forEach((m10) => {
    "text" in m10 && (p10.innerHTML = m10.text, m10.text = p10.value), "label" in m10 && (p10.innerHTML = m10.label, m10.label = p10.value);
  }), p10.remove(), { id: "insert", before: { document: { pages: { [n10]: i10 }, pageStates: { [n10]: { selectedIds: [...r10.selectedIds] } } } }, after: { document: { pages: { [n10]: u10 }, assets: c10, pageStates: { [n10]: { selectedIds: s10 ? Object.keys(u10.shapes) : [...r10.selectedIds] } } } } };
}
var Po = {};
yc(Po, { fileToBase64: () => Ri, fileToText: () => Ai, getImageSizeFromSrc: () => Li, getVideoSizeFromSrc: () => Hi, loadFileHandle: () => Pi, migrate: () => Sn2, openAssetsFromFileSystem: () => Bi, openFromFileSystem: () => Ei, saveFileHandle: () => Mi, saveToFileSystem: () => es });
function Sn2(r10, e10) {
  let { document: t10, settings: n10 } = r10, { version: o10 = 0 } = t10;
  "assets" in t10 || (t10.assets = {});
  let s10 = /* @__PURE__ */ new Set();
  return Object.values(t10.pages).forEach((a10) => Object.values(a10.shapes).forEach((d10) => {
    let { parentId: i10, children: c10, assetId: u10 } = d10;
    u10 && s10.add(u10), i10 !== a10.id && !a10.shapes[i10] && (console.warn("Encountered a shape with a missing parent!"), d10.parentId = a10.id), d10.type === "group" && c10 && c10.forEach((p10) => {
      a10.shapes[p10] || (console.warn("Encountered a parent with a missing child!", d10.id, p10), c10 == null || c10.splice(c10.indexOf(p10), 1));
    });
  })), Object.keys(t10.assets).forEach((a10) => {
    s10.has(a10) || delete t10.assets[a10];
  }), o10 !== e10 && (o10 < 14 && Object.values(t10.pages).forEach((a10) => {
    Object.values(a10.shapes).filter((d10) => d10.type === "text").forEach((d10) => d10.style.font === "script");
  }), o10 <= 13 && Object.values(t10.pages).forEach((a10) => {
    Object.values(a10.bindings).forEach((d10) => {
      Object.assign(d10, d10.meta);
    }), Object.values(a10.shapes).forEach((d10) => {
      Object.entries(d10.style).forEach(([i10, c10]) => {
        typeof c10 == "string" && (d10.style[i10] = c10.toLowerCase());
      }), d10.type === "arrow" && d10.decorations && Object.entries(d10.decorations).forEach(([i10, c10]) => {
        c10 === "Arrow" && (d10.decorations = x5(S4({}, d10.decorations), { [i10]: "arrow" }));
      });
    });
  }), o10 <= 13.1 && (t10.name = "New Document"), o10 < 15 && (t10.assets = {}), Object.values(t10.pages).forEach((a10) => {
    Object.values(a10.shapes).forEach((d10) => {
      o10 < 15.2 && (d10.type === "image" || d10.type === "video") && (d10.style.isFilled = true), o10 < 15.3 && (d10.type === "rectangle" || d10.type === "triangle" || d10.type === "ellipse" || d10.type === "arrow") && (d10.label = d10.text || "", d10.labelPoint = [0.5, 0.5]);
    });
  }), o10 < 15.4 && (n10.dockPosition = "bottom"), o10 < 15.5 && (n10.exportBackground = "transparent")), Object.values(t10.pageStates).forEach((a10) => {
    a10.selectedIds = a10.selectedIds.filter((d10) => t10.pages[a10.id].shapes[d10] !== void 0), a10.bindingId = void 0, a10.editingId = void 0, a10.hoveredId = void 0, a10.pointedId = void 0;
  }), t10.version = e10, r10;
}
var oc = { mode: "readwrite" };
var Ipe = (r10) => pe4(void 0, null, function* () {
  return (yield r10.queryPermission(oc)) === "granted" || (yield r10.requestPermission(oc)) === "granted";
});
function Pi() {
  return pe4(this, null, function* () {
    if (typeof Window == "undefined" || !("_location" in Window))
      return;
    let r10 = yield get(`Tldraw_file_handle_${window.location.origin}`);
    return r10 || null;
  });
}
function Mi(r10) {
  return pe4(this, null, function* () {
    return set(`Tldraw_file_handle_${window.location.origin}`, r10);
  });
}
function es(r10, e10, t10) {
  return pe4(this, null, function* () {
    let n10 = { name: r10.name || "New Document", fileHandle: e10 != null ? e10 : null, document: r10 }, o10 = JSON.stringify(n10), s10 = new Blob([o10], { type: "application/vnd.Tldraw+json" });
    if (e10 && !(yield Ipe(e10)))
      return null;
    let a10 = !e4 && (t10 == null ? void 0 : t10.length) ? t10 : `${n10.name}`, d10 = yield o4(s10, { fileName: `${a10}${zr}`, description: "Tldraw File", extensions: [`${zr}`] }, e10);
    return yield Mi(d10), d10;
  });
}
function Ei() {
  return pe4(this, null, function* () {
    var o10;
    let r10 = yield n4({ description: "Tldraw File", extensions: [`${zr}`], multiple: false });
    if (!r10)
      return null;
    let e10 = yield new Promise((s10) => {
      let a10 = new FileReader();
      a10.onloadend = () => {
        a10.readyState === FileReader.DONE && s10(a10.result);
      }, a10.readAsText(r10, "utf8");
    }), t10 = JSON.parse(e10);
    if ("tldrawFileFormatVersion" in t10)
      return alert("This file was created in a newer version of tldraw. Please visit beta.tldraw.com to open it."), null;
    let n10 = (o10 = r10.handle) != null ? o10 : null;
    return yield Mi(n10), { fileHandle: n10, document: t10.document };
  });
}
function Bi() {
  return pe4(this, null, function* () {
    return n4({ description: "Image or Video", extensions: [...Or, ...Fr], multiple: true });
  });
}
function Ri(r10) {
  return new Promise((e10, t10) => {
    if (r10) {
      let n10 = new FileReader();
      n10.readAsDataURL(r10), n10.onload = () => e10(n10.result), n10.onerror = (o10) => t10(o10), n10.onabort = (o10) => t10(o10);
    }
  });
}
function Ai(r10) {
  return new Promise((e10, t10) => {
    if (r10) {
      let n10 = new FileReader();
      n10.readAsText(r10), n10.onload = () => e10(n10.result), n10.onerror = (o10) => t10(o10), n10.onabort = (o10) => t10(o10);
    }
  });
}
function Li(r10) {
  return new Promise((e10, t10) => {
    let n10 = new Image();
    n10.onload = () => e10([n10.width, n10.height]), n10.onerror = () => t10(new Error("Could not get image size")), n10.src = r10;
  });
}
function Hi(r10) {
  return new Promise((e10, t10) => {
    let n10 = document.createElement("video");
    n10.onloadedmetadata = () => e10([n10.videoWidth, n10.videoHeight]), n10.onerror = () => t10(new Error("Could not get video size")), n10.src = r10;
  });
}
fr(Po, index_modern_exports);
var Ye2 = class {
  constructor(e10) {
    this.app = e10;
  }
};
var zi = class extends Ye2 {
  constructor(e10, t10, n10, o10 = false) {
    super(e10);
    l7(this, "type", "arrow");
    l7(this, "performanceMode");
    l7(this, "status", "translatingHandle");
    l7(this, "newStartBindingId", C3.uniqueId());
    l7(this, "draggedBindingId", C3.uniqueId());
    l7(this, "didBind", false);
    l7(this, "initialShape");
    l7(this, "handleId");
    l7(this, "bindableShapeIds");
    l7(this, "initialBinding");
    l7(this, "startBindingShapeId");
    l7(this, "isCreate");
    l7(this, "start", () => {
    });
    l7(this, "update", () => {
      var U10, L10, k10;
      let { initialShape: e11 } = this, { currentPoint: t11, shiftKey: n11, altKey: o11, metaKey: s11, currentGrid: a11, settings: { showGrid: d11 } } = this.app, i11 = this.app.getShape(e11.id);
      if (i11.isLocked)
        return;
      let { handles: c11 } = e11, u11 = this.handleId;
      if (!c11[u11].canBind)
        return;
      let p11 = e.sub(t11, e.add(c11[u11].point, e11.point));
      if (n11) {
        let I10 = o11 ? e.med(c11.start.point, c11.end.point) : c11[u11 === "start" ? "end" : "start"].point, q10 = c11[u11].point, de4 = e.add(q10, p11), le3 = e.angle(I10, de4), Ae2 = e.rotWith(de4, I10, C3.snapAngleToSegments(le3, 24) - le3);
        p11 = e.add(p11, e.sub(Ae2, de4));
      }
      let m10 = e.add(c11[u11].point, p11), h10 = { [u11]: x5(S4({}, c11[u11]), { point: d11 ? e.snap(m10, a11) : e.toFixed(m10), bindingId: void 0 }) }, g10 = En2["arrow"], f10 = (U10 = g10.onHandleChange) == null ? void 0 : U10.call(g10, e11, h10);
      if (!f10)
        return;
      let T10 = { shape: C3.deepMerge(i11, f10), bindings: {} }, w10, b10 = T10.shape.handles[this.handleId], y10 = T10.shape.handles[this.handleId === "start" ? "end" : "start"];
      if (this.startBindingShapeId) {
        let I10, q10 = this.app.page.shapes[this.startBindingShapeId], de4 = v10.getShapeUtil(q10), le3 = de4.getCenter(q10), Ae2 = T10.shape.handles.start, Ce2 = T10.shape.handles.end, De2 = e.add(Ae2.point, T10.shape.point);
        e.isEqual(De2, le3) && De2[1]++;
        let Ve = le3, $e2 = de4.hitTestPoint(q10, t11), jt = e.uni(e.sub(De2, Ve)), on2 = this.app.getBinding(this.newStartBindingId) !== void 0;
        !s11 && !de4.hitTestPoint(q10, e.add(T10.shape.point, Ce2.point)) && (I10 = this.findBindingPoint(i11, q10, "start", this.newStartBindingId, le3, Ve, jt, $e2)), I10 && !on2 ? (this.didBind = true, T10.bindings[this.newStartBindingId] = I10, T10.shape = C3.deepMerge(T10.shape, { handles: { start: { bindingId: I10.id } } })) : !I10 && on2 && (this.didBind = false, T10.bindings[this.newStartBindingId] = void 0, T10.shape = C3.deepMerge(e11, { handles: { start: { bindingId: void 0 } } }));
      }
      if (!s11) {
        let I10 = e.add(y10.point, T10.shape.point), q10 = e.add(b10.point, T10.shape.point), de4 = e.uni(e.sub(q10, I10)), le3 = e.add(T10.shape.point, T10.shape.handles.start.point), Ae2 = e.add(T10.shape.point, T10.shape.handles.end.point), Ce2 = this.bindableShapeIds.map((De2) => this.app.page.shapes[De2]).sort((De2, Ve) => Ve.childIndex - De2.childIndex).filter((De2) => {
          if (De2.isLocked)
            return false;
          let Ve = v10.getShapeUtil(De2);
          return ![le3, Ae2].every(($e2) => Ve.hitTestPoint(De2, $e2));
        });
        for (let De2 of Ce2)
          if (w10 = this.findBindingPoint(i11, De2, this.handleId, this.draggedBindingId, q10, I10, de4, o11), w10)
            break;
      }
      if (w10)
        this.didBind = true, T10.bindings[this.draggedBindingId] = w10, T10.shape = C3.deepMerge(T10.shape, { handles: { [this.handleId]: { bindingId: this.draggedBindingId } } });
      else {
        this.didBind = this.didBind || false;
        let I10 = i11.handles[this.handleId].bindingId;
        I10 !== void 0 && (T10.bindings[I10] = void 0, T10.shape = C3.deepMerge(T10.shape, { handles: { [this.handleId]: { bindingId: void 0 } } }));
      }
      let R10 = (k10 = (L10 = v10.getShapeUtil(T10.shape)).onHandleChange) == null ? void 0 : k10.call(L10, T10.shape, T10.shape.handles);
      return { document: { pages: { [this.app.currentPageId]: { shapes: { [i11.id]: S4(S4({}, T10.shape), R10 != null ? R10 : {}) }, bindings: T10.bindings } }, pageStates: { [this.app.currentPageId]: { bindingId: T10.shape.handles[u11].bindingId } } } };
    });
    l7(this, "cancel", () => {
      let { initialShape: e11, initialBinding: t11, newStartBindingId: n11, draggedBindingId: o11 } = this, s11 = v10.onSessionComplete(this.app.page.shapes[e11.id]), a11 = this.isCreate || e.dist(s11.handles.start.point, s11.handles.end.point) < 4, d11 = {};
      return d11[o11] = void 0, t11 && (d11[t11.id] = a11 ? void 0 : t11), n11 && (d11[n11] = void 0), { document: { pages: { [this.app.currentPageId]: { shapes: { [e11.id]: a11 ? void 0 : e11 }, bindings: d11 } }, pageStates: { [this.app.currentPageId]: { selectedIds: a11 ? [] : [e11.id], bindingId: void 0, hoveredId: void 0, editingId: void 0 } } } };
    });
    l7(this, "complete", () => {
      let { initialShape: e11, initialBinding: t11, newStartBindingId: n11, startBindingShapeId: o11, handleId: s11 } = this, a11 = v10.onSessionComplete(this.app.page.shapes[e11.id]), d11 = a11.handles[s11].bindingId, i11 = e.dist(a11.handles.start.point, a11.handles.end.point);
      if (!(d11 || t11) && i11 < 4)
        return this.cancel();
      let c11 = {}, u11 = {};
      return t11 && (c11[t11.id] = this.isCreate ? void 0 : t11, u11[t11.id] = void 0), d11 && (c11[d11] = void 0, u11[d11] = this.app.page.bindings[d11]), o11 && (c11[n11] = void 0, u11[n11] = this.app.page.bindings[n11]), { id: "arrow", before: { document: { pages: { [this.app.currentPageId]: { shapes: { [e11.id]: this.isCreate ? void 0 : e11 }, bindings: c11 } }, pageStates: { [this.app.currentPageId]: { selectedIds: this.isCreate ? [] : [e11.id], bindingId: void 0, hoveredId: void 0, editingId: void 0 } } } }, after: { document: { pages: { [this.app.currentPageId]: { shapes: { [e11.id]: a11 }, bindings: u11 } }, pageStates: { [this.app.currentPageId]: { selectedIds: [e11.id], bindingId: void 0, hoveredId: void 0, editingId: void 0 } } } } };
    });
    l7(this, "findBindingPoint", (e11, t11, n11, o11, s11, a11, d11, i11) => {
      let u11 = v10.getShapeUtil(t11.type).getBindingPoint(t11, e11, s11, a11, d11, i11);
      if (!!u11)
        return { id: o11, type: "arrow", fromId: e11.id, toId: t11.id, handleId: n11, point: e.toFixed(u11.point), distance: u11.distance };
    });
    var c10, u10, p10;
    this.isCreate = o10;
    let { currentPageId: s10 } = e10.state.appState, a10 = e10.state.document.pages[s10];
    this.handleId = n10, this.initialShape = St2(a10.shapes[t10]), this.bindableShapeIds = v10.getBindableShapeIds(e10.state).filter((m10) => !(m10 === this.initialShape.id || m10 === this.initialShape.parentId));
    let d10 = (c10 = this.initialShape.handles[n10 === "start" ? "end" : "start"]) == null ? void 0 : c10.bindingId;
    if (d10) {
      let m10 = (u10 = a10.bindings[d10]) == null ? void 0 : u10.toId;
      m10 && (this.bindableShapeIds = this.bindableShapeIds.filter((h10) => h10 !== m10));
    }
    let { originPoint: i10 } = this.app;
    if (this.isCreate)
      this.startBindingShapeId = (p10 = this.bindableShapeIds.map((m10) => a10.shapes[m10]).filter((m10) => !m10.isLocked && C3.pointInBounds(i10, v10.getShapeUtil(m10).getBounds(m10))).sort((m10, h10) => h10.childIndex - m10.childIndex)[0]) == null ? void 0 : p10.id, this.startBindingShapeId && this.bindableShapeIds.splice(this.bindableShapeIds.indexOf(this.startBindingShapeId), 1);
    else {
      let m10 = this.initialShape.handles[this.handleId].bindingId;
      m10 ? this.initialBinding = a10.bindings[m10] : this.initialShape.handles[this.handleId].bindingId = void 0;
    }
  }
};
var Oi = class extends Ye2 {
  constructor(e10) {
    super(e10);
    l7(this, "type", "brush");
    l7(this, "performanceMode");
    l7(this, "status", "brushing");
    l7(this, "initialSelectedIds");
    l7(this, "shapesToTest");
    l7(this, "start", () => {
    });
    l7(this, "update", () => {
      let { initialSelectedIds: e11, shapesToTest: t11, app: { metaKey: n10, settings: o10, originPoint: s10, currentPoint: a10 } } = this, d10 = C3.getBoundsFromPoints([s10, a10]), i10 = o10.isCadSelectMode ? !n10 && s10[0] < a10[0] : n10, c10 = /* @__PURE__ */ new Set(), u10 = new Set(e11);
      t11.forEach(({ id: g10, selectId: f10 }) => {
        let T10 = this.app.getShape(g10);
        if (!c10.has(f10)) {
          let w10 = this.app.getShapeUtil(T10);
          (i10 ? C3.boundsContain(d10, w10.getBounds(T10)) : w10.hitTestBounds(T10, d10)) ? (c10.add(f10), u10.has(f10) || u10.add(f10)) : u10.has(f10) && u10.delete(f10);
        }
      });
      let p10 = this.app.selectedIds, m10 = u10.size !== p10.length || p10.some((g10) => !u10.has(g10)), h10 = m10 ? Array.from(u10.values()) : p10;
      return m10 ? { appState: { selectByContain: i10 }, document: { pageStates: { [this.app.currentPageId]: { brush: d10, selectedIds: h10 } } } } : { appState: { selectByContain: i10 }, document: { pageStates: { [this.app.currentPageId]: { brush: d10 } } } };
    });
    l7(this, "cancel", () => ({ appState: { selectByContain: false }, document: { pageStates: { [this.app.currentPageId]: { brush: null, selectedIds: Array.from(this.initialSelectedIds.values()) } } } }));
    l7(this, "complete", () => ({ appState: { selectByContain: false }, document: { pageStates: { [this.app.currentPageId]: { brush: null, selectedIds: [...this.app.selectedIds] } } } }));
    let { currentPageId: t10 } = e10;
    this.initialSelectedIds = new Set(this.app.selectedIds), this.shapesToTest = this.app.shapes.filter((n10) => !(n10.isLocked || n10.isHidden || n10.parentId !== t10 || this.initialSelectedIds.has(n10.id) || this.initialSelectedIds.has(n10.parentId))).map((n10) => ({ id: n10.id, bounds: this.app.getShapeUtil(n10).getBounds(n10), selectId: n10.id })), this.update();
  }
};
var Fi = class extends Ye2 {
  constructor(e10, t10) {
    super(e10);
    l7(this, "type", "draw");
    l7(this, "performanceMode");
    l7(this, "status", "creating");
    l7(this, "topLeft");
    l7(this, "points");
    l7(this, "initialShape");
    l7(this, "lastAdjustedPoint");
    l7(this, "shiftedPoints", []);
    l7(this, "shapeId");
    l7(this, "isLocked");
    l7(this, "isExtending");
    l7(this, "lockedDirection");
    l7(this, "start", () => {
      var s11;
      let e11 = this.app.originPoint, t11 = [0, 0, (s11 = e11[2]) != null ? s11 : 0.5];
      this.points.push(t11);
      let n11 = [Math.min(this.topLeft[0], e11[0]), Math.min(this.topLeft[1], e11[1])], o11 = e.sub(n11, e11);
      return this.topLeft = n11, this.shiftedPoints = this.points.map((a11) => e.toFixed(e.sub(a11, o11)).concat(a11[2])), { document: { pages: { [this.app.currentPageId]: { shapes: { [this.shapeId]: { point: this.topLeft, points: this.shiftedPoints } } } }, pageStates: { [this.app.currentPageId]: { selectedIds: [this.shapeId] } } } };
    });
    l7(this, "update", () => {
      let { shapeId: e11 } = this, { currentPoint: t11, originPoint: n11, shiftKey: o11, zoom: s11 } = this.app;
      if (!this.lockedDirection && this.points.length > 1) {
        let d11 = e.sub(t11, n11);
        e.len(d11) > 3 / s11 && (this.lockedDirection = Math.abs(d11[0]) > Math.abs(d11[1]) ? "horizontal" : "vertical");
      }
      if (o11) {
        if (!this.isLocked && this.points.length > 2) {
          if (!this.lockedDirection) {
            let i11 = e.sub(t11, n11);
            e.len(i11) > 3 / s11 && (this.lockedDirection = Math.abs(i11[0]) > Math.abs(i11[1]) ? "horizontal" : "vertical");
          }
          this.isLocked = true;
          let d11 = [...this.lastAdjustedPoint];
          this.lockedDirection === "vertical" ? d11[0] = 0 : d11[1] = 0, this.points.push(d11.concat(t11[2]));
        }
      } else
        this.isLocked && (this.isLocked = false);
      this.isLocked && (this.lockedDirection === "vertical" ? t11[0] = n11[0] : t11[1] = n11[1]);
      let a11 = this.addPoint(t11);
      if (!!a11)
        return { document: { pages: { [this.app.currentPageId]: { shapes: { [e11]: a11 } } }, pageStates: { [this.app.currentPageId]: { selectedIds: [e11] } } } };
    });
    l7(this, "cancel", () => {
      let { shapeId: e11 } = this, t11 = this.app.currentPageId;
      return { document: { pages: { [t11]: { shapes: { [e11]: this.isExtending ? this.initialShape : void 0 } } }, pageStates: { [t11]: { selectedIds: [] } } } };
    });
    l7(this, "complete", () => {
      let { shapeId: e11 } = this, t11 = this.app.currentPageId, n11 = this.app.getShape(e11);
      return { id: "create_draw", before: { document: { pages: { [t11]: { shapes: { [e11]: this.isExtending ? this.initialShape : void 0 } } }, pageStates: { [t11]: { selectedIds: [] } } } }, after: { document: { pages: { [t11]: { shapes: { [e11]: x5(S4({}, n11), { point: e.toFixed(n11.point), points: n11.points.map((o11) => e.toFixed(o11)), isComplete: true }) } } }, pageStates: { [this.app.currentPageId]: { selectedIds: [] } } } } };
    });
    l7(this, "addPoint", (e11) => {
      let { originPoint: t11 } = this.app, n11 = e.toFixed(e.sub(e11, t11)).concat(e11[2]);
      if (e.isEqual(this.lastAdjustedPoint, n11))
        return;
      this.points.push(n11), this.lastAdjustedPoint = n11;
      let o11 = [...this.topLeft], s11 = [Math.min(this.topLeft[0], e11[0]), Math.min(this.topLeft[1], e11[1])], a11 = e.sub(s11, t11), d11;
      return o11[0] !== s11[0] || o11[1] !== s11[1] ? (this.topLeft = s11, d11 = this.points.map((i11) => e.toFixed(e.sub(i11, a11)).concat(i11[2]))) : d11 = [...this.shiftedPoints, e.sub(n11, a11).concat(n11[2])], this.shiftedPoints = d11, { point: this.topLeft, points: d11 };
    });
    var i10;
    let { originPoint: n10 } = this.app;
    this.shapeId = t10, this.initialShape = this.app.getShape(t10), this.topLeft = [...this.initialShape.point];
    let o10 = [0, 0, (i10 = n10[2]) != null ? i10 : 0.5], s10 = e.sub(n10, this.topLeft), a10 = this.initialShape.points.map((c10) => e.sub(c10, s10).concat(c10[2]));
    this.isExtending = a10.length > 0;
    let d10 = [];
    if (this.isExtending) {
      let c10 = a10[a10.length - 1];
      if (c10) {
        d10.push(c10, c10);
        let u10 = Math.floor(e.dist(c10, o10) / 16);
        if (u10 > 1)
          for (let p10 = 0; p10 < u10; p10++) {
            let m10 = p10 / (u10 - 1);
            d10.push(e.lrp(c10, o10, m10).concat(c10[2]));
          }
        else
          d10.push(o10, o10);
      }
    } else
      d10.push(o10);
    this.points = [...a10, ...d10], this.shiftedPoints = this.points.map((c10) => e.add(c10, s10).concat(c10[2])), this.lastAdjustedPoint = this.points[this.points.length - 1];
  }
};
var ji = class extends Ye2 {
  constructor(e10, t10, n10) {
    super(e10);
    l7(this, "type", "edit");
    l7(this, "performanceMode");
    l7(this, "initialShape");
    l7(this, "initialSelectedIds");
    l7(this, "currentPageId");
    l7(this, "isCreating");
    l7(this, "start", () => {
    });
    l7(this, "update", () => {
    });
    l7(this, "cancel", () => ({ document: { pages: { [this.currentPageId]: { shapes: { [this.initialShape.id]: this.isCreating ? void 0 : this.initialShape } } }, pageStates: { [this.currentPageId]: { selectedIds: this.isCreating ? [] : this.initialSelectedIds, editingId: void 0 } } } }));
    l7(this, "complete", () => {
      let e11 = this.app.getShape(this.initialShape.id);
      return { id: "edit", before: { document: { pages: { [this.currentPageId]: { shapes: { [this.initialShape.id]: this.isCreating ? void 0 : this.initialShape } } }, pageStates: { [this.currentPageId]: { selectedIds: this.isCreating ? [] : this.initialSelectedIds, editingId: void 0 } } } }, after: { document: { pages: { [this.currentPageId]: { shapes: { [this.initialShape.id]: e11 } } }, pageStates: { [this.currentPageId]: { selectedIds: [e11.id], editingId: void 0 } } } } };
    });
    this.initialShape = e10.getShape(t10, e10.currentPageId), this.currentPageId = e10.currentPageId, this.isCreating = n10, this.initialSelectedIds = [...e10.selectedIds];
  }
};
var Gi = class extends Ye2 {
  constructor(e10) {
    super(e10);
    l7(this, "type", "draw");
    l7(this, "performanceMode");
    l7(this, "status", "creating");
    l7(this, "isLocked");
    l7(this, "lockedDirection");
    l7(this, "erasedShapes", /* @__PURE__ */ new Set());
    l7(this, "erasedBindings", /* @__PURE__ */ new Set());
    l7(this, "initialSelectedShapes");
    l7(this, "erasableShapes");
    l7(this, "prevPoint");
    l7(this, "prevEraseShapesSize", 0);
    l7(this, "interval");
    l7(this, "timestamp1", 0);
    l7(this, "timestamp2", 0);
    l7(this, "prevErasePoint", []);
    l7(this, "loop", () => {
      let e11 = Date.now(), t10 = e11 - this.timestamp1, n10 = e11 - this.timestamp2, { eraseLine: o10 } = this.app.appState, s10 = [...o10], a10 = false;
      t10 > 16 && this.prevErasePoint !== this.prevPoint && (a10 = true, s10 = [...o10, this.prevPoint], this.prevErasePoint = this.prevPoint), n10 > 32 && s10.length > 1 && (a10 = true, s10.splice(0, Math.ceil(s10.length * 0.1)), this.timestamp2 = e11), a10 && this.app.patchState({ appState: { eraseLine: s10 } }, "eraseline"), this.interval = requestAnimationFrame(this.loop);
    });
    l7(this, "start", () => {
    });
    l7(this, "update", () => {
      let { page: e11, shiftKey: t10, originPoint: n10, currentPoint: o10, zoom: s10 } = this.app;
      if (t10) {
        let c10 = e.sub(o10, n10);
        if (!this.isLocked && e.len(c10) > 3 / s10) {
          if (!this.lockedDirection) {
            let u10 = e.sub(o10, n10);
            this.lockedDirection = Math.abs(u10[0]) > Math.abs(u10[1]) ? "horizontal" : "vertical";
          }
          this.isLocked = true;
        }
      } else
        this.isLocked && (this.isLocked = false);
      this.isLocked && (this.lockedDirection === "vertical" ? o10[0] = n10[0] : o10[1] = n10[1]);
      let a10 = e.toFixed(e.add(n10, e.sub(o10, n10))), d10 = /* @__PURE__ */ new Set([]);
      this.erasableShapes.forEach((c10) => {
        if (!this.erasedShapes.has(c10) && this.app.getShapeUtil(c10).hitTestLineSegment(c10, this.prevPoint, a10) && (this.erasedShapes.add(c10), d10.add(c10.id), c10.children !== void 0))
          for (let u10 of c10.children)
            this.erasedShapes.add(this.app.getShape(u10)), d10.add(u10);
      }), Object.values(e11.bindings).forEach((c10) => {
        for (let u10 of [c10.toId, c10.fromId])
          d10.has(u10) && this.erasedBindings.add(c10);
      }), this.erasedShapes.forEach((c10) => {
        this.app.getShape(c10.id) || (this.erasedShapes.delete(c10), this.erasableShapes.delete(c10), d10.delete(c10.id));
      });
      let i10 = Array.from(this.erasedShapes.values());
      if (this.prevPoint = a10, i10.length !== this.prevEraseShapesSize)
        return this.prevEraseShapesSize = i10.length, { document: { pages: { [e11.id]: { shapes: Object.fromEntries(i10.map((c10) => [c10.id, { isGhost: true }])) } } } };
    });
    l7(this, "cancel", () => {
      let { page: e11 } = this.app;
      cancelAnimationFrame(this.interval), this.erasedShapes.forEach((n10) => {
        this.app.getShape(n10.id) || (this.erasedShapes.delete(n10), this.erasableShapes.delete(n10));
      });
      let t10 = Array.from(this.erasedShapes.values());
      return { document: { pages: { [e11.id]: { shapes: Object.fromEntries(t10.map((n10) => [n10.id, { isGhost: false }])) } }, pageStates: { [e11.id]: { selectedIds: this.initialSelectedShapes.map((n10) => n10.id) } } }, appState: { eraseLine: [] } };
    });
    l7(this, "complete", () => {
      let { page: e11 } = this.app;
      cancelAnimationFrame(this.interval), this.erasedShapes.forEach((i10) => {
        this.app.getShape(i10.id) || (this.erasedShapes.delete(i10), this.erasableShapes.delete(i10));
      }), this.erasedBindings.forEach((i10) => {
        this.app.getBinding(i10.id) || this.erasedBindings.delete(i10);
      });
      let t10 = Array.from(this.erasedShapes.values()), n10 = Array.from(this.erasedBindings.values()), o10 = t10.map((i10) => i10.id), s10 = n10.map((i10) => i10.id), a10 = { shapes: Object.fromEntries(t10.map((i10) => [i10.id, i10])), bindings: Object.fromEntries(n10.map((i10) => [i10.id, i10])) }, d10 = { shapes: Object.fromEntries(t10.map((i10) => [i10.id, void 0])), bindings: Object.fromEntries(n10.map((i10) => [i10.id, void 0])) };
      return this.app.shapes.forEach((i10) => {
        i10.handles && !d10.shapes[i10.id] && Object.values(i10.handles).forEach((c10) => {
          var u10, p10;
          c10.bindingId && s10.includes(c10.bindingId) && (a10.shapes[i10.id] = x5(S4({}, a10.shapes[i10.id]), { handles: x5(S4({}, (u10 = a10.shapes[i10.id]) == null ? void 0 : u10.handles), { [c10.id]: c10 }) }), o10.includes(i10.id) || (d10.shapes[i10.id] = x5(S4({}, d10.shapes[i10.id]), { handles: x5(S4({}, (p10 = d10.shapes[i10.id]) == null ? void 0 : p10.handles), { [c10.id]: x5(S4({}, c10), { bindingId: void 0 }) }) })));
        });
      }), { id: "erase", before: { document: { pages: { [e11.id]: a10 }, pageStates: { [e11.id]: { selectedIds: this.initialSelectedShapes.filter((i10) => !!this.app.getShape(i10.id)).map((i10) => i10.id) } } }, appState: { eraseLine: [] } }, after: { document: { pages: { [e11.id]: d10 }, pageStates: { [e11.id]: { selectedIds: this.initialSelectedShapes.filter((i10) => !!this.app.getShape(i10.id)).filter((i10) => !o10.includes(i10.id)).map((i10) => i10.id) } } }, appState: { eraseLine: [] } } };
    });
    this.prevPoint = [...e10.originPoint], this.initialSelectedShapes = this.app.selectedIds.map((t10) => this.app.getShape(t10)), this.erasableShapes = new Set(this.app.shapes.filter((t10) => !t10.isLocked)), this.interval = this.loop();
  }
};
var Vi = class extends Ye2 {
  constructor(e10, t10) {
    super(e10);
    l7(this, "type", "grid");
    l7(this, "performanceMode");
    l7(this, "status", "translating");
    l7(this, "shape");
    l7(this, "bounds");
    l7(this, "initialSelectedIds");
    l7(this, "initialSiblings");
    l7(this, "grid", {});
    l7(this, "columns", 1);
    l7(this, "rows", 1);
    l7(this, "isCopying", false);
    l7(this, "start", () => {
    });
    l7(this, "update", () => {
      let { currentPageId: e11, altKey: t11, shiftKey: n11, currentPoint: o10 } = this.app, s10 = {}, a10 = {}, d10 = C3.getBoundsCenter(this.bounds), i10 = e.sub(o10, d10);
      n11 && (Math.abs(i10[0]) < Math.abs(i10[1]) ? i10[0] = 0 : i10[1] = 0);
      let c10 = this.bounds.width + 32, u10 = this.bounds.height + 32, p10 = Math.ceil(i10[0] / c10), m10 = Math.ceil(i10[1] / u10), h10 = Math.min(p10, 0), g10 = Math.min(m10, 0), f10 = Math.max(p10, 1), T10 = Math.max(m10, 1), w10 = /* @__PURE__ */ new Set(), b10 = t11;
      b10 !== this.isCopying && (Object.values(this.grid).filter((y10) => y10 !== this.shape.id).forEach((y10) => s10[y10] = void 0), this.grid = { "0_0": this.shape.id }, this.isCopying = b10);
      for (let y10 = h10; y10 < f10; y10++)
        for (let R10 = g10; R10 < T10; R10++) {
          let U10 = `${y10}_${R10}`;
          if (w10.add(U10), this.grid[U10] || y10 === 0 && R10 === 0)
            continue;
          let L10 = this.getClone(e.add(this.shape.point, [y10 * c10, R10 * u10]), b10);
          s10[L10.id] = L10, this.grid[U10] = L10.id;
        }
      if (Object.entries(this.grid).forEach(([y10, R10]) => {
        w10.has(y10) || (s10[R10] = void 0, delete this.grid[y10]);
      }), Object.values(s10).length !== 0)
        return this.initialSiblings && (s10[this.shape.parentId] = { children: [...this.initialSiblings, ...Object.values(this.grid)] }), { document: { pages: { [e11]: { shapes: s10 } }, pageStates: { [e11]: a10 } } };
    });
    l7(this, "cancel", () => {
      let { currentPageId: e11 } = this.app, t11 = {};
      return Object.values(this.grid).forEach((n11) => {
        t11[n11] = void 0;
      }), t11[this.shape.id] = x5(S4({}, t11[this.shape.id]), { point: this.shape.point }), this.initialSiblings && (t11[this.shape.parentId] = { children: [...this.initialSiblings, this.shape.id] }), { document: { pages: { [e11]: { shapes: t11 } }, pageStates: { [e11]: { selectedIds: [this.shape.id] } } } };
    });
    l7(this, "complete", () => {
      let { currentPageId: e11 } = this.app, t11 = {}, n11 = {}, o10 = [];
      if (Object.values(this.grid).forEach((s10) => {
        t11[s10] = void 0, n11[s10] = this.app.getShape(s10), o10.push(s10);
      }), t11[this.shape.id] = this.shape, this.initialSiblings && (t11[this.shape.parentId] = { children: [...this.initialSiblings, this.shape.id] }, n11[this.shape.parentId] = { children: [...this.initialSiblings, ...Object.values(this.grid)] }), o10.length !== 1)
        return { id: "grid", before: { document: { pages: { [e11]: { shapes: t11 } }, pageStates: { [e11]: { selectedIds: [], hoveredId: void 0 } } } }, after: { document: { pages: { [e11]: { shapes: n11 } }, pageStates: { [e11]: { selectedIds: o10, hoveredId: void 0 } } } } };
    });
    l7(this, "getClone", (e11, t11) => {
      let n11 = x5(S4({}, this.shape), { id: C3.uniqueId(), point: e11 });
      return t11 || n11.type === "sticky" && (n11.text = ""), n11;
    });
    var n10;
    this.shape = this.app.getShape(t10), this.grid["0_0"] = this.shape.id, this.bounds = this.app.getShapeBounds(t10), this.initialSelectedIds = [...this.app.selectedIds], this.shape.parentId !== this.app.currentPageId && (this.initialSiblings = (n10 = this.app.getShape(this.shape.parentId).children) == null ? void 0 : n10.filter((o10) => o10 !== this.shape.id));
  }
};
var Ni = class extends Ye2 {
  constructor(e10, t10, n10, o10 = "move_handle") {
    super(e10);
    l7(this, "type", "handle");
    l7(this, "performanceMode");
    l7(this, "status", "translatingHandle");
    l7(this, "commandId");
    l7(this, "topLeft");
    l7(this, "shiftKey", false);
    l7(this, "initialShape");
    l7(this, "handleId");
    l7(this, "start", () => {
    });
    l7(this, "update", () => {
      var u10, p10;
      let { initialShape: e11, app: { currentPageId: t11, currentPoint: n11 } } = this, o11 = this.app.getShape(e11.id);
      if (o11.isLocked)
        return;
      let s11 = o11.handles, a10 = this.handleId, d10 = e.sub(n11, s11[a10].point), i10 = { [a10]: x5(S4({}, s11[a10]), { point: e.sub(e.add(s11[a10].point, d10), o11.point) }) }, c10 = (p10 = (u10 = v10.getShapeUtil(o11)).onHandleChange) == null ? void 0 : p10.call(u10, o11, i10);
      if (!!c10)
        return { document: { pages: { [t11]: { shapes: { [o11.id]: c10 } } } } };
    });
    l7(this, "cancel", () => {
      let { initialShape: e11, app: { currentPageId: t11 } } = this;
      return { document: { pages: { [t11]: { shapes: { [e11.id]: e11 } } } } };
    });
    l7(this, "complete", () => {
      let { initialShape: e11, app: { currentPageId: t11 } } = this;
      return { id: this.commandId, before: { document: { pages: { [t11]: { shapes: { [e11.id]: e11 } } } } }, after: { document: { pages: { [t11]: { shapes: { [e11.id]: v10.onSessionComplete(this.app.getShape(this.initialShape.id)) } } } } } };
    });
    let { originPoint: s10 } = e10;
    this.topLeft = [...s10], this.handleId = n10, this.initialShape = this.app.getShape(t10), this.commandId = o10;
  }
};
var Wi = class extends Ye2 {
  constructor(e10) {
    super(e10);
    l7(this, "type", "rotate");
    l7(this, "status", "transforming");
    l7(this, "performanceMode");
    l7(this, "delta", [0, 0]);
    l7(this, "commonBoundsCenter");
    l7(this, "initialAngle");
    l7(this, "initialShapes");
    l7(this, "changes", {});
    l7(this, "start", () => {
    });
    l7(this, "update", () => {
      let { commonBoundsCenter: e11, initialShapes: t11, app: { currentPageId: n11, currentPoint: o11, shiftKey: s11 } } = this, a10 = {}, d10 = e.angle(e11, o11) - this.initialAngle;
      return s11 && (d10 = C3.snapAngleToSegments(d10, 24)), t11.forEach(({ center: i10, shape: c10 }) => {
        let { rotation: u10 = 0 } = c10, p10 = 0;
        s11 && (p10 = C3.snapAngleToSegments(u10, 24) - u10);
        let m10 = v10.getRotatedShapeMutation(c10, i10, e11, s11 ? d10 + p10 : d10);
        m10 && (a10[c10.id] = m10);
      }), this.changes = a10, { document: { pages: { [n11]: { shapes: a10 } } } };
    });
    l7(this, "cancel", () => {
      let { initialShapes: e11, app: { currentPageId: t11 } } = this, n11 = {};
      return e11.forEach(({ shape: o11 }) => n11[o11.id] = o11), { document: { pages: { [t11]: { shapes: n11 } } } };
    });
    l7(this, "complete", () => {
      let { initialShapes: e11, app: { currentPageId: t11 } } = this, n11 = {}, o11 = this.changes;
      return e11.forEach(({ shape: { id: s11, point: a10, rotation: d10, handles: i10 } }) => {
        n11[s11] = { point: a10, rotation: d10, handles: i10 };
      }), { id: "rotate", before: { document: { pages: { [t11]: { shapes: n11 } } } }, after: { document: { pages: { [t11]: { shapes: o11 } } } } };
    });
    let { app: { currentPageId: t10, pageState: n10, originPoint: o10 } } = this, s10 = v10.getSelectedBranchSnapshot(e10.state, t10).filter((a10) => !a10.isLocked);
    if (s10.length === 0)
      throw Error("No selected shapes!");
    if (e10.rotationInfo.selectedIds === n10.selectedIds) {
      if (e10.rotationInfo.center === void 0)
        throw Error("We should have a center for rotation!");
      this.commonBoundsCenter = e10.rotationInfo.center;
    } else
      this.commonBoundsCenter = C3.getBoundsCenter(C3.getCommonBounds(s10.map(v10.getBounds))), e10.rotationInfo.selectedIds = n10.selectedIds, e10.rotationInfo.center = this.commonBoundsCenter;
    this.initialShapes = s10.filter((a10) => a10.children === void 0).map((a10) => ({ shape: a10, center: this.app.getShapeUtil(a10).getCenter(a10) })), this.initialAngle = e.angle(this.commonBoundsCenter, o10);
  }
};
var Ui = class extends Ye2 {
  constructor(e10, t10 = He.BottomRight, n10 = false) {
    super(e10);
    this.transformType = t10;
    this.isCreate = n10;
    l7(this, "type", "transform");
    l7(this, "performanceMode");
    l7(this, "status", "transforming");
    l7(this, "scaleX", 1);
    l7(this, "scaleY", 1);
    l7(this, "initialShapes");
    l7(this, "initialShapeIds");
    l7(this, "initialSelectedIds");
    l7(this, "shapeBounds");
    l7(this, "hasUnlockedShapes");
    l7(this, "isAllAspectRatioLocked");
    l7(this, "initialCommonBounds");
    l7(this, "snapInfo", { state: "empty" });
    l7(this, "prevPoint", [0, 0]);
    l7(this, "speed", 1);
    l7(this, "start", () => {
      this.snapInfo = { state: "ready", bounds: this.app.shapes.filter((e11) => !this.initialShapeIds.includes(e11.id)).map((e11) => C3.getBoundsWithCenter(v10.getRotatedBounds(e11))) };
    });
    l7(this, "update", () => {
      let { transformType: e11, shapeBounds: t11, initialCommonBounds: n11, isAllAspectRatioLocked: o11, app: { currentPageId: s11, pageState: { camera: a11 }, viewport: d10, currentPoint: i10, previousPoint: c10, originPoint: u10, shiftKey: p10, altKey: m10, metaKey: h10, currentGrid: g10, settings: { isSnapping: f10, showGrid: T10 } } } = this, w10 = {}, b10 = m10 ? e.mul(e.sub(i10, u10), 2) : e.sub(i10, u10), y10 = C3.getTransformedBoundingBox(n11, e11, b10, 0, p10 || o11);
      m10 && (y10 = S4(S4({}, y10), C3.centerBounds(y10, C3.getBoundsCenter(n11)))), T10 && (y10 = S4(S4({}, y10), C3.snapBoundsToGrid(y10, g10)));
      let U10 = e.dist(i10, c10) - this.speed;
      this.speed = this.speed + U10 * (U10 > 1 ? 0.5 : 0.15);
      let L10 = [];
      if ((f10 && !h10 || !f10 && h10) && this.speed * a11.zoom < 10 && this.snapInfo.state === "ready") {
        let k10 = C3.getSnapPoints(C3.getBoundsWithCenter(y10), this.snapInfo.bounds.filter((I10) => C3.boundsContain(d10, I10) || C3.boundsCollide(d10, I10)), 5 / a11.zoom);
        k10 && (L10 = k10.snapLines, y10 = C3.getTransformedBoundingBox(n11, e11, e.sub(b10, k10.offset), 0, p10 || o11));
      }
      return this.scaleX = y10.scaleX, this.scaleY = y10.scaleY, t11.forEach(({ initialShape: k10, initialShapeBounds: I10, transformOrigin: q10 }) => {
        let de4 = C3.getRelativeTransformedBoundingBox(y10, n11, I10, this.scaleX < 0, this.scaleY < 0);
        T10 && (de4 = C3.snapBoundsToGrid(de4, g10));
        let le3 = v10.transform(this.app.getShape(k10.id), de4, { type: this.transformType, initialShape: k10, scaleX: this.scaleX, scaleY: this.scaleY, transformOrigin: q10 });
        w10[k10.id] = le3;
      }), { appState: { snapLines: L10 }, document: { pages: { [s11]: { shapes: w10 } } } };
    });
    l7(this, "cancel", () => {
      let { shapeBounds: e11, app: { currentPageId: t11 } } = this, n11 = {};
      return this.isCreate ? e11.forEach((o11) => n11[o11.initialShape.id] = void 0) : e11.forEach((o11) => n11[o11.initialShape.id] = o11.initialShape), { appState: { snapLines: [] }, document: { pages: { [t11]: { shapes: n11 } }, pageStates: { [t11]: { selectedIds: this.isCreate ? [] : e11.map((o11) => o11.initialShape.id) } } } };
    });
    l7(this, "complete", () => {
      let { isCreate: e11, shapeBounds: t11, hasUnlockedShapes: n11, app: { currentPageId: o11 } } = this;
      if (!n11)
        return;
      if (this.isCreate && e.dist(this.app.originPoint, this.app.currentPoint) < 2)
        return this.cancel();
      let s11 = {}, a11 = {}, d10, i10;
      return e11 ? (d10 = [], i10 = [], t11.forEach(({ initialShape: c10 }) => {
        s11[c10.id] = void 0, a11[c10.id] = this.app.getShape(c10.id);
      })) : (d10 = this.initialSelectedIds, i10 = this.initialSelectedIds, t11.forEach(({ initialShape: c10 }) => {
        s11[c10.id] = c10, a11[c10.id] = this.app.getShape(c10.id);
      })), { id: "transform", before: { appState: { snapLines: [] }, document: { pages: { [o11]: { shapes: s11 } }, pageStates: { [o11]: { selectedIds: d10, hoveredId: void 0, editingId: void 0 } } } }, after: { appState: { snapLines: [] }, document: { pages: { [o11]: { shapes: a11 } }, pageStates: { [o11]: { selectedIds: i10, hoveredId: void 0, editingId: void 0 } } } } };
    });
    this.initialSelectedIds = [...this.app.selectedIds], this.app.rotationInfo.selectedIds = [...this.initialSelectedIds], this.initialShapes = v10.getSelectedBranchSnapshot(this.app.state, this.app.currentPageId).filter((d10) => !d10.isLocked), this.initialShapeIds = this.initialShapes.map((d10) => d10.id), this.hasUnlockedShapes = this.initialShapes.length > 0, this.isAllAspectRatioLocked = this.initialShapes.every((d10) => d10.isAspectRatioLocked || v10.getShapeUtil(d10).isAspectRatioLocked);
    let o10 = Object.fromEntries(this.initialShapes.map((d10) => [d10.id, v10.getBounds(d10)])), s10 = Object.values(o10);
    this.initialCommonBounds = C3.getCommonBounds(s10);
    let a10 = C3.getBoundsFromPoints(s10.map(C3.getBoundsCenter));
    this.shapeBounds = this.initialShapes.map((d10) => {
      let i10 = o10[d10.id], c10 = C3.getBoundsCenter(i10), u10 = (c10[0] - a10.minX) / a10.width, p10 = (c10[1] - a10.minY) / a10.height;
      return { initialShape: d10, initialShapeBounds: i10, transformOrigin: [u10, p10] };
    });
  }
};
var Ki = class extends Ye2 {
  constructor(e10, t10, n10, o10 = false) {
    super(e10);
    l7(this, "type", "transformSingle");
    l7(this, "status", "transforming");
    l7(this, "performanceMode");
    l7(this, "transformType");
    l7(this, "scaleX", 1);
    l7(this, "scaleY", 1);
    l7(this, "isCreate");
    l7(this, "initialShape");
    l7(this, "initialShapeBounds");
    l7(this, "initialCommonBounds");
    l7(this, "snapInfo", { state: "empty" });
    l7(this, "prevPoint", [0, 0]);
    l7(this, "speed", 1);
    l7(this, "start", () => {
      this.snapInfo = { state: "ready", bounds: this.app.shapes.filter((e11) => e11.id !== this.initialShape.id).map((e11) => C3.getBoundsWithCenter(v10.getRotatedBounds(e11))) };
    });
    l7(this, "update", () => {
      let { transformType: e11, initialShape: t11, initialShapeBounds: n11, app: { settings: { isSnapping: o11, showGrid: s11 }, currentPageId: a10, pageState: { camera: d10 }, viewport: i10, currentPoint: c10, previousPoint: u10, originPoint: p10, currentGrid: m10, shiftKey: h10, altKey: g10, metaKey: f10 } } = this;
      if (t11.isLocked)
        return;
      let T10 = {}, w10 = g10 ? e.mul(e.sub(c10, p10), 2) : e.sub(c10, p10), b10 = this.app.getShape(t11.id), y10 = v10.getShapeUtil(b10), R10 = C3.getTransformedBoundingBox(n11, e11, w10, b10.rotation, h10 || b10.isAspectRatioLocked || y10.isAspectRatioLocked);
      g10 && (R10 = S4(S4({}, R10), C3.centerBounds(R10, C3.getBoundsCenter(n11)))), s11 && (R10 = S4(S4({}, R10), C3.snapBoundsToGrid(R10, m10)));
      let L10 = e.dist(c10, u10) - this.speed;
      this.speed = this.speed + L10 * (L10 > 1 ? 0.5 : 0.15);
      let k10 = [];
      if ((o11 && !f10 || !o11 && f10) && !t11.rotation && this.speed * d10.zoom < 10 && this.snapInfo.state === "ready") {
        let q10 = C3.getSnapPoints(C3.getBoundsWithCenter(R10), this.snapInfo.bounds.filter((de4) => C3.boundsContain(i10, de4) || C3.boundsCollide(i10, de4)), 5 / d10.zoom);
        q10 && (k10 = q10.snapLines, R10 = C3.getTransformedBoundingBox(n11, e11, e.sub(w10, q10.offset), b10.rotation, h10 || b10.isAspectRatioLocked || y10.isAspectRatioLocked));
      }
      let I10 = v10.getShapeUtil(b10).transformSingle(b10, R10, { initialShape: t11, type: this.transformType, scaleX: R10.scaleX, scaleY: R10.scaleY, transformOrigin: [0.5, 0.5] });
      return I10 && (T10[b10.id] = I10), s11 && I10 && I10.point && (I10.point = e.snap(I10.point, m10)), { appState: { snapLines: k10 }, document: { pages: { [a10]: { shapes: T10 } } } };
    });
    l7(this, "cancel", () => {
      let { initialShape: e11, app: { currentPageId: t11 } } = this, n11 = {};
      return this.isCreate ? n11[e11.id] = void 0 : n11[e11.id] = e11, { appState: { snapLines: [] }, document: { pages: { [t11]: { shapes: n11 } }, pageStates: { [t11]: { selectedIds: this.isCreate ? [] : [e11.id] } } } };
    });
    l7(this, "complete", () => {
      let { initialShape: e11, app: { currentPageId: t11 } } = this;
      if (e11.isLocked)
        return;
      if (this.isCreate && e.dist(this.app.originPoint, this.app.currentPoint) < 2)
        return this.cancel();
      let n11 = {}, o11 = {};
      return n11[e11.id] = this.isCreate ? void 0 : e11, o11[e11.id] = v10.onSessionComplete(this.app.getShape(e11.id)), { id: "transform_single", before: { appState: { snapLines: [] }, document: { pages: { [t11]: { shapes: n11 } }, pageStates: { [t11]: { selectedIds: this.isCreate ? [] : [e11.id], editingId: void 0, hoveredId: void 0 } } } }, after: { appState: { snapLines: [] }, document: { pages: { [t11]: { shapes: o11 } }, pageStates: { [t11]: { selectedIds: [e11.id], editingId: void 0, hoveredId: void 0 } } } } };
    });
    this.isCreate = o10, this.transformType = n10;
    let s10 = this.app.getShape(t10);
    this.initialShape = s10, this.initialShapeBounds = v10.getBounds(s10), this.initialCommonBounds = v10.getRotatedBounds(s10), this.app.rotationInfo.selectedIds = [s10.id];
  }
};
var _i = class extends Ye2 {
  constructor(e10, t10 = false, n10 = false) {
    super(e10);
    l7(this, "performanceMode");
    l7(this, "type", "translate");
    l7(this, "status", "translating");
    l7(this, "delta", [0, 0]);
    l7(this, "prev", [0, 0]);
    l7(this, "prevPoint", [0, 0]);
    l7(this, "speed", 1);
    l7(this, "cloneInfo", { state: "empty" });
    l7(this, "snapInfo", { state: "empty" });
    l7(this, "snapLines", []);
    l7(this, "isCloning", false);
    l7(this, "isCreate");
    l7(this, "link");
    l7(this, "initialIds");
    l7(this, "hasUnlockedShapes");
    l7(this, "initialSelectedIds");
    l7(this, "initialCommonBounds");
    l7(this, "initialShapes");
    l7(this, "initialParentChildren");
    l7(this, "bindingsToDelete");
    l7(this, "start", () => {
      let { bindingsToDelete: e11, initialIds: t11, app: { currentPageId: n11, page: o11 } } = this, s11 = [], a11 = [];
      if (Object.values(o11.shapes).forEach((c10) => {
        let u10 = C3.getBoundsWithCenter(v10.getRotatedBounds(c10));
        s11.push(u10), t11.has(c10.id) || a11.push(u10);
      }), this.snapInfo = { state: "ready", bounds: s11, others: a11 }, e11.length === 0)
        return;
      let d11 = {}, i11 = {};
      return e11.forEach((c10) => {
        d11[c10.id] = void 0;
        let u10 = this.app.getShape(c10.fromId);
        i11[c10.fromId] = { handles: x5(S4({}, u10.handles), { [c10.handleId]: x5(S4({}, u10.handles[c10.handleId]), { bindingId: void 0 }) }) };
      }), { document: { pages: { [n11]: { bindings: d11, shapes: i11 } } } };
    });
    l7(this, "update", () => {
      let { initialParentChildren: e11, initialShapes: t11, initialCommonBounds: n11, bindingsToDelete: o11, app: { pageState: { camera: s11 }, settings: { isSnapping: a11, showGrid: d11 }, currentPageId: i11, viewport: c10, selectedIds: u10, currentPoint: p10, previousPoint: m10, originPoint: h10, altKey: g10, shiftKey: f10, metaKey: T10, currentGrid: w10 } } = this, b10 = {}, y10 = {}, R10 = {}, U10 = e.sub(p10, h10), L10 = false;
      this.isCreate || (g10 && !this.isCloning ? (this.isCloning = true, L10 = true) : !g10 && this.isCloning && (this.isCloning = false, L10 = true)), f10 && (Math.abs(U10[0]) < Math.abs(U10[1]) ? U10[0] = 0 : U10[1] = 0);
      let I10 = e.dist(p10, m10) - this.speed;
      if (this.speed = this.speed + I10 * (I10 > 1 ? 0.5 : 0.15), this.snapLines = [], (a11 && !T10 || !a11 && T10) && this.speed * s11.zoom < 10 && this.snapInfo.state === "ready") {
        let q10 = C3.getSnapPoints(C3.getBoundsWithCenter(d11 ? C3.snapBoundsToGrid(C3.translateBounds(n11, U10), w10) : C3.translateBounds(n11, U10)), (this.isCloning ? this.snapInfo.bounds : this.snapInfo.others).filter((de4) => C3.boundsContain(c10, de4) || C3.boundsCollide(c10, de4)), 5 / s11.zoom);
        q10 && (this.snapLines = q10.snapLines, U10 = e.sub(U10, q10.offset));
      }
      if (this.prev = U10, this.isCloning)
        if (L10) {
          if (this.cloneInfo.state === "empty" && this.createCloneInfo(), this.cloneInfo.state === "empty")
            throw Error;
          let { clones: q10, clonedBindings: de4 } = this.cloneInfo;
          this.isCloning = true, o11.forEach((le3) => b10[le3.id] = le3), t11.forEach((le3) => y10[le3.id] = { point: le3.point }), q10.forEach((le3) => {
            var Ae2;
            if (y10[le3.id] = S4({}, le3), le3.parentId !== i11 && !u10.includes(le3.parentId)) {
              let Ce2 = ((Ae2 = y10[le3.parentId]) == null ? void 0 : Ae2.children) || e11[le3.parentId];
              Ce2.includes(le3.id) || (y10[le3.parentId] = x5(S4({}, y10[le3.parentId]), { children: [...Ce2, le3.id] }));
            }
          });
          for (let le3 of de4)
            b10[le3.id] = le3;
          R10.selectedIds = q10.map((le3) => le3.id), q10.forEach((le3) => {
            y10[le3.id] = x5(S4({}, le3), { point: d11 ? e.snap(e.toFixed(e.add(le3.point, U10)), w10) : e.toFixed(e.add(le3.point, U10)) });
          });
        } else {
          if (this.cloneInfo.state === "empty")
            throw Error;
          let { clones: q10 } = this.cloneInfo;
          q10.forEach((de4) => {
            y10[de4.id] = { point: d11 ? e.snap(e.toFixed(e.add(de4.point, U10)), w10) : e.toFixed(e.add(de4.point, U10)) };
          });
        }
      else if (L10) {
        if (this.cloneInfo.state === "empty")
          throw Error;
        let { clones: q10, clonedBindings: de4 } = this.cloneInfo;
        this.isCloning = false, o11.forEach((le3) => b10[le3.id] = void 0), q10.forEach((le3) => {
          le3.parentId !== i11 && (y10[le3.parentId] = x5(S4({}, y10[le3.parentId]), { children: e11[le3.parentId] }));
        }), q10.forEach((le3) => y10[le3.id] = void 0), t11.forEach((le3) => {
          y10[le3.id] = { point: d11 ? e.snap(e.toFixed(e.add(le3.point, U10)), w10) : e.toFixed(e.add(le3.point, U10)) };
        });
        for (let le3 of de4)
          b10[le3.id] = void 0;
        R10.selectedIds = t11.map((le3) => le3.id);
      } else
        t11.forEach((q10) => {
          y10[q10.id] = { point: d11 ? e.snap(e.toFixed(e.add(q10.point, U10)), w10) : e.toFixed(e.add(q10.point, U10)) };
        });
      return { appState: { snapLines: this.snapLines }, document: { pages: { [i11]: { shapes: y10, bindings: b10 } }, pageStates: { [i11]: R10 } } };
    });
    l7(this, "cancel", () => {
      let { initialShapes: e11, initialSelectedIds: t11, bindingsToDelete: n11, app: { currentPageId: o11 } } = this, s11 = {}, a11 = {}, d11 = { editingId: void 0, hoveredId: void 0 };
      if (this.isCreate ? (e11.forEach(({ id: i11 }) => a11[i11] = void 0), d11.selectedIds = []) : (e11.forEach(({ id: i11, point: c10, handles: u10 }) => a11[i11] = u10 ? x5(S4({}, a11[i11]), { point: c10, handles: u10 }) : x5(S4({}, a11[i11]), { point: c10 })), d11.selectedIds = t11, n11.forEach((i11) => {
        s11[i11.id] = i11;
      })), this.cloneInfo.state === "ready") {
        let { clones: i11, clonedBindings: c10 } = this.cloneInfo;
        i11.forEach((u10) => a11[u10.id] = void 0), c10.forEach((u10) => s11[u10.id] = void 0);
      }
      return { appState: { snapLines: [] }, document: { pages: { [o11]: { shapes: a11, bindings: s11 } }, pageStates: { [o11]: d11 } } };
    });
    l7(this, "complete", () => {
      let { initialShapes: e11, initialParentChildren: t11, bindingsToDelete: n11, app: { currentPageId: o11 } } = this, s11 = {}, a11 = {}, d11 = {}, i11 = {};
      if (this.isCloning) {
        if (this.cloneInfo.state === "empty" && this.createCloneInfo(), this.cloneInfo.state !== "ready")
          throw Error;
        let { clones: c10, clonedBindings: u10 } = this.cloneInfo;
        c10.forEach((p10) => {
          a11[p10.id] = void 0, i11[p10.id] = this.app.getShape(p10.id), p10.parentId !== o11 && (a11[p10.parentId] = x5(S4({}, a11[p10.parentId]), { children: t11[p10.parentId] }), i11[p10.parentId] = x5(S4({}, i11[p10.parentId]), { children: this.app.getShape(p10.parentId).children }));
        }), u10.forEach((p10) => {
          s11[p10.id] = void 0, d11[p10.id] = this.app.getBinding(p10.id);
        });
      } else
        e11.forEach((c10) => {
          a11[c10.id] = this.isCreate ? void 0 : x5(S4({}, a11[c10.id]), { point: c10.point }), i11[c10.id] = S4(S4({}, i11[c10.id]), this.isCreate ? this.app.getShape(c10.id) : { point: this.app.getShape(c10.id).point });
        });
      return n11.forEach((c10) => {
        var u10, p10, m10, h10, g10;
        s11[c10.id] = c10, a11[c10.fromId] = x5(S4({}, a11[c10.fromId]), { id: c10.fromId, handles: x5(S4({}, (u10 = a11[c10.fromId]) == null ? void 0 : u10.handles), { [c10.handleId]: x5(S4({}, (m10 = (p10 = a11[c10.fromId]) == null ? void 0 : p10.handles) == null ? void 0 : m10[c10.handleId]), { bindingId: c10.id }) }) }), i11[c10.fromId] = x5(S4({}, i11[c10.fromId]), { id: c10.fromId, handles: x5(S4({}, i11[c10.fromId].handles), { [c10.handleId]: x5(S4({}, (g10 = (h10 = i11[c10.fromId]) == null ? void 0 : h10.handles) == null ? void 0 : g10[c10.handleId]), { bindingId: void 0 }) }) });
      }), n11.forEach((c10) => d11[c10.id] = void 0), { id: "translate", before: { appState: { snapLines: [] }, document: { pages: { [o11]: { shapes: a11, bindings: s11 } }, pageStates: { [o11]: { selectedIds: this.isCreate ? [] : [...this.initialSelectedIds] } } } }, after: { appState: { snapLines: [] }, document: { pages: { [o11]: { shapes: i11, bindings: d11 } }, pageStates: { [o11]: { selectedIds: [...this.app.selectedIds] } } } } };
    });
    l7(this, "createCloneInfo", () => {
      let { initialShapes: e11, initialParentChildren: t11, app: { selectedIds: n11, currentPageId: o11, page: s11 } } = this, a11 = {}, d11 = {}, i11 = [], c10 = [];
      e11.forEach((p10) => {
        let m10 = C3.uniqueId();
        t11[m10] = t11[p10.id], a11[p10.id] = m10;
        let h10 = x5(S4({}, C3.deepClone(p10)), { id: m10, parentId: p10.parentId, childIndex: v10.getChildIndexAbove(this.app.state, p10.id, o11) });
        if (h10.type === "video") {
          let g10 = document.getElementById(p10.id + "_video");
          g10 && (h10.currentTime = (g10.currentTime + 16) % g10.duration);
        }
        c10.push(h10);
      }), c10.forEach((p10) => {
        p10.children !== void 0 && (p10.children = p10.children.map((m10) => a11[m10]));
      }), c10.forEach((p10) => {
        n11.includes(p10.parentId) && (p10.parentId = a11[p10.parentId]);
      });
      let u10 = new Set(Object.keys(a11));
      Object.values(s11.bindings).filter((p10) => u10.has(p10.fromId) || u10.has(p10.toId)).forEach((p10) => {
        if (u10.has(p10.fromId) && u10.has(p10.toId)) {
          let m10 = C3.uniqueId(), h10 = x5(S4({}, C3.deepClone(p10)), { id: m10, fromId: a11[p10.fromId] || p10.fromId, toId: a11[p10.toId] || p10.toId });
          d11[p10.id] = m10, i11.push(h10);
        }
      }), c10.forEach((p10) => {
        if (p10.handles && p10.handles)
          for (let m10 in p10.handles) {
            let h10 = p10.handles[m10];
            h10.bindingId = h10.bindingId ? d11[h10.bindingId] : void 0;
          }
      }), c10.forEach((p10) => {
        if (s11.shapes[p10.id])
          throw Error("uh oh, we didn't clone correctly");
      }), this.cloneInfo = { state: "ready", clones: c10, cloneMap: a11, clonedBindings: i11 };
    });
    this.isCreate = t10, this.link = n10;
    let { currentPageId: o10, selectedIds: s10, page: a10 } = this.app;
    this.initialSelectedIds = [...s10];
    let d10 = (n10 ? v10.getLinkedShapeIds(this.app.state, o10, n10, false) : s10).map((c10) => this.app.getShape(c10)).filter((c10) => !c10.isLocked), i10 = new Set(d10.map((c10) => c10.id));
    this.hasUnlockedShapes = d10.length > 0, this.initialShapes = Array.from(new Set(d10.filter((c10) => !i10.has(c10.parentId)).flatMap((c10) => c10.children ? [c10, ...c10.children.map((u10) => this.app.getShape(u10))] : [c10])).values()), this.initialIds = new Set(this.initialShapes.map((c10) => c10.id)), this.bindingsToDelete = [], Object.values(a10.bindings).filter((c10) => this.initialIds.has(c10.fromId) || this.initialIds.has(c10.toId)).forEach((c10) => {
      this.initialIds.has(c10.fromId) && (this.initialIds.has(c10.toId) || this.bindingsToDelete.push(c10));
    }), this.initialParentChildren = {}, this.initialShapes.map((c10) => c10.parentId).filter((c10) => c10 !== a10.id).forEach((c10) => {
      this.initialParentChildren[c10] = this.app.getShape(c10).children;
    }), this.initialCommonBounds = C3.getCommonBounds(this.initialShapes.map(v10.getRotatedBounds)), this.app.rotationInfo.selectedIds = [...this.app.selectedIds];
  }
};
var Dpe = { ["arrow"]: zi, ["brush"]: Oi, ["draw"]: Fi, ["erase"]: Gi, ["handle"]: Ni, ["rotate"]: Wi, ["transform"]: Ui, ["transformSingle"]: Ki, ["translate"]: _i, ["grid"]: Vi, ["edit"]: ji };
var dc = (r10) => Dpe[r10];
var nt2 = class extends ls {
  constructor(e10) {
    super();
    this.app = e10;
    l7(this, "type", "select");
    l7(this, "previous");
    l7(this, "status", "idle");
    l7(this, "setStatus", (e11) => {
      this.status = e11, this.app.setStatus(this.status);
    });
    l7(this, "onEnter", () => {
      this.setStatus("idle");
    });
    l7(this, "onExit", () => {
      this.setStatus("idle");
    });
    l7(this, "onCancel", () => {
      this.status === "idle" ? this.app.selectTool("select") : this.setStatus("idle"), this.app.cancelSession();
    });
    l7(this, "getNextChildIndex", () => {
      let { shapes: e11, appState: { currentPageId: t10 } } = this.app;
      return e11.length === 0 ? 1 : e11.filter((n10) => n10.parentId === t10).sort((n10, o10) => o10.childIndex - n10.childIndex)[0].childIndex + 1;
    });
    l7(this, "onPinchStart", () => {
      this.app.cancelSession(), this.setStatus("pinching");
    });
    l7(this, "onPinchEnd", () => {
      C3.isMobileSafari() && this.app.undoSelect(), this.setStatus("idle");
    });
    l7(this, "onPinch", (e11, t10) => {
      var n10;
      this.status === "pinching" && (isNaN(e11.delta[0]) || isNaN(e11.delta[1]) || (this.app.pinchZoom(e11.point, e11.delta, e11.delta[2]), (n10 = this.onPointerMove) == null || n10.call(this, e11, t10)));
    });
    l7(this, "onKeyDown", (e11) => {
      if (e11 === "Escape") {
        this.onCancel();
        return;
      }
      if (e11 === "Meta" || e11 === "Control" || e11 === "Alt") {
        this.app.updateSession();
        return;
      }
    });
    l7(this, "onKeyUp", (e11) => {
      if (e11 === "Meta" || e11 === "Control" || e11 === "Alt") {
        this.app.updateSession();
        return;
      }
    });
    l7(this, "onPointerMove", () => {
      this.status === "creating" && this.app.updateSession();
    });
    l7(this, "onPointerUp", () => {
      if (this.status === "creating") {
        this.app.completeSession();
        let { isToolLocked: e11 } = this.app.appState;
        e11 || this.app.selectTool("select");
      }
      this.setStatus("idle");
    });
  }
};
var er = class extends nt2 {
  constructor() {
    super(...arguments);
    l7(this, "type", "arrow");
    l7(this, "onPointerDown", () => {
      if (this.status !== "idle")
        return;
      let { currentPoint: e10, currentGrid: t10, settings: { showGrid: n10 }, appState: { currentPageId: o10, currentStyle: s10 } } = this.app, a10 = this.getNextChildIndex(), d10 = C3.uniqueId(), i10 = Ko.create({ id: d10, parentId: o10, childIndex: a10, point: n10 ? p.snap(e10, t10) : e10, style: S4({}, s10) });
      this.app.patchCreate([i10]), this.app.startSession("arrow", i10.id, "end", true), this.setStatus("creating");
    });
  }
};
var tr = class extends nt2 {
  constructor() {
    super(...arguments);
    l7(this, "type", "draw");
    l7(this, "lastShapeId");
    l7(this, "onEnter", () => {
      this.lastShapeId = void 0;
    });
    l7(this, "onCancel", () => {
      switch (this.status) {
        case "idle": {
          this.app.selectTool("select");
          break;
        }
        default: {
          this.setStatus("idle");
          break;
        }
      }
      this.app.cancelSession();
    });
    l7(this, "onPointerDown", (e10) => {
      if (this.status !== "idle" || this.app.readOnly)
        return;
      let { currentPoint: t10, appState: { currentPageId: n10, currentStyle: o10 } } = this.app, s10 = this.lastShapeId && this.app.getShape(this.lastShapeId);
      if (e10.shiftKey && s10)
        this.app.startSession("draw", s10.id), this.setStatus("extending");
      else {
        let a10 = this.getNextChildIndex(), d10 = C3.uniqueId(), i10 = fi.create({ id: d10, parentId: n10, childIndex: a10, point: t10, style: S4({}, o10) });
        this.lastShapeId = d10, this.app.patchCreate([i10]), this.app.startSession("draw", d10), this.setStatus("creating");
      }
    });
    l7(this, "onPointerMove", () => {
      if (!this.app.readOnly)
        switch (this.status) {
          case "extending":
          case "creating":
            this.app.updateSession();
        }
    });
    l7(this, "onPointerUp", () => {
      this.app.completeSession(), this.setStatus("idle");
    });
  }
};
var nr = class extends nt2 {
  constructor() {
    super(...arguments);
    l7(this, "type", "ellipse");
    l7(this, "onPointerDown", () => {
      if (this.app.readOnly || this.status !== "idle")
        return;
      let { currentPoint: e10, currentGrid: t10, settings: { showGrid: n10 }, appState: { currentPageId: o10, currentStyle: s10 } } = this.app, a10 = this.getNextChildIndex(), d10 = C3.uniqueId(), i10 = gi.create({ id: d10, parentId: o10, childIndex: a10, point: n10 ? p.snap(e10, t10) : e10, style: S4({}, s10) });
      this.app.patchCreate([i10]), this.app.startSession("transformSingle", i10.id, He.BottomRight, true), this.setStatus("creating");
    });
  }
};
var or = class extends nt2 {
  constructor() {
    super(...arguments);
    l7(this, "type", "erase");
    l7(this, "status", "idle");
    l7(this, "onPointerDown", () => {
      this.app.readOnly || this.status === "idle" && this.setStatus("pointing");
    });
    l7(this, "onPointerMove", (e10) => {
      if (!this.app.readOnly)
        switch (this.status) {
          case "pointing": {
            p.dist(e10.origin, e10.point) > 3 && (this.app.startSession("erase"), this.app.updateSession(), this.setStatus("erasing"));
            break;
          }
          case "erasing":
            this.app.updateSession();
        }
    });
    l7(this, "onPointerUp", () => {
      if (!this.app.readOnly) {
        switch (this.status) {
          case "pointing": {
            let e10 = this.app.shapes.filter((t10) => !t10.isLocked).filter((t10) => this.app.getShapeUtil(t10).hitTestPoint(t10, this.app.currentPoint)).flatMap((t10) => t10.children ? [t10.id, ...t10.children] : t10.id);
            this.app.delete(e10);
            break;
          }
          case "erasing":
            this.app.completeSession();
        }
        this.setStatus("idle");
      }
    });
    l7(this, "onCancel", () => {
      this.status === "idle" ? this.previous ? this.app.selectTool(this.previous) : this.app.selectTool("select") : this.setStatus("idle"), this.app.cancelSession();
    });
  }
};
var rr = class extends nt2 {
  constructor() {
    super(...arguments);
    l7(this, "type", "line");
    l7(this, "onPointerDown", () => {
      if (this.app.readOnly || this.status !== "idle")
        return;
      let { currentPoint: e10, currentGrid: t10, settings: { showGrid: n10 }, appState: { currentPageId: o10, currentStyle: s10 } } = this.app, a10 = this.getNextChildIndex(), d10 = C3.uniqueId(), i10 = Ko.create({ id: d10, parentId: o10, childIndex: a10, point: n10 ? p.snap(e10, t10) : e10, decorations: { start: void 0, end: void 0 }, style: S4({}, s10) });
      this.app.patchCreate([i10]), this.app.startSession("arrow", i10.id, "end", true), this.setStatus("creating");
    });
  }
};
var sr = class extends nt2 {
  constructor() {
    super(...arguments);
    l7(this, "type", "rectangle");
    l7(this, "onPointerDown", () => {
      if (this.app.readOnly || this.status !== "idle")
        return;
      let { currentPoint: e10, currentGrid: t10, settings: { showGrid: n10 }, appState: { currentPageId: o10, currentStyle: s10 } } = this.app, a10 = this.getNextChildIndex(), d10 = C3.uniqueId(), i10 = hi.create({ id: d10, parentId: o10, childIndex: a10, point: n10 ? p.snap(e10, t10) : e10, style: S4({}, s10) });
      this.app.patchCreate([i10]), this.app.startSession("transformSingle", i10.id, He.BottomRight, true), this.setStatus("creating");
    });
  }
};
var ar = class extends nt2 {
  constructor() {
    super(...arguments);
    l7(this, "type", "select");
    l7(this, "pointedId");
    l7(this, "selectedGroupId");
    l7(this, "pointedHandleId");
    l7(this, "pointedBoundsHandle");
    l7(this, "pointedLinkHandleId");
    l7(this, "onEnter", () => {
      this.setStatus("idle");
    });
    l7(this, "onExit", () => {
      this.setStatus("idle");
    });
    l7(this, "clonePaint", (e10) => {
      if (this.app.selectedIds.length === 0)
        return;
      let t10 = this.app.selectedIds.map((c10) => this.app.getShape(c10)), n10 = C3.expandBounds(C3.getCommonBounds(t10.map(v10.getBounds)), 16), o10 = C3.getBoundsCenter(n10), s10 = [n10.width, n10.height], a10 = [o10[0] + s10[0] * Math.floor((e10[0] + s10[0] / 2 - o10[0]) / s10[0]), o10[1] + s10[1] * Math.floor((e10[1] + s10[1] / 2 - o10[1]) / s10[1])], d10 = C3.centerBounds(n10, a10);
      this.app.shapes.some((c10) => v10.getShapeUtil(c10).hitTestBounds(c10, d10)) || this.app.duplicate(this.app.selectedIds, a10);
    });
    l7(this, "getShapeClone", (e10, t10) => {
      let n10 = this.app.getShape(e10), o10 = v10.getShapeUtil(n10);
      if (o10.canClone) {
        let s10 = o10.getBounds(n10), a10 = o10.getCenter(n10), d10 = { top: [s10.minX, s10.minY - (s10.height + 32)], right: [s10.maxX + 32, s10.minY], bottom: [s10.minX, s10.maxY + 32], left: [s10.minX - (s10.width + 32), s10.minY], topLeft: [s10.minX - (s10.width + 32), s10.minY - (s10.height + 32)], topRight: [s10.maxX + 32, s10.minY - (s10.height + 32)], bottomLeft: [s10.minX - (s10.width + 32), s10.maxY + 32], bottomRight: [s10.maxX + 32, s10.maxY + 32] }[t10];
        if (n10.rotation !== 0) {
          let u10 = p.add(d10, [s10.width / 2, s10.height / 2]), p10 = p.rotWith(u10, a10, n10.rotation || 0);
          d10 = p.sub(p10, [s10.width / 2, s10.height / 2]);
        }
        let i10 = C3.uniqueId(), c10 = x5(S4({}, n10), { id: i10, point: d10 });
        return c10.type === "sticky" && (c10.text = ""), c10;
      }
    });
    l7(this, "onCancel", () => {
      this.app.session ? this.app.cancelSession() : this.selectNone(), this.setStatus("idle");
    });
    l7(this, "onKeyDown", (e10, t10, n10) => {
      switch (e10) {
        case "Escape": {
          this.onCancel();
          break;
        }
        case "Tab": {
          if (this.app.readOnly)
            return;
          if (!this.app.pageState.editingId && this.status === "idle" && this.app.selectedIds.length === 1) {
            let [o10] = this.app.selectedIds, s10 = this.getShapeClone(o10, "right");
            s10 && (this.app.createShapes(s10), this.setStatus("idle"), s10.type === "sticky" && (this.app.select(s10.id), this.app.setEditingId(s10.id)));
          }
          break;
        }
        case "Meta":
        case "Control":
        case "Alt": {
          this.app.updateSession();
          break;
        }
        case "Enter": {
          if (this.app.readOnly)
            return;
          let { pageState: o10 } = this.app;
          o10.selectedIds.length === 1 && !o10.editingId && (this.app.setEditingId(o10.selectedIds[0]), n10.preventDefault());
        }
      }
    });
    l7(this, "onKeyUp", (e10, t10) => {
      if (this.status === "clonePainting" && !(t10.altKey && t10.shiftKey)) {
        this.setStatus("idle");
        return;
      }
      if (e10 === "Meta" || e10 === "Control" || e10 === "Alt") {
        this.app.updateSession();
        return;
      }
    });
    l7(this, "onPointerMove", () => {
      let { originPoint: e10, currentPoint: t10 } = this.app;
      if (this.app.readOnly && this.app.isPointing) {
        this.app.session ? this.app.updateSession() : p.dist(e10, t10) > 3 && (this.app.startSession("brush"), this.setStatus("brushing"));
        return;
      }
      switch (this.status) {
        case "pointingBoundsHandle": {
          if (!this.pointedBoundsHandle)
            throw Error("No pointed bounds handle");
          if (p.dist(e10, t10) > 3) {
            if (this.pointedBoundsHandle === "rotate")
              this.setStatus("rotating"), this.app.startSession("rotate");
            else if (this.pointedBoundsHandle === "center" || this.pointedBoundsHandle === "left" || this.pointedBoundsHandle === "right")
              this.setStatus("translating"), this.app.startSession("translate", false, this.pointedBoundsHandle);
            else {
              this.setStatus("transforming");
              let n10 = this.app.selectedIds.flatMap((o10) => v10.getDocumentBranch(this.app.state, o10, this.app.currentPageId));
              n10.length === 1 ? this.app.startSession("transformSingle", n10[0], this.pointedBoundsHandle) : this.app.startSession("transform", this.pointedBoundsHandle);
            }
            this.app.updateSession();
          }
          break;
        }
        case "pointingCanvas": {
          p.dist(e10, t10) > 3 && (this.app.startSession("brush"), this.setStatus("brushing"));
          break;
        }
        case "pointingClone": {
          p.dist(e10, t10) > 3 && (this.setStatus("translatingClone"), this.app.startSession("translate"), this.app.updateSession());
          break;
        }
        case "pointingBounds": {
          p.dist(e10, t10) > 3 && (this.setStatus("translating"), this.app.startSession("translate"), this.app.updateSession());
          break;
        }
        case "pointingHandle": {
          if (!this.pointedHandleId)
            throw Error("No pointed handle");
          if (p.dist(e10, t10) > 3) {
            this.setStatus("translatingHandle");
            let n10 = this.app.getShape(this.app.selectedIds[0]);
            n10 && (this.pointedHandleId === "bend" ? (this.app.startSession("handle", n10.id, this.pointedHandleId), this.app.updateSession()) : (this.app.startSession("arrow", n10.id, this.pointedHandleId, false), this.app.updateSession()));
          }
          break;
        }
        case "clonePainting": {
          this.clonePaint(t10);
          break;
        }
        default:
          if (this.app.session) {
            this.app.updateSession();
            break;
          }
      }
    });
    l7(this, "onPointerDown", (e10, t10) => {
      if (e10.target === "canvas" && this.status === "idle") {
        let { currentPoint: n10 } = this.app;
        if (e10.spaceKey && t10.buttons === 1)
          return;
        if (this.status === "idle" && e10.altKey && e10.shiftKey) {
          this.setStatus("clonePainting"), this.clonePaint(n10);
          return;
        }
        if (!e10.shiftKey) {
          if (this.app.onShapeBlur(), e10.altKey && this.app.selectedIds.length > 0) {
            this.app.duplicate(this.app.selectedIds, n10);
            return;
          }
          this.selectNone();
        }
        this.setStatus("pointingCanvas");
      }
    });
    l7(this, "onPointerUp", (e10) => {
      var t10;
      if (this.status === "translatingClone" || this.status === "pointingClone") {
        this.pointedId && (this.app.completeSession(), this.app.setEditingId(this.pointedId)), this.setStatus("idle"), this.pointedId = void 0;
        return;
      }
      if (this.status === "pointingBounds") {
        if (e10.target === "bounds")
          this.selectNone();
        else if (this.app.isSelected(e10.target))
          e10.shiftKey ? this.pointedId !== e10.target && this.deselect(e10.target) : this.pointedId !== e10.target && this.app.selectedIds.length > 1 && this.select(e10.target);
        else if (this.pointedId === e10.target) {
          if (this.app.getShape(e10.target).isLocked)
            return;
          e10.shiftKey ? this.pushSelect(e10.target) : this.select(e10.target);
        }
      }
      this.setStatus("idle"), this.pointedBoundsHandle = void 0, this.pointedHandleId = void 0, this.pointedId = void 0, ((t10 = this.app.session) == null ? void 0 : t10.type) !== "edit" && this.app.completeSession();
    });
    l7(this, "onDoubleClickCanvas", () => {
      !this.app.readOnly;
    });
    l7(this, "onPointShape", (e10, t10) => {
      if (e10.spaceKey && t10.buttons === 1 || this.app.getShape(e10.target).isLocked)
        return;
      let { editingId: n10, hoveredId: o10 } = this.app.pageState;
      if (n10 && e10.target !== n10 && this.app.onShapeBlur(), (this.status === "idle" || this.status === "pointingBounds") && e10.metaKey && e10.shiftKey && o10) {
        this.pointedId = o10, this.app.isSelected(o10) ? this.deselect(o10) : (this.pushSelect(o10), this.setStatus("pointingBounds"));
        return;
      }
      if (this.status === "pointingBounds") {
        let { parentId: s10 } = this.app.getShape(e10.target);
        this.pointedId = s10 === this.app.currentPageId ? e10.target : s10;
        return;
      }
      if (this.status === "idle") {
        if (this.setStatus("pointingBounds"), e10.metaKey) {
          e10.shiftKey || this.selectNone(), this.app.startSession("brush"), this.setStatus("brushing");
          return;
        }
        let s10, { parentId: a10 } = this.app.getShape(e10.target);
        a10 === this.app.currentPageId ? (s10 = e10.target, this.selectedGroupId = void 0) : a10 === this.selectedGroupId ? s10 = e10.target : (s10 = a10, this.selectedGroupId = void 0), this.app.isSelected(s10) || (this.pointedId = s10, e10.shiftKey ? this.pushSelect(s10) : this.select(s10));
      }
    });
    l7(this, "onDoubleClickShape", (e10) => {
      if (this.app.readOnly)
        return;
      let t10 = this.app.getShape(e10.target);
      if (t10.isLocked) {
        this.app.select(e10.target);
        return;
      }
      v10.getShapeUtil(t10.type).canEdit && (t10.parentId === this.app.currentPageId || t10.parentId === this.selectedGroupId) && this.app.setEditingId(e10.target), t10.parentId !== this.app.currentPageId && (this.selectedGroupId = t10.parentId), this.app.select(e10.target);
    });
    l7(this, "onRightPointShape", (e10) => {
      this.app.isSelected(e10.target) || this.app.select(e10.target);
    });
    l7(this, "onHoverShape", (e10) => {
      this.app.setHoveredId(e10.target);
    });
    l7(this, "onUnhoverShape", (e10) => {
      let { currentPageId: t10 } = this.app;
      requestAnimationFrame(() => {
        t10 === this.app.currentPageId && this.app.pageState.hoveredId === e10.target && this.app.setHoveredId(void 0);
      });
    });
    l7(this, "onPointBounds", (e10) => {
      if (e10.metaKey) {
        e10.shiftKey || this.selectNone(), this.app.startSession("brush"), this.setStatus("brushing");
        return;
      }
      this.setStatus("pointingBounds");
    });
    l7(this, "onRightPointBounds", (e10, t10) => {
      t10.stopPropagation();
    });
    l7(this, "onReleaseBounds", () => {
      (this.status === "translating" || this.status === "brushing") && this.app.completeSession(), this.setStatus("idle");
    });
    l7(this, "onPointBoundsHandle", (e10) => {
      this.pointedBoundsHandle = e10.target, this.setStatus("pointingBoundsHandle");
    });
    l7(this, "onDoubleClickBoundsHandle", (e10) => {
      switch (e10.target) {
        case "center":
        case "left":
        case "right": {
          this.app.select(...v10.getLinkedShapeIds(this.app.state, this.app.currentPageId, e10.target, e10.shiftKey));
          break;
        }
        default:
          if (this.app.selectedIds.length === 1) {
            this.app.resetBounds(this.app.selectedIds);
            let t10 = this.app.getShape(this.app.selectedIds[0]);
            "label" in t10 && this.app.setEditingId(t10.id);
          }
      }
    });
    l7(this, "onReleaseBoundsHandle", () => {
      this.setStatus("idle");
    });
    l7(this, "onPointHandle", (e10) => {
      this.pointedHandleId = e10.target, this.setStatus("pointingHandle");
    });
    l7(this, "onDoubleClickHandle", (e10) => {
      if (e10.target === "bend") {
        let { selectedIds: t10 } = this.app;
        if (t10.length !== 1)
          return;
        let n10 = this.app.getShape(t10[0]);
        v10.getShapeUtil(n10.type).canEdit && (n10.parentId === this.app.currentPageId || n10.parentId === this.selectedGroupId) && this.app.setEditingId(n10.id);
        return;
      }
      this.app.toggleDecoration(e10.target);
    });
    l7(this, "onReleaseHandle", () => {
      this.setStatus("idle");
    });
    l7(this, "onShapeClone", (e10) => {
      let t10 = this.app.selectedIds[0], n10 = this.getShapeClone(t10, e10.target);
      e10.target === "left" || e10.target === "right" || e10.target === "top" || e10.target === "bottom" ? n10 && (this.app.createShapes(n10), this.pointedId = n10.id, this.setStatus("pointingClone")) : (this.setStatus("gridCloning"), this.app.startSession("grid", t10));
    });
  }
  deselect(e10) {
    this.app.select(...this.app.selectedIds.filter((t10) => t10 !== e10));
  }
  select(e10) {
    this.app.select(e10);
  }
  pushSelect(e10) {
    let t10 = this.app.getShape(e10);
    this.app.select(...this.app.selectedIds.filter((n10) => n10 !== t10.parentId), e10);
  }
  selectNone() {
    this.app.selectNone();
  }
};
var lr = class extends nt2 {
  constructor() {
    super(...arguments);
    l7(this, "type", "sticky");
    l7(this, "shapeId");
    l7(this, "onPointerDown", () => {
      if (!this.app.readOnly) {
        if (this.status === "creating") {
          this.setStatus("idle"), this.app.appState.isToolLocked || this.app.selectTool("select");
          return;
        }
        if (this.status === "idle") {
          let { currentPoint: e10, currentGrid: t10, settings: { showGrid: n10 }, appState: { currentPageId: o10, currentStyle: s10 } } = this.app, a10 = this.getNextChildIndex(), d10 = C3.uniqueId();
          this.shapeId = d10;
          let i10 = Yr.create({ id: d10, parentId: o10, childIndex: a10, point: n10 ? p.snap(e10, t10) : e10, style: S4({}, s10) }), c10 = Yr.getBounds(i10);
          i10.point = p.sub(i10.point, [c10.width / 2, c10.height / 2]), this.app.patchCreate([i10]), this.app.startSession("translate"), this.setStatus("creating");
        }
      }
    });
    l7(this, "onPointerUp", () => {
      this.app.readOnly || this.status === "creating" && (this.setStatus("idle"), this.app.completeSession(), this.app.selectTool("select"), this.app.setEditingId(this.shapeId));
    });
  }
};
var dr = class extends nt2 {
  constructor() {
    super(...arguments);
    l7(this, "type", "text");
    l7(this, "stopEditingShape", () => {
      this.setStatus("idle"), this.app.appState.isToolLocked || this.app.selectTool("select");
    });
    l7(this, "onKeyUp", () => {
    });
    l7(this, "onKeyDown", () => {
    });
    l7(this, "onPointerDown", () => {
      if (this.status === "creating") {
        this.stopEditingShape();
        return;
      }
      if (this.status === "idle") {
        let { currentPoint: e10, currentGrid: t10, settings: { showGrid: n10 } } = this.app;
        this.app.createTextShapeAtPoint(n10 ? p.snap(e10, t10) : e10, void 0, true), this.setStatus("creating");
        return;
      }
    });
    l7(this, "onPointerUp", () => {
    });
    l7(this, "onPointShape", (e10) => {
      if (this.app.readOnly)
        return;
      let t10 = this.app.getShape(e10.target);
      t10.type === "text" && (this.setStatus("idle"), this.app.setEditingId(t10.id));
    });
    l7(this, "onShapeBlur", () => {
      this.app.readOnly || this.stopEditingShape();
    });
  }
};
var cr = class extends nt2 {
  constructor() {
    super(...arguments);
    l7(this, "type", "triangle");
    l7(this, "onPointerDown", () => {
      if (this.app.readOnly || this.status !== "idle")
        return;
      let { currentPoint: e10, currentGrid: t10, settings: { showGrid: n10 }, appState: { currentPageId: o10, currentStyle: s10 } } = this.app, a10 = this.getNextChildIndex(), d10 = C3.uniqueId(), i10 = mi.create({ id: d10, parentId: o10, childIndex: a10, point: n10 ? p.snap(e10, t10) : e10, style: S4({}, s10) });
      this.app.patchCreate([i10]), this.app.startSession("transformSingle", i10.id, He.BottomRight, true), this.setStatus("creating");
    });
  }
};
var Yi = C3.uniqueId();
var lt2 = class extends yi {
  constructor(e10, t10 = {}) {
    super(lt2.defaultState, e10, lt2.version, (n10, o10, s10) => Sn2(x5(S4({}, o10), { document: x5(S4(S4({}, o10.document), n10.document), { version: s10 }) }), lt2.version));
    l7(this, "callbacks", {});
    l7(this, "tools", { select: new ar(this), erase: new or(this), ["text"]: new dr(this), ["draw"]: new tr(this), ["ellipse"]: new nr(this), ["rectangle"]: new sr(this), ["triangle"]: new cr(this), ["line"]: new rr(this), ["arrow"]: new er(this), ["sticky"]: new lr(this) });
    l7(this, "currentTool", this.tools.select);
    l7(this, "session");
    l7(this, "readOnly", false);
    l7(this, "isDirty", false);
    l7(this, "isCreating", false);
    l7(this, "originPoint", [0, 0]);
    l7(this, "currentPoint", [0, 0]);
    l7(this, "previousPoint", [0, 0]);
    l7(this, "shiftKey", false);
    l7(this, "altKey", false);
    l7(this, "metaKey", false);
    l7(this, "ctrlKey", false);
    l7(this, "spaceKey", false);
    l7(this, "isPointing", false);
    l7(this, "isForcePanning", false);
    l7(this, "isErasingWithPen", false);
    l7(this, "isPastePrevented", false);
    l7(this, "editingStartTime", -1);
    l7(this, "fileSystemHandle", null);
    l7(this, "viewport", C3.getBoundsFromPoints([[0, 0], [100, 100]]));
    l7(this, "rendererBounds", C3.getBoundsFromPoints([[0, 0], [100, 100]]));
    l7(this, "selectHistory", { stack: [[]], pointer: 0 });
    l7(this, "clipboard");
    l7(this, "rotationInfo", { selectedIds: [], center: [0, 0] });
    l7(this, "migrate", (e11) => Sn2(e11, lt2.version));
    l7(this, "onReady", () => {
      var e11, t11;
      this.loadDocument(this.document), Pi().then((n10) => {
        this.fileSystemHandle = n10;
      });
      try {
        this.patchState(x5(S4({}, Sn2(this.state, lt2.version)), { appState: { status: "idle" } }));
      } catch (n10) {
        console.error("The data appears to be corrupted. Resetting!", n10), localStorage.setItem(this.document.id + "_corrupted", JSON.stringify(this.document)), this.patchState(x5(S4({}, lt2.defaultState), { appState: x5(S4({}, lt2.defaultState.appState), { status: "idle" }) }));
      }
      (t11 = (e11 = this.callbacks).onMount) == null || t11.call(e11, this);
    });
    l7(this, "cleanup", (e11, t11) => {
      var a10;
      let n10 = S4({}, e11);
      n10.document !== t11.document && Object.entries(n10.document.pages).forEach(([d10, i10]) => {
        if (i10 === void 0) {
          delete n10.document.pages[d10], delete n10.document.pageStates[d10];
          return;
        }
        let c10 = t11.document.pages[d10], u10 = {};
        if (!c10 || i10.shapes !== c10.shapes || i10.bindings !== c10.bindings) {
          i10.shapes = S4({}, i10.shapes), i10.bindings = S4({}, i10.bindings);
          let m10 = /* @__PURE__ */ new Set();
          Object.entries(i10.shapes).forEach(([f10, T10]) => {
            var b10;
            let w10;
            T10 ? w10 = T10.parentId : (w10 = (b10 = c10 == null ? void 0 : c10.shapes[f10]) == null ? void 0 : b10.parentId, delete i10.shapes[f10]), i10.id === n10.appState.currentPageId && (c10 == null ? void 0 : c10.shapes[f10]) !== T10 && (u10[f10] = T10), w10 && w10 !== d10 && i10.shapes[w10] !== void 0 && m10.add(i10.shapes[w10]);
          }), Object.keys(i10.bindings).forEach((f10) => {
            i10.bindings[f10] || delete i10.bindings[f10];
          }), n10.document.pages[d10] = i10;
          let h10 = v10.getRelatedBindings(n10, Object.keys(u10), d10), g10 = /* @__PURE__ */ new Set();
          h10.forEach((f10) => {
            if (!i10.bindings[f10.id])
              return;
            let T10 = i10.shapes[f10.toId], w10 = i10.shapes[f10.fromId];
            if (!(T10 && w10)) {
              delete n10.document.pages[d10].bindings[f10.id];
              return;
            }
            if (g10.has(w10))
              return;
            let b10 = v10.updateArrowBindings(i10, w10);
            if (g10.add(w10), b10) {
              let y10 = S4(S4({}, w10), b10);
              i10.shapes[w10.id] = y10;
            }
          }), m10.forEach((f10) => {
            if (!f10)
              throw Error("no group!");
            let T10 = f10.children.filter((b10) => i10.shapes[b10] !== void 0), w10 = C3.getCommonBounds(T10.map((b10) => i10.shapes[b10]).filter(Boolean).map((b10) => v10.getRotatedBounds(b10)));
            i10.shapes[f10.id] = x5(S4({}, f10), { point: [w10.minX, w10.minY], size: [w10.width, w10.height], children: T10 });
          });
        }
        let p10 = S4({}, n10.document.pageStates[d10]);
        p10.brush || delete p10.brush, p10.hoveredId && !i10.shapes[p10.hoveredId] && delete p10.hoveredId, p10.bindingId && !i10.bindings[p10.bindingId] && (v10.warn(`Could not find the binding of ${d10}`), delete p10.bindingId), p10.editingId && !i10.shapes[p10.editingId] && (v10.warn("Could not find the editing shape!"), delete p10.editingId), n10.document.pageStates[d10] = p10;
      }), Object.keys((a10 = n10.document.assets) != null ? a10 : {}).forEach((d10) => {
        var i10, c10;
        ((i10 = n10.document.assets) == null ? void 0 : i10[d10]) || (c10 = n10.document.assets) == null || delete c10[d10];
      });
      let o10 = n10.appState.currentPageId, s10 = n10.document.pageStates[o10];
      if (n10.room && n10.room !== t11.room) {
        let d10 = x5(S4({}, n10.room), { users: S4({}, n10.room.users) });
        t11.room && Object.values(t11.room.users).filter(Boolean).forEach((i10) => {
          d10.users[i10.id] === void 0 && delete d10.users[i10.id];
        }), n10.room = d10;
      }
      return n10.room && (n10.room.users[n10.room.userId] = x5(S4({}, n10.room.users[n10.room.userId]), { point: this.currentPoint, selectedIds: s10.selectedIds })), this.readOnly && (n10.document.pages = t11.document.pages), n10;
    });
    l7(this, "broadcastPatch", (e11, t11) => {
      var c10, u10, p10, m10, h10, g10, f10, T10, w10;
      let n10 = {}, o10 = {}, s10 = {}, a10 = (p10 = (u10 = (c10 = e11 == null ? void 0 : e11.document) == null ? void 0 : c10.pages) == null ? void 0 : u10[this.currentPageId]) == null ? void 0 : p10.shapes, d10 = (g10 = (h10 = (m10 = e11 == null ? void 0 : e11.document) == null ? void 0 : m10.pages) == null ? void 0 : h10[this.currentPageId]) == null ? void 0 : g10.bindings, i10 = (f10 = e11 == null ? void 0 : e11.document) == null ? void 0 : f10.assets;
      a10 && Object.keys(a10).forEach((b10) => {
        n10[b10] = this.getShape(b10, this.currentPageId);
      }), d10 && Object.keys(d10).forEach((b10) => {
        o10[b10] = this.getBinding(b10, this.currentPageId);
      }), i10 && Object.keys(i10).forEach((b10) => {
        s10[b10] = this.document.assets[b10];
      }), (w10 = (T10 = this.callbacks).onChangePage) == null || w10.call(T10, this, n10, o10, s10, t11);
    });
    l7(this, "onPatch", (e11, t11, n10) => {
      var o10, s10, a10, d10, i10, c10;
      (this.callbacks.onChangePage && ((s10 = (o10 = t11 == null ? void 0 : t11.document) == null ? void 0 : o10.pages) == null ? void 0 : s10[this.currentPageId]) || ((a10 = t11 == null ? void 0 : t11.document) == null ? void 0 : a10.assets)) && (((d10 = t11 == null ? void 0 : t11.document) == null ? void 0 : d10.assets) || this.session && this.session.type !== "brush" && this.session.type !== "erase" && this.session.type !== "draw") && this.broadcastPatch(t11, false), (c10 = (i10 = this.callbacks).onPatch) == null || c10.call(i10, this, t11, n10);
    });
    l7(this, "onCommand", (e11, t11, n10) => {
      var o10, s10;
      this.clearSelectHistory(), this.isDirty = true, (s10 = (o10 = this.callbacks).onCommand) == null || s10.call(o10, this, t11, n10);
    });
    l7(this, "onReplace", () => {
      this.clearSelectHistory(), this.isDirty = false;
    });
    l7(this, "onUndo", () => {
      var e11, t11;
      this.rotationInfo.selectedIds = [...this.selectedIds], (t11 = (e11 = this.callbacks).onUndo) == null || t11.call(e11, this);
    });
    l7(this, "onRedo", () => {
      var e11, t11;
      this.rotationInfo.selectedIds = [...this.selectedIds], (t11 = (e11 = this.callbacks).onRedo) == null || t11.call(e11, this);
    });
    l7(this, "onPersist", (e11, t11) => {
      var n10, o10;
      (o10 = (n10 = this.callbacks).onPersist) == null || o10.call(n10, this), this.broadcastPatch(t11, true);
    });
    l7(this, "prevSelectedIds", this.selectedIds);
    l7(this, "onStateDidChange", (e11, t11) => {
      var n10, o10, s10, a10;
      (o10 = (n10 = this.callbacks).onChange) == null || o10.call(n10, this, t11), this.room && this.selectedIds !== this.prevSelectedIds && ((a10 = (s10 = this.callbacks).onChangePresence) == null || a10.call(s10, this, x5(S4({}, this.room.users[this.room.userId]), { selectedIds: this.selectedIds, session: !!this.session })), this.prevSelectedIds = this.selectedIds);
    });
    l7(this, "preventPaste", () => {
      if (this.isPastePrevented)
        return;
      let e11 = (n10) => n10.stopImmediatePropagation(), t11 = () => {
        setTimeout(() => {
          document.removeEventListener("paste", e11, { capture: true }), this.isPastePrevented = false;
        }, 50);
      };
      document.addEventListener("paste", e11, { capture: true }), window.addEventListener("pointerup", t11, { once: true }), this.isPastePrevented = true;
    });
    l7(this, "justSent", false);
    l7(this, "getReservedContent", (e11, t11 = this.currentPageId) => {
      let { bindings: n10 } = this.document.pages[t11], o10 = {}, s10 = {}, a10 = Object.values(n10), d10 = new Map(a10.map((h10) => [h10.toId, h10])), i10 = new Map(a10.map((h10) => [h10.fromId, h10])), c10 = [d10, i10], u10 = [];
      this.session && e11.forEach((h10) => u10.push(h10)), this.pageState.editingId && u10.push(this.pageState.editingId);
      let p10 = new Set(u10), m10 = /* @__PURE__ */ new Set();
      for (; u10.length > 0; ) {
        let h10 = u10.pop();
        if (!h10)
          break;
        if (m10.has(h10))
          continue;
        m10.add(h10);
        let g10 = this.getShape(h10);
        o10[h10] = g10, g10.parentId !== t11 && u10.push(g10.parentId), g10.children && u10.push(...g10.children), c10.map((f10) => f10.get(g10.id)).filter(Boolean).forEach((f10) => {
          s10[f10.id] = f10, u10.push(f10.toId, f10.fromId);
        });
      }
      return { reservedShapes: o10, reservedBindings: s10, strongReservedShapeIds: p10 };
    });
    l7(this, "replacePageContent", (e11, t11, n10, o10 = this.currentPageId) => {
      if (this.justSent)
        return this.justSent = false, this;
      let s10 = this.document.pages[this.currentPageId];
      return Object.values(e11).forEach((a10) => {
        a10.parentId !== o10 && !(s10.shapes[a10.parentId] || e11[a10.parentId]) && (console.warn("Added a shape without a parent on the page"), a10.parentId = o10);
      }), this.useStore.setState((a10) => {
        let { hoveredId: d10, editingId: i10, bindingId: c10, selectedIds: u10 } = a10.document.pageStates[o10], p10 = [...u10], m10 = i10 && a10.document.pages[this.currentPageId].shapes[i10];
        m10 && p10.push(m10.id);
        let { reservedShapes: h10, reservedBindings: g10, strongReservedShapeIds: f10 } = this.getReservedContent(p10, this.currentPageId);
        Object.values(h10).filter((k10) => !("text" in k10)).forEach((k10) => {
          let I10 = e11[k10.id];
          if (!!I10) {
            if (!(k10.type === "arrow" || f10.has(k10.id))) {
              e11[k10.id] = I10;
              return;
            }
            "decorations" in I10 && "decorations" in k10 && (e11[k10.id] = x5(S4({}, k10), { decorations: I10.decorations })), k10.style = I10.style;
          }
        });
        let T10 = S4(S4({}, e11), h10);
        m10 && (T10[m10.id] = m10);
        let w10 = S4(S4({}, t11), g10), b10 = S4({}, n10), y10 = x5(S4({}, a10), { document: x5(S4({}, a10.document), { pages: { [o10]: x5(S4({}, a10.document.pages[o10]), { shapes: T10, bindings: w10 }) }, assets: b10, pageStates: x5(S4({}, a10.document.pageStates), { [o10]: x5(S4({}, a10.document.pageStates[o10]), { selectedIds: u10.filter((k10) => T10[k10] !== void 0), hoveredId: d10 ? T10[d10] === void 0 ? void 0 : d10 : void 0, editingId: i10, bindingId: c10 ? w10[c10] === void 0 ? void 0 : c10 : void 0 }) }) }) }), R10 = y10.document.pages[o10], U10 = v10.getRelatedBindings(y10, Object.keys(T10), o10), L10 = /* @__PURE__ */ new Set();
        return U10.forEach((k10) => {
          if (!R10.bindings[k10.id])
            return;
          let I10 = R10.shapes[k10.fromId];
          if (L10.has(I10))
            return;
          let q10 = v10.updateArrowBindings(R10, I10);
          if (L10.add(I10), q10) {
            let de4 = S4(S4({}, I10), q10);
            R10.shapes[I10.id] = de4;
          }
        }), Object.values(T10).forEach((k10) => {
          if (k10.type !== "group")
            return;
          let I10 = k10.children.filter((de4) => R10.shapes[de4] !== void 0), q10 = C3.getCommonBounds(I10.map((de4) => R10.shapes[de4]).filter(Boolean).map((de4) => v10.getRotatedBounds(de4)));
          R10.shapes[k10.id] = x5(S4({}, k10), { point: [q10.minX, q10.minY], size: [q10.width, q10.height], children: I10 });
        }), this.state.document = y10.document, y10;
      }, true), this;
    });
    l7(this, "updateBounds", (e11) => {
      this.rendererBounds = e11;
      let { point: t11, zoom: n10 } = this.camera;
      this.updateViewport(t11, n10), !this.readOnly && this.session && this.session.update();
    });
    l7(this, "updateViewport", (e11, t11) => {
      let { width: n10, height: o10 } = this.rendererBounds, [s10, a10] = e.sub(e.div([0, 0], t11), e11), [d10, i10] = e.sub(e.div([n10, o10], t11), e11);
      this.viewport = { minX: s10, minY: a10, maxX: d10, maxY: i10, width: d10 - s10, height: i10 - a10 };
    });
    l7(this, "setEditingId", (e11, t11 = false) => {
      if (!this.readOnly) {
        if (e11)
          this.startSession("edit", e11, t11);
        else {
          if (!this.pageState.editingId)
            return;
          this.completeSession();
        }
        this.editingStartTime = performance.now(), this.patchState({ document: { pageStates: { [this.currentPageId]: { editingId: e11 } } } }, "set_editing_id");
      }
    });
    l7(this, "setHoveredId", (e11) => {
      this.patchState({ document: { pageStates: { [this.currentPageId]: { hoveredId: e11 } } } }, "set_hovered_id");
    });
    l7(this, "setSetting", (e11, t11) => {
      if (this.session)
        return this;
      let n10 = { settings: { [e11]: typeof t11 == "function" ? t11(this.settings[e11]) : t11 } };
      return this.patchState(n10, `settings:${e11}`), this.persist(n10), this;
    });
    l7(this, "toggleFocusMode", () => {
      if (this.session)
        return this;
      let e11 = { settings: { isFocusMode: !this.settings.isFocusMode } };
      return this.patchState(e11, "settings:toggled_focus_mode"), this.persist(e11), this;
    });
    l7(this, "togglePenMode", () => {
      if (this.session)
        return this;
      let e11 = { settings: { isPenMode: !this.settings.isPenMode } };
      return this.patchState(e11, "settings:toggled_pen_mode"), this.persist(e11), this;
    });
    l7(this, "toggleDarkMode", () => {
      if (this.session)
        return this;
      let e11 = { settings: { isDarkMode: !this.settings.isDarkMode } };
      return this.patchState(e11, "settings:toggled_dark_mode"), this.persist(e11), this;
    });
    l7(this, "toggleZoomSnap", () => {
      if (this.session)
        return this;
      let e11 = { settings: { isZoomSnap: !this.settings.isZoomSnap } };
      return this.patchState(e11, "settings:toggled_zoom_snap"), this.persist(e11), this;
    });
    l7(this, "toggleDebugMode", () => {
      if (this.session)
        return this;
      let e11 = { settings: { isDebugMode: !this.settings.isDebugMode } };
      return this.patchState(e11, "settings:toggled_debug"), this.persist(e11), this;
    });
    l7(this, "setMenuOpen", (e11) => {
      let t11 = { appState: { isMenuOpen: e11 } };
      return this.patchState(t11, "ui:toggled_menu_opened"), this.persist(t11), this;
    });
    l7(this, "setIsLoading", (e11) => {
      let t11 = { appState: { isLoading: e11 } };
      return this.patchState(t11, "ui:toggled_is_loading"), this.persist(t11), this;
    });
    l7(this, "setDisableAssets", (e11) => (this.patchState({ appState: { disableAssets: e11 } }, "ui:toggled_disable_images"), this));
    l7(this, "toggleGrid", () => {
      if (this.session)
        return this;
      let e11 = { settings: { showGrid: !this.settings.showGrid } };
      return this.patchState(e11, "settings:toggled_grid"), this.persist(e11), this;
    });
    l7(this, "selectTool", (e11) => {
      if (this.readOnly || this.session)
        return this;
      this.isPointing = false;
      let t11 = this.tools[e11];
      return t11 === this.currentTool ? (this.patchState({ appState: { isToolLocked: false } }), this) : (this.currentTool.onExit(), t11.previous = this.currentTool.type, this.currentTool = t11, this.currentTool.onEnter(), this.patchState({ appState: { activeTool: e11, isToolLocked: false } }, `selected_tool:${e11}`));
    });
    l7(this, "toggleToolLock", () => this.session ? this : this.patchState({ appState: { isToolLocked: !this.appState.isToolLocked } }, "toggled_tool_lock"));
    l7(this, "resetDocument", () => {
      if (this.session)
        return this;
      this.session = void 0, this.currentTool = this.tools.select;
      let e11 = lt2.defaultDocument;
      return e11.pages.page.name = "Page 1", this.resetHistory().clearSelectHistory().loadDocument(lt2.defaultDocument).persist({}), this;
    });
    l7(this, "updateUsers", (e11, t11 = false) => {
      this.patchState({ room: { users: Object.fromEntries(e11.map((n10) => [n10.id, n10])) } }, t11 ? "room:self:update" : "room:user:update");
    });
    l7(this, "removeUser", (e11) => {
      this.patchState({ room: { users: { [e11]: void 0 } } });
    });
    l7(this, "mergeDocument", (e11) => {
      if (this.document.id !== e11.id)
        return this.replaceState(x5(S4({}, Sn2(x5(S4({}, this.state), { document: e11 }), lt2.version)), { appState: x5(S4({}, this.appState), { currentPageId: Object.keys(e11.pages)[0] }) })), this;
      let t11 = S4({}, this.document.pageStates), n10 = x5(S4({}, this.appState), { currentPageId: e11.pages[this.currentPageId] ? this.currentPageId : Object.keys(e11.pages)[0], pages: Object.values(e11.pages).map((s10, a10) => ({ id: s10.id, name: s10.name, childIndex: s10.childIndex || a10 })) });
      this.resetHistory(), Object.keys(this.document.pages).forEach((s10) => {
        e11.pages[s10] || (s10 === this.appState.currentPageId && (this.cancelSession(), this.selectNone()), t11[s10] = void 0);
      }), this.session && this.selectedIds.filter((s10) => !e11.pages[this.currentPageId].shapes[s10]).forEach((s10) => e11.pages[this.currentPageId].shapes[s10] = this.page.shapes[s10]), Object.entries(t11).forEach(([s10, a10]) => {
        a10.selectedIds = a10.selectedIds.filter((d10) => !!e11.pages[s10].shapes[d10]);
      });
      let { editingId: o10 } = this.pageState;
      return o10 && (e11.pages[this.currentPageId].shapes[o10] = this.page.shapes[o10], t11[this.currentPageId].selectedIds = [o10]), this.replaceState(x5(S4({}, Sn2(x5(S4({}, this.state), { document: x5(S4({}, e11), { pageStates: t11 }) }), lt2.version)), { appState: n10 }), "merge");
    });
    l7(this, "updateDocument", (e11, t11 = "updated_document") => {
      let n10 = this.state, o10 = x5(S4({}, n10), { document: x5(S4({}, n10.document), { assets: e11.assets }) });
      e11.pages[this.currentPageId] || (o10.appState = x5(S4({}, n10.appState), { currentPageId: Object.keys(e11.pages)[0] }));
      let s10 = 1;
      for (let a10 of Object.values(e11.pages))
        a10 !== n10.document.pages[a10.id] && (o10.document.pages[a10.id] = a10, a10.name || (o10.document.pages[a10.id].name = `Page ${s10 + 1}`, s10++));
      for (let a10 of Object.values(e11.pageStates))
        if (a10 !== n10.document.pageStates[a10.id]) {
          o10.document.pageStates[a10.id] = a10;
          let d10 = e11.pages[a10.id], i10 = ["bindingId", "editingId", "hoveredId", "pointedId"];
          for (let c10 of i10)
            d10.shapes[c10] || (a10[c10] = void 0);
          a10.selectedIds = a10.selectedIds.filter((c10) => !!e11.pages[d10.id].shapes[c10]);
        }
      return this.replaceState(Sn2(o10, o10.document.version || 0), `${t11}:${e11.id}`);
    });
    l7(this, "loadRoom", (e11) => (this.patchState({ room: { id: e11, userId: Yi, users: { [Yi]: { id: Yi, color: $s[Math.floor(Math.random() * $s.length)], point: [100, 100], selectedIds: [], activeShapes: [] } } } }), this));
    l7(this, "loadDocument", (e11) => {
      this.setIsLoading(true), this.selectNone(), this.resetHistory(), this.clearSelectHistory(), this.session = void 0;
      let t11 = x5(S4({}, lt2.defaultState), { settings: S4({}, this.state.settings), document: e11, appState: x5(S4(S4({}, lt2.defaultState.appState), this.state.appState), { currentPageId: Object.keys(e11.pages)[0], disableAssets: this.disableAssets }) });
      this.replaceState(Sn2(t11, lt2.version), "loaded_document");
      let { point: n10, zoom: o10 } = this.camera;
      return this.updateViewport(n10, o10), this.setIsLoading(false), this;
    });
    l7(this, "loadPageFromURL", (e11, t11) => {
      let n10 = e11.id, o10 = x5(S4({}, this.state.document), { pageStates: x5(S4({}, this.state.document.pageStates), { [n10]: t11 }), pages: x5(S4({}, this.document.pages), { [n10]: e11 }) });
      this.loadDocument(o10), this.persist({});
    });
    l7(this, "newProject", () => {
      !this.isLocal || (this.fileSystemHandle = null, this.resetDocument());
    });
    l7(this, "saveProject", () => pe4(this, null, function* () {
      if (this.readOnly)
        return;
      let e11 = yield es(Sn2(this.state, lt2.version).document, this.fileSystemHandle);
      return this.fileSystemHandle = e11, this.persist({}), this.isDirty = false, this;
    }));
    l7(this, "saveProjectAs", (e11) => pe4(this, null, function* () {
      try {
        let t11 = yield es(this.document, null, e11);
        this.fileSystemHandle = t11, this.persist({}), this.isDirty = false;
      } catch (t11) {
        console.error(t11.message);
      }
      return this;
    }));
    l7(this, "openProject", () => pe4(this, null, function* () {
      if (!!this.isLocal)
        try {
          let e11 = yield Ei();
          if (!e11)
            throw Error();
          let { fileHandle: t11, document: n10 } = e11;
          this.loadDocument(n10), this.fileSystemHandle = t11, this.zoomToFit(), this.persist({});
        } catch (e11) {
          console.error(e11);
        } finally {
          this.persist({});
        }
    }));
    l7(this, "openAsset", () => pe4(this, null, function* () {
      if (!this.disableAssets)
        try {
          let e11 = yield Bi();
          if (Array.isArray(e11))
            this.addMediaFromFiles(e11, this.centerPoint);
          else {
            if (!e11)
              return;
            this.addMediaFromFiles([e11]);
          }
        } catch (e11) {
          console.error(e11);
        } finally {
          this.persist({});
        }
    }));
    l7(this, "signOut", () => {
    });
    l7(this, "getAppState", () => this.appState);
    l7(this, "getPage", (e11 = this.currentPageId) => v10.getPage(this.state, e11 || this.currentPageId));
    l7(this, "getShapes", (e11 = this.currentPageId) => v10.getShapes(this.state, e11 || this.currentPageId));
    l7(this, "getBindings", (e11 = this.currentPageId) => v10.getBindings(this.state, e11 || this.currentPageId));
    l7(this, "getShape", (e11, t11 = this.currentPageId) => v10.getShape(this.state, e11, t11));
    l7(this, "getShapeBounds", (e11, t11 = this.currentPageId) => v10.getBounds(this.getShape(e11, t11)));
    l7(this, "getBinding", (e11, t11 = this.currentPageId) => v10.getBinding(this.state, e11, t11));
    l7(this, "getPageState", (e11 = this.currentPageId) => v10.getPageState(this.state, e11 || this.currentPageId));
    l7(this, "getPagePoint", (e11, t11 = this.currentPageId) => {
      let { camera: n10 } = this.getPageState(t11);
      return e.sub(e.div(e11, n10.zoom), n10.point);
    });
    l7(this, "createPage", (e11, t11) => {
      if (this.readOnly)
        return this;
      let { width: n10, height: o10 } = this.rendererBounds;
      return this.setState(Hd(this, [-n10 / 2, -o10 / 2], e11, t11));
    });
    l7(this, "changePage", (e11) => this.setState(Rd(this, e11)));
    l7(this, "movePage", (e11, t11) => this.readOnly ? this : this.setState(Wd(this, e11, t11)));
    l7(this, "renamePage", (e11, t11) => this.readOnly ? this : this.setState(Ud(this, e11, t11)));
    l7(this, "duplicatePage", (e11) => this.readOnly ? this : this.setState(jd(this, e11)));
    l7(this, "deletePage", (e11) => this.readOnly ? this : Object.values(this.document.pages).length <= 1 ? this : this.setState(zd(this, e11 || this.currentPageId)));
    l7(this, "cut", (e11 = this.selectedIds, t11) => (t11 == null || t11.preventDefault(), this.copy(e11, t11), this.readOnly || this.delete(e11), this));
    l7(this, "copy", (e11 = this.selectedIds, t11) => {
      var s10;
      t11 == null || t11.preventDefault(), this.clipboard = this.getContent(e11);
      let o10 = `<tldraw>${JSON.stringify(S4({ type: "tldr/clipboard", shapes: [], assets: [], bindings: [] }, this.clipboard))}</tldraw>`;
      return Md(o10), t11 && ((s10 = t11.clipboardData) == null || s10.setData("text/html", o10)), navigator.clipboard && window.ClipboardItem && navigator.clipboard.write([new ClipboardItem({ "text/html": new Blob([o10], { type: "text/html" }) })]), this;
    });
    l7(this, "paste", (e11, t11) => pe4(this, null, function* () {
      var c10, u10;
      if (this.readOnly)
        return;
      let n10 = [], o10 = [], s10, a10 = (p10) => pe4(this, null, function* () {
        let m10 = document.createElement("div");
        m10.innerHTML = p10;
        let h10 = m10.firstChild;
        h10.style.setProperty("background-color", "transparent");
        let g10 = yield v10.getImageForSvg(h10, "svg", { scale: 1, quality: 1 });
        if (g10) {
          let f10 = new File([g10], "image.svg");
          n10.push(f10);
        } else
          d10(p10);
      }), d10 = (p10) => {
        let m10 = this.getPagePoint(e11 != null ? e11 : this.centerPoint, this.currentPageId), h10 = p10.includes(`
`);
        o10.push(v10.getShapeUtil("text").getShape({ id: C3.uniqueId(), type: "text", parentId: this.appState.currentPageId, text: v10.normalizeText(p10.trim()), point: m10, style: x5(S4({}, this.appState.currentStyle), { textAlign: h10 ? "start" : this.appState.currentStyle.textAlign }) }));
      }, i10 = (p10) => {
        var m10;
        try {
          let h10 = (m10 = p10.match(/<tldraw>(.*)<\/tldraw>/)) == null ? void 0 : m10[1];
          if (!h10)
            return;
          let g10 = JSON.parse(h10);
          if (g10.type === "tldr/clipboard") {
            s10 = g10;
            return;
          } else
            throw Error("Not tldraw data!");
        } catch (h10) {
          d10(p10);
        }
      };
      if (t11 !== void 0) {
        let p10 = Array.from((u10 = (c10 = t11.clipboardData) == null ? void 0 : c10.items) != null ? u10 : []);
        yield Promise.all(p10.map((m10) => pe4(this, null, function* () {
          var f10;
          let { type: h10, kind: g10 } = m10;
          switch (g10) {
            case "string": {
              let T10 = yield new Promise((w10) => m10.getAsString(w10));
              switch (h10) {
                case "text/html": {
                  if ((f10 = T10.match(/<tldraw>(.*)<\/tldraw>/)) == null ? void 0 : f10[1]) {
                    i10(T10);
                    return;
                  }
                  break;
                }
                case "text/plain": {
                  T10.startsWith("<svg") ? yield a10(T10) : d10(T10);
                  break;
                }
              }
              break;
            }
            case "file": {
              let T10 = m10.getAsFile();
              T10 && n10.push(T10);
              break;
            }
          }
        })));
      }
      if (s10)
        return this.insertContent(s10, { point: e11, select: true }), this;
      if (n10.length)
        return this.addMediaFromFiles(n10, e11), this;
      if (o10.length) {
        let p10 = this.getPagePoint(e11 != null ? e11 : this.centerPoint, this.currentPageId), m10 = e.add(p10, [0, 0]);
        return o10.forEach((h10, g10) => {
          let f10 = v10.getBounds(h10);
          g10 === 0 && (m10[0] -= f10.width / 2, m10[1] -= f10.height / 2), h10.point = [...m10], m10[0] += f10.width;
        }), this.createShapes(...o10), this;
      }
      return this.clipboard ? this.insertContent(this.clipboard) : Pd().then((p10) => {
        p10 && i10(p10);
      }), this;
    }));
    l7(this, "getSvg", (...n10) => pe4(this, [...n10], function* (e11 = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes), t11 = {}) {
      if (e11.length === 0)
        return;
      let o10 = document.createElementNS("http://www.w3.org/2000/svg", "svg"), s10 = document.createElementNS("http://www.w3.org/2000/svg", "defs"), a10 = document.createElementNS("http://www.w3.org/2000/svg", "style");
      if (typeof window != "undefined" && window.focus(), t11.includeFonts)
        try {
          let { fonts: h10 } = yield fetch(lt2.assetSrc, { mode: "no-cors" }).then((g10) => g10.json());
          a10.textContent = `
          @font-face {
            font-family: 'Caveat Brush';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${h10.caveat}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          @font-face {
            font-family: 'Source Code Pro';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${h10.source_code_pro}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          @font-face {
            font-family: 'Source Sans Pro';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${h10.source_sans_pro}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          @font-face {
            font-family: 'Crimson Pro';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${h10.crimson_pro}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          `;
        } catch (h10) {
          v10.warn("Could not find tldraw-assets.json file.");
        }
      else
        a10.textContent = "@import url('https://fonts.googleapis.com/css2?family=Caveat+Brush&family=Source+Code+Pro&family=Source+Sans+Pro&family=Crimson+Pro&display=block');";
      s10.append(a10), o10.append(s10);
      let d10 = e11.map((h10) => this.getShape(h10, this.currentPageId)).sort((h10, g10) => h10.childIndex - g10.childIndex), i10 = C3.getCommonBounds(d10.map(v10.getRotatedBounds)), c10 = (h10) => {
        let g10 = v10.getShapeUtil(h10), f10 = g10.getBounds(h10), T10 = g10.getSvgElement(h10, this.settings.isDarkMode);
        if (!!T10)
          return h10.type === "image" ? T10.setAttribute("xlink:href", this.document.assets[h10.assetId].src) : h10.type === "video" && T10.setAttribute("xlink:href", this.serializeVideo(h10.id)), T10.setAttribute("transform", `translate(${(16 + h10.point[0] - i10.minX).toFixed(2)}, ${(16 + h10.point[1] - i10.minY).toFixed(2)}) rotate(${((h10.rotation || 0) * 180 / Math.PI).toFixed(2)}, ${(f10.width / 2).toFixed(2)}, ${(f10.height / 2).toFixed(2)})`), T10;
      };
      d10.forEach((h10) => {
        var f10;
        if ((f10 = h10.children) == null ? void 0 : f10.length) {
          let T10 = document.createElementNS("http://www.w3.org/2000/svg", "g");
          h10.children.forEach((w10) => {
            let b10 = this.getShape(w10, this.currentPageId), y10 = c10(b10);
            y10 && T10.append(y10);
          }), o10.append(T10);
          return;
        }
        let g10 = c10(h10);
        g10 && o10.append(g10);
      }), o10.setAttribute("viewBox", [0, 0, i10.width + 16 * 2, i10.height + 16 * 2].join(" ")), o10.setAttribute("width", (i10.width + 16 * 2).toString()), o10.setAttribute("height", (i10.height + 16 * 2).toString());
      let u10 = this.settings.exportBackground, p10 = "#212529", m10 = "rgb(248, 249, 250)";
      switch (u10) {
        case "auto": {
          o10.style.setProperty("background-color", this.settings.isDarkMode ? p10 : m10);
          break;
        }
        case "dark": {
          o10.style.setProperty("background-color", p10);
          break;
        }
        case "light": {
          o10.style.setProperty("background-color", m10);
          break;
        }
        case "transparent":
        default: {
          o10.style.setProperty("background-color", "transparent");
          break;
        }
      }
      return o10.querySelectorAll(".tl-fill-hitarea, .tl-stroke-hitarea, .tl-binding-indicator").forEach((h10) => h10.remove()), o10;
    }));
    l7(this, "copySvg", (...t11) => pe4(this, [...t11], function* (e11 = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes)) {
      if (e11.length === 0)
        return;
      let n10 = yield this.getSvg(e11);
      if (!n10)
        return;
      let o10 = v10.getSvgString(n10, 1);
      this.clipboard = this.getContent(e11);
      let s10 = JSON.stringify(S4({ type: "tldr/clipboard", shapes: [], assets: [], bindings: [] }, this.clipboard));
      return navigator.clipboard && window.ClipboardItem && navigator.clipboard.write([new ClipboardItem({ "text/html": new Blob([s10], { type: "text/html" }), "text/plain": new Blob([o10], { type: "text/plain" }) })]), o10;
    }));
    l7(this, "getContent", (e11) => {
      let t11 = this.getPage(this.currentPageId);
      if (e11 && e11.length === 0 || (e11 || (e11 = this.selectedIds), e11.length === 0 && (e11 = Object.keys(t11.shapes)), e11.length === 0))
        return;
      let n10 = e11.map((d10) => t11.shapes[d10]).flatMap((d10) => {
        var i10;
        return [d10, ...((i10 = d10.children) != null ? i10 : []).map((c10) => t11.shapes[c10])];
      }).map(St2), o10 = new Set(n10.map((d10) => d10.id));
      n10.forEach((d10) => {
        d10.parentId === this.currentPageId && (d10.parentId = "currentPageId");
      });
      let s10 = Object.values(t11.bindings).filter((d10) => {
        if (o10.has(d10.fromId) || o10.has(d10.toId))
          return true;
        if (o10.has(d10.fromId)) {
          let c10 = n10.find((u10) => u10.id === d10.fromId).handles;
          c10 && Object.values(c10).forEach((u10) => {
            u10.bindingId === d10.id && (u10.bindingId = void 0);
          });
        }
        if (o10.has(d10.toId)) {
          let c10 = n10.find((u10) => u10.id === d10.toId).handles;
          c10 && Object.values(c10).forEach((u10) => {
            u10.bindingId === d10.id && (u10.bindingId = void 0);
          });
        }
        return false;
      }).map(St2), a10 = [...new Set(n10.map((d10) => {
        if (!!d10.assetId)
          return this.document.assets[d10.assetId];
      }).filter(Boolean).map(St2))];
      return { shapes: n10, bindings: s10, assets: a10 };
    });
    l7(this, "copyJson", (e11 = this.selectedIds) => {
      let t11 = this.getContent(e11);
      return t11 && v10.copyStringToClipboard(JSON.stringify(t11)), this;
    });
    l7(this, "exportJson", (e11 = this.selectedIds) => {
      let t11 = this.getContent(e11);
      if (t11) {
        let n10 = new Blob([JSON.stringify(t11)], { type: "application/json" }), o10 = URL.createObjectURL(n10), s10 = document.createElement("a");
        s10.href = o10, s10.download = "export.json", s10.click();
      }
      return this;
    });
    l7(this, "insertContent", (e11, t11 = {}) => this.setState(nc(this, e11, t11), "insert_content"));
    l7(this, "getImage", (...n10) => pe4(this, [...n10], function* (e11 = "png", t11 = {}) {
      let { ids: o10 = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes) } = t11, s10 = yield this.getSvg(o10, { includeFonts: e11 !== "svg" });
      if (!s10)
        return;
      if (e11 === "svg") {
        let d10 = v10.getSvgString(s10, 1);
        return new Blob([d10], { type: "image/svg+xml" });
      }
      let a10 = yield v10.getImageForSvg(s10, e11, t11);
      if (!!a10)
        return a10;
    }));
    l7(this, "copyImage", (...n10) => pe4(this, [...n10], function* (e11 = "png", t11 = {}) {
      if (e11 === "svg") {
        this.copySvg(t11.ids);
        return;
      }
      if (!(navigator.clipboard && window.ClipboardItem)) {
        console.warn("Sorry, your browser does not support copying images.");
        return;
      }
      let o10 = yield this.getImage(e11, t11);
      !o10 || navigator.clipboard.write([new ClipboardItem({ [o10.type]: o10 })]);
    }));
    l7(this, "exportImage", (...n10) => pe4(this, [...n10], function* (e11 = "png", t11 = {}) {
      var d10;
      let { pageId: o10 = this.currentPageId } = t11, s10 = yield this.getImage(e11, t11);
      if (!s10)
        return;
      let a10 = (d10 = this.document.pages[o10].name) != null ? d10 : "export";
      if (this.callbacks.onExport)
        this.callbacks.onExport(this, { name: a10, type: e11, blob: s10 });
      else {
        let i10 = URL.createObjectURL(s10), c10 = document.createElement("a");
        c10.href = i10, c10.download = `${a10}.${e11}`, c10.click();
      }
    }));
    l7(this, "setCamera", (e11, t11, n10) => (this.updateViewport(e11, t11), this.patchState({ document: { pageStates: { [this.currentPageId]: { camera: { point: e11, zoom: t11 } } } } }, n10), this));
    l7(this, "resetCamera", () => this.setCamera(this.centerPoint, 1, "reset_camera"));
    l7(this, "pan", (e11) => {
      let { camera: t11 } = this.pageState;
      return this.setCamera(e.toFixed(e.sub(t11.point, e11)), t11.zoom, "panned");
    });
    l7(this, "pinchZoom", (e11, t11, n10) => {
      let { camera: o10 } = this.pageState, s10 = e.sub(o10.point, e.div(t11, o10.zoom)), a10 = n10, d10 = e.sub(e.div(e11, o10.zoom), s10), i10 = e.sub(e.div(e11, a10), s10);
      return this.setCamera(e.toFixed(e.add(s10, e.sub(i10, d10))), a10, "pinch_zoomed");
    });
    l7(this, "zoomTo", (e11, t11 = this.centerPoint) => {
      let { zoom: n10, point: o10 } = this.camera, s10 = e.sub(e.div(t11, n10), o10), a10 = e.sub(e.div(t11, e11), o10);
      return this.setCamera(e.toFixed(e.add(o10, e.sub(a10, s10))), e11, "zoomed_camera");
    });
    l7(this, "zoomIn", () => {
      let e11 = Math.round(this.camera.zoom * 100 / 25), t11 = v10.getCameraZoom((e11 + 1) * 0.25);
      return this.zoomTo(t11);
    });
    l7(this, "zoomOut", () => {
      let e11 = Math.round(this.camera.zoom * 100 / 25), t11 = v10.getCameraZoom((e11 - 1) * 0.25);
      return this.zoomTo(t11);
    });
    l7(this, "zoomToFit", () => {
      let { shapes: e11, pageState: { camera: t11 } } = this;
      if (e11.length === 0)
        return this;
      let { rendererBounds: n10 } = this, o10 = C3.getCommonBounds(e11.map(v10.getBounds)), s10 = v10.getCameraZoom(Math.min((n10.width - 128) / o10.width, (n10.height - 128) / o10.height));
      s10 = t11.zoom === s10 || t11.zoom < 1 ? Math.min(1, s10) : s10;
      let a10 = (n10.width - o10.width * s10) / 2 / s10, d10 = (n10.height - o10.height * s10) / 2 / s10;
      return this.setCamera(e.toFixed(e.sub([a10, d10], [o10.minX, o10.minY])), s10, "zoomed_to_fit");
    });
    l7(this, "zoomToSelection", () => {
      if (this.selectedIds.length === 0)
        return this;
      let { rendererBounds: e11 } = this, t11 = v10.getSelectedBounds(this.state), n10 = v10.getCameraZoom(Math.min((e11.width - 128) / t11.width, (e11.height - 128) / t11.height));
      n10 = this.camera.zoom === n10 || this.camera.zoom < 1 ? Math.min(1, n10) : n10;
      let o10 = (e11.width - t11.width * n10) / 2 / n10, s10 = (e11.height - t11.height * n10) / 2 / n10;
      return this.setCamera(e.toFixed(e.sub([o10, s10], [t11.minX, t11.minY])), n10, "zoomed_to_selection");
    });
    l7(this, "zoomToContent", () => {
      let e11 = this.shapes, t11 = this.pageState;
      if (e11.length === 0)
        return this;
      let { rendererBounds: n10 } = this, { zoom: o10 } = t11.camera, s10 = C3.getCommonBounds(e11.map(v10.getBounds)), a10 = (n10.width - s10.width * o10) / 2 / o10, d10 = (n10.height - s10.height * o10) / 2 / o10;
      return this.setCamera(e.toFixed(e.sub([a10, d10], [s10.minX, s10.minY])), this.camera.zoom, "zoomed_to_content");
    });
    l7(this, "resetZoom", () => this.zoomTo(1));
    l7(this, "zoomBy", C3.throttle((e11, t11) => {
      let { zoom: n10 } = this.camera, o10 = v10.getCameraZoom(n10 - e11 * n10);
      return this.zoomTo(o10, t11);
    }, 16));
    l7(this, "clearSelectHistory", () => (this.selectHistory.pointer = 0, this.selectHistory.stack = [this.selectedIds], this));
    l7(this, "addToSelectHistory", (e11) => (this.selectHistory.pointer < this.selectHistory.stack.length && (this.selectHistory.stack = this.selectHistory.stack.slice(0, this.selectHistory.pointer + 1)), this.selectHistory.pointer++, this.selectHistory.stack.push(e11), this));
    l7(this, "setSelectedIds", (e11, t11 = false) => {
      let n10 = t11 ? [...this.pageState.selectedIds, ...e11] : [...e11];
      return this.patchState({ appState: { activeTool: "select" }, document: { pageStates: { [this.currentPageId]: { selectedIds: n10 } } } }, "selected");
    });
    l7(this, "undoSelect", () => (this.selectHistory.pointer > 0 && (this.selectHistory.pointer--, this.setSelectedIds(this.selectHistory.stack[this.selectHistory.pointer])), this));
    l7(this, "redoSelect", () => (this.selectHistory.pointer < this.selectHistory.stack.length - 1 && (this.selectHistory.pointer++, this.setSelectedIds(this.selectHistory.stack[this.selectHistory.pointer])), this));
    l7(this, "select", (...e11) => (e11.forEach((t11) => {
      if (!this.page.shapes[t11])
        throw Error(`That shape does not exist on page ${this.currentPageId}`);
    }), this.setSelectedIds(e11), this.addToSelectHistory(e11), this));
    l7(this, "selectAll", (e11 = this.currentPageId) => this.session ? this : (this.setSelectedIds(Object.values(this.document.pages[e11].shapes).filter((t11) => t11.parentId === e11).map((t11) => t11.id)), this.addToSelectHistory(this.selectedIds), this.selectTool("select"), this));
    l7(this, "selectNone", () => (this.setSelectedIds([]), this.addToSelectHistory(this.selectedIds), this));
    l7(this, "startSession", (e11, ...t11) => {
      var s10, a10;
      if (this.readOnly && e11 !== "brush")
        return this;
      this.session && (v10.warn(`Already in a session! (${this.session.constructor.name})`), this.cancelSession());
      let n10 = dc(e11);
      this.session = new n10(this, ...t11);
      let o10 = this.session.start();
      return o10 && this.patchState(o10, `session:start_${this.session.constructor.name}`), (a10 = (s10 = this.callbacks).onSessionStart) == null || a10.call(s10, this, this.session.constructor.name), this;
    });
    l7(this, "updateSession", () => {
      let { session: e11 } = this;
      if (!e11)
        return this;
      let t11 = e11.update();
      return t11 ? this.patchState(t11, `session:${e11 == null ? void 0 : e11.constructor.name}`) : this;
    });
    l7(this, "cancelSession", () => {
      var n10, o10;
      let { session: e11 } = this;
      if (!e11)
        return this;
      this.session = void 0;
      let t11 = e11.cancel();
      return t11 && this.patchState(t11, `session:cancel:${e11.constructor.name}`), this.setEditingId(), (o10 = (n10 = this.callbacks).onSessionEnd) == null || o10.call(n10, this, e11.constructor.name), this;
    });
    l7(this, "completeSession", () => {
      var n10, o10, s10, a10, d10, i10, c10, u10, p10;
      let { session: e11 } = this;
      if (!e11)
        return this;
      this.session = void 0;
      let t11 = e11.complete();
      if (t11 === void 0)
        this.isCreating = false, this.patchState({ appState: { status: "idle" }, document: { pageStates: { [this.currentPageId]: { editingId: void 0, bindingId: void 0, hoveredId: void 0 } } } }, `session:complete:${e11.constructor.name}`);
      else if ("after" in t11) {
        if (this.isCreating) {
          if (t11.before = { appState: x5(S4({}, t11.before.appState), { status: "idle" }), document: { pages: { [this.currentPageId]: { shapes: Object.fromEntries(this.selectedIds.map((m10) => [m10, void 0])) } }, pageStates: { [this.currentPageId]: { selectedIds: [], editingId: null, bindingId: null, hoveredId: null } } } }, this.appState.isToolLocked) {
            let m10 = ((s10 = (o10 = (n10 = t11.after) == null ? void 0 : n10.document) == null ? void 0 : o10.pageStates) == null ? void 0 : s10[this.currentPageId]) || {};
            m10.selectedIds = [];
          }
          this.isCreating = false;
        }
        t11.after.appState = x5(S4({}, t11.after.appState), { status: "idle" }), t11.after.document = x5(S4({}, t11.after.document), { pageStates: x5(S4({}, (a10 = t11.after.document) == null ? void 0 : a10.pageStates), { [this.currentPageId]: x5(S4({}, (((d10 = t11.after.document) == null ? void 0 : d10.pageStates) || {})[this.currentPageId]), { editingId: null }) }) }), this.setState(t11, `session:complete:${e11.constructor.name}`);
      } else
        this.patchState(x5(S4({}, t11), { appState: x5(S4({}, t11.appState), { status: "idle" }), document: x5(S4({}, t11.document), { pageStates: { [this.currentPageId]: x5(S4({}, (c10 = (i10 = t11.document) == null ? void 0 : i10.pageStates) == null ? void 0 : c10[this.currentPageId]), { editingId: null }) } }) }), `session:complete:${e11.constructor.name}`);
      return (p10 = (u10 = this.callbacks).onSessionEnd) == null || p10.call(u10, this, e11.constructor.name), this;
    });
    l7(this, "createShapes", (...e11) => e11.length === 0 ? this : this.create(e11.map((t11) => v10.getShapeUtil(t11.type).create(S4({ parentId: this.currentPageId }, t11)))));
    l7(this, "updateShapes", (...e11) => {
      let t11 = this.document.pages[this.currentPageId].shapes, n10 = e11.filter((o10) => t11[o10.id]);
      return n10.length === 0 ? this : this.setState(Di(this, n10, this.currentPageId), "updated_shapes");
    });
    l7(this, "create", (e11 = [], t11 = []) => e11.length === 0 ? this : this.setState(wi(this, e11, t11)));
    l7(this, "patchCreate", (e11 = [], t11 = []) => e11.length === 0 ? this : this.patchState(wi(this, e11, t11).after));
    l7(this, "delete", (e11 = this.selectedIds) => {
      var n10, o10;
      if (e11.length === 0)
        return this;
      if (this.session)
        return this;
      let t11 = xi(this, e11);
      if (this.callbacks.onAssetDelete && ((n10 = t11.before.document) == null ? void 0 : n10.assets) && ((o10 = t11.after.document) == null ? void 0 : o10.assets)) {
        let s10 = Object.keys(t11.before.document.assets).filter((i10) => !!t11.before.document.assets[i10]), a10 = Object.keys(t11.after.document.assets).filter((i10) => !!t11.after.document.assets[i10]);
        s10.filter((i10) => !a10.includes(i10)).forEach((i10) => this.callbacks.onAssetDelete(this, i10));
      }
      return this.setState(t11);
    });
    l7(this, "deleteAll", () => (this.selectAll(), this.delete(), this));
    l7(this, "style", (e11, t11 = this.selectedIds) => this.setState(Xd(this, t11, e11)));
    l7(this, "align", (e11, t11 = this.selectedIds) => t11.length < 2 ? this : this.setState(Bd(this, t11, e11)));
    l7(this, "distribute", (e11, t11 = this.selectedIds) => t11.length < 3 ? this : this.setState(Fd(this, t11, e11)));
    l7(this, "stretch", (e11, t11 = this.selectedIds) => t11.length < 2 ? this : this.setState(Zd(this, t11, e11)));
    l7(this, "flipHorizontal", (e11 = this.selectedIds) => e11.length === 0 ? this : this.setState(vi(this, e11, "horizontal")));
    l7(this, "flipVertical", (e11 = this.selectedIds) => e11.length === 0 ? this : this.setState(vi(this, e11, "vertical")));
    l7(this, "moveToPage", (e11, t11 = this.currentPageId, n10 = this.selectedIds) => {
      if (n10.length === 0)
        return this;
      let { rendererBounds: o10 } = this;
      return this.setState(Nd(this, n10, o10, t11, e11)), this;
    });
    l7(this, "moveToBack", (e11 = this.selectedIds) => e11.length === 0 ? this : this.setState(qo(this, e11, "toBack")));
    l7(this, "moveBackward", (e11 = this.selectedIds) => e11.length === 0 ? this : this.setState(qo(this, e11, "backward")));
    l7(this, "moveForward", (e11 = this.selectedIds) => e11.length === 0 ? this : this.setState(qo(this, e11, "forward")));
    l7(this, "moveToFront", (e11 = this.selectedIds) => e11.length === 0 ? this : this.setState(qo(this, e11, "toFront")));
    l7(this, "nudge", (e11, t11 = false, n10 = this.selectedIds) => {
      if (n10.length === 0)
        return this;
      let o10 = t11 ? this.settings.showGrid ? this.currentGrid * 4 : 10 : this.settings.showGrid ? this.currentGrid : 1;
      return this.setState(Qd(this, n10, e.mul(e11, o10)));
    });
    l7(this, "duplicate", (e11 = this.selectedIds, t11) => this.readOnly ? this : e11.length === 0 ? this : this.setState(Gd(this, e11, t11)));
    l7(this, "resetBounds", (e11 = this.selectedIds) => {
      let t11 = Ii(this, e11, this.currentPageId);
      return this.setState(Ii(this, e11, this.currentPageId), t11.id);
    });
    l7(this, "toggleHidden", (e11 = this.selectedIds) => e11.length === 0 ? this : this.setState(Qr(this, e11, "isHidden")));
    l7(this, "toggleLocked", (e11 = this.selectedIds) => e11.length === 0 ? this : this.setState(Qr(this, e11, "isLocked")));
    l7(this, "toggleAspectRatioLocked", (e11 = this.selectedIds) => e11.length === 0 ? this : this.setState(Qr(this, e11, "isAspectRatioLocked")));
    l7(this, "toggleDecoration", (e11, t11 = this.selectedIds) => t11.length === 0 || !(e11 === "start" || e11 === "end") ? this : this.setState(qd(this, t11, e11)));
    l7(this, "setShapeProps", (e11, t11 = this.selectedIds) => this.setState(tc(this, t11, e11)));
    l7(this, "rotate", (e11 = Math.PI * -0.5, t11 = this.selectedIds) => {
      if (t11.length === 0)
        return this;
      let n10 = _d(this, t11, e11);
      return n10 ? this.setState(n10) : this;
    });
    l7(this, "group", (e11 = this.selectedIds, t11 = C3.uniqueId(), n10 = this.currentPageId) => {
      if (this.readOnly)
        return this;
      if (e11.length === 1 && this.getShape(e11[0], n10).type === "group")
        return this.ungroup(e11, n10);
      if (e11.length < 2)
        return this;
      let o10 = Vd(this, e11, t11, n10);
      return o10 ? this.setState(o10) : this;
    });
    l7(this, "ungroup", (e11 = this.selectedIds, t11 = this.currentPageId) => {
      if (this.readOnly)
        return this;
      let n10 = e11.map((s10) => this.getShape(s10, t11)).filter((s10) => s10.type === "group");
      if (n10.length === 0)
        return this;
      let o10 = ec(this, e11, n10, t11);
      return o10 ? this.setState(o10) : this;
    });
    l7(this, "cancel", () => {
      var e11, t11;
      return (t11 = (e11 = this.currentTool).onCancel) == null || t11.call(e11), this;
    });
    l7(this, "addMediaFromFiles", (n10, ...o10) => pe4(this, [n10, ...o10], function* (e11, t11 = this.centerPoint) {
      this.setIsLoading(true);
      let s10 = [], a10 = this.getPagePoint(t11);
      for (let d10 of e11) {
        let i10 = C3.uniqueId(), c10 = d10.name.match(/\.[0-9a-z]+$/i);
        if (!c10)
          throw Error("No extension");
        let u10 = Or.includes(c10[0].toLowerCase()), p10 = Fr.includes(c10[0].toLowerCase());
        if (!(u10 || p10))
          throw Error("Wrong extension");
        let m10 = u10 ? "image" : "video", h10 = u10 ? "image" : "video", g10;
        try {
          if (this.callbacks.onAssetCreate) {
            let f10 = yield this.callbacks.onAssetCreate(this, d10, i10);
            if (!f10)
              throw Error("Asset creation callback returned false");
            g10 = f10;
          } else
            g10 = yield Ri(d10);
          if (typeof g10 == "string") {
            let f10 = [0, 0];
            if (u10) {
              if (c10[0] == ".svg") {
                let b10, y10 = yield Ai(d10), R10 = this.getViewboxFromSVG(y10);
                R10 && (b10 = R10.split(" "), f10[0] = parseFloat(b10[2]), f10[1] = parseFloat(b10[3]));
              }
              e.isEqual(f10, [0, 0]) && (f10 = yield Li(g10));
            } else
              f10 = yield Hi(g10);
            let T10 = Object.values(this.document.assets).find((b10) => b10.type === h10 && b10.src === g10), w10;
            if (T10)
              w10 = T10.id;
            else {
              w10 = i10;
              let b10 = { id: w10, type: h10, name: d10.name, src: g10, size: f10 };
              this.patchState({ document: { assets: { [w10]: b10 } } });
            }
            s10.push(this.getImageOrVideoShapeAtPoint(i10, m10, t11, f10, w10));
          }
        } catch (f10) {
          console.warn(f10);
        }
      }
      if (s10.length) {
        let d10 = e.add(a10, [0, 0]);
        s10.forEach((c10, u10) => {
          let p10 = v10.getBounds(c10);
          u10 === 0 && (d10[0] -= p10.width / 2, d10[1] -= p10.height / 2), c10.point = [...d10], d10[0] += p10.width;
        });
        let i10 = C3.getCommonBounds(s10.map(v10.getBounds));
        this.createShapes(...s10), C3.boundsContain(this.viewport, i10) || (this.zoomToSelection(), this.zoom > 1 && this.resetZoom());
      }
      return this.setIsLoading(false), this;
    }));
    l7(this, "getViewboxFromSVG", (e11) => {
      let t11 = /.*?viewBox=["'](-?[\d.]+[, ]+-?[\d.]+[, ][\d.]+[, ][\d.]+)["']/;
      if (typeof e11 == "string") {
        let n10 = e11.match(t11);
        return n10 && n10.length >= 2 ? n10[1] : null;
      }
      return this.setIsLoading(false), null;
    });
    l7(this, "onKeyDown", (e11, t11, n10) => {
      var o10, s10;
      switch (n10.key) {
        case "/": {
          if (this.status === "idle" && !this.pageState.editingId) {
            let { shiftKey: a10, metaKey: d10, altKey: i10, ctrlKey: c10, spaceKey: u10 } = this;
            this.onPointerDown({ target: "canvas", pointerId: 0, origin: t11.point, point: t11.point, delta: [0, 0], pressure: 0.5, shiftKey: a10, ctrlKey: c10, metaKey: d10, altKey: i10, spaceKey: u10 }, { shiftKey: a10, altKey: i10, ctrlKey: c10, pointerId: 0, clientX: t11.point[0], clientY: t11.point[1] });
          }
          break;
        }
        case "Escape": {
          this.cancel();
          break;
        }
        case "Meta": {
          this.metaKey = true;
          break;
        }
        case "Alt": {
          this.altKey = true;
          break;
        }
        case "Control": {
          this.ctrlKey = true;
          break;
        }
        case " ": {
          this.isForcePanning = true, this.spaceKey = true;
          break;
        }
      }
      return (s10 = (o10 = this.currentTool).onKeyDown) == null || s10.call(o10, e11, t11, n10), this;
    });
    l7(this, "onKeyUp", (e11, t11, n10) => {
      var o10, s10;
      if (!!t11) {
        switch (n10.key) {
          case "/": {
            let { currentPoint: a10, shiftKey: d10, metaKey: i10, altKey: c10, ctrlKey: u10, spaceKey: p10 } = this;
            this.onPointerUp({ target: "canvas", pointerId: 0, origin: a10, point: a10, delta: [0, 0], pressure: 0.5, shiftKey: d10, ctrlKey: u10, metaKey: i10, altKey: c10, spaceKey: p10 }, { shiftKey: d10, altKey: c10, ctrlKey: u10, pointerId: 0, clientX: a10[0], clientY: a10[1] });
            break;
          }
          case "Meta": {
            this.metaKey = false;
            break;
          }
          case "Alt": {
            this.altKey = false;
            break;
          }
          case "Control": {
            this.ctrlKey = false;
            break;
          }
          case " ": {
            this.isForcePanning = false, this.spaceKey = false;
            break;
          }
        }
        (s10 = (o10 = this.currentTool).onKeyUp) == null || s10.call(o10, e11, t11, n10);
      }
    });
    l7(this, "refreshBoundingBoxes", () => {
      let e11 = this.shapes.map((n10) => [n10.id, S4({ point: [...n10.point] }, "label" in n10 && { label: "" })]), t11 = this.shapes.map((n10) => [n10.id, S4({ point: [...n10.point] }, "label" in n10 && { label: n10.label })]);
      fl(), this.patchState({ document: { pages: { [this.currentPageId]: { shapes: Object.fromEntries(e11) } } } }), this.patchState({ document: { pages: { [this.currentPageId]: { shapes: Object.fromEntries(t11) } } } });
    });
    l7(this, "onDragOver", (e11) => {
      e11.preventDefault();
    });
    l7(this, "onDrop", (e11) => pe4(this, null, function* () {
      var t11;
      return e11.preventDefault(), this.disableAssets ? this : (((t11 = e11.dataTransfer.files) == null ? void 0 : t11.length) && this.addMediaFromFiles(Object.values(e11.dataTransfer.files), [e11.clientX, e11.clientY]), this);
    }));
    l7(this, "onPinchStart", (e11, t11) => {
      var n10, o10;
      (o10 = (n10 = this.currentTool).onPinchStart) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onPinchEnd", (e11, t11) => {
      var n10, o10;
      return (o10 = (n10 = this.currentTool).onPinchEnd) == null ? void 0 : o10.call(n10, e11, t11);
    });
    l7(this, "onPinch", (e11, t11) => {
      var n10, o10;
      return (o10 = (n10 = this.currentTool).onPinch) == null ? void 0 : o10.call(n10, e11, t11);
    });
    l7(this, "onPan", (e11, t11) => {
      if (this.appState.status === "pinching")
        return;
      let n10 = e.div(e11.delta, this.camera.zoom), o10 = this.camera.point, s10 = e.sub(o10, n10);
      e.isEqual(s10, o10) || (this.pan(n10), this.isForcePanning || this.onPointerMove(e11, t11), ul && this.isForcePanning && this.preventPaste());
    });
    l7(this, "onZoom", (e11, t11) => {
      if (this.state.appState.status !== "idle")
        return;
      let n10 = e11.delta[2] / 50;
      this.zoomBy(n10, e11.point), this.onPointerMove(e11, t11);
    });
    l7(this, "updateInputs", (e11) => {
      this.currentPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.shiftKey = e11.shiftKey, this.altKey = e11.altKey, this.ctrlKey = e11.ctrlKey, this.metaKey = e11.metaKey;
    });
    l7(this, "onPointerMove", (e11, t11) => {
      var n10, o10, s10, a10, d10;
      if (this.previousPoint = this.currentPoint, this.updateInputs(e11, t11), this.isForcePanning && this.isPointing) {
        (n10 = this.onPan) == null || n10.call(this, x5(S4({}, e11), { delta: e.neg(e11.delta) }), t11);
        return;
      }
      if ((s10 = (o10 = this.currentTool).onPointerMove) == null || s10.call(o10, e11, t11), this.state.room) {
        let { users: i10, userId: c10 } = this.state.room;
        (d10 = (a10 = this.callbacks).onChangePresence) == null || d10.call(a10, this, x5(S4({}, i10[c10]), { point: this.getPagePoint(e11.point), session: !!this.session }));
      }
    });
    l7(this, "onPointerDown", (e11, t11) => {
      var n10, o10;
      if (t11.buttons === 4)
        this.isForcePanning = true;
      else if (this.isPointing)
        return;
      this.isPointing = true, this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), !this.isForcePanning && (this.currentTool.type === "draw" && t11.pointerType === "pen" && t11.button === 5 && (this.selectTool("erase"), this.isErasingWithPen = true), (o10 = (n10 = this.currentTool).onPointerDown) == null || o10.call(n10, e11, t11));
    });
    l7(this, "onPointerUp", (e11, t11) => {
      var n10, o10;
      this.isPointing = false, this.shiftKey || (this.isForcePanning = false), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onPointerUp) == null || o10.call(n10, e11, t11), this.isErasingWithPen && t11.pointerType === "pen" && t11.button === 5 && (this.selectTool("draw"), this.isErasingWithPen = false);
    });
    l7(this, "onPointCanvas", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onPointCanvas) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onDoubleClickCanvas", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onDoubleClickCanvas) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onRightPointCanvas", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onRightPointCanvas) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onDragCanvas", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onDragCanvas) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onReleaseCanvas", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onReleaseCanvas) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onPointShape", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onPointShape) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onReleaseShape", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onReleaseShape) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onDoubleClickShape", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onDoubleClickShape) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onRightPointShape", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onRightPointShape) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onDragShape", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onDragShape) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onHoverShape", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onHoverShape) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onUnhoverShape", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onUnhoverShape) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onPointBounds", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onPointBounds) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onDoubleClickBounds", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onDoubleClickBounds) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onRightPointBounds", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onRightPointBounds) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onDragBounds", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onDragBounds) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onHoverBounds", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onHoverBounds) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onUnhoverBounds", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onUnhoverBounds) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onReleaseBounds", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onReleaseBounds) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onPointBoundsHandle", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onPointBoundsHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onDoubleClickBoundsHandle", (e11, t11) => {
      var o10, s10;
      if (this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (s10 = (o10 = this.currentTool).onDoubleClickBoundsHandle) == null || s10.call(o10, e11, t11), this.selectedIds.length !== 1)
        return;
      let n10 = this.getShape(this.selectedIds[0]);
      if (n10.type === "image" || n10.type === "video") {
        let a10 = this.document.assets[n10.assetId], d10 = v10.getShapeUtil(n10), i10 = d10.getCenter(n10), c10 = d10.getCenter(x5(S4({}, n10), { size: a10.size })), u10 = e.sub(c10, i10);
        this.updateShapes({ id: n10.id, point: e.sub(n10.point, u10), size: a10.size });
      }
    });
    l7(this, "onRightPointBoundsHandle", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onRightPointBoundsHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onDragBoundsHandle", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onDragBoundsHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onHoverBoundsHandle", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onHoverBoundsHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onUnhoverBoundsHandle", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onUnhoverBoundsHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onReleaseBoundsHandle", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onReleaseBoundsHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onPointHandle", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onPointHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onDoubleClickHandle", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onDoubleClickHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onRightPointHandle", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onRightPointHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onDragHandle", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onDragHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onHoverHandle", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onHoverHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onUnhoverHandle", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onUnhoverHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onReleaseHandle", (e11, t11) => {
      var n10, o10;
      this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onReleaseHandle) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onShapeChange", (e11) => {
      let t11 = this.document.pages[this.currentPageId].shapes, n10 = S4(S4({}, t11[e11.id]), e11), o10 = Di(this, [n10], this.currentPageId).after;
      return this.patchState(o10, "patched_shapes");
    });
    l7(this, "onShapeBlur", () => {
      var n10, o10;
      if (performance.now() - this.editingStartTime < 50)
        return;
      let { editingId: e11 } = this.pageState, { isToolLocked: t11 } = this.getAppState();
      if (e11) {
        let s10 = this.getShape(e11);
        this.setEditingId(), s10.type === "text" && (s10.text.trim().length <= 0 ? this.patchState(xi(this, [e11]).after, "delete_empty_text") : t11 || this.select(e11));
      }
      (o10 = (n10 = this.currentTool).onShapeBlur) == null || o10.call(n10);
    });
    l7(this, "onShapeClone", (e11, t11) => {
      var n10, o10;
      this.originPoint = this.getPagePoint(e11.point).concat(e11.pressure), this.updateInputs(e11, t11), (o10 = (n10 = this.currentTool).onShapeClone) == null || o10.call(n10, e11, t11);
    });
    l7(this, "onRenderCountChange", (e11) => {
      let t11 = this.getAppState();
      t11.isEmptyCanvas && e11.length > 0 ? this.patchState({ appState: { isEmptyCanvas: false } }, "empty_canvas:false") : !t11.isEmptyCanvas && e11.length <= 0 && this.patchState({ appState: { isEmptyCanvas: true } }, "empty_canvas:true");
    });
    l7(this, "onError", () => {
    });
    l7(this, "getShapeUtil", v10.getShapeUtil);
    this.callbacks = t10;
  }
  setStatus(e10) {
    return this.patchState({ appState: { status: e10 } }, `set_status:${e10}`);
  }
  get isMenuOpen() {
    return this.appState.isMenuOpen;
  }
  get isLoading() {
    return this.appState.isLoading;
  }
  get disableAssets() {
    return this.appState.disableAssets;
  }
  get history() {
    return this.stack.slice(0, this.pointer + 1);
  }
  set history(e10) {
    this.replaceHistory(e10);
  }
  get document() {
    return this.state.document;
  }
  get settings() {
    return this.state.settings;
  }
  get appState() {
    return this.state.appState;
  }
  get currentPageId() {
    return this.state.appState.currentPageId;
  }
  get page() {
    return this.state.document.pages[this.currentPageId];
  }
  get shapes() {
    return Object.values(this.page.shapes);
  }
  get bindings() {
    return Object.values(this.page.bindings);
  }
  get assets() {
    return Object.values(this.document.assets);
  }
  get pageState() {
    return this.state.document.pageStates[this.currentPageId];
  }
  get camera() {
    return this.pageState.camera;
  }
  get zoom() {
    return this.pageState.camera.zoom;
  }
  get selectedIds() {
    return this.pageState.selectedIds;
  }
  createTextShapeAtPoint(e10, t10, n10) {
    let { shapes: o10, appState: { currentPageId: s10, currentStyle: a10 } } = this, d10 = o10.length === 0 ? 1 : o10.filter((p10) => p10.parentId === s10).sort((p10, m10) => m10.childIndex - p10.childIndex)[0].childIndex + 1, i10 = En2["text"], c10 = i10.create({ id: t10 || C3.uniqueId(), parentId: s10, childIndex: d10, point: e10, style: S4({}, a10) }), u10 = i10.getBounds(c10);
    return c10.point = e.sub(c10.point, [u10.width / 2, u10.height / 2]), n10 ? this.patchCreate([v10.getShapeUtil(c10.type).create(c10)]) : this.createShapes(c10), this.setEditingId(c10.id, true), this;
  }
  getImageOrVideoShapeAtPoint(e10, t10, n10, o10, s10) {
    let { shapes: a10, appState: { currentPageId: d10, currentStyle: i10 } } = this, c10 = a10.length === 0 ? 1 : a10.filter((m10) => m10.parentId === d10).sort((m10, h10) => h10.childIndex - m10.childIndex)[0].childIndex + 1, u10 = En2[t10];
    if (o10[0] > this.viewport.width) {
      let m10 = o10[1] / o10[0];
      o10[0] = this.viewport.width - 128 / this.camera.zoom * 2, o10[1] = o10[0] * m10, (o10[1] < 32 || o10[1] < 32) && (o10[1] = 32, o10[0] = o10[1] / m10);
    } else if (o10[1] > this.viewport.height) {
      let m10 = o10[0] / o10[1];
      o10[1] = this.viewport.height - 128 / this.camera.zoom * 2, o10[0] = o10[1] * m10, (o10[1] < 32 || o10[1] < 32) && (o10[0] = 32, o10[1] = o10[0] / m10);
    }
    return u10.create({ id: e10, parentId: d10, childIndex: c10, point: n10, size: o10, style: S4({}, i10), assetId: s10 });
  }
  isSelected(e10) {
    return this.selectedIds.includes(e10);
  }
  serializeVideo(e10) {
    let t10 = document.getElementById(e10 + "_video");
    if (t10) {
      let n10 = document.createElement("canvas");
      return n10.width = t10.videoWidth, n10.height = t10.videoHeight, n10.getContext("2d").drawImage(t10, 0, 0), n10.toDataURL("image/png");
    } else
      throw new Error("Video with id " + e10 + " not found");
  }
  serializeImage(e10) {
    let t10 = document.getElementById(e10 + "_image");
    if (t10) {
      let n10 = document.createElement("canvas");
      return n10.width = t10.width, n10.height = t10.height, n10.getContext("2d").drawImage(t10, 0, 0), n10.toDataURL("image/png");
    } else
      throw new Error("Image with id " + e10 + " not found");
  }
  patchAssets(e10) {
    this.document.assets = S4(S4({}, this.document.assets), e10);
  }
  get room() {
    return this.state.room;
  }
  get isLocal() {
    return this.state.room === void 0 || this.state.room.id === "local";
  }
  get status() {
    return this.appState.status;
  }
  get currentUser() {
    if (!!this.state.room)
      return this.state.room.users[this.state.room.userId];
  }
  get centerPoint() {
    let { width: e10, height: t10 } = this.rendererBounds;
    return e.toFixed([e10 / 2, t10 / 2]);
  }
  get currentGrid() {
    let { zoom: e10 } = this.camera;
    return e10 < 0.15 ? 8 * 16 : e10 < 1 ? 8 * 4 : 8 * 1;
  }
};
var An2 = lt2;
l7(An2, "version", 15.5), l7(An2, "defaultDocument", { id: "doc", name: "New Document", version: lt2.version, pages: { page: { id: "page", name: "Page 1", childIndex: 1, shapes: {}, bindings: {} } }, pageStates: { page: { id: "page", selectedIds: [], camera: { point: [0, 0], zoom: 1 } } }, assets: {} }), l7(An2, "defaultState", { settings: { isCadSelectMode: false, isPenMode: false, isDarkMode: false, isZoomSnap: false, isFocusMode: false, isSnapping: false, isDebugMode: false, isReadonlyMode: false, keepStyleMenuOpen: false, nudgeDistanceLarge: 16, nudgeDistanceSmall: 1, showRotateHandles: true, showBindingHandles: true, showCloneHandles: false, showGrid: false, language: "en", dockPosition: "bottom", exportBackground: "transparent" }, appState: { status: "idle", activeTool: "select", hoveredId: void 0, currentPageId: "page", currentStyle: ct2, isToolLocked: false, isMenuOpen: false, isEmptyCanvas: false, eraseLine: [], snapLines: [], isLoading: false, disableAssets: false }, document: lt2.defaultDocument }), l7(An2, "assetSrc", "tldraw-assets.json");
var Zpe = import_react_error_boundary.ErrorBoundary;
var Xpe = window.matchMedia ? window.matchMedia("(prefers-color-scheme: dark)").matches : false;
function AAe({ id: r10, document: e10, currentPageId: t10, autofocus: n10 = true, showMenu: o10 = true, showMultiplayerMenu: s10 = true, showPages: a10 = true, showTools: d10 = true, showZoom: i10 = true, showStyles: c10 = true, showUI: u10 = true, readOnly: p10 = false, disableAssets: m10 = false, darkMode: h10 = Xpe, components: g10, onMount: f10, onChange: T10, onChangePresence: w10, onNewProject: b10, onSaveProject: y10, onSaveProjectAs: R10, onOpenProject: U10, onOpenMedia: L10, onUndo: k10, onRedo: I10, onPersist: q10, onPatch: de4, onCommand: le3, onChangePage: Ae2, onAssetCreate: Ce2, onAssetDelete: De2, onAssetUpload: Ve, onSessionStart: $e2, onSessionEnd: jt, onExport: on2, hideCursors: Lo }) {
  let [co, ur] = Se3.useState(r10), [Ne2, hr] = Se3.useState(() => new An2(r10, { onMount: f10, onChange: T10, onChangePresence: w10, onNewProject: b10, onSaveProject: y10, onSaveProjectAs: R10, onOpenProject: U10, onOpenMedia: L10, onUndo: k10, onRedo: I10, onPersist: q10, onPatch: de4, onCommand: le3, onChangePage: Ae2, onAssetDelete: De2, onAssetCreate: Ce2, onAssetUpload: Ve, onSessionStart: $e2, onSessionEnd: jt })), [Ln2, ns] = Se3.useState(null), [Hn2, Ho] = Se3.useState(null), [zo, pc] = Se3.useState(null), [uc, Zi] = Se3.useState(null), hc = Se3.useCallback((eo, mr, mc, gc) => {
    Zi(() => eo), ns(() => gc), Ho(() => mr), pc(() => mc);
  }, []);
  return Se3.useLayoutEffect(() => {
    if (r10 === co)
      return;
    let eo = new An2(r10, { onMount: f10, onChange: T10, onChangePresence: w10, onNewProject: b10, onSaveProject: y10, onSaveProjectAs: R10, onOpenProject: U10, onOpenMedia: L10, onUndo: k10, onRedo: I10, onPersist: q10, onPatch: de4, onCommand: le3, onChangePage: Ae2, onAssetDelete: De2, onAssetCreate: Ce2, onAssetUpload: Ve, onExport: on2, onSessionStart: $e2, onSessionEnd: jt });
    ur(r10), hr(eo);
  }, [co, r10]), Se3.useEffect(() => {
    !e10 || (e10.id === Ne2.document.id ? Ne2.updateDocument(e10) : Ne2.loadDocument(e10));
  }, [e10, Ne2]), Se3.useEffect(() => {
    Ne2.setDisableAssets(m10);
  }, [Ne2, m10]), Se3.useEffect(() => {
    !t10 || Ne2.changePage(t10);
  }, [t10, Ne2]), Se3.useEffect(() => {
    Ne2.readOnly = p10, p10 || (Ne2.selectNone(), Ne2.cancelSession(), Ne2.setEditingId());
  }, [Ne2, p10]), Se3.useEffect(() => {
    h10 !== Ne2.settings.isDarkMode && Ne2.toggleDarkMode();
  }, [Ne2, h10]), Se3.useEffect(() => {
    Ne2.callbacks = { onMount: f10, onChange: T10, onChangePresence: w10, onNewProject: b10, onSaveProject: y10, onSaveProjectAs: R10, onOpenProject: U10, onOpenMedia: L10, onUndo: k10, onRedo: I10, onPersist: q10, onPatch: de4, onCommand: le3, onChangePage: Ae2, onAssetDelete: De2, onAssetCreate: Ce2, onAssetUpload: Ve, onExport: on2, onSessionStart: $e2, onSessionEnd: jt };
  }, [f10, T10, w10, b10, y10, R10, U10, L10, k10, I10, q10, de4, le3, Ae2, De2, Ce2, Ve, on2, $e2, jt]), Se3.useLayoutEffect(() => {
    var mr;
    if (typeof window == "undefined" || !((mr = window.document) == null ? void 0 : mr.fonts))
      return;
    function eo() {
      Ne2.refreshBoundingBoxes();
    }
    return window.document.fonts.addEventListener("loadingdone", eo), () => {
      window.document.fonts.removeEventListener("loadingdone", eo);
    };
  }, [Ne2]), Se3.createElement(hs.Provider, { value: Ne2 }, Se3.createElement(gs.Provider, { value: { onYes: Hn2, onCancel: Ln2, onNo: zo, dialogState: uc, setDialogState: Zi, openDialog: hc } }, Se3.createElement(qpe, { key: co || "Tldraw", id: co, autofocus: n10, showPages: a10, showMenu: o10, showMultiplayerMenu: s10, showStyles: c10, showZoom: i10, showTools: d10, showUI: u10, readOnly: p10, components: g10, hideCursors: Lo })));
}
var qpe = Se3.memo(function({ id: e10, autofocus: t10, showPages: n10, showMenu: o10, showMultiplayerMenu: s10, showZoom: a10, showStyles: d10, showTools: i10, readOnly: c10, showUI: u10, components: p10, hideCursors: m10 }) {
  var Ne2, hr;
  let h10 = me3(), [g10, f10] = Se3.useState(null), T10 = Se3.useRef(null), w10 = h10.useStore(), { document: b10, settings: y10, appState: R10, room: U10 } = w10, L10 = w10.appState.activeTool === "select", k10 = b10.pages[R10.currentPageId], I10 = b10.pageStates[k10.id], q10 = b10.assets, { selectedIds: de4 } = I10, le3 = de4.length === 1 && k10.shapes[de4[0]] && v10.getShapeUtil(k10.shapes[de4[0]].type).hideBounds, Ae2 = de4.length === 1 && k10.shapes[de4[0]] && v10.getShapeUtil(k10.shapes[de4[0]].type).hideResizeHandles, Ce2 = Se3.useMemo(() => ({ isDarkMode: y10.isDarkMode }), [y10.isDarkMode]), De2 = y10.isCadSelectMode ? !R10.selectByContain : R10.selectByContain, Ve = Se3.useMemo(() => {
    let { selectByContain: Ln2 } = R10, { isDarkMode: ns, isCadSelectMode: Hn2 } = y10;
    if (ns) {
      let zo = Hn2 ? Ln2 ? "69, 155, 255" : "105, 209, 73" : "180, 180, 180";
      return { brushFill: `rgba(${zo}, ${Hn2 ? 0.08 : 0.05})`, brushStroke: `rgba(${zo}, ${Hn2 ? 0.5 : 0.25})`, brushDashStroke: `rgba(${zo}, .6)`, selected: "rgba(38, 150, 255, 1.000)", selectFill: "rgba(38, 150, 255, 0.05)", background: "#212529", foreground: "#49555f" };
    }
    let Ho = Hn2 ? Ln2 ? "0, 89, 242" : "51, 163, 23" : "0,0,0";
    return { brushFill: `rgba(${Ho}, ${Hn2 ? 0.08 : 0.05})`, brushStroke: `rgba(${Ho}, ${Hn2 ? 0.4 : 0.25})`, brushDashStroke: `rgba(${Ho}, .6)` };
  }, [y10.isDarkMode, y10.isCadSelectMode, R10.selectByContain]), $e2 = h10.session !== void 0, jt = $e2 && ((Ne2 = h10.session) == null ? void 0 : Ne2.constructor.name) !== "BrushSession" || !L10 || le3 || !!I10.editingId, on2 = $e2 || !L10, Lo = $e2 && w10.appState.status !== "brushing" || !L10, co = $e2 || !L10 || I10.camera.zoom < 0.2, ur = Ea(y10.language);
  return Se3.useLayoutEffect(() => {
    let Ln2 = T10.current;
    !Ln2 || (y10.isDarkMode ? Ln2.classList.add(is) : Ln2.classList.remove(is));
  }, [y10.isDarkMode]), Cd(T10), Se3.createElement(ms.Provider, { value: T10 }, Se3.createElement(provider_default, { locale: ur.locale, messages: ur.messages }, Se3.createElement(Ha, { container: g10 }), Se3.createElement(Qpe, { ref: T10, tabIndex: -0 }, Se3.createElement(Ts, null), Se3.createElement(Jpe, { focusableRef: T10, autofocus: t10 }), Se3.createElement(Ba, null, Se3.createElement(Zpe, { FallbackComponent: Ra }, Se3.createElement(ks, { id: e10, containerRef: T10, shapeUtils: En2, page: k10, pageState: I10, assets: q10, snapLines: R10.snapLines, eraseLine: R10.eraseLine, grid: 8, users: U10 == null ? void 0 : U10.users, userId: U10 == null ? void 0 : U10.userId, theme: Ve, meta: Ce2, components: p10, hideCursors: m10, hideBounds: jt, hideHandles: on2, hideResizeHandles: Ae2, hideIndicators: Lo, hideBindingHandles: !y10.showBindingHandles, hideCloneHandles: co, hideRotateHandles: !y10.showRotateHandles, hideGrid: !y10.showGrid, showDashedBrush: De2, performanceMode: (hr = h10.session) == null ? void 0 : hr.performanceMode, onPinchStart: h10.onPinchStart, onPinchEnd: h10.onPinchEnd, onPinch: h10.onPinch, onPan: h10.onPan, onZoom: h10.onZoom, onPointerDown: h10.onPointerDown, onPointerMove: h10.onPointerMove, onPointerUp: h10.onPointerUp, onPointCanvas: h10.onPointCanvas, onDoubleClickCanvas: h10.onDoubleClickCanvas, onRightPointCanvas: h10.onRightPointCanvas, onDragCanvas: h10.onDragCanvas, onReleaseCanvas: h10.onReleaseCanvas, onPointShape: h10.onPointShape, onDoubleClickShape: h10.onDoubleClickShape, onRightPointShape: h10.onRightPointShape, onDragShape: h10.onDragShape, onHoverShape: h10.onHoverShape, onUnhoverShape: h10.onUnhoverShape, onReleaseShape: h10.onReleaseShape, onPointBounds: h10.onPointBounds, onDoubleClickBounds: h10.onDoubleClickBounds, onRightPointBounds: h10.onRightPointBounds, onDragBounds: h10.onDragBounds, onHoverBounds: h10.onHoverBounds, onUnhoverBounds: h10.onUnhoverBounds, onReleaseBounds: h10.onReleaseBounds, onPointBoundsHandle: h10.onPointBoundsHandle, onDoubleClickBoundsHandle: h10.onDoubleClickBoundsHandle, onRightPointBoundsHandle: h10.onRightPointBoundsHandle, onDragBoundsHandle: h10.onDragBoundsHandle, onHoverBoundsHandle: h10.onHoverBoundsHandle, onUnhoverBoundsHandle: h10.onUnhoverBoundsHandle, onReleaseBoundsHandle: h10.onReleaseBoundsHandle, onPointHandle: h10.onPointHandle, onDoubleClickHandle: h10.onDoubleClickHandle, onRightPointHandle: h10.onRightPointHandle, onDragHandle: h10.onDragHandle, onHoverHandle: h10.onHoverHandle, onUnhoverHandle: h10.onUnhoverHandle, onReleaseHandle: h10.onReleaseHandle, onError: h10.onError, onRenderCountChange: h10.onRenderCountChange, onShapeChange: h10.onShapeChange, onShapeBlur: h10.onShapeBlur, onShapeClone: h10.onShapeClone, onBoundsChange: h10.updateBounds, onKeyDown: h10.onKeyDown, onKeyUp: h10.onKeyUp, onDragOver: h10.onDragOver, onDrop: h10.onDrop }))), u10 && Se3.createElement(eue, { ref: f10 }, y10.isFocusMode ? Se3.createElement(Aa, { onSelect: h10.toggleFocusMode }) : Se3.createElement(Se3.Fragment, null, Se3.createElement(Id, { readOnly: c10, showPages: n10, showMenu: o10, showMultiplayerMenu: s10, showStyles: d10, showZoom: a10 }), Se3.createElement(tue, null), i10 && !c10 && Se3.createElement(il, null))))));
});
var Jpe = Se3.memo(function({ focusableRef: e10, autofocus: t10 }) {
  return Ji(e10), Se3.useEffect(() => {
    var n10;
    t10 && ((n10 = e10.current) == null || n10.focus());
  }, [t10]), null;
});
var Qpe = H5("div", { position: "absolute", height: "100%", width: "100%", minHeight: 0, minWidth: 0, maxHeight: "100%", maxWidth: "100%", overflow: "hidden", boxSizing: "border-box", outline: "none", userSelect: "none", WebkitUserSelect: "none", "& .tl-container": { position: "absolute", top: 0, left: 0, height: "100%", width: "100%", zIndex: 1 }, "& input, textarea, button, select, label, button": { webkitTouchCallout: "none", webkitUserSelect: "none", "-webkit-tap-highlight-color": "transparent", "tap-highlight-color": "transparent" } });
var eue = H5("div", { position: "absolute", top: 0, left: 0, height: "100%", width: "100%", padding: "8px 8px 0 8px", display: "flex", alignItems: "flex-start", justifyContent: "flex-start", pointerEvents: "none", zIndex: 2, "& > *": { pointerEvents: "all" } });
var tue = H5("div", { flexGrow: 2 });

// src/utils/Utils.ts
var errorlog = (data) => {
  console.error({ plugin: "Tldraw", ...data });
};
var log = console.log.bind(window.console);
var debug = console.log.bind(window.console);

// src/ui/defaultDocument.ts
var defaultDocument = {
  id: "doc",
  name: "New Document",
  version: An2.version,
  pages: {
    page: {
      id: "page",
      name: "Page 1",
      childIndex: 1,
      shapes: {},
      bindings: {}
    }
  },
  assets: {},
  pageStates: {
    page: {
      id: "page",
      selectedIds: [],
      camera: {
        point: [0, 0],
        zoom: 1
      }
    }
  }
};

// src/ui/ObsTLdrawApp.tsx
var util = __toESM(require("util"));
var getTldrawDoc;
function ObsTLdrawApp(props) {
  const rTldrawApp = React22.useRef();
  const tldrawDataFile = props.obsTldrawDataFile;
  const rCurrentDoc = React22.useRef(tldrawDataFile ? tldrawDataFile.document : defaultDocument);
  const rLoaded = React22.useRef(false);
  const rMounted = React22.useRef(false);
  const rUseEffectKickedIn = React22.useRef(false);
  const handleMount = React22.useCallback((tldrawApp) => {
    var _a3;
    An2.assetSrc = (_a3 = props.assetSrc) != null ? _a3 : "tldraw-assets.json";
    rTldrawApp.current = tldrawApp;
    rCurrentDoc.current = tldrawDataFile.document;
    if (!rLoaded.current && !rUseEffectKickedIn.current) {
      console.log("Loading doc");
      tldrawApp.loadDocument(rCurrentDoc.current);
      rLoaded.current = true;
      rMounted.current = true;
    } else {
      console.log("Doc already loaded");
    }
  }, []);
  const handleChange = React22.useCallback((tldrawApp) => {
    const nextDocUpdatedInTldraw = tldrawApp.state.document;
    rCurrentDoc.current = nextDocUpdatedInTldraw;
  }, []);
  getTldrawDoc = () => {
    const currentDrawingDocument = rCurrentDoc.current;
    const drawingDocFromTldrawSide = {
      ...tldrawDataFile,
      document: currentDrawingDocument
    };
    return drawingDocFromTldrawSide;
  };
  function openAnotherDrawingInSamePaneAsAlreadyOpenedDrawing(mounted, loaded, prevDoc, nextDoc) {
    if (rMounted.current === true && rLoaded.current === true && !util.isDeepStrictEqual(prevDoc, nextDoc)) {
      console.log("Conditions met");
      return true;
    } else {
      console.log("Conditions NOT met");
      return false;
    }
  }
  const [isAnotherFileLoaded, setIsAnotherFileLoaded] = React22.useState(false);
  React22.useEffect(() => {
    function watchNewFileLoaded(evt) {
      const app2 = rTldrawApp.current;
      const prevDocLoadedInTldraw = rCurrentDoc.current;
      const newFileLoadedInObsidian = evt.detail.newFile;
      const newDocToLoadInTldraw = newFileLoadedInObsidian.document;
      try {
        const openNewFileOntopOfAlreadyOpenedFile = openAnotherDrawingInSamePaneAsAlreadyOpenedDrawing(rMounted.current, rLoaded.current, prevDocLoadedInTldraw, newDocToLoadInTldraw);
        if (openNewFileOntopOfAlreadyOpenedFile) {
          console.log("re-load");
          app2 == null ? void 0 : app2.loadDocument(newDocToLoadInTldraw);
          rUseEffectKickedIn.current = true;
        }
      } catch (e10) {
        errorlog({ where: "ObsTLdrawApp.useEffect", error: e10 });
      }
      setIsAnotherFileLoaded(evt.detail.isNewFileLoaded);
    }
    document.addEventListener("newFile:Obsidianloaded", watchNewFileLoaded);
    return function() {
      console.log("Cleaning up...");
      setIsAnotherFileLoaded(false);
      document.removeEventListener("newFile:Obsidianloaded", watchNewFileLoaded);
    };
  }, [isAnotherFileLoaded]);
  return /* @__PURE__ */ React22.createElement("div", {
    className: "tldrawApp"
  }, /* @__PURE__ */ React22.createElement("div", {
    className: "tldraw-wrapper"
  }, /* @__PURE__ */ React22.createElement(AAe, {
    onMount: handleMount,
    onChange: handleChange,
    darkMode: props.theme
  })));
}
function triggerEvent(eventType, data) {
  const event = new CustomEvent(eventType, { detail: data });
  document.dispatchEvent(event);
}

// src/ui/TLdrawView.tsx
var TLdrawView = class extends import_obsidian4.TextFileView {
  constructor(leaf, plugin, tldrawPluginApi) {
    super(leaf);
    this.plugin = plugin;
    this.tldrawPluginApi = tldrawPluginApi;
    this.compatibilityMode = false;
    this.isLoaded = false;
    this.tldrawData = new TLdrawData();
    this.reactRoot = this.createReactRoot();
  }
  onload() {
    console.log("view.ONLOAD");
    this.forceSaveIcon = this.addAction(SAVE_DISK_ICON, "FORCE SAVE", async () => {
      await this.save(false, true);
      new import_obsidian4.Notice("Save successful", 1e3);
    });
    super.onload();
  }
  async save(preventReload = true, forcesave = false) {
    console.log("ABOUT TO SAVE");
    if (!this.isLoaded) {
      return;
    }
    const fileRecentlyDeleted = !app.vault.getAbstractFileByPath(this.file.path);
    if (!this.file || fileRecentlyDeleted) {
      return;
    }
    await super.save();
  }
  getViewData() {
    console.log("view.getViewData()");
    if (!this.tldrawData.loaded) {
      return this.data;
    }
    const currentTldrawDocument = this.tldrawPluginApi.getCurrentTldrawDoc();
    if (this.compatibilityMode) {
      return JSON.stringify(currentTldrawDocument, null, "	");
    }
    return this.data;
  }
  setViewData(data, clear) {
    this.isLoaded = false;
    if (clear) {
      this.clear();
    }
    this.app.workspace.onLayoutReady(async () => {
      this.compatibilityMode = this.file.extension === "tldr";
      await this.plugin.loadSettings();
      let dataToUse = null;
      if (data) {
        dataToUse = this.data = data.replaceAll("\r\n", "\n").replaceAll("\r", "\n");
      } else {
        dataToUse = await this.tldrawPluginApi.blankDrawing(this.file.name, nanoid());
      }
      if (this.compatibilityMode) {
        await this.tldrawData.loadLegacyData(dataToUse, this.file);
        this.tldrawData.disableCompression = true;
      } else {
        this.tldrawData.disableCompression = false;
      }
      await this.loadDrawing(true);
      this.isLoaded = true;
    });
  }
  clear() {
  }
  getViewType() {
    return VIEW_TYPE_TLDRAW_EMBED;
  }
  createReactRoot() {
    const obsidianContentDivContainer = this.containerEl.children[1];
    const mountableReactRoot = (0, import_client.createRoot)(obsidianContentDivContainer);
    return mountableReactRoot;
  }
  async onClose() {
    this.reactRoot.unmount();
    this.contentEl.empty();
  }
  async loadDrawing(justloaded) {
    this.instantiateTldraw();
  }
  instantiateTldraw() {
    console.log(this.containerEl.children);
    console.log(this.containerEl);
    console.log("Trigger custom event");
    triggerEvent("newFile:Obsidianloaded", {
      isNewFileLoaded: true,
      newFile: this.tldrawData.tldrawDataFile
    });
    const mountableReactRoot = this.reactRoot;
    mountableReactRoot.render(/* @__PURE__ */ React23.createElement(AppContext.Provider, {
      value: this.app
    }, /* @__PURE__ */ React23.createElement(ObsTLdrawApp, {
      obsTldrawDataFile: this.tldrawData.tldrawDataFile,
      theme: this.tldrawPluginApi.darkTheme()
    })));
  }
};

// src/api/plugin-api.ts
var import_obsidian5 = require("obsidian");

// src/utils/ObsidianUtils.ts
var isObsidianThemeDark = () => document.body.classList.contains("theme-dark");
var getNewOrAdjacentLeaf = (plugin, leaf) => {
  const leafId = leaf.id;
  const layout = app.workspace.getLayout();
  const getLeaves = (l10) => l10.children.filter((c10) => c10.type !== "leaf").map((c10) => getLeaves(c10)).flat().concat(l10.children.filter((c10) => c10.type === "leaf").map((c10) => c10.id));
  const mainLeavesIds = getLeaves(layout.main);
  const leafLoc = layout.main && mainLeavesIds.contains(leafId) ? "main" : layout.floating && getLeaves(layout.floating).contains(leafId) ? "popout" : layout.left && getLeaves(layout.left).contains(leafId) ? "left" : layout.right && getLeaves(layout.right).contains(leafId) ? "right" : "hover";
  const getMainLeaf = () => {
    var _a3;
    let mainLeaf = app.workspace.getMostRecentLeaf();
    if (mainLeaf && mainLeaf !== leaf && ((_a3 = mainLeaf.view) == null ? void 0 : _a3.containerEl.ownerDocument) === document) {
      return mainLeaf;
    }
    mainLeaf = null;
    mainLeavesIds.forEach((id) => {
      var _a4;
      const l10 = app.workspace.getLeafById(id);
      if (mainLeaf || !((_a4 = l10.view) == null ? void 0 : _a4.navigation) || leaf === l10)
        return;
      mainLeaf = l10;
    });
    return mainLeaf;
  };
  if (plugin.settings.openInMainWorkspace || ["main", "left", "right"].contains(leafLoc)) {
    if (!plugin.settings.openInAdjacentPane) {
      if (leafLoc === "main") {
        return app.workspace.createLeafBySplit(leaf);
      }
      const ml3 = getMainLeaf();
      return ml3 ? ml3.view.getViewType() === "empty" ? ml3 : app.workspace.createLeafBySplit(ml3) : app.workspace.getLeaf(true);
    }
    const ml2 = getMainLeaf();
    return ml2 != null ? ml2 : app.workspace.getLeaf(true);
  }
  if (!plugin.settings.openInAdjacentPane) {
    return app.workspace.createLeafBySplit(leaf);
  }
  if (leafLoc === "hover") {
    const leaves = /* @__PURE__ */ new Set();
    app.workspace.iterateAllLeaves((l10) => {
      if (l10 !== leaf && leaf.containerEl.parentElement === l10.containerEl.parentElement)
        leaves.add(l10);
    });
    if (leaves.size === 0) {
      return plugin.app.workspace.createLeafBySplit(leaf);
    }
    return Array.from(leaves)[0];
  }
  if (leafLoc === "popout") {
    const popoutLeaves = /* @__PURE__ */ new Set();
    app.workspace.iterateAllLeaves((l10) => {
      if (l10 !== leaf && l10.view.navigation && l10.view.containerEl.ownerDocument === leaf.view.containerEl.ownerDocument) {
        popoutLeaves.add(l10);
      }
    });
    if (popoutLeaves.size === 0) {
      return app.workspace.createLeafBySplit(leaf);
    }
    return Array.from(popoutLeaves)[0];
  }
  return plugin.app.workspace.createLeafBySplit(leaf);
};

// src/api/plugin-api.ts
var TLdrawPluginAPI = class {
  constructor(obsidianApp, settings, tldrawPlugin) {
    this.obsidianApp = obsidianApp;
    this.settings = settings;
    this.tldrawPlugin = tldrawPlugin;
  }
  async createAndOpenDrawing(location2, filename, foldername, initialData) {
    let drawingFilename;
    if (filename) {
      drawingFilename = filename;
    } else {
      drawingFilename = getDrawingFilename(this.settings);
    }
    const file = await this.createDrawing(drawingFilename, foldername, initialData);
    this.openDrawing(file, location2, true);
    return file.path;
  }
  async createDrawing(filename, foldername, initData) {
    const folderpath = (0, import_obsidian5.normalizePath)(foldername ? foldername : this.settings.folder);
    await checkAndCreateFolder(folderpath);
    const fname = getNewUniqueFilepath(this.obsidianApp.vault, filename, folderpath);
    const file = await this.obsidianApp.vault.create(fname, initData != null ? initData : await this.blankDrawing(filename, nanoid()));
    return file;
  }
  openDrawing(drawingFile, location2, active, subpath) {
    let leaf;
    if (location2 === "popout-window") {
      leaf = app.workspace.openPopoutLeaf();
    } else {
      leaf = this.obsidianApp.workspace.getLeaf(false);
      if (leaf.view.getViewType() !== "empty" && location2 === "new-pane") {
        leaf = getNewOrAdjacentLeaf(this.tldrawPlugin, leaf);
      }
    }
    leaf.openFile(drawingFile, !subpath || subpath === "" ? { active } : { active, eState: { subpath } });
    return drawingFile.path;
  }
  saveDrawing() {
  }
  editDrawing() {
  }
  blankDrawing(drawingFilename, drawingId) {
    const drawing = `
{
  "name": "${drawingFilename}",
  "fileHandle": null,
  "document": {
    "id": "${drawingId}",
    "name": "${drawingFilename}",
    "version": 15.5,
    "pages": {
      "page": {
        "id": "page",
        "name": "Page 1",
        "childIndex": 1,
        "shapes": {},
        "bindings": {}
      }
    },
    "pageStates": {
      "page": {
        "id": "page",
        "selectedIds": [],
        "camera": {
          "point": [
            273.97,
            -52.98
          ],
          "zoom": 0.75
        },
        "editingId": null
      }
    },
    "assets": {}
  },
  "assets": {}
}
	`;
    return drawing;
  }
  darkTheme() {
    return this.settings.matchTheme && isObsidianThemeDark();
  }
  getCurrentTldrawDoc() {
    const currentTldrawDoc = getTldrawDoc();
    return currentTldrawDoc;
  }
};

// src/main.ts
var TldrawPlugin = class extends import_obsidian6.Plugin {
  async onload() {
    (0, import_obsidian6.addIcon)(ICON_NAME, TLDRAW_ICON);
    await this.loadSettings();
    this.addSettingTab(new TldrawSettingTab(this.app, this));
    this.tldrawPluginApi = new TLdrawPluginAPI(this.app, this.settings, this);
    this.registerView(VIEW_TYPE_TLDRAW_EMBED, (leaf) => new TLdrawView(leaf, this, this.tldrawPluginApi));
    this.registerExtensions(["tldr"], VIEW_TYPE_TLDRAW_EMBED);
    this.registerCommands();
    this.registerEventListeners();
    this.setStatusBar();
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_TLDRAW);
    console.log(`TLdraw: version ${this.manifest.version} unloaded.`);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  registerCommands() {
    this.addRibbonIcon(ICON_NAME, CREATE_NEW, (evt) => {
      this.tldrawPluginApi.createAndOpenDrawing(evt[CTRL_OR_CMD] ? "new-pane" : "active-pane");
    });
  }
  registerEventListeners() {
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  setStatusBar() {
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("in Tldraw");
  }
};
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * use-sync-external-store-shim/with-selector.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/**
 * String.prototype.replaceAll() polyfill
 * https://gomakethings.com/how-to-replace-a-section-of-a-string-with-another-one-with-vanilla-js/
 * @author Chris Ferdinandi
 * @license MIT
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
